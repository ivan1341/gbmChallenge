From d3717045a9d497b1cce44d7dfaba2c8534f00d94 Mon Sep 17 00:00:00 2001
From: ivan1341 <ivan_1341@hotmail.com>
Date: Wed, 20 Feb 2019 16:59:56 -0600
Subject: [PATCH] Se crearon roles de usuario y se modificaron las vistas

---
 .vscode/launch.json                                |   14 +
 controllers/users.js                               |   63 --
 index.js                                           |   14 +-
 node_modules/mout/.editorconfig                    |   20 +
 node_modules/mout/.jshintrc                        |   69 ++
 node_modules/mout/.npmignore                       |   30 +
 node_modules/mout/.travis.yml                      |   18 +
 node_modules/mout/CHANGELOG.md                     |  189 ++++
 node_modules/mout/CONTRIBUTING.md                  |   61 ++
 node_modules/mout/LICENSE.md                       |   21 +
 node_modules/mout/README.md                        |   63 ++
 node_modules/mout/array.js                         |   55 +
 node_modules/mout/array/append.js                  |   21 +
 node_modules/mout/array/collect.js                 |   27 +
 node_modules/mout/array/combine.js                 |   22 +
 node_modules/mout/array/compact.js                 |   13 +
 node_modules/mout/array/contains.js                |   10 +
 node_modules/mout/array/difference.js              |   23 +
 node_modules/mout/array/equals.js                  |   30 +
 node_modules/mout/array/every.js                   |   27 +
 node_modules/mout/array/filter.js                  |   26 +
 node_modules/mout/array/find.js                    |   13 +
 node_modules/mout/array/findIndex.js               |   23 +
 node_modules/mout/array/findLast.js                |   13 +
 node_modules/mout/array/findLastIndex.js           |   24 +
 node_modules/mout/array/flatten.js                 |   45 +
 node_modules/mout/array/forEach.js                 |   23 +
 node_modules/mout/array/groupBy.js                 |   30 +
 node_modules/mout/array/indexOf.js                 |   28 +
 node_modules/mout/array/insert.js                  |   15 +
 node_modules/mout/array/intersection.js            |   24 +
 node_modules/mout/array/invoke.js                  |   23 +
 node_modules/mout/array/join.js                    |   17 +
 node_modules/mout/array/last.js                    |   16 +
 node_modules/mout/array/lastIndexOf.js             |   28 +
 node_modules/mout/array/map.js                     |   22 +
 node_modules/mout/array/max.js                     |   34 +
 node_modules/mout/array/min.js                     |   34 +
 node_modules/mout/array/pick.js                    |   31 +
 node_modules/mout/array/pluck.js                   |   12 +
 node_modules/mout/array/range.js                   |   27 +
 node_modules/mout/array/reduce.js                  |   33 +
 node_modules/mout/array/reduceRight.js             |   34 +
 node_modules/mout/array/reject.js                  |   25 +
 node_modules/mout/array/remove.js                  |   13 +
 node_modules/mout/array/removeAll.js               |   15 +
 node_modules/mout/array/reverse.js                 |   14 +
 node_modules/mout/array/shuffle.js                 |   28 +
 node_modules/mout/array/slice.js                   |   35 +
 node_modules/mout/array/some.js                    |   27 +
 node_modules/mout/array/sort.js                    |   55 +
 node_modules/mout/array/sortBy.js                  |   19 +
 node_modules/mout/array/split.js                   |   35 +
 node_modules/mout/array/take.js                    |   24 +
 node_modules/mout/array/toLookup.js                |   28 +
 node_modules/mout/array/union.js                   |   19 +
 node_modules/mout/array/unique.js                  |   25 +
 node_modules/mout/array/xor.js                     |   26 +
 node_modules/mout/array/zip.js                     |   28 +
 node_modules/mout/collection.js                    |   22 +
 node_modules/mout/collection/contains.js           |    9 +
 node_modules/mout/collection/every.js              |    9 +
 node_modules/mout/collection/filter.js             |   23 +
 node_modules/mout/collection/find.js               |   10 +
 node_modules/mout/collection/forEach.js            |    9 +
 node_modules/mout/collection/make_.js              |   19 +
 node_modules/mout/collection/map.js                |   23 +
 node_modules/mout/collection/max.js                |   10 +
 node_modules/mout/collection/min.js                |   10 +
 node_modules/mout/collection/pluck.js              |   14 +
 node_modules/mout/collection/reduce.js             |    9 +
 node_modules/mout/collection/reject.js             |   16 +
 node_modules/mout/collection/size.js               |   19 +
 node_modules/mout/collection/some.js               |    9 +
 node_modules/mout/date.js                          |   22 +
 node_modules/mout/date/dayOfTheYear.js             |   13 +
 node_modules/mout/date/diff.js                     |  130 +++
 node_modules/mout/date/i18n/de-DE.js               |   61 ++
 node_modules/mout/date/i18n/en-US.js               |   61 ++
 node_modules/mout/date/i18n/pt-BR.js               |   61 ++
 node_modules/mout/date/i18n_.js                    |   14 +
 node_modules/mout/date/isLeapYear.js               |   15 +
 node_modules/mout/date/isSame.js                   |   16 +
 node_modules/mout/date/parseIso.js                 |  146 +++
 node_modules/mout/date/quarter.js                  |   16 +
 node_modules/mout/date/startOf.js                  |   54 +
 node_modules/mout/date/strftime.js                 |  121 +++
 node_modules/mout/date/timezoneAbbr.js             |   17 +
 node_modules/mout/date/timezoneOffset.js           |   16 +
 node_modules/mout/date/totalDaysInMonth.js         |   23 +
 node_modules/mout/date/totalDaysInYear.js          |   13 +
 node_modules/mout/date/weekOfTheYear.js            |   16 +
 node_modules/mout/doc/array.md                     |  982 ++++++++++++++++++
 node_modules/mout/doc/collection.md                |  233 +++++
 node_modules/mout/doc/date.md                      |  307 ++++++
 node_modules/mout/doc/function.md                  |  293 ++++++
 node_modules/mout/doc/lang.md                      |  516 ++++++++++
 node_modules/mout/doc/math.md                      |  303 ++++++
 node_modules/mout/doc/number.md                    |  279 +++++
 node_modules/mout/doc/object.md                    |  811 +++++++++++++++
 node_modules/mout/doc/queryString.md               |  115 +++
 node_modules/mout/doc/random.md                    |  256 +++++
 node_modules/mout/doc/string.md                    |  626 ++++++++++++
 node_modules/mout/doc/time.md                      |   64 ++
 node_modules/mout/function.js                      |   23 +
 node_modules/mout/function/awaitDelay.js           |   22 +
 node_modules/mout/function/bind.js                 |   19 +
 node_modules/mout/function/compose.js              |   23 +
 node_modules/mout/function/constant.js             |   14 +
 node_modules/mout/function/debounce.js             |   32 +
 node_modules/mout/function/func.js                 |   14 +
 node_modules/mout/function/identity.js             |   12 +
 node_modules/mout/function/makeIterator_.js        |   34 +
 node_modules/mout/function/partial.js              |   23 +
 node_modules/mout/function/prop.js                 |   14 +
 node_modules/mout/function/series.js               |   22 +
 node_modules/mout/function/throttle.js             |   33 +
 node_modules/mout/function/timeout.js              |   17 +
 node_modules/mout/function/times.js                |   17 +
 node_modules/mout/function/wrap.js                 |   14 +
 node_modules/mout/index.js                         |   25 +
 node_modules/mout/lang.js                          |   40 +
 node_modules/mout/lang/GLOBAL.js                   |    7 +
 node_modules/mout/lang/clone.js                    |   49 +
 node_modules/mout/lang/createObject.js             |   18 +
 node_modules/mout/lang/ctorApply.js                |   17 +
 node_modules/mout/lang/deepClone.js                |   48 +
 node_modules/mout/lang/deepEquals.js               |   30 +
 node_modules/mout/lang/defaults.js                 |   17 +
 node_modules/mout/lang/inheritPrototype.js         |   18 +
 node_modules/mout/lang/is.js                       |   23 +
 node_modules/mout/lang/isArguments.js              |   15 +
 node_modules/mout/lang/isArray.js                  |    8 +
 node_modules/mout/lang/isBoolean.js                |    8 +
 node_modules/mout/lang/isDate.js                   |    8 +
 node_modules/mout/lang/isEmpty.js                  |   24 +
 node_modules/mout/lang/isFinite.js                 |   20 +
 node_modules/mout/lang/isFunction.js               |    8 +
 node_modules/mout/lang/isInteger.js                |   12 +
 node_modules/mout/lang/isKind.js                   |    9 +
 node_modules/mout/lang/isNaN.js                    |   16 +
 node_modules/mout/lang/isNull.js                   |    9 +
 node_modules/mout/lang/isNumber.js                 |    8 +
 node_modules/mout/lang/isObject.js                 |    8 +
 node_modules/mout/lang/isPlainObject.js            |   13 +
 node_modules/mout/lang/isPrimitive.js              |   21 +
 node_modules/mout/lang/isRegExp.js                 |    8 +
 node_modules/mout/lang/isString.js                 |    8 +
 node_modules/mout/lang/isUndefined.js              |   10 +
 node_modules/mout/lang/isnt.js                     |   12 +
 node_modules/mout/lang/kindOf.js                   |   20 +
 node_modules/mout/lang/toArray.js                  |   30 +
 node_modules/mout/lang/toNumber.js                 |   20 +
 node_modules/mout/lang/toString.js                 |   13 +
 node_modules/mout/math.js                          |   19 +
 node_modules/mout/math/ceil.js                     |   11 +
 node_modules/mout/math/clamp.js                    |    9 +
 node_modules/mout/math/countSteps.js               |   16 +
 node_modules/mout/math/floor.js                    |   10 +
 node_modules/mout/math/inRange.js                  |   11 +
 node_modules/mout/math/isNear.js                   |    9 +
 node_modules/mout/math/lerp.js                     |   11 +
 node_modules/mout/math/loop.js                     |   10 +
 node_modules/mout/math/map.js                      |   11 +
 node_modules/mout/math/norm.js                     |   13 +
 node_modules/mout/math/round.js                    |   12 +
 node_modules/mout/number.js                        |   25 +
 node_modules/mout/number/MAX_INT.js                |    6 +
 node_modules/mout/number/MAX_SAFE_INTEGER.js       |    7 +
 node_modules/mout/number/MAX_UINT.js               |    6 +
 node_modules/mout/number/MIN_INT.js                |    6 +
 node_modules/mout/number/abbreviate.js             |   35 +
 node_modules/mout/number/currencyFormat.js         |   27 +
 node_modules/mout/number/enforcePrecision.js       |   12 +
 node_modules/mout/number/isNaN.js                  |   14 +
 node_modules/mout/number/nth.js                    |   25 +
 node_modules/mout/number/ordinal.js                |   14 +
 node_modules/mout/number/pad.js                    |   14 +
 node_modules/mout/number/rol.js                    |   10 +
 node_modules/mout/number/ror.js                    |   10 +
 node_modules/mout/number/sign.js                   |   15 +
 node_modules/mout/number/toInt.js                  |   17 +
 node_modules/mout/number/toUInt.js                 |   15 +
 node_modules/mout/number/toUInt31.js               |   15 +
 node_modules/mout/object.js                        |   44 +
 node_modules/mout/object/bindAll.js                |   19 +
 node_modules/mout/object/contains.js               |   13 +
 node_modules/mout/object/deepFillIn.js             |   33 +
 node_modules/mout/object/deepMatches.js            |   55 +
 node_modules/mout/object/deepMixIn.js              |   34 +
 node_modules/mout/object/equals.js                 |   33 +
 node_modules/mout/object/every.js                  |   23 +
 node_modules/mout/object/fillIn.js                 |   21 +
 node_modules/mout/object/filter.js                 |   20 +
 node_modules/mout/object/find.js                   |   21 +
 node_modules/mout/object/flatten.js                |   38 +
 node_modules/mout/object/forIn.js                  |   76 ++
 node_modules/mout/object/forOwn.js                 |   19 +
 node_modules/mout/object/functions.js              |   18 +
 node_modules/mout/object/get.js                    |   20 +
 node_modules/mout/object/has.js                    |   15 +
 node_modules/mout/object/hasOwn.js                 |   12 +
 node_modules/mout/object/keys.js                   |   16 +
 node_modules/mout/object/map.js                    |   18 +
 node_modules/mout/object/matches.js                |   20 +
 node_modules/mout/object/max.js                    |   12 +
 node_modules/mout/object/merge.js                  |   40 +
 node_modules/mout/object/min.js                    |   12 +
 node_modules/mout/object/mixIn.js                  |   28 +
 node_modules/mout/object/namespace.js              |   19 +
 node_modules/mout/object/omit.js                   |   21 +
 node_modules/mout/object/pick.js                   |   18 +
 node_modules/mout/object/pluck.js                  |   13 +
 node_modules/mout/object/reduce.js                 |   29 +
 node_modules/mout/object/reject.js                 |   16 +
 node_modules/mout/object/result.js                 |   14 +
 node_modules/mout/object/set.js                    |   17 +
 node_modules/mout/object/size.js                   |   16 +
 node_modules/mout/object/some.js                   |   21 +
 node_modules/mout/object/unset.js                  |   23 +
 node_modules/mout/object/values.js                 |   16 +
 node_modules/mout/package.json                     |  145 +++
 node_modules/mout/queryString.js                   |   15 +
 node_modules/mout/queryString/contains.js          |   12 +
 node_modules/mout/queryString/decode.js            |   36 +
 node_modules/mout/queryString/encode.js            |   27 +
 node_modules/mout/queryString/getParam.js          |   15 +
 node_modules/mout/queryString/getQuery.js          |   13 +
 node_modules/mout/queryString/parse.js             |   13 +
 node_modules/mout/queryString/setParam.js          |   28 +
 node_modules/mout/random.js                        |   18 +
 node_modules/mout/random/choice.js                 |   15 +
 node_modules/mout/random/guid.js                   |   24 +
 node_modules/mout/random/rand.js                   |   15 +
 node_modules/mout/random/randBit.js                |   11 +
 node_modules/mout/random/randBool.js               |   12 +
 node_modules/mout/random/randHex.js                |   19 +
 node_modules/mout/random/randInt.js                |   18 +
 node_modules/mout/random/randSign.js               |   11 +
 node_modules/mout/random/randString.js             |   27 +
 node_modules/mout/random/random.js                 |   18 +
 node_modules/mout/src/array.js                     |   55 +
 node_modules/mout/src/array/append.js              |   21 +
 node_modules/mout/src/array/collect.js             |   26 +
 node_modules/mout/src/array/combine.js             |   22 +
 node_modules/mout/src/array/compact.js             |   13 +
 node_modules/mout/src/array/contains.js            |   10 +
 node_modules/mout/src/array/difference.js          |   19 +
 node_modules/mout/src/array/equals.js              |   28 +
 node_modules/mout/src/array/every.js               |   27 +
 node_modules/mout/src/array/filter.js              |   26 +
 node_modules/mout/src/array/find.js                |   13 +
 node_modules/mout/src/array/findIndex.js           |   23 +
 node_modules/mout/src/array/findLast.js            |   13 +
 node_modules/mout/src/array/findLastIndex.js       |   24 +
 node_modules/mout/src/array/flatten.js             |   44 +
 node_modules/mout/src/array/forEach.js             |   23 +
 node_modules/mout/src/array/groupBy.js             |   32 +
 node_modules/mout/src/array/indexOf.js             |   28 +
 node_modules/mout/src/array/insert.js              |   14 +
 node_modules/mout/src/array/intersection.js        |   20 +
 node_modules/mout/src/array/invoke.js              |   23 +
 node_modules/mout/src/array/join.js                |   17 +
 node_modules/mout/src/array/last.js                |   16 +
 node_modules/mout/src/array/lastIndexOf.js         |   28 +
 node_modules/mout/src/array/map.js                 |   22 +
 node_modules/mout/src/array/max.js                 |   34 +
 node_modules/mout/src/array/min.js                 |   34 +
 node_modules/mout/src/array/pick.js                |   31 +
 node_modules/mout/src/array/pluck.js               |   12 +
 node_modules/mout/src/array/range.js               |   27 +
 node_modules/mout/src/array/reduce.js              |   33 +
 node_modules/mout/src/array/reduceRight.js         |   34 +
 node_modules/mout/src/array/reject.js              |   25 +
 node_modules/mout/src/array/remove.js              |   13 +
 node_modules/mout/src/array/removeAll.js           |   15 +
 node_modules/mout/src/array/reverse.js             |   14 +
 node_modules/mout/src/array/shuffle.js             |   28 +
 node_modules/mout/src/array/slice.js               |   35 +
 node_modules/mout/src/array/some.js                |   27 +
 node_modules/mout/src/array/sort.js                |   55 +
 node_modules/mout/src/array/sortBy.js              |   18 +
 node_modules/mout/src/array/split.js               |   35 +
 node_modules/mout/src/array/take.js                |   24 +
 node_modules/mout/src/array/toLookup.js            |   28 +
 node_modules/mout/src/array/union.js               |   18 +
 node_modules/mout/src/array/unique.js              |   25 +
 node_modules/mout/src/array/xor.js                 |   24 +
 node_modules/mout/src/array/zip.js                 |   27 +
 node_modules/mout/src/collection.js                |   22 +
 node_modules/mout/src/collection/contains.js       |    7 +
 node_modules/mout/src/collection/every.js          |    7 +
 node_modules/mout/src/collection/filter.js         |   22 +
 node_modules/mout/src/collection/find.js           |    8 +
 node_modules/mout/src/collection/forEach.js        |    7 +
 node_modules/mout/src/collection/make_.js          |   19 +
 node_modules/mout/src/collection/map.js            |   20 +
 node_modules/mout/src/collection/max.js            |    8 +
 node_modules/mout/src/collection/min.js            |    8 +
 node_modules/mout/src/collection/pluck.js          |   14 +
 node_modules/mout/src/collection/reduce.js         |    7 +
 node_modules/mout/src/collection/reject.js         |   15 +
 node_modules/mout/src/collection/size.js           |   18 +
 node_modules/mout/src/collection/some.js           |    7 +
 node_modules/mout/src/date.js                      |   22 +
 node_modules/mout/src/date/dayOfTheYear.js         |   13 +
 node_modules/mout/src/date/diff.js                 |  128 +++
 node_modules/mout/src/date/i18n/de-DE.js           |   61 ++
 node_modules/mout/src/date/i18n/en-US.js           |   61 ++
 node_modules/mout/src/date/i18n/pt-BR.js           |   61 ++
 node_modules/mout/src/date/i18n_.js                |   13 +
 node_modules/mout/src/date/isLeapYear.js           |   15 +
 node_modules/mout/src/date/isSame.js               |   16 +
 node_modules/mout/src/date/parseIso.js             |  146 +++
 node_modules/mout/src/date/quarter.js              |   16 +
 node_modules/mout/src/date/startOf.js              |   54 +
 node_modules/mout/src/date/strftime.js             |  115 +++
 node_modules/mout/src/date/timezoneAbbr.js         |   17 +
 node_modules/mout/src/date/timezoneOffset.js       |   16 +
 node_modules/mout/src/date/totalDaysInMonth.js     |   22 +
 node_modules/mout/src/date/totalDaysInYear.js      |   13 +
 node_modules/mout/src/date/weekOfTheYear.js        |   16 +
 node_modules/mout/src/function.js                  |   23 +
 node_modules/mout/src/function/awaitDelay.js       |   20 +
 node_modules/mout/src/function/bind.js             |   19 +
 node_modules/mout/src/function/compose.js          |   23 +
 node_modules/mout/src/function/constant.js         |   14 +
 node_modules/mout/src/function/debounce.js         |   32 +
 node_modules/mout/src/function/func.js             |   14 +
 node_modules/mout/src/function/identity.js         |   12 +
 node_modules/mout/src/function/makeIterator_.js    |   32 +
 node_modules/mout/src/function/partial.js          |   23 +
 node_modules/mout/src/function/prop.js             |   14 +
 node_modules/mout/src/function/series.js           |   22 +
 node_modules/mout/src/function/throttle.js         |   33 +
 node_modules/mout/src/function/timeout.js          |   17 +
 node_modules/mout/src/function/times.js            |   17 +
 node_modules/mout/src/function/wrap.js             |   14 +
 node_modules/mout/src/index.js                     |   25 +
 node_modules/mout/src/lang.js                      |   40 +
 node_modules/mout/src/lang/GLOBAL.js               |    7 +
 node_modules/mout/src/lang/clone.js                |   47 +
 node_modules/mout/src/lang/createObject.js         |   18 +
 node_modules/mout/src/lang/ctorApply.js            |   17 +
 node_modules/mout/src/lang/deepClone.js            |   45 +
 node_modules/mout/src/lang/deepEquals.js           |   26 +
 node_modules/mout/src/lang/defaults.js             |   16 +
 node_modules/mout/src/lang/inheritPrototype.js     |   18 +
 node_modules/mout/src/lang/is.js                   |   23 +
 node_modules/mout/src/lang/isArguments.js          |   15 +
 node_modules/mout/src/lang/isArray.js              |    8 +
 node_modules/mout/src/lang/isBoolean.js            |    8 +
 node_modules/mout/src/lang/isDate.js               |    8 +
 node_modules/mout/src/lang/isEmpty.js              |   23 +
 node_modules/mout/src/lang/isFinite.js             |   19 +
 node_modules/mout/src/lang/isFunction.js           |    8 +
 node_modules/mout/src/lang/isInteger.js            |   12 +
 node_modules/mout/src/lang/isKind.js               |    9 +
 node_modules/mout/src/lang/isNaN.js                |   15 +
 node_modules/mout/src/lang/isNull.js               |    9 +
 node_modules/mout/src/lang/isNumber.js             |    8 +
 node_modules/mout/src/lang/isObject.js             |    8 +
 node_modules/mout/src/lang/isPlainObject.js        |   13 +
 node_modules/mout/src/lang/isPrimitive.js          |   21 +
 node_modules/mout/src/lang/isRegExp.js             |    8 +
 node_modules/mout/src/lang/isString.js             |    8 +
 node_modules/mout/src/lang/isUndefined.js          |   10 +
 node_modules/mout/src/lang/isnt.js                 |   12 +
 node_modules/mout/src/lang/kindOf.js               |   20 +
 node_modules/mout/src/lang/toArray.js              |   29 +
 node_modules/mout/src/lang/toNumber.js             |   20 +
 node_modules/mout/src/lang/toString.js             |   13 +
 node_modules/mout/src/math.js                      |   19 +
 node_modules/mout/src/math/ceil.js                 |   11 +
 node_modules/mout/src/math/clamp.js                |    9 +
 node_modules/mout/src/math/countSteps.js           |   16 +
 node_modules/mout/src/math/floor.js                |   10 +
 node_modules/mout/src/math/inRange.js              |   11 +
 node_modules/mout/src/math/isNear.js               |    9 +
 node_modules/mout/src/math/lerp.js                 |   11 +
 node_modules/mout/src/math/loop.js                 |   10 +
 node_modules/mout/src/math/map.js                  |   10 +
 node_modules/mout/src/math/norm.js                 |   13 +
 node_modules/mout/src/math/round.js                |   12 +
 node_modules/mout/src/number.js                    |   25 +
 node_modules/mout/src/number/MAX_INT.js            |    6 +
 node_modules/mout/src/number/MAX_SAFE_INTEGER.js   |    7 +
 node_modules/mout/src/number/MAX_UINT.js           |    6 +
 node_modules/mout/src/number/MIN_INT.js            |    6 +
 node_modules/mout/src/number/abbreviate.js         |   35 +
 node_modules/mout/src/number/currencyFormat.js     |   27 +
 node_modules/mout/src/number/enforcePrecision.js   |   12 +
 node_modules/mout/src/number/isNaN.js              |   14 +
 node_modules/mout/src/number/nth.js                |   25 +
 node_modules/mout/src/number/ordinal.js            |   13 +
 node_modules/mout/src/number/pad.js                |   13 +
 node_modules/mout/src/number/rol.js                |   10 +
 node_modules/mout/src/number/ror.js                |   10 +
 node_modules/mout/src/number/sign.js               |   15 +
 node_modules/mout/src/number/toInt.js              |   17 +
 node_modules/mout/src/number/toUInt.js             |   15 +
 node_modules/mout/src/number/toUInt31.js           |   15 +
 node_modules/mout/src/object.js                    |   44 +
 node_modules/mout/src/object/bindAll.js            |   16 +
 node_modules/mout/src/object/contains.js           |   13 +
 node_modules/mout/src/object/deepFillIn.js         |   32 +
 node_modules/mout/src/object/deepMatches.js        |   54 +
 node_modules/mout/src/object/deepMixIn.js          |   33 +
 node_modules/mout/src/object/equals.js             |   30 +
 node_modules/mout/src/object/every.js              |   22 +
 node_modules/mout/src/object/fillIn.js             |   19 +
 node_modules/mout/src/object/filter.js             |   19 +
 node_modules/mout/src/object/find.js               |   20 +
 node_modules/mout/src/object/flatten.js            |   37 +
 node_modules/mout/src/object/forIn.js              |   76 ++
 node_modules/mout/src/object/forOwn.js             |   18 +
 node_modules/mout/src/object/functions.js          |   18 +
 node_modules/mout/src/object/get.js                |   20 +
 node_modules/mout/src/object/has.js                |   15 +
 node_modules/mout/src/object/hasOwn.js             |   12 +
 node_modules/mout/src/object/keys.js               |   16 +
 node_modules/mout/src/object/map.js                |   17 +
 node_modules/mout/src/object/matches.js            |   20 +
 node_modules/mout/src/object/max.js                |   11 +
 node_modules/mout/src/object/merge.js              |   38 +
 node_modules/mout/src/object/min.js                |   11 +
 node_modules/mout/src/object/mixIn.js              |   28 +
 node_modules/mout/src/object/namespace.js          |   19 +
 node_modules/mout/src/object/omit.js               |   20 +
 node_modules/mout/src/object/pick.js               |   18 +
 node_modules/mout/src/object/pluck.js              |   12 +
 node_modules/mout/src/object/reduce.js             |   28 +
 node_modules/mout/src/object/reject.js             |   15 +
 node_modules/mout/src/object/result.js             |   14 +
 node_modules/mout/src/object/set.js                |   17 +
 node_modules/mout/src/object/size.js               |   16 +
 node_modules/mout/src/object/some.js               |   20 +
 node_modules/mout/src/object/unset.js              |   23 +
 node_modules/mout/src/object/values.js             |   16 +
 node_modules/mout/src/queryString.js               |   15 +
 node_modules/mout/src/queryString/contains.js      |   12 +
 node_modules/mout/src/queryString/decode.js        |   34 +
 node_modules/mout/src/queryString/encode.js        |   25 +
 node_modules/mout/src/queryString/getParam.js      |   14 +
 node_modules/mout/src/queryString/getQuery.js      |   13 +
 node_modules/mout/src/queryString/parse.js         |   12 +
 node_modules/mout/src/queryString/setParam.js      |   28 +
 node_modules/mout/src/random.js                    |   18 +
 node_modules/mout/src/random/choice.js             |   14 +
 node_modules/mout/src/random/guid.js               |   23 +
 node_modules/mout/src/random/rand.js               |   13 +
 node_modules/mout/src/random/randBit.js            |   11 +
 node_modules/mout/src/random/randBool.js           |   12 +
 node_modules/mout/src/random/randHex.js            |   19 +
 node_modules/mout/src/random/randInt.js            |   16 +
 node_modules/mout/src/random/randSign.js           |   11 +
 node_modules/mout/src/random/randString.js         |   29 +
 node_modules/mout/src/random/random.js             |   18 +
 node_modules/mout/src/string.js                    |   46 +
 node_modules/mout/src/string/WHITE_SPACES.js       |   12 +
 node_modules/mout/src/string/camelCase.js          |   16 +
 node_modules/mout/src/string/contains.js           |   14 +
 node_modules/mout/src/string/crop.js               |   11 +
 node_modules/mout/src/string/endsWith.js           |   13 +
 node_modules/mout/src/string/escapeHtml.js         |   18 +
 node_modules/mout/src/string/escapeRegExp.js       |   12 +
 node_modules/mout/src/string/escapeUnicode.js      |   21 +
 node_modules/mout/src/string/hyphenate.js          |   12 +
 node_modules/mout/src/string/insert.js             |   20 +
 node_modules/mout/src/string/interpolate.js        |   21 +
 node_modules/mout/src/string/lowerCase.js          |   11 +
 node_modules/mout/src/string/lpad.js               |   16 +
 node_modules/mout/src/string/ltrim.js              |   33 +
 node_modules/mout/src/string/makePath.js           |   14 +
 .../mout/src/string/normalizeLineBreaks.js         |   18 +
 node_modules/mout/src/string/pascalCase.js         |   11 +
 node_modules/mout/src/string/properCase.js         |   11 +
 node_modules/mout/src/string/removeNonASCII.js     |   14 +
 node_modules/mout/src/string/removeNonWord.js      |   14 +
 node_modules/mout/src/string/repeat.js             |   25 +
 node_modules/mout/src/string/replace.js            |   32 +
 node_modules/mout/src/string/replaceAccents.js     |   36 +
 node_modules/mout/src/string/rpad.js               |   14 +
 node_modules/mout/src/string/rtrim.js              |   32 +
 node_modules/mout/src/string/sentenceCase.js       |   13 +
 node_modules/mout/src/string/slugify.js            |   21 +
 node_modules/mout/src/string/startsWith.js         |   13 +
 node_modules/mout/src/string/stripHtmlTags.js      |   11 +
 node_modules/mout/src/string/trim.js               |   12 +
 node_modules/mout/src/string/truncate.js           |   20 +
 node_modules/mout/src/string/typecast.js           |   29 +
 node_modules/mout/src/string/unCamelCase.js        |   23 +
 node_modules/mout/src/string/underscore.js         |   11 +
 node_modules/mout/src/string/unescapeHtml.js       |   18 +
 node_modules/mout/src/string/unescapeUnicode.js    |   16 +
 node_modules/mout/src/string/unhyphenate.js        |   10 +
 node_modules/mout/src/string/upperCase.js          |   10 +
 node_modules/mout/src/time.js                      |   12 +
 node_modules/mout/src/time/convert.js              |   41 +
 node_modules/mout/src/time/now.js                  |   18 +
 node_modules/mout/src/time/parseMs.js              |   17 +
 node_modules/mout/src/time/toTimeString.js         |   23 +
 node_modules/mout/string.js                        |   46 +
 node_modules/mout/string/WHITE_SPACES.js           |   12 +
 node_modules/mout/string/camelCase.js              |   20 +
 node_modules/mout/string/contains.js               |   14 +
 node_modules/mout/string/crop.js                   |   12 +
 node_modules/mout/string/endsWith.js               |   13 +
 node_modules/mout/string/escapeHtml.js             |   18 +
 node_modules/mout/string/escapeRegExp.js           |   12 +
 node_modules/mout/string/escapeUnicode.js          |   21 +
 node_modules/mout/string/hyphenate.js              |   14 +
 node_modules/mout/string/insert.js                 |   21 +
 node_modules/mout/string/interpolate.js            |   19 +
 node_modules/mout/string/lowerCase.js              |   11 +
 node_modules/mout/string/lpad.js                   |   17 +
 node_modules/mout/string/ltrim.js                  |   34 +
 node_modules/mout/string/makePath.js               |   15 +
 node_modules/mout/string/normalizeLineBreaks.js    |   18 +
 node_modules/mout/string/pascalCase.js             |   13 +
 node_modules/mout/string/properCase.js             |   13 +
 node_modules/mout/string/removeNonASCII.js         |   14 +
 node_modules/mout/string/removeNonWord.js          |   14 +
 node_modules/mout/string/repeat.js                 |   26 +
 node_modules/mout/string/replace.js                |   33 +
 node_modules/mout/string/replaceAccents.js         |   36 +
 node_modules/mout/string/rpad.js                   |   15 +
 node_modules/mout/string/rtrim.js                  |   33 +
 node_modules/mout/string/sentenceCase.js           |   15 +
 node_modules/mout/string/slugify.js                |   24 +
 node_modules/mout/string/startsWith.js             |   13 +
 node_modules/mout/string/stripHtmlTags.js          |   11 +
 node_modules/mout/string/trim.js                   |   15 +
 node_modules/mout/string/truncate.js               |   21 +
 node_modules/mout/string/typecast.js               |   29 +
 node_modules/mout/string/unCamelCase.js            |   23 +
 node_modules/mout/string/underscore.js             |   13 +
 node_modules/mout/string/unescapeHtml.js           |   18 +
 node_modules/mout/string/unescapeUnicode.js        |   16 +
 node_modules/mout/string/unhyphenate.js            |   10 +
 node_modules/mout/string/upperCase.js              |   10 +
 node_modules/mout/time.js                          |   12 +
 node_modules/mout/time/convert.js                  |   41 +
 node_modules/mout/time/now.js                      |   18 +
 node_modules/mout/time/parseMs.js                  |   17 +
 node_modules/mout/time/toTimeString.js             |   24 +
 node_modules/nyks/.travis.yml                      |    5 +
 node_modules/nyks/README.md                        |  119 +++
 node_modules/nyks/array/pickIn.js                  |    6 +
 node_modules/nyks/array/reindex.js                 |    9 +
 node_modules/nyks/array/sum.js                     |    5 +
 node_modules/nyks/async/dict.js                    |    7 +
 node_modules/nyks/async/dictLimit.js               |   16 +
 node_modules/nyks/async/dispatcher.js              |   33 +
 node_modules/nyks/async/throttle.js                |   17 +
 node_modules/nyks/buffer/fromASCII.js              |    7 +
 node_modules/nyks/buffer/fromInt.js                |   12 +
 node_modules/nyks/buffer/indexOf.js                |   38 +
 node_modules/nyks/buffer/readUInt.js               |   28 +
 node_modules/nyks/buffer/writeBits.js              |   29 +
 node_modules/nyks/child_process/exec.js            |   31 +
 node_modules/nyks/child_process/passthru.js        |   29 +
 node_modules/nyks/child_process/wait.js            |   17 +
 node_modules/nyks/cli/box.js                       |   69 ++
 node_modules/nyks/collection/reindex.js            |   16 +
 node_modules/nyks/color/Int2RGBA.js                |   12 +
 node_modules/nyks/color/RGB2HTML.js                |   12 +
 node_modules/nyks/color/RGBA2Int.js                |   12 +
 node_modules/nyks/crypto/md5.js                    |    7 +
 node_modules/nyks/crypto/openssh2pem.js            |   61 ++
 node_modules/nyks/crypto/pemme.js                  |   12 +
 node_modules/nyks/date/getSeason.js                |   19 +
 node_modules/nyks/date/strftime.js                 |   27 +
 node_modules/nyks/fs/JSON.js                       |    8 +
 node_modules/nyks/fs/copyFile.js                   |   19 +
 node_modules/nyks/fs/deleteFolderRecursive.js      |   22 +
 node_modules/nyks/fs/filemtimeSync.js              |    8 +
 node_modules/nyks/fs/filesizeSync.js               |    7 +
 node_modules/nyks/fs/getFolderSize.js              |   10 +
 node_modules/nyks/fs/isDirectorySync.js            |    7 +
 node_modules/nyks/fs/isFileSync.js                 |    7 +
 node_modules/nyks/fs/md5File.js                    |   14 +
 node_modules/nyks/fs/md5FileSync.js                |   11 +
 node_modules/nyks/fs/mkdirpSync.js                 |   13 +
 node_modules/nyks/fs/readFileJSONSync.js           |    8 +
 node_modules/nyks/fs/sha1File.js                   |   14 +
 node_modules/nyks/fs/tmppath.js                    |   51 +
 node_modules/nyks/fs/walkFolderStatsRecursive.js   |   63 ++
 node_modules/nyks/function/detach.js               |   24 +
 node_modules/nyks/function/once.js                 |   11 +
 node_modules/nyks/function/promisify.js            |   22 +
 node_modules/nyks/function/sleep.js                |    7 +
 node_modules/nyks/function/thunk.js                |    9 +
 node_modules/nyks/function/unary.js                |   11 +
 node_modules/nyks/http/get.js                      |   14 +
 node_modules/nyks/http/getContents.js              |   26 +
 node_modules/nyks/http/header/cookie.js            |    5 +
 node_modules/nyks/http/header/parse.js             |   31 +
 node_modules/nyks/http/request.js                  |   85 ++
 node_modules/nyks/index.js                         |    3 +
 node_modules/nyks/lang/toBool.js                   |   10 +
 node_modules/nyks/math/log10.js                    |    6 +
 node_modules/nyks/math/log2.js                     |    6 +
 node_modules/nyks/node_modules/mout/.editorconfig  |   20 +
 node_modules/nyks/node_modules/mout/.jshintrc      |   69 ++
 node_modules/nyks/node_modules/mout/.travis.yml    |   18 +
 node_modules/nyks/node_modules/mout/CHANGELOG.md   |  207 ++++
 .../nyks/node_modules/mout/CONTRIBUTING.md         |   61 ++
 node_modules/nyks/node_modules/mout/LICENSE.md     |   21 +
 node_modules/nyks/node_modules/mout/README.md      |   65 ++
 node_modules/nyks/node_modules/mout/array.js       |   56 ++
 .../nyks/node_modules/mout/array/append.js         |   21 +
 .../nyks/node_modules/mout/array/collect.js        |   27 +
 .../nyks/node_modules/mout/array/combine.js        |   22 +
 .../nyks/node_modules/mout/array/compact.js        |   13 +
 .../nyks/node_modules/mout/array/contains.js       |   10 +
 .../nyks/node_modules/mout/array/difference.js     |   23 +
 .../nyks/node_modules/mout/array/equals.js         |   30 +
 node_modules/nyks/node_modules/mout/array/every.js |   27 +
 .../nyks/node_modules/mout/array/filter.js         |   26 +
 node_modules/nyks/node_modules/mout/array/find.js  |   13 +
 .../nyks/node_modules/mout/array/findIndex.js      |   23 +
 .../nyks/node_modules/mout/array/findLast.js       |   13 +
 .../nyks/node_modules/mout/array/findLastIndex.js  |   24 +
 .../nyks/node_modules/mout/array/flatten.js        |   45 +
 .../nyks/node_modules/mout/array/forEach.js        |   23 +
 .../nyks/node_modules/mout/array/groupBy.js        |   30 +
 .../nyks/node_modules/mout/array/indexOf.js        |   28 +
 .../nyks/node_modules/mout/array/indicesOf.js      |   28 +
 .../nyks/node_modules/mout/array/insert.js         |   15 +
 .../nyks/node_modules/mout/array/intersection.js   |   24 +
 .../nyks/node_modules/mout/array/invoke.js         |   23 +
 node_modules/nyks/node_modules/mout/array/join.js  |   17 +
 node_modules/nyks/node_modules/mout/array/last.js  |   16 +
 .../nyks/node_modules/mout/array/lastIndexOf.js    |   28 +
 node_modules/nyks/node_modules/mout/array/map.js   |   22 +
 node_modules/nyks/node_modules/mout/array/max.js   |   34 +
 node_modules/nyks/node_modules/mout/array/min.js   |   34 +
 node_modules/nyks/node_modules/mout/array/pick.js  |   31 +
 node_modules/nyks/node_modules/mout/array/pluck.js |   12 +
 node_modules/nyks/node_modules/mout/array/range.js |   27 +
 .../nyks/node_modules/mout/array/reduce.js         |   33 +
 .../nyks/node_modules/mout/array/reduceRight.js    |   34 +
 .../nyks/node_modules/mout/array/reject.js         |   25 +
 .../nyks/node_modules/mout/array/remove.js         |   13 +
 .../nyks/node_modules/mout/array/removeAll.js      |   15 +
 .../nyks/node_modules/mout/array/reverse.js        |   14 +
 .../nyks/node_modules/mout/array/shuffle.js        |   28 +
 node_modules/nyks/node_modules/mout/array/slice.js |   35 +
 node_modules/nyks/node_modules/mout/array/some.js  |   27 +
 node_modules/nyks/node_modules/mout/array/sort.js  |   55 +
 .../nyks/node_modules/mout/array/sortBy.js         |   19 +
 node_modules/nyks/node_modules/mout/array/split.js |   35 +
 node_modules/nyks/node_modules/mout/array/take.js  |   24 +
 .../nyks/node_modules/mout/array/toLookup.js       |   28 +
 node_modules/nyks/node_modules/mout/array/union.js |   19 +
 .../nyks/node_modules/mout/array/unique.js         |   25 +
 node_modules/nyks/node_modules/mout/array/xor.js   |   26 +
 node_modules/nyks/node_modules/mout/array/zip.js   |   28 +
 node_modules/nyks/node_modules/mout/collection.js  |   22 +
 .../nyks/node_modules/mout/collection/contains.js  |    9 +
 .../nyks/node_modules/mout/collection/every.js     |    9 +
 .../nyks/node_modules/mout/collection/filter.js    |   23 +
 .../nyks/node_modules/mout/collection/find.js      |   10 +
 .../nyks/node_modules/mout/collection/forEach.js   |    9 +
 .../nyks/node_modules/mout/collection/make_.js     |   19 +
 .../nyks/node_modules/mout/collection/map.js       |   23 +
 .../nyks/node_modules/mout/collection/max.js       |   10 +
 .../nyks/node_modules/mout/collection/min.js       |   10 +
 .../nyks/node_modules/mout/collection/pluck.js     |   14 +
 .../nyks/node_modules/mout/collection/reduce.js    |    9 +
 .../nyks/node_modules/mout/collection/reject.js    |   16 +
 .../nyks/node_modules/mout/collection/size.js      |   19 +
 .../nyks/node_modules/mout/collection/some.js      |    9 +
 node_modules/nyks/node_modules/mout/date.js        |   22 +
 .../nyks/node_modules/mout/date/dayOfTheYear.js    |   13 +
 node_modules/nyks/node_modules/mout/date/diff.js   |  130 +++
 .../nyks/node_modules/mout/date/i18n/de-DE.js      |   61 ++
 .../nyks/node_modules/mout/date/i18n/en-US.js      |   61 ++
 .../nyks/node_modules/mout/date/i18n/pt-BR.js      |   61 ++
 .../nyks/node_modules/mout/date/i18n/ru.js         |   61 ++
 node_modules/nyks/node_modules/mout/date/i18n_.js  |   14 +
 .../nyks/node_modules/mout/date/isLeapYear.js      |   15 +
 node_modules/nyks/node_modules/mout/date/isSame.js |   16 +
 .../nyks/node_modules/mout/date/parseIso.js        |  146 +++
 .../nyks/node_modules/mout/date/quarter.js         |   16 +
 .../nyks/node_modules/mout/date/startOf.js         |   54 +
 .../nyks/node_modules/mout/date/strftime.js        |  121 +++
 .../nyks/node_modules/mout/date/timezoneAbbr.js    |   17 +
 .../nyks/node_modules/mout/date/timezoneOffset.js  |   16 +
 .../node_modules/mout/date/totalDaysInMonth.js     |   23 +
 .../nyks/node_modules/mout/date/totalDaysInYear.js |   13 +
 .../nyks/node_modules/mout/date/weekOfTheYear.js   |   16 +
 node_modules/nyks/node_modules/mout/doc/array.md   | 1003 ++++++++++++++++++
 .../nyks/node_modules/mout/doc/collection.md       |  233 +++++
 node_modules/nyks/node_modules/mout/doc/date.md    |  307 ++++++
 .../nyks/node_modules/mout/doc/function.md         |  310 ++++++
 node_modules/nyks/node_modules/mout/doc/lang.md    |  516 ++++++++++
 node_modules/nyks/node_modules/mout/doc/math.md    |  316 ++++++
 node_modules/nyks/node_modules/mout/doc/number.md  |  279 +++++
 node_modules/nyks/node_modules/mout/doc/object.md  |  811 +++++++++++++++
 .../nyks/node_modules/mout/doc/queryString.md      |  115 +++
 node_modules/nyks/node_modules/mout/doc/random.md  |  256 +++++
 node_modules/nyks/node_modules/mout/doc/string.md  |  626 ++++++++++++
 node_modules/nyks/node_modules/mout/doc/time.md    |   64 ++
 node_modules/nyks/node_modules/mout/function.js    |   25 +
 .../nyks/node_modules/mout/function/after.js       |   14 +
 .../nyks/node_modules/mout/function/awaitDelay.js  |   22 +
 .../nyks/node_modules/mout/function/bind.js        |   19 +
 .../nyks/node_modules/mout/function/compose.js     |   23 +
 .../nyks/node_modules/mout/function/constant.js    |   14 +
 .../nyks/node_modules/mout/function/debounce.js    |   32 +
 .../nyks/node_modules/mout/function/func.js        |   14 +
 .../nyks/node_modules/mout/function/identity.js    |   12 +
 .../node_modules/mout/function/makeIterator_.js    |   34 +
 .../nyks/node_modules/mout/function/memoize.js     |   40 +
 .../nyks/node_modules/mout/function/partial.js     |   31 +
 .../nyks/node_modules/mout/function/prop.js        |   14 +
 .../nyks/node_modules/mout/function/series.js      |   22 +
 .../nyks/node_modules/mout/function/throttle.js    |   33 +
 .../nyks/node_modules/mout/function/timeout.js     |   17 +
 .../nyks/node_modules/mout/function/times.js       |   17 +
 .../nyks/node_modules/mout/function/wrap.js        |   14 +
 node_modules/nyks/node_modules/mout/index.js       |   25 +
 node_modules/nyks/node_modules/mout/lang.js        |   40 +
 node_modules/nyks/node_modules/mout/lang/GLOBAL.js |    7 +
 node_modules/nyks/node_modules/mout/lang/clone.js  |   49 +
 .../nyks/node_modules/mout/lang/createObject.js    |   18 +
 .../nyks/node_modules/mout/lang/ctorApply.js       |   15 +
 .../nyks/node_modules/mout/lang/deepClone.js       |   48 +
 .../nyks/node_modules/mout/lang/deepEquals.js      |   30 +
 .../nyks/node_modules/mout/lang/defaults.js        |   17 +
 .../node_modules/mout/lang/inheritPrototype.js     |   18 +
 node_modules/nyks/node_modules/mout/lang/is.js     |   23 +
 .../nyks/node_modules/mout/lang/isArguments.js     |   15 +
 .../nyks/node_modules/mout/lang/isArray.js         |    8 +
 .../nyks/node_modules/mout/lang/isBoolean.js       |    8 +
 node_modules/nyks/node_modules/mout/lang/isDate.js |    8 +
 .../nyks/node_modules/mout/lang/isEmpty.js         |   24 +
 .../nyks/node_modules/mout/lang/isFinite.js        |   20 +
 .../nyks/node_modules/mout/lang/isFunction.js      |    8 +
 .../nyks/node_modules/mout/lang/isInteger.js       |   12 +
 node_modules/nyks/node_modules/mout/lang/isKind.js |    9 +
 node_modules/nyks/node_modules/mout/lang/isNaN.js  |   16 +
 node_modules/nyks/node_modules/mout/lang/isNull.js |    9 +
 .../nyks/node_modules/mout/lang/isNumber.js        |    8 +
 .../nyks/node_modules/mout/lang/isObject.js        |    8 +
 .../nyks/node_modules/mout/lang/isPlainObject.js   |   13 +
 .../nyks/node_modules/mout/lang/isPrimitive.js     |   21 +
 .../nyks/node_modules/mout/lang/isRegExp.js        |    8 +
 .../nyks/node_modules/mout/lang/isString.js        |    8 +
 .../nyks/node_modules/mout/lang/isUndefined.js     |   10 +
 node_modules/nyks/node_modules/mout/lang/isnt.js   |   12 +
 node_modules/nyks/node_modules/mout/lang/kindOf.js |    9 +
 .../nyks/node_modules/mout/lang/toArray.js         |   30 +
 .../nyks/node_modules/mout/lang/toNumber.js        |   20 +
 .../nyks/node_modules/mout/lang/toString.js        |   13 +
 node_modules/nyks/node_modules/mout/math.js        |   20 +
 node_modules/nyks/node_modules/mout/math/ceil.js   |   11 +
 node_modules/nyks/node_modules/mout/math/clamp.js  |    9 +
 .../nyks/node_modules/mout/math/countSteps.js      |   16 +
 node_modules/nyks/node_modules/mout/math/floor.js  |   10 +
 .../nyks/node_modules/mout/math/inRange.js         |   11 +
 node_modules/nyks/node_modules/mout/math/isNear.js |    9 +
 node_modules/nyks/node_modules/mout/math/lerp.js   |   11 +
 node_modules/nyks/node_modules/mout/math/loop.js   |   10 +
 node_modules/nyks/node_modules/mout/math/map.js    |   11 +
 node_modules/nyks/node_modules/mout/math/norm.js   |   13 +
 .../nyks/node_modules/mout/math/overflow.js        |   23 +
 node_modules/nyks/node_modules/mout/math/round.js  |   12 +
 node_modules/nyks/node_modules/mout/number.js      |   25 +
 .../nyks/node_modules/mout/number/MAX_INT.js       |    6 +
 .../node_modules/mout/number/MAX_SAFE_INTEGER.js   |    7 +
 .../nyks/node_modules/mout/number/MAX_UINT.js      |    6 +
 .../nyks/node_modules/mout/number/MIN_INT.js       |    6 +
 .../nyks/node_modules/mout/number/abbreviate.js    |   35 +
 .../node_modules/mout/number/currencyFormat.js     |   27 +
 .../node_modules/mout/number/enforcePrecision.js   |   12 +
 .../nyks/node_modules/mout/number/isNaN.js         |   14 +
 node_modules/nyks/node_modules/mout/number/nth.js  |   25 +
 .../nyks/node_modules/mout/number/ordinal.js       |   14 +
 node_modules/nyks/node_modules/mout/number/pad.js  |   14 +
 node_modules/nyks/node_modules/mout/number/rol.js  |   10 +
 node_modules/nyks/node_modules/mout/number/ror.js  |   10 +
 node_modules/nyks/node_modules/mout/number/sign.js |   15 +
 .../nyks/node_modules/mout/number/toInt.js         |   17 +
 .../nyks/node_modules/mout/number/toUInt.js        |   15 +
 .../nyks/node_modules/mout/number/toUInt31.js      |   15 +
 node_modules/nyks/node_modules/mout/object.js      |   44 +
 .../nyks/node_modules/mout/object/bindAll.js       |   19 +
 .../nyks/node_modules/mout/object/contains.js      |   13 +
 .../nyks/node_modules/mout/object/deepFillIn.js    |   33 +
 .../nyks/node_modules/mout/object/deepMatches.js   |   56 ++
 .../nyks/node_modules/mout/object/deepMixIn.js     |   34 +
 .../nyks/node_modules/mout/object/equals.js        |   33 +
 .../nyks/node_modules/mout/object/every.js         |   23 +
 .../nyks/node_modules/mout/object/fillIn.js        |   21 +
 .../nyks/node_modules/mout/object/filter.js        |   20 +
 node_modules/nyks/node_modules/mout/object/find.js |   21 +
 .../nyks/node_modules/mout/object/flatten.js       |   38 +
 .../nyks/node_modules/mout/object/forIn.js         |   76 ++
 .../nyks/node_modules/mout/object/forOwn.js        |   19 +
 .../nyks/node_modules/mout/object/functions.js     |   18 +
 node_modules/nyks/node_modules/mout/object/get.js  |   20 +
 node_modules/nyks/node_modules/mout/object/has.js  |   15 +
 .../nyks/node_modules/mout/object/hasOwn.js        |   12 +
 node_modules/nyks/node_modules/mout/object/keys.js |   16 +
 node_modules/nyks/node_modules/mout/object/map.js  |   18 +
 .../nyks/node_modules/mout/object/matches.js       |   20 +
 node_modules/nyks/node_modules/mout/object/max.js  |   12 +
 .../nyks/node_modules/mout/object/merge.js         |   40 +
 node_modules/nyks/node_modules/mout/object/min.js  |   12 +
 .../nyks/node_modules/mout/object/mixIn.js         |   28 +
 .../nyks/node_modules/mout/object/namespace.js     |   19 +
 node_modules/nyks/node_modules/mout/object/omit.js |   21 +
 node_modules/nyks/node_modules/mout/object/pick.js |   18 +
 .../nyks/node_modules/mout/object/pluck.js         |   13 +
 .../nyks/node_modules/mout/object/reduce.js        |   29 +
 .../nyks/node_modules/mout/object/reject.js        |   16 +
 .../nyks/node_modules/mout/object/result.js        |   14 +
 node_modules/nyks/node_modules/mout/object/set.js  |   17 +
 node_modules/nyks/node_modules/mout/object/size.js |   16 +
 node_modules/nyks/node_modules/mout/object/some.js |   21 +
 .../nyks/node_modules/mout/object/unset.js         |   23 +
 .../nyks/node_modules/mout/object/values.js        |   16 +
 node_modules/nyks/node_modules/mout/package.json   |  145 +++
 node_modules/nyks/node_modules/mout/queryString.js |   15 +
 .../nyks/node_modules/mout/queryString/contains.js |   12 +
 .../nyks/node_modules/mout/queryString/decode.js   |   36 +
 .../nyks/node_modules/mout/queryString/encode.js   |   27 +
 .../nyks/node_modules/mout/queryString/getParam.js |   15 +
 .../nyks/node_modules/mout/queryString/getQuery.js |   13 +
 .../nyks/node_modules/mout/queryString/parse.js    |   13 +
 .../nyks/node_modules/mout/queryString/setParam.js |   28 +
 node_modules/nyks/node_modules/mout/random.js      |   18 +
 .../nyks/node_modules/mout/random/choice.js        |   15 +
 node_modules/nyks/node_modules/mout/random/guid.js |   24 +
 node_modules/nyks/node_modules/mout/random/rand.js |   15 +
 .../nyks/node_modules/mout/random/randBit.js       |   11 +
 .../nyks/node_modules/mout/random/randBool.js      |   12 +
 .../nyks/node_modules/mout/random/randHex.js       |   19 +
 .../nyks/node_modules/mout/random/randInt.js       |   18 +
 .../nyks/node_modules/mout/random/randSign.js      |   11 +
 .../nyks/node_modules/mout/random/randString.js    |   27 +
 .../nyks/node_modules/mout/random/random.js        |   18 +
 node_modules/nyks/node_modules/mout/src/array.js   |   56 ++
 .../nyks/node_modules/mout/src/array/append.js     |   21 +
 .../nyks/node_modules/mout/src/array/collect.js    |   26 +
 .../nyks/node_modules/mout/src/array/combine.js    |   22 +
 .../nyks/node_modules/mout/src/array/compact.js    |   13 +
 .../nyks/node_modules/mout/src/array/contains.js   |   10 +
 .../nyks/node_modules/mout/src/array/difference.js |   19 +
 .../nyks/node_modules/mout/src/array/equals.js     |   28 +
 .../nyks/node_modules/mout/src/array/every.js      |   27 +
 .../nyks/node_modules/mout/src/array/filter.js     |   26 +
 .../nyks/node_modules/mout/src/array/find.js       |   13 +
 .../nyks/node_modules/mout/src/array/findIndex.js  |   23 +
 .../nyks/node_modules/mout/src/array/findLast.js   |   13 +
 .../node_modules/mout/src/array/findLastIndex.js   |   24 +
 .../nyks/node_modules/mout/src/array/flatten.js    |   44 +
 .../nyks/node_modules/mout/src/array/forEach.js    |   23 +
 .../nyks/node_modules/mout/src/array/groupBy.js    |   32 +
 .../nyks/node_modules/mout/src/array/indexOf.js    |   28 +
 .../nyks/node_modules/mout/src/array/indicesOf.js  |   28 +
 .../nyks/node_modules/mout/src/array/insert.js     |   14 +
 .../node_modules/mout/src/array/intersection.js    |   20 +
 .../nyks/node_modules/mout/src/array/invoke.js     |   23 +
 .../nyks/node_modules/mout/src/array/join.js       |   17 +
 .../nyks/node_modules/mout/src/array/last.js       |   16 +
 .../node_modules/mout/src/array/lastIndexOf.js     |   28 +
 .../nyks/node_modules/mout/src/array/map.js        |   22 +
 .../nyks/node_modules/mout/src/array/max.js        |   34 +
 .../nyks/node_modules/mout/src/array/min.js        |   34 +
 .../nyks/node_modules/mout/src/array/pick.js       |   31 +
 .../nyks/node_modules/mout/src/array/pluck.js      |   12 +
 .../nyks/node_modules/mout/src/array/range.js      |   27 +
 .../nyks/node_modules/mout/src/array/reduce.js     |   33 +
 .../node_modules/mout/src/array/reduceRight.js     |   34 +
 .../nyks/node_modules/mout/src/array/reject.js     |   25 +
 .../nyks/node_modules/mout/src/array/remove.js     |   13 +
 .../nyks/node_modules/mout/src/array/removeAll.js  |   15 +
 .../nyks/node_modules/mout/src/array/reverse.js    |   14 +
 .../nyks/node_modules/mout/src/array/shuffle.js    |   28 +
 .../nyks/node_modules/mout/src/array/slice.js      |   35 +
 .../nyks/node_modules/mout/src/array/some.js       |   27 +
 .../nyks/node_modules/mout/src/array/sort.js       |   55 +
 .../nyks/node_modules/mout/src/array/sortBy.js     |   18 +
 .../nyks/node_modules/mout/src/array/split.js      |   35 +
 .../nyks/node_modules/mout/src/array/take.js       |   24 +
 .../nyks/node_modules/mout/src/array/toLookup.js   |   28 +
 .../nyks/node_modules/mout/src/array/union.js      |   18 +
 .../nyks/node_modules/mout/src/array/unique.js     |   25 +
 .../nyks/node_modules/mout/src/array/xor.js        |   24 +
 .../nyks/node_modules/mout/src/array/zip.js        |   27 +
 .../nyks/node_modules/mout/src/collection.js       |   22 +
 .../node_modules/mout/src/collection/contains.js   |    7 +
 .../nyks/node_modules/mout/src/collection/every.js |    7 +
 .../node_modules/mout/src/collection/filter.js     |   22 +
 .../nyks/node_modules/mout/src/collection/find.js  |    8 +
 .../node_modules/mout/src/collection/forEach.js    |    7 +
 .../nyks/node_modules/mout/src/collection/make_.js |   19 +
 .../nyks/node_modules/mout/src/collection/map.js   |   20 +
 .../nyks/node_modules/mout/src/collection/max.js   |    8 +
 .../nyks/node_modules/mout/src/collection/min.js   |    8 +
 .../nyks/node_modules/mout/src/collection/pluck.js |   14 +
 .../node_modules/mout/src/collection/reduce.js     |    7 +
 .../node_modules/mout/src/collection/reject.js     |   15 +
 .../nyks/node_modules/mout/src/collection/size.js  |   18 +
 .../nyks/node_modules/mout/src/collection/some.js  |    7 +
 node_modules/nyks/node_modules/mout/src/date.js    |   22 +
 .../node_modules/mout/src/date/dayOfTheYear.js     |   13 +
 .../nyks/node_modules/mout/src/date/diff.js        |  128 +++
 .../nyks/node_modules/mout/src/date/i18n/de-DE.js  |   61 ++
 .../nyks/node_modules/mout/src/date/i18n/en-US.js  |   61 ++
 .../nyks/node_modules/mout/src/date/i18n/pt-BR.js  |   61 ++
 .../nyks/node_modules/mout/src/date/i18n/ru.js     |   61 ++
 .../nyks/node_modules/mout/src/date/i18n_.js       |   13 +
 .../nyks/node_modules/mout/src/date/isLeapYear.js  |   15 +
 .../nyks/node_modules/mout/src/date/isSame.js      |   16 +
 .../nyks/node_modules/mout/src/date/parseIso.js    |  146 +++
 .../nyks/node_modules/mout/src/date/quarter.js     |   16 +
 .../nyks/node_modules/mout/src/date/startOf.js     |   54 +
 .../nyks/node_modules/mout/src/date/strftime.js    |  115 +++
 .../node_modules/mout/src/date/timezoneAbbr.js     |   17 +
 .../node_modules/mout/src/date/timezoneOffset.js   |   16 +
 .../node_modules/mout/src/date/totalDaysInMonth.js |   22 +
 .../node_modules/mout/src/date/totalDaysInYear.js  |   13 +
 .../node_modules/mout/src/date/weekOfTheYear.js    |   16 +
 .../nyks/node_modules/mout/src/function.js         |   25 +
 .../nyks/node_modules/mout/src/function/after.js   |   14 +
 .../node_modules/mout/src/function/awaitDelay.js   |   20 +
 .../nyks/node_modules/mout/src/function/bind.js    |   19 +
 .../nyks/node_modules/mout/src/function/compose.js |   23 +
 .../node_modules/mout/src/function/constant.js     |   14 +
 .../node_modules/mout/src/function/debounce.js     |   32 +
 .../nyks/node_modules/mout/src/function/func.js    |   14 +
 .../node_modules/mout/src/function/identity.js     |   12 +
 .../mout/src/function/makeIterator_.js             |   32 +
 .../nyks/node_modules/mout/src/function/memoize.js |   39 +
 .../nyks/node_modules/mout/src/function/partial.js |   29 +
 .../nyks/node_modules/mout/src/function/prop.js    |   14 +
 .../nyks/node_modules/mout/src/function/series.js  |   22 +
 .../node_modules/mout/src/function/throttle.js     |   33 +
 .../nyks/node_modules/mout/src/function/timeout.js |   17 +
 .../nyks/node_modules/mout/src/function/times.js   |   17 +
 .../nyks/node_modules/mout/src/function/wrap.js    |   14 +
 node_modules/nyks/node_modules/mout/src/index.js   |   25 +
 node_modules/nyks/node_modules/mout/src/lang.js    |   40 +
 .../nyks/node_modules/mout/src/lang/GLOBAL.js      |    7 +
 .../nyks/node_modules/mout/src/lang/clone.js       |   47 +
 .../node_modules/mout/src/lang/createObject.js     |   18 +
 .../nyks/node_modules/mout/src/lang/ctorApply.js   |   15 +
 .../nyks/node_modules/mout/src/lang/deepClone.js   |   45 +
 .../nyks/node_modules/mout/src/lang/deepEquals.js  |   26 +
 .../nyks/node_modules/mout/src/lang/defaults.js    |   16 +
 .../node_modules/mout/src/lang/inheritPrototype.js |   18 +
 node_modules/nyks/node_modules/mout/src/lang/is.js |   23 +
 .../nyks/node_modules/mout/src/lang/isArguments.js |   15 +
 .../nyks/node_modules/mout/src/lang/isArray.js     |    8 +
 .../nyks/node_modules/mout/src/lang/isBoolean.js   |    8 +
 .../nyks/node_modules/mout/src/lang/isDate.js      |    8 +
 .../nyks/node_modules/mout/src/lang/isEmpty.js     |   23 +
 .../nyks/node_modules/mout/src/lang/isFinite.js    |   19 +
 .../nyks/node_modules/mout/src/lang/isFunction.js  |    8 +
 .../nyks/node_modules/mout/src/lang/isInteger.js   |   12 +
 .../nyks/node_modules/mout/src/lang/isKind.js      |    9 +
 .../nyks/node_modules/mout/src/lang/isNaN.js       |   15 +
 .../nyks/node_modules/mout/src/lang/isNull.js      |    9 +
 .../nyks/node_modules/mout/src/lang/isNumber.js    |    8 +
 .../nyks/node_modules/mout/src/lang/isObject.js    |    8 +
 .../node_modules/mout/src/lang/isPlainObject.js    |   13 +
 .../nyks/node_modules/mout/src/lang/isPrimitive.js |   21 +
 .../nyks/node_modules/mout/src/lang/isRegExp.js    |    8 +
 .../nyks/node_modules/mout/src/lang/isString.js    |    8 +
 .../nyks/node_modules/mout/src/lang/isUndefined.js |   10 +
 .../nyks/node_modules/mout/src/lang/isnt.js        |   12 +
 .../nyks/node_modules/mout/src/lang/kindOf.js      |    9 +
 .../nyks/node_modules/mout/src/lang/toArray.js     |   29 +
 .../nyks/node_modules/mout/src/lang/toNumber.js    |   20 +
 .../nyks/node_modules/mout/src/lang/toString.js    |   13 +
 node_modules/nyks/node_modules/mout/src/math.js    |   20 +
 .../nyks/node_modules/mout/src/math/ceil.js        |   11 +
 .../nyks/node_modules/mout/src/math/clamp.js       |    9 +
 .../nyks/node_modules/mout/src/math/countSteps.js  |   16 +
 .../nyks/node_modules/mout/src/math/floor.js       |   10 +
 .../nyks/node_modules/mout/src/math/inRange.js     |   11 +
 .../nyks/node_modules/mout/src/math/isNear.js      |    9 +
 .../nyks/node_modules/mout/src/math/lerp.js        |   11 +
 .../nyks/node_modules/mout/src/math/loop.js        |   10 +
 .../nyks/node_modules/mout/src/math/map.js         |   10 +
 .../nyks/node_modules/mout/src/math/norm.js        |   13 +
 .../nyks/node_modules/mout/src/math/overflow.js    |   23 +
 .../nyks/node_modules/mout/src/math/round.js       |   12 +
 node_modules/nyks/node_modules/mout/src/number.js  |   25 +
 .../nyks/node_modules/mout/src/number/MAX_INT.js   |    6 +
 .../mout/src/number/MAX_SAFE_INTEGER.js            |    7 +
 .../nyks/node_modules/mout/src/number/MAX_UINT.js  |    6 +
 .../nyks/node_modules/mout/src/number/MIN_INT.js   |    6 +
 .../node_modules/mout/src/number/abbreviate.js     |   35 +
 .../node_modules/mout/src/number/currencyFormat.js |   27 +
 .../mout/src/number/enforcePrecision.js            |   12 +
 .../nyks/node_modules/mout/src/number/isNaN.js     |   14 +
 .../nyks/node_modules/mout/src/number/nth.js       |   25 +
 .../nyks/node_modules/mout/src/number/ordinal.js   |   13 +
 .../nyks/node_modules/mout/src/number/pad.js       |   13 +
 .../nyks/node_modules/mout/src/number/rol.js       |   10 +
 .../nyks/node_modules/mout/src/number/ror.js       |   10 +
 .../nyks/node_modules/mout/src/number/sign.js      |   15 +
 .../nyks/node_modules/mout/src/number/toInt.js     |   17 +
 .../nyks/node_modules/mout/src/number/toUInt.js    |   15 +
 .../nyks/node_modules/mout/src/number/toUInt31.js  |   15 +
 node_modules/nyks/node_modules/mout/src/object.js  |   44 +
 .../nyks/node_modules/mout/src/object/bindAll.js   |   16 +
 .../nyks/node_modules/mout/src/object/contains.js  |   13 +
 .../node_modules/mout/src/object/deepFillIn.js     |   32 +
 .../node_modules/mout/src/object/deepMatches.js    |   55 +
 .../nyks/node_modules/mout/src/object/deepMixIn.js |   33 +
 .../nyks/node_modules/mout/src/object/equals.js    |   30 +
 .../nyks/node_modules/mout/src/object/every.js     |   22 +
 .../nyks/node_modules/mout/src/object/fillIn.js    |   19 +
 .../nyks/node_modules/mout/src/object/filter.js    |   19 +
 .../nyks/node_modules/mout/src/object/find.js      |   20 +
 .../nyks/node_modules/mout/src/object/flatten.js   |   37 +
 .../nyks/node_modules/mout/src/object/forIn.js     |   76 ++
 .../nyks/node_modules/mout/src/object/forOwn.js    |   18 +
 .../nyks/node_modules/mout/src/object/functions.js |   18 +
 .../nyks/node_modules/mout/src/object/get.js       |   20 +
 .../nyks/node_modules/mout/src/object/has.js       |   15 +
 .../nyks/node_modules/mout/src/object/hasOwn.js    |   12 +
 .../nyks/node_modules/mout/src/object/keys.js      |   16 +
 .../nyks/node_modules/mout/src/object/map.js       |   17 +
 .../nyks/node_modules/mout/src/object/matches.js   |   20 +
 .../nyks/node_modules/mout/src/object/max.js       |   11 +
 .../nyks/node_modules/mout/src/object/merge.js     |   38 +
 .../nyks/node_modules/mout/src/object/min.js       |   11 +
 .../nyks/node_modules/mout/src/object/mixIn.js     |   28 +
 .../nyks/node_modules/mout/src/object/namespace.js |   19 +
 .../nyks/node_modules/mout/src/object/omit.js      |   20 +
 .../nyks/node_modules/mout/src/object/pick.js      |   18 +
 .../nyks/node_modules/mout/src/object/pluck.js     |   12 +
 .../nyks/node_modules/mout/src/object/reduce.js    |   28 +
 .../nyks/node_modules/mout/src/object/reject.js    |   15 +
 .../nyks/node_modules/mout/src/object/result.js    |   14 +
 .../nyks/node_modules/mout/src/object/set.js       |   17 +
 .../nyks/node_modules/mout/src/object/size.js      |   16 +
 .../nyks/node_modules/mout/src/object/some.js      |   20 +
 .../nyks/node_modules/mout/src/object/unset.js     |   23 +
 .../nyks/node_modules/mout/src/object/values.js    |   16 +
 .../nyks/node_modules/mout/src/queryString.js      |   15 +
 .../node_modules/mout/src/queryString/contains.js  |   12 +
 .../node_modules/mout/src/queryString/decode.js    |   34 +
 .../node_modules/mout/src/queryString/encode.js    |   25 +
 .../node_modules/mout/src/queryString/getParam.js  |   14 +
 .../node_modules/mout/src/queryString/getQuery.js  |   13 +
 .../node_modules/mout/src/queryString/parse.js     |   12 +
 .../node_modules/mout/src/queryString/setParam.js  |   28 +
 node_modules/nyks/node_modules/mout/src/random.js  |   18 +
 .../nyks/node_modules/mout/src/random/choice.js    |   14 +
 .../nyks/node_modules/mout/src/random/guid.js      |   23 +
 .../nyks/node_modules/mout/src/random/rand.js      |   13 +
 .../nyks/node_modules/mout/src/random/randBit.js   |   11 +
 .../nyks/node_modules/mout/src/random/randBool.js  |   12 +
 .../nyks/node_modules/mout/src/random/randHex.js   |   19 +
 .../nyks/node_modules/mout/src/random/randInt.js   |   16 +
 .../nyks/node_modules/mout/src/random/randSign.js  |   11 +
 .../node_modules/mout/src/random/randString.js     |   29 +
 .../nyks/node_modules/mout/src/random/random.js    |   18 +
 node_modules/nyks/node_modules/mout/src/string.js  |   46 +
 .../node_modules/mout/src/string/WHITE_SPACES.js   |   12 +
 .../nyks/node_modules/mout/src/string/camelCase.js |   30 +
 .../nyks/node_modules/mout/src/string/contains.js  |   14 +
 .../nyks/node_modules/mout/src/string/crop.js      |   11 +
 .../nyks/node_modules/mout/src/string/endsWith.js  |   13 +
 .../node_modules/mout/src/string/escapeHtml.js     |   18 +
 .../node_modules/mout/src/string/escapeRegExp.js   |   12 +
 .../node_modules/mout/src/string/escapeUnicode.js  |   21 +
 .../nyks/node_modules/mout/src/string/hyphenate.js |   12 +
 .../nyks/node_modules/mout/src/string/insert.js    |   20 +
 .../node_modules/mout/src/string/interpolate.js    |   21 +
 .../nyks/node_modules/mout/src/string/lowerCase.js |   11 +
 .../nyks/node_modules/mout/src/string/lpad.js      |   16 +
 .../nyks/node_modules/mout/src/string/ltrim.js     |   33 +
 .../nyks/node_modules/mout/src/string/makePath.js  |   14 +
 .../mout/src/string/normalizeLineBreaks.js         |   18 +
 .../node_modules/mout/src/string/pascalCase.js     |   11 +
 .../node_modules/mout/src/string/properCase.js     |   11 +
 .../node_modules/mout/src/string/removeNonASCII.js |   14 +
 .../node_modules/mout/src/string/removeNonWord.js  |   14 +
 .../nyks/node_modules/mout/src/string/repeat.js    |   25 +
 .../nyks/node_modules/mout/src/string/replace.js   |   32 +
 .../node_modules/mout/src/string/replaceAccents.js |   36 +
 .../nyks/node_modules/mout/src/string/rpad.js      |   14 +
 .../nyks/node_modules/mout/src/string/rtrim.js     |   32 +
 .../node_modules/mout/src/string/sentenceCase.js   |   13 +
 .../nyks/node_modules/mout/src/string/slugify.js   |   21 +
 .../node_modules/mout/src/string/startsWith.js     |   13 +
 .../node_modules/mout/src/string/stripHtmlTags.js  |   11 +
 .../nyks/node_modules/mout/src/string/trim.js      |   12 +
 .../nyks/node_modules/mout/src/string/truncate.js  |   20 +
 .../nyks/node_modules/mout/src/string/typecast.js  |   29 +
 .../node_modules/mout/src/string/unCamelCase.js    |   23 +
 .../node_modules/mout/src/string/underscore.js     |   11 +
 .../node_modules/mout/src/string/unescapeHtml.js   |   18 +
 .../mout/src/string/unescapeUnicode.js             |   16 +
 .../node_modules/mout/src/string/unhyphenate.js    |   10 +
 .../nyks/node_modules/mout/src/string/upperCase.js |   10 +
 node_modules/nyks/node_modules/mout/src/time.js    |   12 +
 .../nyks/node_modules/mout/src/time/convert.js     |   41 +
 .../nyks/node_modules/mout/src/time/now.js         |   18 +
 .../nyks/node_modules/mout/src/time/parseMs.js     |   17 +
 .../node_modules/mout/src/time/toTimeString.js     |   23 +
 node_modules/nyks/node_modules/mout/string.js      |   46 +
 .../nyks/node_modules/mout/string/WHITE_SPACES.js  |   12 +
 .../nyks/node_modules/mout/string/camelCase.js     |   34 +
 .../nyks/node_modules/mout/string/contains.js      |   14 +
 node_modules/nyks/node_modules/mout/string/crop.js |   12 +
 .../nyks/node_modules/mout/string/endsWith.js      |   13 +
 .../nyks/node_modules/mout/string/escapeHtml.js    |   18 +
 .../nyks/node_modules/mout/string/escapeRegExp.js  |   12 +
 .../nyks/node_modules/mout/string/escapeUnicode.js |   21 +
 .../nyks/node_modules/mout/string/hyphenate.js     |   14 +
 .../nyks/node_modules/mout/string/insert.js        |   21 +
 .../nyks/node_modules/mout/string/interpolate.js   |   19 +
 .../nyks/node_modules/mout/string/lowerCase.js     |   11 +
 node_modules/nyks/node_modules/mout/string/lpad.js |   17 +
 .../nyks/node_modules/mout/string/ltrim.js         |   34 +
 .../nyks/node_modules/mout/string/makePath.js      |   15 +
 .../mout/string/normalizeLineBreaks.js             |   18 +
 .../nyks/node_modules/mout/string/pascalCase.js    |   13 +
 .../nyks/node_modules/mout/string/properCase.js    |   13 +
 .../node_modules/mout/string/removeNonASCII.js     |   14 +
 .../nyks/node_modules/mout/string/removeNonWord.js |   14 +
 .../nyks/node_modules/mout/string/repeat.js        |   26 +
 .../nyks/node_modules/mout/string/replace.js       |   33 +
 .../node_modules/mout/string/replaceAccents.js     |   36 +
 node_modules/nyks/node_modules/mout/string/rpad.js |   15 +
 .../nyks/node_modules/mout/string/rtrim.js         |   33 +
 .../nyks/node_modules/mout/string/sentenceCase.js  |   15 +
 .../nyks/node_modules/mout/string/slugify.js       |   24 +
 .../nyks/node_modules/mout/string/startsWith.js    |   13 +
 .../nyks/node_modules/mout/string/stripHtmlTags.js |   11 +
 node_modules/nyks/node_modules/mout/string/trim.js |   15 +
 .../nyks/node_modules/mout/string/truncate.js      |   21 +
 .../nyks/node_modules/mout/string/typecast.js      |   29 +
 .../nyks/node_modules/mout/string/unCamelCase.js   |   23 +
 .../nyks/node_modules/mout/string/underscore.js    |   13 +
 .../nyks/node_modules/mout/string/unescapeHtml.js  |   18 +
 .../node_modules/mout/string/unescapeUnicode.js    |   16 +
 .../nyks/node_modules/mout/string/unhyphenate.js   |   10 +
 .../nyks/node_modules/mout/string/upperCase.js     |   10 +
 node_modules/nyks/node_modules/mout/time.js        |   12 +
 .../nyks/node_modules/mout/time/convert.js         |   41 +
 node_modules/nyks/node_modules/mout/time/now.js    |   18 +
 .../nyks/node_modules/mout/time/parseMs.js         |   17 +
 .../nyks/node_modules/mout/time/toTimeString.js    |   24 +
 node_modules/nyks/object/combine.js                |   12 +
 node_modules/nyks/object/indexOf.js                |    9 +
 node_modules/nyks/object/jsonpath.js               |   19 +
 node_modules/nyks/object/mask.js                   |   13 +
 node_modules/nyks/object/sort.js                   |   11 +
 node_modules/nyks/package.json                     |   63 ++
 node_modules/nyks/path/extend.js                   |    9 +
 node_modules/nyks/path/which.js                    |   26 +
 node_modules/nyks/process/parseArgs.js             |   38 +
 node_modules/nyks/process/splitArgs.js             |   36 +
 node_modules/nyks/promise/defer.js                 |   22 +
 node_modules/nyks/promise/nodeify.js               |   11 +
 node_modules/nyks/promise/throttle.js              |   19 +
 node_modules/nyks/src/resolver.js                  |   20 +
 node_modules/nyks/stream/fromBuffer.js             |    9 +
 node_modules/nyks/string/chunk.js                  |   21 +
 node_modules/nyks/string/crc32.LICENSE             |   14 +
 node_modules/nyks/string/crc32.js                  |  100 ++
 node_modules/nyks/string/format.js                 |   27 +
 node_modules/nyks/string/hexToRgb.js               |    8 +
 node_modules/nyks/string/repeat.js                 |    7 +
 node_modules/nyks/string/replaces.js               |   11 +
 node_modules/nyks/string/rot13.js                  |    8 +
 node_modules/nyks/string/rreplaces.js              |   13 +
 node_modules/nyks/string/sprintf.LICENSE           |   24 +
 node_modules/nyks/string/sprintf.js                |  190 ++++
 node_modules/nyks/string/stripEnd.js               |    7 +
 node_modules/nyks/string/stripStart.js             |    7 +
 node_modules/nyks/string/truncate.js               |   15 +
 node_modules/oauth/.npmignore                      |    1 +
 node_modules/oauth/LICENSE                         |    8 +
 node_modules/oauth/Makefile                        |    7 +
 node_modules/oauth/Readme.md                       |  190 ++++
 .../oauth/examples/express-gdata/server.js         |  168 ++++
 .../express-gdata/views/google_calendars.ejs       |   21 +
 .../express-gdata/views/google_contacts.ejs        |   24 +
 .../oauth/examples/express-gdata/views/layout.ejs  |    9 +
 node_modules/oauth/examples/github-example.js      |   73 ++
 .../oauth/examples/term.ie.oauth-HMAC-SHA1.js      |   31 +
 node_modules/oauth/examples/twitter-example.js     |   75 ++
 node_modules/oauth/index.js                        |    3 +
 node_modules/oauth/lib/_utils.js                   |    4 +
 node_modules/oauth/lib/oauth.js                    |  581 +++++++++++
 node_modules/oauth/lib/oauth2.js                   |  228 +++++
 node_modules/oauth/lib/sha1.js                     |  334 ++++++
 node_modules/oauth/package.json                    |   53 +
 node_modules/oauth/tests/oauth2tests.js            |  304 ++++++
 node_modules/oauth/tests/oauthtests.js             | 1064 ++++++++++++++++++++
 node_modules/oauth/tests/sha1tests.js              |   13 +
 node_modules/oauth/tests/shared.js                 |   26 +
 node_modules/openssl/.npmignore                    |    1 +
 node_modules/openssl/index.js                      |   45 +
 node_modules/openssl/package.json                  |   55 +
 .../passport-facebook/.github/ISSUE_TEMPLATE.md    |   54 +
 .../.github/PULL_REQUEST_TEMPLATE.md               |   41 +
 node_modules/passport-facebook/.npmignore          |    8 +
 node_modules/passport-facebook/CONTRIBUTING.md     |   20 +
 node_modules/passport-facebook/LICENSE             |   20 +
 node_modules/passport-facebook/README.md           |  174 ++++
 .../lib/errors/facebookauthorizationerror.js       |   30 +
 .../lib/errors/facebookgraphapierror.js            |   32 +
 .../lib/errors/facebooktokenerror.js               |   36 +
 node_modules/passport-facebook/lib/index.js        |    9 +
 node_modules/passport-facebook/lib/profile.js      |   38 +
 node_modules/passport-facebook/lib/strategy.js     |  242 +++++
 node_modules/passport-facebook/package.json        |   75 ++
 node_modules/passport-oauth2/.npmignore            |    8 +
 node_modules/passport-oauth2/LICENSE               |   20 +
 node_modules/passport-oauth2/README.md             |  124 +++
 .../lib/errors/authorizationerror.js               |   44 +
 .../lib/errors/internaloautherror.js               |   49 +
 .../passport-oauth2/lib/errors/tokenerror.js       |   36 +
 node_modules/passport-oauth2/lib/index.js          |   16 +
 node_modules/passport-oauth2/lib/state/null.js     |   13 +
 node_modules/passport-oauth2/lib/state/session.js  |   85 ++
 node_modules/passport-oauth2/lib/strategy.js       |  385 +++++++
 node_modules/passport-oauth2/lib/utils.js          |   32 +
 node_modules/passport-oauth2/package.json          |   79 ++
 node_modules/uid2/LICENSE                          |   21 +
 node_modules/uid2/index.js                         |   55 +
 node_modules/uid2/package.json                     |   34 +
 package-lock.json                                  |   59 ++
 package.json                                       |    2 +
 passport.js                                        |   30 +-
 public/admin.html                                  |  126 ---
 public/css/styles.css                              |    3 +-
 public/index2.html                                 |  197 ----
 public/login.html                                  |  105 --
 routes/auth.js                                     |   31 +-
 routes/index.js                                    |   95 +-
 routes/user.js                                     |   23 +
 server.cert                                        |   23 +
 server.key                                         |   28 +
 views/index.ejs                                    |   20 +-
 views/login.ejs                                    |    7 +-
 views/notifications.ejs                            |   65 +-
 views/partials/footer.ejs                          |    3 +-
 views/partials/header.ejs                          |   16 +-
 views/signup.ejs                                   |   72 +-
 views/users.ejs                                    |  104 +-
 1255 files changed, 41083 insertions(+), 671 deletions(-)
 create mode 100644 .vscode/launch.json
 delete mode 100644 controllers/users.js
 create mode 100644 node_modules/mout/.editorconfig
 create mode 100644 node_modules/mout/.jshintrc
 create mode 100644 node_modules/mout/.npmignore
 create mode 100644 node_modules/mout/.travis.yml
 create mode 100644 node_modules/mout/CHANGELOG.md
 create mode 100644 node_modules/mout/CONTRIBUTING.md
 create mode 100644 node_modules/mout/LICENSE.md
 create mode 100644 node_modules/mout/README.md
 create mode 100644 node_modules/mout/array.js
 create mode 100644 node_modules/mout/array/append.js
 create mode 100644 node_modules/mout/array/collect.js
 create mode 100644 node_modules/mout/array/combine.js
 create mode 100644 node_modules/mout/array/compact.js
 create mode 100644 node_modules/mout/array/contains.js
 create mode 100644 node_modules/mout/array/difference.js
 create mode 100644 node_modules/mout/array/equals.js
 create mode 100644 node_modules/mout/array/every.js
 create mode 100644 node_modules/mout/array/filter.js
 create mode 100644 node_modules/mout/array/find.js
 create mode 100644 node_modules/mout/array/findIndex.js
 create mode 100644 node_modules/mout/array/findLast.js
 create mode 100644 node_modules/mout/array/findLastIndex.js
 create mode 100644 node_modules/mout/array/flatten.js
 create mode 100644 node_modules/mout/array/forEach.js
 create mode 100644 node_modules/mout/array/groupBy.js
 create mode 100644 node_modules/mout/array/indexOf.js
 create mode 100644 node_modules/mout/array/insert.js
 create mode 100644 node_modules/mout/array/intersection.js
 create mode 100644 node_modules/mout/array/invoke.js
 create mode 100644 node_modules/mout/array/join.js
 create mode 100644 node_modules/mout/array/last.js
 create mode 100644 node_modules/mout/array/lastIndexOf.js
 create mode 100644 node_modules/mout/array/map.js
 create mode 100644 node_modules/mout/array/max.js
 create mode 100644 node_modules/mout/array/min.js
 create mode 100644 node_modules/mout/array/pick.js
 create mode 100644 node_modules/mout/array/pluck.js
 create mode 100644 node_modules/mout/array/range.js
 create mode 100644 node_modules/mout/array/reduce.js
 create mode 100644 node_modules/mout/array/reduceRight.js
 create mode 100644 node_modules/mout/array/reject.js
 create mode 100644 node_modules/mout/array/remove.js
 create mode 100644 node_modules/mout/array/removeAll.js
 create mode 100644 node_modules/mout/array/reverse.js
 create mode 100644 node_modules/mout/array/shuffle.js
 create mode 100644 node_modules/mout/array/slice.js
 create mode 100644 node_modules/mout/array/some.js
 create mode 100644 node_modules/mout/array/sort.js
 create mode 100644 node_modules/mout/array/sortBy.js
 create mode 100644 node_modules/mout/array/split.js
 create mode 100644 node_modules/mout/array/take.js
 create mode 100644 node_modules/mout/array/toLookup.js
 create mode 100644 node_modules/mout/array/union.js
 create mode 100644 node_modules/mout/array/unique.js
 create mode 100644 node_modules/mout/array/xor.js
 create mode 100644 node_modules/mout/array/zip.js
 create mode 100644 node_modules/mout/collection.js
 create mode 100644 node_modules/mout/collection/contains.js
 create mode 100644 node_modules/mout/collection/every.js
 create mode 100644 node_modules/mout/collection/filter.js
 create mode 100644 node_modules/mout/collection/find.js
 create mode 100644 node_modules/mout/collection/forEach.js
 create mode 100644 node_modules/mout/collection/make_.js
 create mode 100644 node_modules/mout/collection/map.js
 create mode 100644 node_modules/mout/collection/max.js
 create mode 100644 node_modules/mout/collection/min.js
 create mode 100644 node_modules/mout/collection/pluck.js
 create mode 100644 node_modules/mout/collection/reduce.js
 create mode 100644 node_modules/mout/collection/reject.js
 create mode 100644 node_modules/mout/collection/size.js
 create mode 100644 node_modules/mout/collection/some.js
 create mode 100644 node_modules/mout/date.js
 create mode 100644 node_modules/mout/date/dayOfTheYear.js
 create mode 100644 node_modules/mout/date/diff.js
 create mode 100644 node_modules/mout/date/i18n/de-DE.js
 create mode 100644 node_modules/mout/date/i18n/en-US.js
 create mode 100644 node_modules/mout/date/i18n/pt-BR.js
 create mode 100644 node_modules/mout/date/i18n_.js
 create mode 100644 node_modules/mout/date/isLeapYear.js
 create mode 100644 node_modules/mout/date/isSame.js
 create mode 100644 node_modules/mout/date/parseIso.js
 create mode 100644 node_modules/mout/date/quarter.js
 create mode 100644 node_modules/mout/date/startOf.js
 create mode 100644 node_modules/mout/date/strftime.js
 create mode 100644 node_modules/mout/date/timezoneAbbr.js
 create mode 100644 node_modules/mout/date/timezoneOffset.js
 create mode 100644 node_modules/mout/date/totalDaysInMonth.js
 create mode 100644 node_modules/mout/date/totalDaysInYear.js
 create mode 100644 node_modules/mout/date/weekOfTheYear.js
 create mode 100644 node_modules/mout/doc/array.md
 create mode 100644 node_modules/mout/doc/collection.md
 create mode 100644 node_modules/mout/doc/date.md
 create mode 100644 node_modules/mout/doc/function.md
 create mode 100644 node_modules/mout/doc/lang.md
 create mode 100644 node_modules/mout/doc/math.md
 create mode 100644 node_modules/mout/doc/number.md
 create mode 100644 node_modules/mout/doc/object.md
 create mode 100644 node_modules/mout/doc/queryString.md
 create mode 100644 node_modules/mout/doc/random.md
 create mode 100644 node_modules/mout/doc/string.md
 create mode 100644 node_modules/mout/doc/time.md
 create mode 100644 node_modules/mout/function.js
 create mode 100644 node_modules/mout/function/awaitDelay.js
 create mode 100644 node_modules/mout/function/bind.js
 create mode 100644 node_modules/mout/function/compose.js
 create mode 100644 node_modules/mout/function/constant.js
 create mode 100644 node_modules/mout/function/debounce.js
 create mode 100644 node_modules/mout/function/func.js
 create mode 100644 node_modules/mout/function/identity.js
 create mode 100644 node_modules/mout/function/makeIterator_.js
 create mode 100644 node_modules/mout/function/partial.js
 create mode 100644 node_modules/mout/function/prop.js
 create mode 100644 node_modules/mout/function/series.js
 create mode 100644 node_modules/mout/function/throttle.js
 create mode 100644 node_modules/mout/function/timeout.js
 create mode 100644 node_modules/mout/function/times.js
 create mode 100644 node_modules/mout/function/wrap.js
 create mode 100644 node_modules/mout/index.js
 create mode 100644 node_modules/mout/lang.js
 create mode 100644 node_modules/mout/lang/GLOBAL.js
 create mode 100644 node_modules/mout/lang/clone.js
 create mode 100644 node_modules/mout/lang/createObject.js
 create mode 100644 node_modules/mout/lang/ctorApply.js
 create mode 100644 node_modules/mout/lang/deepClone.js
 create mode 100644 node_modules/mout/lang/deepEquals.js
 create mode 100644 node_modules/mout/lang/defaults.js
 create mode 100644 node_modules/mout/lang/inheritPrototype.js
 create mode 100644 node_modules/mout/lang/is.js
 create mode 100644 node_modules/mout/lang/isArguments.js
 create mode 100644 node_modules/mout/lang/isArray.js
 create mode 100644 node_modules/mout/lang/isBoolean.js
 create mode 100644 node_modules/mout/lang/isDate.js
 create mode 100644 node_modules/mout/lang/isEmpty.js
 create mode 100644 node_modules/mout/lang/isFinite.js
 create mode 100644 node_modules/mout/lang/isFunction.js
 create mode 100644 node_modules/mout/lang/isInteger.js
 create mode 100644 node_modules/mout/lang/isKind.js
 create mode 100644 node_modules/mout/lang/isNaN.js
 create mode 100644 node_modules/mout/lang/isNull.js
 create mode 100644 node_modules/mout/lang/isNumber.js
 create mode 100644 node_modules/mout/lang/isObject.js
 create mode 100644 node_modules/mout/lang/isPlainObject.js
 create mode 100644 node_modules/mout/lang/isPrimitive.js
 create mode 100644 node_modules/mout/lang/isRegExp.js
 create mode 100644 node_modules/mout/lang/isString.js
 create mode 100644 node_modules/mout/lang/isUndefined.js
 create mode 100644 node_modules/mout/lang/isnt.js
 create mode 100644 node_modules/mout/lang/kindOf.js
 create mode 100644 node_modules/mout/lang/toArray.js
 create mode 100644 node_modules/mout/lang/toNumber.js
 create mode 100644 node_modules/mout/lang/toString.js
 create mode 100644 node_modules/mout/math.js
 create mode 100644 node_modules/mout/math/ceil.js
 create mode 100644 node_modules/mout/math/clamp.js
 create mode 100644 node_modules/mout/math/countSteps.js
 create mode 100644 node_modules/mout/math/floor.js
 create mode 100644 node_modules/mout/math/inRange.js
 create mode 100644 node_modules/mout/math/isNear.js
 create mode 100644 node_modules/mout/math/lerp.js
 create mode 100644 node_modules/mout/math/loop.js
 create mode 100644 node_modules/mout/math/map.js
 create mode 100644 node_modules/mout/math/norm.js
 create mode 100644 node_modules/mout/math/round.js
 create mode 100644 node_modules/mout/number.js
 create mode 100644 node_modules/mout/number/MAX_INT.js
 create mode 100644 node_modules/mout/number/MAX_SAFE_INTEGER.js
 create mode 100644 node_modules/mout/number/MAX_UINT.js
 create mode 100644 node_modules/mout/number/MIN_INT.js
 create mode 100644 node_modules/mout/number/abbreviate.js
 create mode 100644 node_modules/mout/number/currencyFormat.js
 create mode 100644 node_modules/mout/number/enforcePrecision.js
 create mode 100644 node_modules/mout/number/isNaN.js
 create mode 100644 node_modules/mout/number/nth.js
 create mode 100644 node_modules/mout/number/ordinal.js
 create mode 100644 node_modules/mout/number/pad.js
 create mode 100644 node_modules/mout/number/rol.js
 create mode 100644 node_modules/mout/number/ror.js
 create mode 100644 node_modules/mout/number/sign.js
 create mode 100644 node_modules/mout/number/toInt.js
 create mode 100644 node_modules/mout/number/toUInt.js
 create mode 100644 node_modules/mout/number/toUInt31.js
 create mode 100644 node_modules/mout/object.js
 create mode 100644 node_modules/mout/object/bindAll.js
 create mode 100644 node_modules/mout/object/contains.js
 create mode 100644 node_modules/mout/object/deepFillIn.js
 create mode 100644 node_modules/mout/object/deepMatches.js
 create mode 100644 node_modules/mout/object/deepMixIn.js
 create mode 100644 node_modules/mout/object/equals.js
 create mode 100644 node_modules/mout/object/every.js
 create mode 100644 node_modules/mout/object/fillIn.js
 create mode 100644 node_modules/mout/object/filter.js
 create mode 100644 node_modules/mout/object/find.js
 create mode 100644 node_modules/mout/object/flatten.js
 create mode 100644 node_modules/mout/object/forIn.js
 create mode 100644 node_modules/mout/object/forOwn.js
 create mode 100644 node_modules/mout/object/functions.js
 create mode 100644 node_modules/mout/object/get.js
 create mode 100644 node_modules/mout/object/has.js
 create mode 100644 node_modules/mout/object/hasOwn.js
 create mode 100644 node_modules/mout/object/keys.js
 create mode 100644 node_modules/mout/object/map.js
 create mode 100644 node_modules/mout/object/matches.js
 create mode 100644 node_modules/mout/object/max.js
 create mode 100644 node_modules/mout/object/merge.js
 create mode 100644 node_modules/mout/object/min.js
 create mode 100644 node_modules/mout/object/mixIn.js
 create mode 100644 node_modules/mout/object/namespace.js
 create mode 100644 node_modules/mout/object/omit.js
 create mode 100644 node_modules/mout/object/pick.js
 create mode 100644 node_modules/mout/object/pluck.js
 create mode 100644 node_modules/mout/object/reduce.js
 create mode 100644 node_modules/mout/object/reject.js
 create mode 100644 node_modules/mout/object/result.js
 create mode 100644 node_modules/mout/object/set.js
 create mode 100644 node_modules/mout/object/size.js
 create mode 100644 node_modules/mout/object/some.js
 create mode 100644 node_modules/mout/object/unset.js
 create mode 100644 node_modules/mout/object/values.js
 create mode 100644 node_modules/mout/package.json
 create mode 100644 node_modules/mout/queryString.js
 create mode 100644 node_modules/mout/queryString/contains.js
 create mode 100644 node_modules/mout/queryString/decode.js
 create mode 100644 node_modules/mout/queryString/encode.js
 create mode 100644 node_modules/mout/queryString/getParam.js
 create mode 100644 node_modules/mout/queryString/getQuery.js
 create mode 100644 node_modules/mout/queryString/parse.js
 create mode 100644 node_modules/mout/queryString/setParam.js
 create mode 100644 node_modules/mout/random.js
 create mode 100644 node_modules/mout/random/choice.js
 create mode 100644 node_modules/mout/random/guid.js
 create mode 100644 node_modules/mout/random/rand.js
 create mode 100644 node_modules/mout/random/randBit.js
 create mode 100644 node_modules/mout/random/randBool.js
 create mode 100644 node_modules/mout/random/randHex.js
 create mode 100644 node_modules/mout/random/randInt.js
 create mode 100644 node_modules/mout/random/randSign.js
 create mode 100644 node_modules/mout/random/randString.js
 create mode 100644 node_modules/mout/random/random.js
 create mode 100644 node_modules/mout/src/array.js
 create mode 100644 node_modules/mout/src/array/append.js
 create mode 100644 node_modules/mout/src/array/collect.js
 create mode 100644 node_modules/mout/src/array/combine.js
 create mode 100644 node_modules/mout/src/array/compact.js
 create mode 100644 node_modules/mout/src/array/contains.js
 create mode 100644 node_modules/mout/src/array/difference.js
 create mode 100644 node_modules/mout/src/array/equals.js
 create mode 100644 node_modules/mout/src/array/every.js
 create mode 100644 node_modules/mout/src/array/filter.js
 create mode 100644 node_modules/mout/src/array/find.js
 create mode 100644 node_modules/mout/src/array/findIndex.js
 create mode 100644 node_modules/mout/src/array/findLast.js
 create mode 100644 node_modules/mout/src/array/findLastIndex.js
 create mode 100644 node_modules/mout/src/array/flatten.js
 create mode 100644 node_modules/mout/src/array/forEach.js
 create mode 100644 node_modules/mout/src/array/groupBy.js
 create mode 100644 node_modules/mout/src/array/indexOf.js
 create mode 100644 node_modules/mout/src/array/insert.js
 create mode 100644 node_modules/mout/src/array/intersection.js
 create mode 100644 node_modules/mout/src/array/invoke.js
 create mode 100644 node_modules/mout/src/array/join.js
 create mode 100644 node_modules/mout/src/array/last.js
 create mode 100644 node_modules/mout/src/array/lastIndexOf.js
 create mode 100644 node_modules/mout/src/array/map.js
 create mode 100644 node_modules/mout/src/array/max.js
 create mode 100644 node_modules/mout/src/array/min.js
 create mode 100644 node_modules/mout/src/array/pick.js
 create mode 100644 node_modules/mout/src/array/pluck.js
 create mode 100644 node_modules/mout/src/array/range.js
 create mode 100644 node_modules/mout/src/array/reduce.js
 create mode 100644 node_modules/mout/src/array/reduceRight.js
 create mode 100644 node_modules/mout/src/array/reject.js
 create mode 100644 node_modules/mout/src/array/remove.js
 create mode 100644 node_modules/mout/src/array/removeAll.js
 create mode 100644 node_modules/mout/src/array/reverse.js
 create mode 100644 node_modules/mout/src/array/shuffle.js
 create mode 100644 node_modules/mout/src/array/slice.js
 create mode 100644 node_modules/mout/src/array/some.js
 create mode 100644 node_modules/mout/src/array/sort.js
 create mode 100644 node_modules/mout/src/array/sortBy.js
 create mode 100644 node_modules/mout/src/array/split.js
 create mode 100644 node_modules/mout/src/array/take.js
 create mode 100644 node_modules/mout/src/array/toLookup.js
 create mode 100644 node_modules/mout/src/array/union.js
 create mode 100644 node_modules/mout/src/array/unique.js
 create mode 100644 node_modules/mout/src/array/xor.js
 create mode 100644 node_modules/mout/src/array/zip.js
 create mode 100644 node_modules/mout/src/collection.js
 create mode 100644 node_modules/mout/src/collection/contains.js
 create mode 100644 node_modules/mout/src/collection/every.js
 create mode 100644 node_modules/mout/src/collection/filter.js
 create mode 100644 node_modules/mout/src/collection/find.js
 create mode 100644 node_modules/mout/src/collection/forEach.js
 create mode 100644 node_modules/mout/src/collection/make_.js
 create mode 100644 node_modules/mout/src/collection/map.js
 create mode 100644 node_modules/mout/src/collection/max.js
 create mode 100644 node_modules/mout/src/collection/min.js
 create mode 100644 node_modules/mout/src/collection/pluck.js
 create mode 100644 node_modules/mout/src/collection/reduce.js
 create mode 100644 node_modules/mout/src/collection/reject.js
 create mode 100644 node_modules/mout/src/collection/size.js
 create mode 100644 node_modules/mout/src/collection/some.js
 create mode 100644 node_modules/mout/src/date.js
 create mode 100644 node_modules/mout/src/date/dayOfTheYear.js
 create mode 100644 node_modules/mout/src/date/diff.js
 create mode 100644 node_modules/mout/src/date/i18n/de-DE.js
 create mode 100644 node_modules/mout/src/date/i18n/en-US.js
 create mode 100644 node_modules/mout/src/date/i18n/pt-BR.js
 create mode 100644 node_modules/mout/src/date/i18n_.js
 create mode 100644 node_modules/mout/src/date/isLeapYear.js
 create mode 100644 node_modules/mout/src/date/isSame.js
 create mode 100644 node_modules/mout/src/date/parseIso.js
 create mode 100644 node_modules/mout/src/date/quarter.js
 create mode 100644 node_modules/mout/src/date/startOf.js
 create mode 100644 node_modules/mout/src/date/strftime.js
 create mode 100644 node_modules/mout/src/date/timezoneAbbr.js
 create mode 100644 node_modules/mout/src/date/timezoneOffset.js
 create mode 100644 node_modules/mout/src/date/totalDaysInMonth.js
 create mode 100644 node_modules/mout/src/date/totalDaysInYear.js
 create mode 100644 node_modules/mout/src/date/weekOfTheYear.js
 create mode 100644 node_modules/mout/src/function.js
 create mode 100644 node_modules/mout/src/function/awaitDelay.js
 create mode 100644 node_modules/mout/src/function/bind.js
 create mode 100644 node_modules/mout/src/function/compose.js
 create mode 100644 node_modules/mout/src/function/constant.js
 create mode 100644 node_modules/mout/src/function/debounce.js
 create mode 100644 node_modules/mout/src/function/func.js
 create mode 100644 node_modules/mout/src/function/identity.js
 create mode 100644 node_modules/mout/src/function/makeIterator_.js
 create mode 100644 node_modules/mout/src/function/partial.js
 create mode 100644 node_modules/mout/src/function/prop.js
 create mode 100644 node_modules/mout/src/function/series.js
 create mode 100644 node_modules/mout/src/function/throttle.js
 create mode 100644 node_modules/mout/src/function/timeout.js
 create mode 100644 node_modules/mout/src/function/times.js
 create mode 100644 node_modules/mout/src/function/wrap.js
 create mode 100644 node_modules/mout/src/index.js
 create mode 100644 node_modules/mout/src/lang.js
 create mode 100644 node_modules/mout/src/lang/GLOBAL.js
 create mode 100644 node_modules/mout/src/lang/clone.js
 create mode 100644 node_modules/mout/src/lang/createObject.js
 create mode 100644 node_modules/mout/src/lang/ctorApply.js
 create mode 100644 node_modules/mout/src/lang/deepClone.js
 create mode 100644 node_modules/mout/src/lang/deepEquals.js
 create mode 100644 node_modules/mout/src/lang/defaults.js
 create mode 100644 node_modules/mout/src/lang/inheritPrototype.js
 create mode 100644 node_modules/mout/src/lang/is.js
 create mode 100644 node_modules/mout/src/lang/isArguments.js
 create mode 100644 node_modules/mout/src/lang/isArray.js
 create mode 100644 node_modules/mout/src/lang/isBoolean.js
 create mode 100644 node_modules/mout/src/lang/isDate.js
 create mode 100644 node_modules/mout/src/lang/isEmpty.js
 create mode 100644 node_modules/mout/src/lang/isFinite.js
 create mode 100644 node_modules/mout/src/lang/isFunction.js
 create mode 100644 node_modules/mout/src/lang/isInteger.js
 create mode 100644 node_modules/mout/src/lang/isKind.js
 create mode 100644 node_modules/mout/src/lang/isNaN.js
 create mode 100644 node_modules/mout/src/lang/isNull.js
 create mode 100644 node_modules/mout/src/lang/isNumber.js
 create mode 100644 node_modules/mout/src/lang/isObject.js
 create mode 100644 node_modules/mout/src/lang/isPlainObject.js
 create mode 100644 node_modules/mout/src/lang/isPrimitive.js
 create mode 100644 node_modules/mout/src/lang/isRegExp.js
 create mode 100644 node_modules/mout/src/lang/isString.js
 create mode 100644 node_modules/mout/src/lang/isUndefined.js
 create mode 100644 node_modules/mout/src/lang/isnt.js
 create mode 100644 node_modules/mout/src/lang/kindOf.js
 create mode 100644 node_modules/mout/src/lang/toArray.js
 create mode 100644 node_modules/mout/src/lang/toNumber.js
 create mode 100644 node_modules/mout/src/lang/toString.js
 create mode 100644 node_modules/mout/src/math.js
 create mode 100644 node_modules/mout/src/math/ceil.js
 create mode 100644 node_modules/mout/src/math/clamp.js
 create mode 100644 node_modules/mout/src/math/countSteps.js
 create mode 100644 node_modules/mout/src/math/floor.js
 create mode 100644 node_modules/mout/src/math/inRange.js
 create mode 100644 node_modules/mout/src/math/isNear.js
 create mode 100644 node_modules/mout/src/math/lerp.js
 create mode 100644 node_modules/mout/src/math/loop.js
 create mode 100644 node_modules/mout/src/math/map.js
 create mode 100644 node_modules/mout/src/math/norm.js
 create mode 100644 node_modules/mout/src/math/round.js
 create mode 100644 node_modules/mout/src/number.js
 create mode 100644 node_modules/mout/src/number/MAX_INT.js
 create mode 100644 node_modules/mout/src/number/MAX_SAFE_INTEGER.js
 create mode 100644 node_modules/mout/src/number/MAX_UINT.js
 create mode 100644 node_modules/mout/src/number/MIN_INT.js
 create mode 100644 node_modules/mout/src/number/abbreviate.js
 create mode 100644 node_modules/mout/src/number/currencyFormat.js
 create mode 100644 node_modules/mout/src/number/enforcePrecision.js
 create mode 100644 node_modules/mout/src/number/isNaN.js
 create mode 100644 node_modules/mout/src/number/nth.js
 create mode 100644 node_modules/mout/src/number/ordinal.js
 create mode 100644 node_modules/mout/src/number/pad.js
 create mode 100644 node_modules/mout/src/number/rol.js
 create mode 100644 node_modules/mout/src/number/ror.js
 create mode 100644 node_modules/mout/src/number/sign.js
 create mode 100644 node_modules/mout/src/number/toInt.js
 create mode 100644 node_modules/mout/src/number/toUInt.js
 create mode 100644 node_modules/mout/src/number/toUInt31.js
 create mode 100644 node_modules/mout/src/object.js
 create mode 100644 node_modules/mout/src/object/bindAll.js
 create mode 100644 node_modules/mout/src/object/contains.js
 create mode 100644 node_modules/mout/src/object/deepFillIn.js
 create mode 100644 node_modules/mout/src/object/deepMatches.js
 create mode 100644 node_modules/mout/src/object/deepMixIn.js
 create mode 100644 node_modules/mout/src/object/equals.js
 create mode 100644 node_modules/mout/src/object/every.js
 create mode 100644 node_modules/mout/src/object/fillIn.js
 create mode 100644 node_modules/mout/src/object/filter.js
 create mode 100644 node_modules/mout/src/object/find.js
 create mode 100644 node_modules/mout/src/object/flatten.js
 create mode 100644 node_modules/mout/src/object/forIn.js
 create mode 100644 node_modules/mout/src/object/forOwn.js
 create mode 100644 node_modules/mout/src/object/functions.js
 create mode 100644 node_modules/mout/src/object/get.js
 create mode 100644 node_modules/mout/src/object/has.js
 create mode 100644 node_modules/mout/src/object/hasOwn.js
 create mode 100644 node_modules/mout/src/object/keys.js
 create mode 100644 node_modules/mout/src/object/map.js
 create mode 100644 node_modules/mout/src/object/matches.js
 create mode 100644 node_modules/mout/src/object/max.js
 create mode 100644 node_modules/mout/src/object/merge.js
 create mode 100644 node_modules/mout/src/object/min.js
 create mode 100644 node_modules/mout/src/object/mixIn.js
 create mode 100644 node_modules/mout/src/object/namespace.js
 create mode 100644 node_modules/mout/src/object/omit.js
 create mode 100644 node_modules/mout/src/object/pick.js
 create mode 100644 node_modules/mout/src/object/pluck.js
 create mode 100644 node_modules/mout/src/object/reduce.js
 create mode 100644 node_modules/mout/src/object/reject.js
 create mode 100644 node_modules/mout/src/object/result.js
 create mode 100644 node_modules/mout/src/object/set.js
 create mode 100644 node_modules/mout/src/object/size.js
 create mode 100644 node_modules/mout/src/object/some.js
 create mode 100644 node_modules/mout/src/object/unset.js
 create mode 100644 node_modules/mout/src/object/values.js
 create mode 100644 node_modules/mout/src/queryString.js
 create mode 100644 node_modules/mout/src/queryString/contains.js
 create mode 100644 node_modules/mout/src/queryString/decode.js
 create mode 100644 node_modules/mout/src/queryString/encode.js
 create mode 100644 node_modules/mout/src/queryString/getParam.js
 create mode 100644 node_modules/mout/src/queryString/getQuery.js
 create mode 100644 node_modules/mout/src/queryString/parse.js
 create mode 100644 node_modules/mout/src/queryString/setParam.js
 create mode 100644 node_modules/mout/src/random.js
 create mode 100644 node_modules/mout/src/random/choice.js
 create mode 100644 node_modules/mout/src/random/guid.js
 create mode 100644 node_modules/mout/src/random/rand.js
 create mode 100644 node_modules/mout/src/random/randBit.js
 create mode 100644 node_modules/mout/src/random/randBool.js
 create mode 100644 node_modules/mout/src/random/randHex.js
 create mode 100644 node_modules/mout/src/random/randInt.js
 create mode 100644 node_modules/mout/src/random/randSign.js
 create mode 100644 node_modules/mout/src/random/randString.js
 create mode 100644 node_modules/mout/src/random/random.js
 create mode 100644 node_modules/mout/src/string.js
 create mode 100644 node_modules/mout/src/string/WHITE_SPACES.js
 create mode 100644 node_modules/mout/src/string/camelCase.js
 create mode 100644 node_modules/mout/src/string/contains.js
 create mode 100644 node_modules/mout/src/string/crop.js
 create mode 100644 node_modules/mout/src/string/endsWith.js
 create mode 100644 node_modules/mout/src/string/escapeHtml.js
 create mode 100644 node_modules/mout/src/string/escapeRegExp.js
 create mode 100644 node_modules/mout/src/string/escapeUnicode.js
 create mode 100644 node_modules/mout/src/string/hyphenate.js
 create mode 100644 node_modules/mout/src/string/insert.js
 create mode 100644 node_modules/mout/src/string/interpolate.js
 create mode 100644 node_modules/mout/src/string/lowerCase.js
 create mode 100644 node_modules/mout/src/string/lpad.js
 create mode 100644 node_modules/mout/src/string/ltrim.js
 create mode 100644 node_modules/mout/src/string/makePath.js
 create mode 100644 node_modules/mout/src/string/normalizeLineBreaks.js
 create mode 100644 node_modules/mout/src/string/pascalCase.js
 create mode 100644 node_modules/mout/src/string/properCase.js
 create mode 100644 node_modules/mout/src/string/removeNonASCII.js
 create mode 100644 node_modules/mout/src/string/removeNonWord.js
 create mode 100644 node_modules/mout/src/string/repeat.js
 create mode 100644 node_modules/mout/src/string/replace.js
 create mode 100644 node_modules/mout/src/string/replaceAccents.js
 create mode 100644 node_modules/mout/src/string/rpad.js
 create mode 100644 node_modules/mout/src/string/rtrim.js
 create mode 100644 node_modules/mout/src/string/sentenceCase.js
 create mode 100644 node_modules/mout/src/string/slugify.js
 create mode 100644 node_modules/mout/src/string/startsWith.js
 create mode 100644 node_modules/mout/src/string/stripHtmlTags.js
 create mode 100644 node_modules/mout/src/string/trim.js
 create mode 100644 node_modules/mout/src/string/truncate.js
 create mode 100644 node_modules/mout/src/string/typecast.js
 create mode 100644 node_modules/mout/src/string/unCamelCase.js
 create mode 100644 node_modules/mout/src/string/underscore.js
 create mode 100644 node_modules/mout/src/string/unescapeHtml.js
 create mode 100644 node_modules/mout/src/string/unescapeUnicode.js
 create mode 100644 node_modules/mout/src/string/unhyphenate.js
 create mode 100644 node_modules/mout/src/string/upperCase.js
 create mode 100644 node_modules/mout/src/time.js
 create mode 100644 node_modules/mout/src/time/convert.js
 create mode 100644 node_modules/mout/src/time/now.js
 create mode 100644 node_modules/mout/src/time/parseMs.js
 create mode 100644 node_modules/mout/src/time/toTimeString.js
 create mode 100644 node_modules/mout/string.js
 create mode 100644 node_modules/mout/string/WHITE_SPACES.js
 create mode 100644 node_modules/mout/string/camelCase.js
 create mode 100644 node_modules/mout/string/contains.js
 create mode 100644 node_modules/mout/string/crop.js
 create mode 100644 node_modules/mout/string/endsWith.js
 create mode 100644 node_modules/mout/string/escapeHtml.js
 create mode 100644 node_modules/mout/string/escapeRegExp.js
 create mode 100644 node_modules/mout/string/escapeUnicode.js
 create mode 100644 node_modules/mout/string/hyphenate.js
 create mode 100644 node_modules/mout/string/insert.js
 create mode 100644 node_modules/mout/string/interpolate.js
 create mode 100644 node_modules/mout/string/lowerCase.js
 create mode 100644 node_modules/mout/string/lpad.js
 create mode 100644 node_modules/mout/string/ltrim.js
 create mode 100644 node_modules/mout/string/makePath.js
 create mode 100644 node_modules/mout/string/normalizeLineBreaks.js
 create mode 100644 node_modules/mout/string/pascalCase.js
 create mode 100644 node_modules/mout/string/properCase.js
 create mode 100644 node_modules/mout/string/removeNonASCII.js
 create mode 100644 node_modules/mout/string/removeNonWord.js
 create mode 100644 node_modules/mout/string/repeat.js
 create mode 100644 node_modules/mout/string/replace.js
 create mode 100644 node_modules/mout/string/replaceAccents.js
 create mode 100644 node_modules/mout/string/rpad.js
 create mode 100644 node_modules/mout/string/rtrim.js
 create mode 100644 node_modules/mout/string/sentenceCase.js
 create mode 100644 node_modules/mout/string/slugify.js
 create mode 100644 node_modules/mout/string/startsWith.js
 create mode 100644 node_modules/mout/string/stripHtmlTags.js
 create mode 100644 node_modules/mout/string/trim.js
 create mode 100644 node_modules/mout/string/truncate.js
 create mode 100644 node_modules/mout/string/typecast.js
 create mode 100644 node_modules/mout/string/unCamelCase.js
 create mode 100644 node_modules/mout/string/underscore.js
 create mode 100644 node_modules/mout/string/unescapeHtml.js
 create mode 100644 node_modules/mout/string/unescapeUnicode.js
 create mode 100644 node_modules/mout/string/unhyphenate.js
 create mode 100644 node_modules/mout/string/upperCase.js
 create mode 100644 node_modules/mout/time.js
 create mode 100644 node_modules/mout/time/convert.js
 create mode 100644 node_modules/mout/time/now.js
 create mode 100644 node_modules/mout/time/parseMs.js
 create mode 100644 node_modules/mout/time/toTimeString.js
 create mode 100644 node_modules/nyks/.travis.yml
 create mode 100644 node_modules/nyks/README.md
 create mode 100644 node_modules/nyks/array/pickIn.js
 create mode 100644 node_modules/nyks/array/reindex.js
 create mode 100644 node_modules/nyks/array/sum.js
 create mode 100644 node_modules/nyks/async/dict.js
 create mode 100644 node_modules/nyks/async/dictLimit.js
 create mode 100644 node_modules/nyks/async/dispatcher.js
 create mode 100644 node_modules/nyks/async/throttle.js
 create mode 100644 node_modules/nyks/buffer/fromASCII.js
 create mode 100644 node_modules/nyks/buffer/fromInt.js
 create mode 100644 node_modules/nyks/buffer/indexOf.js
 create mode 100644 node_modules/nyks/buffer/readUInt.js
 create mode 100644 node_modules/nyks/buffer/writeBits.js
 create mode 100644 node_modules/nyks/child_process/exec.js
 create mode 100644 node_modules/nyks/child_process/passthru.js
 create mode 100644 node_modules/nyks/child_process/wait.js
 create mode 100644 node_modules/nyks/cli/box.js
 create mode 100644 node_modules/nyks/collection/reindex.js
 create mode 100644 node_modules/nyks/color/Int2RGBA.js
 create mode 100644 node_modules/nyks/color/RGB2HTML.js
 create mode 100644 node_modules/nyks/color/RGBA2Int.js
 create mode 100644 node_modules/nyks/crypto/md5.js
 create mode 100644 node_modules/nyks/crypto/openssh2pem.js
 create mode 100644 node_modules/nyks/crypto/pemme.js
 create mode 100644 node_modules/nyks/date/getSeason.js
 create mode 100644 node_modules/nyks/date/strftime.js
 create mode 100644 node_modules/nyks/fs/JSON.js
 create mode 100644 node_modules/nyks/fs/copyFile.js
 create mode 100644 node_modules/nyks/fs/deleteFolderRecursive.js
 create mode 100644 node_modules/nyks/fs/filemtimeSync.js
 create mode 100644 node_modules/nyks/fs/filesizeSync.js
 create mode 100644 node_modules/nyks/fs/getFolderSize.js
 create mode 100644 node_modules/nyks/fs/isDirectorySync.js
 create mode 100644 node_modules/nyks/fs/isFileSync.js
 create mode 100644 node_modules/nyks/fs/md5File.js
 create mode 100644 node_modules/nyks/fs/md5FileSync.js
 create mode 100644 node_modules/nyks/fs/mkdirpSync.js
 create mode 100644 node_modules/nyks/fs/readFileJSONSync.js
 create mode 100644 node_modules/nyks/fs/sha1File.js
 create mode 100644 node_modules/nyks/fs/tmppath.js
 create mode 100644 node_modules/nyks/fs/walkFolderStatsRecursive.js
 create mode 100644 node_modules/nyks/function/detach.js
 create mode 100644 node_modules/nyks/function/once.js
 create mode 100644 node_modules/nyks/function/promisify.js
 create mode 100644 node_modules/nyks/function/sleep.js
 create mode 100644 node_modules/nyks/function/thunk.js
 create mode 100644 node_modules/nyks/function/unary.js
 create mode 100644 node_modules/nyks/http/get.js
 create mode 100644 node_modules/nyks/http/getContents.js
 create mode 100644 node_modules/nyks/http/header/cookie.js
 create mode 100644 node_modules/nyks/http/header/parse.js
 create mode 100644 node_modules/nyks/http/request.js
 create mode 100644 node_modules/nyks/index.js
 create mode 100644 node_modules/nyks/lang/toBool.js
 create mode 100644 node_modules/nyks/math/log10.js
 create mode 100644 node_modules/nyks/math/log2.js
 create mode 100644 node_modules/nyks/node_modules/mout/.editorconfig
 create mode 100644 node_modules/nyks/node_modules/mout/.jshintrc
 create mode 100644 node_modules/nyks/node_modules/mout/.travis.yml
 create mode 100644 node_modules/nyks/node_modules/mout/CHANGELOG.md
 create mode 100644 node_modules/nyks/node_modules/mout/CONTRIBUTING.md
 create mode 100644 node_modules/nyks/node_modules/mout/LICENSE.md
 create mode 100644 node_modules/nyks/node_modules/mout/README.md
 create mode 100644 node_modules/nyks/node_modules/mout/array.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/append.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/collect.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/combine.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/compact.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/difference.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/equals.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/every.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/filter.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/find.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/findIndex.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/findLast.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/findLastIndex.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/flatten.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/forEach.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/groupBy.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/indexOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/indicesOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/insert.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/intersection.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/invoke.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/join.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/last.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/lastIndexOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/max.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/min.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/pick.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/pluck.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/range.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/reduce.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/reduceRight.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/reject.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/remove.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/removeAll.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/reverse.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/shuffle.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/slice.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/some.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/sort.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/sortBy.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/split.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/take.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/toLookup.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/union.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/unique.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/xor.js
 create mode 100644 node_modules/nyks/node_modules/mout/array/zip.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/every.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/filter.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/find.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/forEach.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/make_.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/max.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/min.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/pluck.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/reduce.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/reject.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/size.js
 create mode 100644 node_modules/nyks/node_modules/mout/collection/some.js
 create mode 100644 node_modules/nyks/node_modules/mout/date.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/dayOfTheYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/diff.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/i18n/de-DE.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/i18n/en-US.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/i18n/pt-BR.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/i18n/ru.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/i18n_.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/isLeapYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/isSame.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/parseIso.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/quarter.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/startOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/strftime.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/timezoneAbbr.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/timezoneOffset.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/totalDaysInMonth.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/totalDaysInYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/date/weekOfTheYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/doc/array.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/collection.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/date.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/function.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/lang.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/math.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/number.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/object.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/queryString.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/random.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/string.md
 create mode 100644 node_modules/nyks/node_modules/mout/doc/time.md
 create mode 100644 node_modules/nyks/node_modules/mout/function.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/after.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/awaitDelay.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/bind.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/compose.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/constant.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/debounce.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/func.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/identity.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/makeIterator_.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/memoize.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/partial.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/prop.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/series.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/throttle.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/timeout.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/times.js
 create mode 100644 node_modules/nyks/node_modules/mout/function/wrap.js
 create mode 100644 node_modules/nyks/node_modules/mout/index.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/GLOBAL.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/clone.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/createObject.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/ctorApply.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/deepClone.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/deepEquals.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/defaults.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/inheritPrototype.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/is.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isArguments.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isArray.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isBoolean.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isDate.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isEmpty.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isFinite.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isFunction.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isInteger.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isKind.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isNaN.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isNull.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isNumber.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isObject.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isPlainObject.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isPrimitive.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isRegExp.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isString.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isUndefined.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/isnt.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/kindOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/toArray.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/toNumber.js
 create mode 100644 node_modules/nyks/node_modules/mout/lang/toString.js
 create mode 100644 node_modules/nyks/node_modules/mout/math.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/ceil.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/clamp.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/countSteps.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/floor.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/inRange.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/isNear.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/lerp.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/loop.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/norm.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/overflow.js
 create mode 100644 node_modules/nyks/node_modules/mout/math/round.js
 create mode 100644 node_modules/nyks/node_modules/mout/number.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/MAX_INT.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/MAX_SAFE_INTEGER.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/MAX_UINT.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/MIN_INT.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/abbreviate.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/currencyFormat.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/enforcePrecision.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/isNaN.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/nth.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/ordinal.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/pad.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/rol.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/ror.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/sign.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/toInt.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/toUInt.js
 create mode 100644 node_modules/nyks/node_modules/mout/number/toUInt31.js
 create mode 100644 node_modules/nyks/node_modules/mout/object.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/bindAll.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/deepFillIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/deepMatches.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/deepMixIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/equals.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/every.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/fillIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/filter.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/find.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/flatten.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/forIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/forOwn.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/functions.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/get.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/has.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/hasOwn.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/keys.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/matches.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/max.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/merge.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/min.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/mixIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/namespace.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/omit.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/pick.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/pluck.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/reduce.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/reject.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/result.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/set.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/size.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/some.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/unset.js
 create mode 100644 node_modules/nyks/node_modules/mout/object/values.js
 create mode 100644 node_modules/nyks/node_modules/mout/package.json
 create mode 100644 node_modules/nyks/node_modules/mout/queryString.js
 create mode 100644 node_modules/nyks/node_modules/mout/queryString/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/queryString/decode.js
 create mode 100644 node_modules/nyks/node_modules/mout/queryString/encode.js
 create mode 100644 node_modules/nyks/node_modules/mout/queryString/getParam.js
 create mode 100644 node_modules/nyks/node_modules/mout/queryString/getQuery.js
 create mode 100644 node_modules/nyks/node_modules/mout/queryString/parse.js
 create mode 100644 node_modules/nyks/node_modules/mout/queryString/setParam.js
 create mode 100644 node_modules/nyks/node_modules/mout/random.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/choice.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/guid.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/rand.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/randBit.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/randBool.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/randHex.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/randInt.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/randSign.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/randString.js
 create mode 100644 node_modules/nyks/node_modules/mout/random/random.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/append.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/collect.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/combine.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/compact.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/difference.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/equals.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/every.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/filter.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/find.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/findIndex.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/findLast.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/findLastIndex.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/flatten.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/forEach.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/groupBy.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/indexOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/indicesOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/insert.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/intersection.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/invoke.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/join.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/last.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/lastIndexOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/max.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/min.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/pick.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/pluck.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/range.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/reduce.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/reduceRight.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/reject.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/remove.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/removeAll.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/reverse.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/shuffle.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/slice.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/some.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/sort.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/sortBy.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/split.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/take.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/toLookup.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/union.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/unique.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/xor.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/array/zip.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/every.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/filter.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/find.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/forEach.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/make_.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/max.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/min.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/pluck.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/reduce.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/reject.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/size.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/collection/some.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/dayOfTheYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/diff.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/i18n/de-DE.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/i18n/en-US.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/i18n/pt-BR.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/i18n/ru.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/i18n_.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/isLeapYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/isSame.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/parseIso.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/quarter.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/startOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/strftime.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/timezoneAbbr.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/timezoneOffset.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/totalDaysInMonth.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/totalDaysInYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/date/weekOfTheYear.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/after.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/awaitDelay.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/bind.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/compose.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/constant.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/debounce.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/func.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/identity.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/makeIterator_.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/memoize.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/partial.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/prop.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/series.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/throttle.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/timeout.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/times.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/function/wrap.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/index.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/GLOBAL.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/clone.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/createObject.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/ctorApply.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/deepClone.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/deepEquals.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/defaults.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/inheritPrototype.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/is.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isArguments.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isArray.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isBoolean.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isDate.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isEmpty.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isFinite.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isFunction.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isInteger.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isKind.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isNaN.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isNull.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isNumber.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isObject.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isPlainObject.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isPrimitive.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isRegExp.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isString.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isUndefined.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/isnt.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/kindOf.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/toArray.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/toNumber.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/lang/toString.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/ceil.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/clamp.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/countSteps.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/floor.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/inRange.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/isNear.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/lerp.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/loop.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/norm.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/overflow.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/math/round.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/MAX_INT.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/MAX_SAFE_INTEGER.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/MAX_UINT.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/MIN_INT.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/abbreviate.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/currencyFormat.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/enforcePrecision.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/isNaN.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/nth.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/ordinal.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/pad.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/rol.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/ror.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/sign.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/toInt.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/toUInt.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/number/toUInt31.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/bindAll.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/deepFillIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/deepMatches.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/deepMixIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/equals.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/every.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/fillIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/filter.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/find.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/flatten.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/forIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/forOwn.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/functions.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/get.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/has.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/hasOwn.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/keys.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/map.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/matches.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/max.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/merge.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/min.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/mixIn.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/namespace.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/omit.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/pick.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/pluck.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/reduce.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/reject.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/result.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/set.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/size.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/some.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/unset.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/object/values.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString/decode.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString/encode.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString/getParam.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString/getQuery.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString/parse.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/queryString/setParam.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/choice.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/guid.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/rand.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/randBit.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/randBool.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/randHex.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/randInt.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/randSign.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/randString.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/random/random.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/WHITE_SPACES.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/camelCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/crop.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/endsWith.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/escapeHtml.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/escapeRegExp.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/escapeUnicode.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/hyphenate.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/insert.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/interpolate.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/lowerCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/lpad.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/ltrim.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/makePath.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/normalizeLineBreaks.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/pascalCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/properCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/removeNonASCII.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/removeNonWord.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/repeat.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/replace.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/replaceAccents.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/rpad.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/rtrim.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/sentenceCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/slugify.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/startsWith.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/stripHtmlTags.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/trim.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/truncate.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/typecast.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/unCamelCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/underscore.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/unescapeHtml.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/unescapeUnicode.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/unhyphenate.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/string/upperCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/time.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/time/convert.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/time/now.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/time/parseMs.js
 create mode 100644 node_modules/nyks/node_modules/mout/src/time/toTimeString.js
 create mode 100644 node_modules/nyks/node_modules/mout/string.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/WHITE_SPACES.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/camelCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/contains.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/crop.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/endsWith.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/escapeHtml.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/escapeRegExp.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/escapeUnicode.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/hyphenate.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/insert.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/interpolate.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/lowerCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/lpad.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/ltrim.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/makePath.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/normalizeLineBreaks.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/pascalCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/properCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/removeNonASCII.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/removeNonWord.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/repeat.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/replace.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/replaceAccents.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/rpad.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/rtrim.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/sentenceCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/slugify.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/startsWith.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/stripHtmlTags.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/trim.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/truncate.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/typecast.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/unCamelCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/underscore.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/unescapeHtml.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/unescapeUnicode.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/unhyphenate.js
 create mode 100644 node_modules/nyks/node_modules/mout/string/upperCase.js
 create mode 100644 node_modules/nyks/node_modules/mout/time.js
 create mode 100644 node_modules/nyks/node_modules/mout/time/convert.js
 create mode 100644 node_modules/nyks/node_modules/mout/time/now.js
 create mode 100644 node_modules/nyks/node_modules/mout/time/parseMs.js
 create mode 100644 node_modules/nyks/node_modules/mout/time/toTimeString.js
 create mode 100644 node_modules/nyks/object/combine.js
 create mode 100644 node_modules/nyks/object/indexOf.js
 create mode 100644 node_modules/nyks/object/jsonpath.js
 create mode 100644 node_modules/nyks/object/mask.js
 create mode 100644 node_modules/nyks/object/sort.js
 create mode 100644 node_modules/nyks/package.json
 create mode 100644 node_modules/nyks/path/extend.js
 create mode 100644 node_modules/nyks/path/which.js
 create mode 100644 node_modules/nyks/process/parseArgs.js
 create mode 100644 node_modules/nyks/process/splitArgs.js
 create mode 100644 node_modules/nyks/promise/defer.js
 create mode 100644 node_modules/nyks/promise/nodeify.js
 create mode 100644 node_modules/nyks/promise/throttle.js
 create mode 100644 node_modules/nyks/src/resolver.js
 create mode 100644 node_modules/nyks/stream/fromBuffer.js
 create mode 100644 node_modules/nyks/string/chunk.js
 create mode 100644 node_modules/nyks/string/crc32.LICENSE
 create mode 100644 node_modules/nyks/string/crc32.js
 create mode 100644 node_modules/nyks/string/format.js
 create mode 100644 node_modules/nyks/string/hexToRgb.js
 create mode 100644 node_modules/nyks/string/repeat.js
 create mode 100644 node_modules/nyks/string/replaces.js
 create mode 100644 node_modules/nyks/string/rot13.js
 create mode 100644 node_modules/nyks/string/rreplaces.js
 create mode 100644 node_modules/nyks/string/sprintf.LICENSE
 create mode 100644 node_modules/nyks/string/sprintf.js
 create mode 100644 node_modules/nyks/string/stripEnd.js
 create mode 100644 node_modules/nyks/string/stripStart.js
 create mode 100644 node_modules/nyks/string/truncate.js
 create mode 100644 node_modules/oauth/.npmignore
 create mode 100644 node_modules/oauth/LICENSE
 create mode 100644 node_modules/oauth/Makefile
 create mode 100644 node_modules/oauth/Readme.md
 create mode 100644 node_modules/oauth/examples/express-gdata/server.js
 create mode 100644 node_modules/oauth/examples/express-gdata/views/google_calendars.ejs
 create mode 100644 node_modules/oauth/examples/express-gdata/views/google_contacts.ejs
 create mode 100644 node_modules/oauth/examples/express-gdata/views/layout.ejs
 create mode 100644 node_modules/oauth/examples/github-example.js
 create mode 100644 node_modules/oauth/examples/term.ie.oauth-HMAC-SHA1.js
 create mode 100644 node_modules/oauth/examples/twitter-example.js
 create mode 100644 node_modules/oauth/index.js
 create mode 100644 node_modules/oauth/lib/_utils.js
 create mode 100644 node_modules/oauth/lib/oauth.js
 create mode 100644 node_modules/oauth/lib/oauth2.js
 create mode 100644 node_modules/oauth/lib/sha1.js
 create mode 100644 node_modules/oauth/package.json
 create mode 100644 node_modules/oauth/tests/oauth2tests.js
 create mode 100644 node_modules/oauth/tests/oauthtests.js
 create mode 100644 node_modules/oauth/tests/sha1tests.js
 create mode 100644 node_modules/oauth/tests/shared.js
 create mode 100644 node_modules/openssl/.npmignore
 create mode 100644 node_modules/openssl/index.js
 create mode 100644 node_modules/openssl/package.json
 create mode 100644 node_modules/passport-facebook/.github/ISSUE_TEMPLATE.md
 create mode 100644 node_modules/passport-facebook/.github/PULL_REQUEST_TEMPLATE.md
 create mode 100644 node_modules/passport-facebook/.npmignore
 create mode 100644 node_modules/passport-facebook/CONTRIBUTING.md
 create mode 100644 node_modules/passport-facebook/LICENSE
 create mode 100644 node_modules/passport-facebook/README.md
 create mode 100644 node_modules/passport-facebook/lib/errors/facebookauthorizationerror.js
 create mode 100644 node_modules/passport-facebook/lib/errors/facebookgraphapierror.js
 create mode 100644 node_modules/passport-facebook/lib/errors/facebooktokenerror.js
 create mode 100644 node_modules/passport-facebook/lib/index.js
 create mode 100644 node_modules/passport-facebook/lib/profile.js
 create mode 100644 node_modules/passport-facebook/lib/strategy.js
 create mode 100644 node_modules/passport-facebook/package.json
 create mode 100644 node_modules/passport-oauth2/.npmignore
 create mode 100644 node_modules/passport-oauth2/LICENSE
 create mode 100644 node_modules/passport-oauth2/README.md
 create mode 100644 node_modules/passport-oauth2/lib/errors/authorizationerror.js
 create mode 100644 node_modules/passport-oauth2/lib/errors/internaloautherror.js
 create mode 100644 node_modules/passport-oauth2/lib/errors/tokenerror.js
 create mode 100644 node_modules/passport-oauth2/lib/index.js
 create mode 100644 node_modules/passport-oauth2/lib/state/null.js
 create mode 100644 node_modules/passport-oauth2/lib/state/session.js
 create mode 100644 node_modules/passport-oauth2/lib/strategy.js
 create mode 100644 node_modules/passport-oauth2/lib/utils.js
 create mode 100644 node_modules/passport-oauth2/package.json
 create mode 100644 node_modules/uid2/LICENSE
 create mode 100644 node_modules/uid2/index.js
 create mode 100644 node_modules/uid2/package.json
 delete mode 100644 public/admin.html
 delete mode 100644 public/index2.html
 delete mode 100644 public/login.html
 create mode 100644 routes/user.js
 create mode 100644 server.cert
 create mode 100644 server.key

diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..3c58ef6
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,14 @@
+{
+    // Use IntelliSense para saber los atributos posibles.
+    // Mantenga el puntero para ver las descripciones de los existentes atributos 
+    // Para más información, visite: https://go.microsoft.com/fwlink/?linkid=830387
+    "version": "0.2.0",
+    "configurations": [
+        {
+            "type": "node",
+            "request": "launch",
+            "name": "GBM",
+            "program": "${workspaceFolder}\\index.js"
+        }
+    ]
+}
\ No newline at end of file
diff --git a/controllers/users.js b/controllers/users.js
deleted file mode 100644
index faa2f84..0000000
--- a/controllers/users.js
+++ /dev/null
@@ -1,63 +0,0 @@
-const JWT = require('jsonwebtoken');
-const User = require('../models/user');
-const { JWT_SECRET } = require('../configuration');
-
-signToken = user => {
-  return JWT.sign({
-    iss: 'CodeWorkr',
-    sub: user.id,
-    iat: new Date().getTime(), // current time
-    exp: new Date().setDate(new Date().getDate() + 1) // current time + 1 day ahead
-  }, JWT_SECRET);
-}
-
-module.exports = {
-  signUp: async (req, res, next) => {
-    const { email, password } = req.value.body;
-
-    // Check if there is a user with the same email
-    const foundUser = await User.findOne({ "local.email": email });
-    if (foundUser) { 
-      return res.status(403).json({ error: 'Email is already in use'});
-    }
-
-    // Create a new user
-    const newUser = new User({ 
-      method: 'local',
-      local: {
-        email: email, 
-        password: password
-      }
-    });
-
-    await newUser.save();
-
-    // Generate the token
-    const token = signToken(newUser);
-    // Respond with token
-    res.status(200).json({ token });
-  },
-
-  signIn: async (req, res, next) => {
-    // Generate token
-    const token = signToken(req.user);
-    res.status(200).json({ token });
-  },
-
-  googleOAuth: async (req, res, next) => {
-    // Generate token
-    const token = signToken(req.user);
-    res.status(200).json({ token });
-  },
-
-  facebookOAuth: async (req, res, next) => {
-    // Generate token
-    const token = signToken(req.user);
-    res.status(200).json({ token });
-  },
-
-  secret: async (req, res, next) => {
-    console.log('I managed to get here!');
-    res.json({ secret: "resource" });
-  }
-}
\ No newline at end of file
diff --git a/index.js b/index.js
index bd48314..a156851 100644
--- a/index.js
+++ b/index.js
@@ -8,6 +8,8 @@ const User = require('./models/user');
 const path = require('path');
 const flash = require('connect-flash');
 const config = require('./configuration');
+const fs = require('fs');
+const https = require('https');
 
 require('./passport')(passport)
 
@@ -71,6 +73,14 @@ app.use(function (req, res, next) {
 
 //Star ther server
 const port = process.env.PORT || 3000;
-app.listen(port);
 
-console.log(`Servidor escuchando en el puerto ${port}`);
\ No newline at end of file
+https.createServer({
+  key: fs.readFileSync('server.key'),
+  cert: fs.readFileSync('server.cert')
+}, app).listen(port, function () {
+  console.log('Servidor escuchando en el puerto 3000! ve a https://localhost:3000/')
+})
+
+
+
+//console.log(`Servidor escuchando en el puerto ${port}`);
\ No newline at end of file
diff --git a/node_modules/mout/.editorconfig b/node_modules/mout/.editorconfig
new file mode 100644
index 0000000..faaf0d3
--- /dev/null
+++ b/node_modules/mout/.editorconfig
@@ -0,0 +1,20 @@
+; EditorConfig is awesome: http://EditorConfig.org
+
+; top-most EditorConfig file
+root = true
+
+; base rules
+[*]
+end_of_line = lf
+insert_final_newline = false
+indent_style = space
+indent_size = 4
+charset = utf-8
+trim_trailing_whitespace = true
+
+; The default indent on package.json is 2 spaces, better to keep it so we can
+; use `npm install --save` and other features that rewrites the package.json
+; file automatically
+[{bower,package}.json]
+indent_style = space
+indent_size = 2
diff --git a/node_modules/mout/.jshintrc b/node_modules/mout/.jshintrc
new file mode 100644
index 0000000..bbdb29c
--- /dev/null
+++ b/node_modules/mout/.jshintrc
@@ -0,0 +1,69 @@
+{
+    // Settings
+    "passfail"      : false, // Stop on first error.
+    "maxerr"        : 50,    // Maximum error before stopping.
+
+
+    // Predefined globals whom JSHint will ignore.
+    "browser"       : true,  // Standard browser globals e.g. `window`, `document`.
+    "couch"         : false,
+    "dojo"          : false,
+    "jquery"        : true,
+    "mootools"      : false,
+    "node"          : false,
+    "prototypejs"   : false,
+    "rhino"         : false,
+    "wsh"           : false,
+
+    // Custom globals.
+    "predef"        : [
+        "define",
+        "require"
+    ],
+
+
+    // Development.
+    "debug"         : false, // Allow debugger statements e.g. browser breakpoints.
+    "devel"         : false, // Allow developments statements e.g. `console.log();`.
+
+
+    // EcmaScript 5.
+    "es5"           : false, // Allow EcmaScript 5 syntax.
+    "globalstrict"  : false, // Allow global "use strict" (also enables 'strict').
+    "strict"        : false, // Require `use strict` pragma  in every file.
+
+
+    // The Good Parts.
+    "asi"           : false, // Tolerate Automatic Semicolon Insertion (no semicolons).
+    "bitwise"       : false, // Prohibit bitwise operators (&, |, ^, etc.).
+    "boss"          : true,  // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
+    "curly"         : false, // Require {} for every new block or scope.
+    "eqeqeq"        : true,  // Require triple equals i.e. `===`.
+    "eqnull"        : true,  // Tolerate use of `== null`.
+    "evil"          : false, // Tolerate use of `eval`.
+    "expr"          : false, // Tolerate `ExpressionStatement` as Programs.
+    "forin"         : false, // Tolerate `for in` loops without `hasOwnPrototype`.
+    "immed"         : true,  // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
+    "latedef"       : false, // Prohibit variable use before definition.
+    "laxbreak"      : false, // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
+    "loopfunc"      : false, // Allow functions to be defined within loops.
+    "noarg"         : true,  // Prohibit use of `arguments.caller` and `arguments.callee`.
+    "regexdash"     : true,  // Tolerate unescaped last dash i.e. `[-...]`.
+    "regexp"        : false, // Prohibit `.` and `[^...]` in regular expressions.
+    "scripturl"     : false, // Tolerate script-targeted URLs.
+    "shadow"        : false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
+    "supernew"      : false, // Tolerate `new function () { ... };` and `new Object;`.
+    "undef"         : false, // Require all non-global variables be declared before they are used.
+
+
+    // Personal styling prefrences.
+    "newcap"        : true,  // Require capitalization of all constructor functions e.g. `new F()`.
+    "noempty"       : true,  // Prohipit use of empty blocks.
+    "nomen"         : false, // Prohibit use of initial or trailing underbars in names.
+    "nonew"         : true,  // Prohibit use of constructors for side-effects.
+    "onevar"        : false, // Allow only one `var` statement per function.
+    "plusplus"      : false, // Prohibit use of `++` & `--`.
+    "sub"           : false, // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
+    "trailing"      : true,  // Prohibit trailing whitespaces.
+    "white"         : false  // Check against strict whitespace and indentation rules.
+}
diff --git a/node_modules/mout/.npmignore b/node_modules/mout/.npmignore
new file mode 100644
index 0000000..1341acd
--- /dev/null
+++ b/node_modules/mout/.npmignore
@@ -0,0 +1,30 @@
+# dumb files
+# ==========
+
+.tmp*
+.project
+.settings/
+.livereload
+.DS_Store?
+ehthumbs.db
+Icon?
+Thumbs.db
+
+
+# stuff not needed by node
+# ========================
+
+node_modules/
+tests/
+_build/
+doc_html/
+coverage/
+
+# we keep the doc/ folder in case npm decides to display it in the future
+# also good in case user is using an old version or working offline
+
+# we also keep the src/ folder in case the user still needs the AMD modules
+# after build (see issue #102)
+
+bower.json
+build.js
diff --git a/node_modules/mout/.travis.yml b/node_modules/mout/.travis.yml
new file mode 100644
index 0000000..2ea0044
--- /dev/null
+++ b/node_modules/mout/.travis.yml
@@ -0,0 +1,18 @@
+ language: node_js
+ node_js:
+   - "iojs"
+   - "0.10"
+   - "0.12"
+ script:
+   - "npm test --coverage"
+   - "jshint src"
+ notifications:
+  irc:
+    channels:
+      - "irc.freenode.org#moutjs"
+    on_success: change
+    on_failure: always
+    use_notice: true
+    skip_join: true
+ git:
+   depth: 10
diff --git a/node_modules/mout/CHANGELOG.md b/node_modules/mout/CHANGELOG.md
new file mode 100644
index 0000000..f405915
--- /dev/null
+++ b/node_modules/mout/CHANGELOG.md
@@ -0,0 +1,189 @@
+mout changelog
+==============
+
+v0.11.0 (2014/11/17)
+--------------------
+
+ - add `array/take`;
+ - remove unused variable from `date/totalDaysInMonth`;
+ - fix case insensitive RegExp cloning on `lang/clone`;
+
+
+v0.10.0 (2014/09/02)
+--------------------
+
+ - add `array/equals`;
+ - add `array/groupBy`;
+ - add `array/last`;
+ - add `function/wrap`;
+ - add `lang/GLOBAL`;
+ - add `lang/isPrimitive`;
+ - add `number/MAX_SAFE_INTEGER`;
+ - add `object/omit`;
+ - add `object/result`;
+ - add `object/result`;
+ - add `random/randString`;
+ - change `lang/isEmpty` behavior to return `true` for any value that isn't
+   a collection.
+ - fix `array/findLastIndex` to stop at zero index;
+ - improve `function/partial` to accept placeholders;
+ - improve `math.norm` behavior for values outside the range and for cases
+   where `val === min === max`;
+ - improve `object/get` behavior to return properties from any value that is
+   not `null` or `undefined`;
+ - move `object/deepEquals` to `lang/deepEquals` (improving the behavior);
+
+
+v0.9.1 (2014/04/08)
+-------------------
+
+ - fix `array/slice` behavior when start and end are higher than length.
+
+
+v0.9.0 (2014/02/04)
+-------------------
+
+ - add `date/quarter`;
+ - add `function/constant`;
+ - add `random/randBool`;
+ - add un-padded 12-hour (`%l`) to `date/strftime`;
+ - fix `array/slice` on IE < 9 by using a custom implementation.
+ - fix `object/forIn` iteration for IE < 9 constructor property;
+ - improve `lang/inheritPrototype` by returning the `prototype`;
+ - improve `string/removeNonWord` to cover more chars;
+ - improve `string/repeat` performance;
+ - improve `string/unescapeHtml` by accepting leading zeros for `&#39`;
+
+
+v0.8.0 (2013/11/22)
+-------------------
+
+ - add `array/findLast`.
+ - add `array/findLastIndex`.
+ - add `array/slice` and use it internally.
+ - add `array/sortBy`
+ - add `function/awaitDelay`.
+ - add `function/identity`
+ - add `number/isNaN`.
+ - add `number/nth`.
+ - add `number/ordinal`.
+ - allows nested replacement patterns in `string/interpolate`.
+ - change `function/makeIterator_` behavior (uses `identity` by default).
+ - simplify `string/escapeRegExp`.
+ - support custom equality on `array/compare`.
+
+
+v0.7.1 (2013/09/18)
+-------------------
+
+ - fix `null` value handling in object/get.
+
+
+v0.7.0 (2013/09/05)
+-------------------
+
+ - add bower ignores.
+ - add german translation for date localization.
+ - alias `function` package as `fn` since "function" is a reserved keyword.
+ - allow second argument on `array/pick`.
+ - improve `string/makePath` to not remove "//" after protocol.
+ - make sure methods inside `number` package works with mixed types.
+ - support arrays on `queryString/encode`.
+ - support multiple values for same property on `queryString/decode`.
+ - add `cancel()` method to `throttled/debounced` functions.
+ - add `function/times`.
+ - add `lang/toNumber`.
+ - add `string/insert`.
+ - add `super_` to constructor on `lang/inheritPrototype`.
+
+
+v0.6.0 (2013/05/22)
+-------------------
+
+ - add optional delimeter to `string/unCamelCase`
+ - allow custom char on `number/pad`
+ - allow underscore characters in `string/removeNonWord`
+ - accept `level` on `array/flatten` instead of a flag
+ - convert underscores to camelCase in `string/camelCase`
+ - remove `create()` from number/currencyFormat
+ - add `date/dayOfTheYear`
+ - add `date/diff`
+ - add `date/isSame`
+ - add `date/startOf`
+ - add `date/strftime`
+ - add `date/timezoneAbbr`
+ - add `date/timezoneOffset`
+ - add `date/totalDaysInYear`
+ - add `date/weekOfTheYear`
+ - add `function/timeout`
+ - add `object/bindAll`
+ - add `object/functions`
+ - add `time/convert`
+
+
+v0.5.0 (2013/04/04)
+-------------------
+
+ - add `array/collect`
+ - add `callback` parameter to `object/equals` and `object/deepEquals` to allow
+   custom compare operations.
+ - normalize behavior in `array/*` methods to treat `null` values as empty
+   arrays when reading from array
+ - add `date/parseIso`
+ - add `date/isLeapYear`
+ - add `date/totalDaysInMonth`
+ - add `object/deepMatches`
+ - change `function/makeIterator_` to use `deepMatches` (affects nearly all
+   iteration methods)
+ - add `thisObj` parameter to `array/min` and `array/max`
+
+
+v0.4.0 (2013/02/26)
+-------------------
+
+ - add `object/equals`
+ - add `object/deepEquals`
+ - add `object/matches`.
+ - add `lang/is` and `lang/isnt`.
+ - add `lang/isInteger`.
+ - add `array/findIndex`.
+ - add shorthand syntax to `array/*`, `object/*` and `collection/*` methods.
+ - improve `number/sign` behavior when value is NaN or +0 or -0.
+ - improve `lang/isNaN` to actually check if value *is not a number* without
+   coercing value; so `[]`, `""`, `null` and `"12"` are considered NaN (#39).
+ - improve `string/contains` to match ES6 behavior (add fromIndex argument).
+
+
+v0.3.0 (2013/02/01)
+-------------------
+
+ - add `lang/clone`.
+ - add `lang/toString`.
+ - add `string/replace`.
+ - add `string/WHITE_SPACES`
+ - rename `function/curry` to `function/partial`.
+ - allow custom chars in `string/trim`, `ltrim`, and `rtrim`.
+ - convert values to strings in the `string/*` functions.
+
+
+v0.2.0 (2013/01/13)
+-------------------
+
+ - fix bug in `math/ceil` for negative radixes.
+ - change `object/deepFillIn` and `object/deepMixIn` to recurse only if both
+   existing and new values are plain objects. Will not recurse into arrays
+   or objects not created by the Object constructor.
+ - add `lang/isPlainObject` to check if a file is a valid object and is created
+   by the Object constructor
+ - change `lang/clone` behavior when dealing with custom types (avoid cloning
+   it by default) and add second argument to allow custom behavior if needed.
+ - rename `lang/clone` to `lang/deepClone`.
+ - add VERSION property to index.js
+ - simplify `math/floor`, `math/round`, `math/ceil` and `math/countSteps`.
+
+
+v0.1.0 (2013/01/09)
+-------------------
+
+- Rename project from "amd-utils" to "mout"
+
diff --git a/node_modules/mout/CONTRIBUTING.md b/node_modules/mout/CONTRIBUTING.md
new file mode 100644
index 0000000..65d9add
--- /dev/null
+++ b/node_modules/mout/CONTRIBUTING.md
@@ -0,0 +1,61 @@
+# Contributing
+
+Fork the repo at https://github.com/mout/mout
+
+ > "Write clearly, don't be too clever" - The Elements of Programming Style
+
+Avoid unnamed functions and follow the other modules structure. By only using named functions it will be easier to extract the code from the AMD module if needed and it will also give better error messages, JavaScript minifiers like [Google Closure Compiler](http://code.google.com/closure/compiler/) and [UglifyJS](https://github.com/mishoo/UglifyJS) will make sure code is as small/optimized as possible.
+
+ > "Make it clear before you make it faster." - The Elements of Programming Style
+
+Be sure to always create tests for each proposed module. Features will only be merged if they contain proper tests and documentation.
+
+ > "Good code is its own best documentation." - Steve McConnell
+
+We should do a code review before merging to make sure names makes sense and implementation is as good as possible.
+
+Try to split your pull requests into logical groups, the smaller the easier to be reviewed/merged.
+
+
+
+## Tests & Code Coverage ##
+
+Tests can be found inside the `tests` folder, to execute them in the browser open the `tests/runner.html`. The same tests also work on node.js by running `npm test`.
+
+We should have tests for all methods and ensure we have a high code coverage through our continuous integration server ([travis](https://travis-ci.org/mout/mout)). When you ask for a pull request Travis will automatically run the tests on node.js and check the code coverage as well.
+
+We run `node build pkg` automatically before any `npm test`, so specs and packages should always be in sync. (will avoid human mistakes)
+
+To check code coverage run `npm test --coverage`, it will generate the reports inside the `coverage` folder and also log the results. Please note that node.js doesn't execute all code branches since we have some conditionals that are only met on old JavaScript engines (eg. IE 7-8), so we will never have 100% code coverage (but should be close to it).
+
+
+
+## Build Script ##
+
+The [build script](https://github.com/mout/mout/wiki/Build-Script) can be extremely helpful and can avoid human mistakes, use it.
+
+
+
+## Admins / Pull Requests ##
+
+Even if you are an admin (have commit rights) please do pull requests when adding new features or changing current behavior, that way we can review the work and discuss. Feel free to push changes that doesn't affect behavior without asking for a pull request (readme, changelog, build script, typos, refactoring, ...).
+
+
+
+## Large changes ##
+
+If you are proposing some major change, please create an issue to discuss it first. (maybe it's outside the scope of the project)
+
+
+
+## Questions / IRC / Wiki / Issue Tracker ##
+
+When in doubt ask someone on IRC to help you ([#moutjs on irc.freenode.net](http://webchat.freenode.net/?channels=moutjs)) or create a [new issue](http://github.com/mout/mout/issues).
+
+The [project wiki](https://github.com/mout/mout/wiki) can also be a good resource of information.
+
+
+---
+
+Check the [contributors list at github](https://github.com/mout/mout/contributors).
+
diff --git a/node_modules/mout/LICENSE.md b/node_modules/mout/LICENSE.md
new file mode 100644
index 0000000..e9ccc2b
--- /dev/null
+++ b/node_modules/mout/LICENSE.md
@@ -0,0 +1,21 @@
+# The MIT License (MIT)
+## Copyright (c) 2012, 2013 moutjs team and contributors (http://moutjs.com)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+of the Software, and to permit persons to whom the Software is furnished to do
+so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+
diff --git a/node_modules/mout/README.md b/node_modules/mout/README.md
new file mode 100644
index 0000000..ebc3a9e
--- /dev/null
+++ b/node_modules/mout/README.md
@@ -0,0 +1,63 @@
+![mout](http://moutjs.com/logo.png "Modular JavaScript Utilties")
+
+http://moutjs.com/
+
+[![Build Status](https://travis-ci.org/mout/mout.svg?branch=master)](https://travis-ci.org/mout/mout)
+
+All code is library agnostic and consist mostly of helper methods that aren't
+directly related with the DOM, the purpose of this library isn't to replace
+Dojo, jQuery, YUI, Mootools, etc, but to provide modular solutions for common
+problems that aren't solved by most of them. Consider it as a crossbrowser
+JavaScript standard library.
+
+
+
+## Main goals ##
+
+ - increase code reuse;
+ - be clear (code should be clean/readable);
+ - be easy to debug;
+ - be easy to maintain;
+ - follow best practices;
+ - follow standards when possible;
+ - **don't convert JavaScript into another language!**
+ - be compatible with other frameworks;
+ - be modular;
+ - have unit tests for all modules;
+ - work on multiple environments (IE7+, modern browsers, node.js);
+
+
+
+## What shouldn't be here ##
+
+ - UI components;
+ - CSS selector engine;
+ - Event system - pub/sub;
+ - Template engine;
+ - Anything that isn't generic enough to be on a standard library;
+ - Anything that could be a separate library and/or isn't a modular utility...
+
+
+
+## API Documentation ##
+
+Online documentation can be found at http://moutjs.com/ or inside the
+`doc` folder.
+
+
+
+## FAQ / Wiki / IRC ##
+
+For more info about project structure, design decisions, tips, how to
+contribute, build system, etc, please check the [project
+wiki](https://github.com/mout/mout/wiki).
+
+We also have an IRC channel [#moutjs on
+irc.freenode.net](http://webchat.freenode.net/?channels=moutjs)
+
+
+
+## License ##
+
+Released under the [MIT License](http://www.opensource.org/licenses/mit-license.php).
+
diff --git a/node_modules/mout/array.js b/node_modules/mout/array.js
new file mode 100644
index 0000000..d0b7c04
--- /dev/null
+++ b/node_modules/mout/array.js
@@ -0,0 +1,55 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'append' : require('./array/append'),
+    'collect' : require('./array/collect'),
+    'combine' : require('./array/combine'),
+    'compact' : require('./array/compact'),
+    'contains' : require('./array/contains'),
+    'difference' : require('./array/difference'),
+    'equals' : require('./array/equals'),
+    'every' : require('./array/every'),
+    'filter' : require('./array/filter'),
+    'find' : require('./array/find'),
+    'findIndex' : require('./array/findIndex'),
+    'findLast' : require('./array/findLast'),
+    'findLastIndex' : require('./array/findLastIndex'),
+    'flatten' : require('./array/flatten'),
+    'forEach' : require('./array/forEach'),
+    'groupBy' : require('./array/groupBy'),
+    'indexOf' : require('./array/indexOf'),
+    'insert' : require('./array/insert'),
+    'intersection' : require('./array/intersection'),
+    'invoke' : require('./array/invoke'),
+    'join' : require('./array/join'),
+    'last' : require('./array/last'),
+    'lastIndexOf' : require('./array/lastIndexOf'),
+    'map' : require('./array/map'),
+    'max' : require('./array/max'),
+    'min' : require('./array/min'),
+    'pick' : require('./array/pick'),
+    'pluck' : require('./array/pluck'),
+    'range' : require('./array/range'),
+    'reduce' : require('./array/reduce'),
+    'reduceRight' : require('./array/reduceRight'),
+    'reject' : require('./array/reject'),
+    'remove' : require('./array/remove'),
+    'removeAll' : require('./array/removeAll'),
+    'reverse' : require('./array/reverse'),
+    'shuffle' : require('./array/shuffle'),
+    'slice' : require('./array/slice'),
+    'some' : require('./array/some'),
+    'sort' : require('./array/sort'),
+    'sortBy' : require('./array/sortBy'),
+    'split' : require('./array/split'),
+    'take' : require('./array/take'),
+    'toLookup' : require('./array/toLookup'),
+    'union' : require('./array/union'),
+    'unique' : require('./array/unique'),
+    'xor' : require('./array/xor'),
+    'zip' : require('./array/zip')
+};
+
+
diff --git a/node_modules/mout/array/append.js b/node_modules/mout/array/append.js
new file mode 100644
index 0000000..bf74037
--- /dev/null
+++ b/node_modules/mout/array/append.js
@@ -0,0 +1,21 @@
+
+
+    /**
+     * Appends an array to the end of another.
+     * The first array will be modified.
+     */
+    function append(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var pad = arr1.length,
+            i = -1,
+            len = arr2.length;
+        while (++i < len) {
+            arr1[pad + i] = arr2[i];
+        }
+        return arr1;
+    }
+    module.exports = append;
+
diff --git a/node_modules/mout/array/collect.js b/node_modules/mout/array/collect.js
new file mode 100644
index 0000000..5863749
--- /dev/null
+++ b/node_modules/mout/array/collect.js
@@ -0,0 +1,27 @@
+var append = require('./append');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Maps the items in the array and concatenates the result arrays.
+     */
+    function collect(arr, callback, thisObj){
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            var value = callback(arr[i], i, arr);
+            if (value != null) {
+                append(results, value);
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = collect;
+
+
diff --git a/node_modules/mout/array/combine.js b/node_modules/mout/array/combine.js
new file mode 100644
index 0000000..d66e621
--- /dev/null
+++ b/node_modules/mout/array/combine.js
@@ -0,0 +1,22 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * Combines an array with all the items of another.
+     * Does not allow duplicates and is case and type sensitive.
+     */
+    function combine(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var i = -1, len = arr2.length;
+        while (++i < len) {
+            if (indexOf(arr1, arr2[i]) === -1) {
+                arr1.push(arr2[i]);
+            }
+        }
+
+        return arr1;
+    }
+    module.exports = combine;
+
diff --git a/node_modules/mout/array/compact.js b/node_modules/mout/array/compact.js
new file mode 100644
index 0000000..74c176e
--- /dev/null
+++ b/node_modules/mout/array/compact.js
@@ -0,0 +1,13 @@
+var filter = require('./filter');
+
+    /**
+     * Remove all null/undefined items from array.
+     */
+    function compact(arr) {
+        return filter(arr, function(val){
+            return (val != null);
+        });
+    }
+
+    module.exports = compact;
+
diff --git a/node_modules/mout/array/contains.js b/node_modules/mout/array/contains.js
new file mode 100644
index 0000000..92bb6ad
--- /dev/null
+++ b/node_modules/mout/array/contains.js
@@ -0,0 +1,10 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * If array contains values.
+     */
+    function contains(arr, val) {
+        return indexOf(arr, val) !== -1;
+    }
+    module.exports = contains;
+
diff --git a/node_modules/mout/array/difference.js b/node_modules/mout/array/difference.js
new file mode 100644
index 0000000..ca57524
--- /dev/null
+++ b/node_modules/mout/array/difference.js
@@ -0,0 +1,23 @@
+var unique = require('./unique');
+var filter = require('./filter');
+var some = require('./some');
+var contains = require('./contains');
+var slice = require('./slice');
+
+
+    /**
+     * Return a new Array with elements that aren't present in the other Arrays.
+     */
+    function difference(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return !some(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    module.exports = difference;
+
+
diff --git a/node_modules/mout/array/equals.js b/node_modules/mout/array/equals.js
new file mode 100644
index 0000000..1a20430
--- /dev/null
+++ b/node_modules/mout/array/equals.js
@@ -0,0 +1,30 @@
+var is = require('../lang/is');
+var isArray = require('../lang/isArray');
+var every = require('./every');
+
+    /**
+     * Compares if both arrays have the same elements
+     */
+    function equals(a, b, callback){
+        callback = callback || is;
+
+        if (!isArray(a) || !isArray(b)) {
+            return callback(a, b);
+        }
+
+        if (a.length !== b.length) {
+            return false;
+        }
+
+        return every(a, makeCompare(callback), b);
+    }
+
+    function makeCompare(callback) {
+        return function(value, i) {
+            return i in this && callback(value, this[i]);
+        };
+    }
+
+    module.exports = equals;
+
+
diff --git a/node_modules/mout/array/every.js b/node_modules/mout/array/every.js
new file mode 100644
index 0000000..ac59883
--- /dev/null
+++ b/node_modules/mout/array/every.js
@@ -0,0 +1,27 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array every
+     */
+    function every(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (!callback(arr[i], i, arr) ) {
+                result = false;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    module.exports = every;
+
diff --git a/node_modules/mout/array/filter.js b/node_modules/mout/array/filter.js
new file mode 100644
index 0000000..f0e7419
--- /dev/null
+++ b/node_modules/mout/array/filter.js
@@ -0,0 +1,26 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array filter
+     */
+    function filter(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = filter;
+
+
diff --git a/node_modules/mout/array/find.js b/node_modules/mout/array/find.js
new file mode 100644
index 0000000..b4a7313
--- /dev/null
+++ b/node_modules/mout/array/find.js
@@ -0,0 +1,13 @@
+var findIndex = require('./findIndex');
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(arr, iterator, thisObj){
+        var idx = findIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    module.exports = find;
+
+
diff --git a/node_modules/mout/array/findIndex.js b/node_modules/mout/array/findIndex.js
new file mode 100644
index 0000000..53f22a5
--- /dev/null
+++ b/node_modules/mout/array/findIndex.js
@@ -0,0 +1,23 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Returns the index of the first item that matches criteria
+     */
+    function findIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (iterator(arr[i], i, arr)) {
+                return i;
+            }
+        }
+
+        return -1;
+    }
+
+    module.exports = findIndex;
+
diff --git a/node_modules/mout/array/findLast.js b/node_modules/mout/array/findLast.js
new file mode 100644
index 0000000..84ba4bf
--- /dev/null
+++ b/node_modules/mout/array/findLast.js
@@ -0,0 +1,13 @@
+var findLastIndex = require('./findLastIndex');
+
+    /**
+     * Returns last item that matches criteria
+     */
+    function findLast(arr, iterator, thisObj){
+        var idx = findLastIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    module.exports = findLast;
+
+
diff --git a/node_modules/mout/array/findLastIndex.js b/node_modules/mout/array/findLastIndex.js
new file mode 100644
index 0000000..b8330f2
--- /dev/null
+++ b/node_modules/mout/array/findLastIndex.js
@@ -0,0 +1,24 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Returns the index of the last item that matches criteria
+     */
+    function findLastIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var n = arr.length;
+        while (--n >= 0) {
+            if (iterator(arr[n], n, arr)) {
+                return n;
+            }
+        }
+
+        return -1;
+    }
+
+    module.exports = findLastIndex;
+
+
diff --git a/node_modules/mout/array/flatten.js b/node_modules/mout/array/flatten.js
new file mode 100644
index 0000000..3aad385
--- /dev/null
+++ b/node_modules/mout/array/flatten.js
@@ -0,0 +1,45 @@
+var isArray = require('../lang/isArray');
+var append = require('./append');
+
+    /*
+     * Helper function to flatten to a destination array.
+     * Used to remove the need to create intermediate arrays while flattening.
+     */
+    function flattenTo(arr, result, level) {
+        if (level === 0) {
+            append(result, arr);
+            return result;
+        }
+
+        var value,
+            i = -1,
+            len = arr.length;
+        while (++i < len) {
+            value = arr[i];
+            if (isArray(value)) {
+                flattenTo(value, result, level - 1);
+            } else {
+                result.push(value);
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Recursively flattens an array.
+     * A new array containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(arr, level) {
+        if (arr == null) {
+            return [];
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(arr, [], level);
+    }
+
+    module.exports = flatten;
+
+
+
diff --git a/node_modules/mout/array/forEach.js b/node_modules/mout/array/forEach.js
new file mode 100644
index 0000000..268e506
--- /dev/null
+++ b/node_modules/mout/array/forEach.js
@@ -0,0 +1,23 @@
+
+
+    /**
+     * Array forEach
+     */
+    function forEach(arr, callback, thisObj) {
+        if (arr == null) {
+            return;
+        }
+        var i = -1,
+            len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback.call(thisObj, arr[i], i, arr) === false ) {
+                break;
+            }
+        }
+    }
+
+    module.exports = forEach;
+
+
diff --git a/node_modules/mout/array/groupBy.js b/node_modules/mout/array/groupBy.js
new file mode 100644
index 0000000..af6f434
--- /dev/null
+++ b/node_modules/mout/array/groupBy.js
@@ -0,0 +1,30 @@
+var forEach = require('../array/forEach');
+var identity = require('../function/identity');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Bucket the array values.
+     */
+    function groupBy(arr, categorize, thisObj) {
+        if (categorize) {
+            categorize = makeIterator(categorize, thisObj);
+        } else {
+            // Default to identity function.
+            categorize = identity;
+        }
+
+        var buckets = {};
+        forEach(arr, function(element) {
+            var bucket = categorize(element);
+            if (!(bucket in buckets)) {
+                buckets[bucket] = [];
+            }
+
+            buckets[bucket].push(element);
+        });
+
+        return buckets;
+    }
+
+    module.exports = groupBy;
+
diff --git a/node_modules/mout/array/indexOf.js b/node_modules/mout/array/indexOf.js
new file mode 100644
index 0000000..6a9ac83
--- /dev/null
+++ b/node_modules/mout/array/indexOf.js
@@ -0,0 +1,28 @@
+
+
+    /**
+     * Array.indexOf
+     */
+    function indexOf(arr, item, fromIndex) {
+        fromIndex = fromIndex || 0;
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length,
+            i = fromIndex < 0 ? len + fromIndex : fromIndex;
+        while (i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[i] === item) {
+                return i;
+            }
+
+            i++;
+        }
+
+        return -1;
+    }
+
+    module.exports = indexOf;
+
diff --git a/node_modules/mout/array/insert.js b/node_modules/mout/array/insert.js
new file mode 100644
index 0000000..20bd442
--- /dev/null
+++ b/node_modules/mout/array/insert.js
@@ -0,0 +1,15 @@
+var difference = require('./difference');
+var slice = require('./slice');
+
+    /**
+     * Insert item into array if not already present.
+     */
+    function insert(arr, rest_items) {
+        var diff = difference(slice(arguments, 1), arr);
+        if (diff.length) {
+            Array.prototype.push.apply(arr, diff);
+        }
+        return arr.length;
+    }
+    module.exports = insert;
+
diff --git a/node_modules/mout/array/intersection.js b/node_modules/mout/array/intersection.js
new file mode 100644
index 0000000..34957ab
--- /dev/null
+++ b/node_modules/mout/array/intersection.js
@@ -0,0 +1,24 @@
+var unique = require('./unique');
+var filter = require('./filter');
+var every = require('./every');
+var contains = require('./contains');
+var slice = require('./slice');
+
+
+    /**
+     * Return a new Array with elements common to all Arrays.
+     * - based on underscore.js implementation
+     */
+    function intersection(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return every(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    module.exports = intersection;
+
+
diff --git a/node_modules/mout/array/invoke.js b/node_modules/mout/array/invoke.js
new file mode 100644
index 0000000..32ec584
--- /dev/null
+++ b/node_modules/mout/array/invoke.js
@@ -0,0 +1,23 @@
+var slice = require('./slice');
+
+    /**
+     * Call `methodName` on each item of the array passing custom arguments if
+     * needed.
+     */
+    function invoke(arr, methodName, var_args){
+        if (arr == null) {
+            return arr;
+        }
+
+        var args = slice(arguments, 2);
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            value[methodName].apply(value, args);
+        }
+
+        return arr;
+    }
+
+    module.exports = invoke;
+
diff --git a/node_modules/mout/array/join.js b/node_modules/mout/array/join.js
new file mode 100644
index 0000000..71d8bd2
--- /dev/null
+++ b/node_modules/mout/array/join.js
@@ -0,0 +1,17 @@
+var filter = require('./filter');
+
+    function isValidString(val) {
+        return (val != null && val !== '');
+    }
+
+    /**
+     * Joins strings with the specified separator inserted between each value.
+     * Null values and empty strings will be excluded.
+     */
+    function join(items, separator) {
+        separator = separator || '';
+        return filter(items, isValidString).join(separator);
+    }
+
+    module.exports = join;
+
diff --git a/node_modules/mout/array/last.js b/node_modules/mout/array/last.js
new file mode 100644
index 0000000..d80ab2b
--- /dev/null
+++ b/node_modules/mout/array/last.js
@@ -0,0 +1,16 @@
+
+
+    /**
+     * Returns last element of array.
+     */
+    function last(arr){
+        if (arr == null || arr.length < 1) {
+            return undefined;
+        }
+
+        return arr[arr.length - 1];
+    }
+
+    module.exports = last;
+
+
diff --git a/node_modules/mout/array/lastIndexOf.js b/node_modules/mout/array/lastIndexOf.js
new file mode 100644
index 0000000..ee44a25
--- /dev/null
+++ b/node_modules/mout/array/lastIndexOf.js
@@ -0,0 +1,28 @@
+
+
+    /**
+     * Array lastIndexOf
+     */
+    function lastIndexOf(arr, item, fromIndex) {
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length;
+        fromIndex = (fromIndex == null || fromIndex >= len)? len - 1 : fromIndex;
+        fromIndex = (fromIndex < 0)? len + fromIndex : fromIndex;
+
+        while (fromIndex >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[fromIndex] === item) {
+                return fromIndex;
+            }
+            fromIndex--;
+        }
+
+        return -1;
+    }
+
+    module.exports = lastIndexOf;
+
diff --git a/node_modules/mout/array/map.js b/node_modules/mout/array/map.js
new file mode 100644
index 0000000..7b7fb33
--- /dev/null
+++ b/node_modules/mout/array/map.js
@@ -0,0 +1,22 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array map
+     */
+    function map(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null){
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            results[i] = callback(arr[i], i, arr);
+        }
+
+        return results;
+    }
+
+     module.exports = map;
+
diff --git a/node_modules/mout/array/max.js b/node_modules/mout/array/max.js
new file mode 100644
index 0000000..0b8f259
--- /dev/null
+++ b/node_modules/mout/array/max.js
@@ -0,0 +1,34 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Return maximum value inside array
+     */
+    function max(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.max.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = -Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp > compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    module.exports = max;
+
+
diff --git a/node_modules/mout/array/min.js b/node_modules/mout/array/min.js
new file mode 100644
index 0000000..ed6cc6a
--- /dev/null
+++ b/node_modules/mout/array/min.js
@@ -0,0 +1,34 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Return minimum value inside array
+     */
+    function min(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return -Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.min.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp < compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    module.exports = min;
+
+
diff --git a/node_modules/mout/array/pick.js b/node_modules/mout/array/pick.js
new file mode 100644
index 0000000..6408678
--- /dev/null
+++ b/node_modules/mout/array/pick.js
@@ -0,0 +1,31 @@
+var randInt = require('../random/randInt');
+
+    /**
+     * Remove random item(s) from the Array and return it.
+     * Returns an Array of items if [nItems] is provided or a single item if
+     * it isn't specified.
+     */
+    function pick(arr, nItems){
+        if (nItems != null) {
+            var result = [];
+            if (nItems > 0 && arr && arr.length) {
+                nItems = nItems > arr.length? arr.length : nItems;
+                while (nItems--) {
+                    result.push( pickOne(arr) );
+                }
+            }
+            return result;
+        }
+        return (arr && arr.length)? pickOne(arr) : void(0);
+    }
+
+
+    function pickOne(arr){
+        var idx = randInt(0, arr.length - 1);
+        return arr.splice(idx, 1)[0];
+    }
+
+
+    module.exports = pick;
+
+
diff --git a/node_modules/mout/array/pluck.js b/node_modules/mout/array/pluck.js
new file mode 100644
index 0000000..fef4043
--- /dev/null
+++ b/node_modules/mout/array/pluck.js
@@ -0,0 +1,12 @@
+var map = require('./map');
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(arr, propName){
+        return map(arr, propName);
+    }
+
+    module.exports = pluck;
+
+
diff --git a/node_modules/mout/array/range.js b/node_modules/mout/array/range.js
new file mode 100644
index 0000000..31d3c77
--- /dev/null
+++ b/node_modules/mout/array/range.js
@@ -0,0 +1,27 @@
+var countSteps = require('../math/countSteps');
+
+    /**
+     * Returns an Array of numbers inside range.
+     */
+    function range(start, stop, step) {
+        if (stop == null) {
+            stop = start;
+            start = 0;
+        }
+        step = step || 1;
+
+        var result = [],
+            nSteps = countSteps(stop - start, step),
+            i = start;
+
+        while (i <= stop) {
+            result.push(i);
+            i += step;
+        }
+
+        return result;
+    }
+
+    module.exports = range;
+
+
diff --git a/node_modules/mout/array/reduce.js b/node_modules/mout/array/reduce.js
new file mode 100644
index 0000000..827f428
--- /dev/null
+++ b/node_modules/mout/array/reduce.js
@@ -0,0 +1,33 @@
+
+
+    /**
+     * Array reduce
+     */
+    function reduce(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2,
+            result = initVal;
+
+        if (arr == null || !arr.length) {
+            if (!hasInit) {
+                throw new Error('reduce of empty array with no initial value');
+            } else {
+                return initVal;
+            }
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (!hasInit) {
+                result = arr[i];
+                hasInit = true;
+            } else {
+                result = fn(result, arr[i], i, arr);
+            }
+        }
+
+        return result;
+    }
+
+    module.exports = reduce;
+
diff --git a/node_modules/mout/array/reduceRight.js b/node_modules/mout/array/reduceRight.js
new file mode 100644
index 0000000..e36fd4a
--- /dev/null
+++ b/node_modules/mout/array/reduceRight.js
@@ -0,0 +1,34 @@
+
+
+    /**
+     * Array reduceRight
+     */
+    function reduceRight(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2;
+
+        if (arr == null || !arr.length) {
+            if (hasInit) {
+                return initVal;
+            } else {
+                throw new Error('reduce of empty array with no initial value');
+            }
+        }
+
+        var i = arr.length, result = initVal, value;
+        while (--i >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            value = arr[i];
+            if (!hasInit) {
+                result = value;
+                hasInit = true;
+            } else {
+                result = fn(result, value, i, arr);
+            }
+        }
+        return result;
+    }
+
+    module.exports = reduceRight;
+
diff --git a/node_modules/mout/array/reject.js b/node_modules/mout/array/reject.js
new file mode 100644
index 0000000..0cfc8b1
--- /dev/null
+++ b/node_modules/mout/array/reject.js
@@ -0,0 +1,25 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array reject
+     */
+    function reject(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (!callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = reject;
+
diff --git a/node_modules/mout/array/remove.js b/node_modules/mout/array/remove.js
new file mode 100644
index 0000000..aa6517d
--- /dev/null
+++ b/node_modules/mout/array/remove.js
@@ -0,0 +1,13 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * Remove a single item from the array.
+     * (it won't remove duplicates, just a single item)
+     */
+    function remove(arr, item){
+        var idx = indexOf(arr, item);
+        if (idx !== -1) arr.splice(idx, 1);
+    }
+
+    module.exports = remove;
+
diff --git a/node_modules/mout/array/removeAll.js b/node_modules/mout/array/removeAll.js
new file mode 100644
index 0000000..d5f7f3b
--- /dev/null
+++ b/node_modules/mout/array/removeAll.js
@@ -0,0 +1,15 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * Remove all instances of an item from array.
+     */
+    function removeAll(arr, item){
+        var idx = indexOf(arr, item);
+        while (idx !== -1) {
+            arr.splice(idx, 1);
+            idx = indexOf(arr, item, idx);
+        }
+    }
+
+    module.exports = removeAll;
+
diff --git a/node_modules/mout/array/reverse.js b/node_modules/mout/array/reverse.js
new file mode 100644
index 0000000..a35cc1a
--- /dev/null
+++ b/node_modules/mout/array/reverse.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a copy of the array in reversed order.
+     */
+    function reverse(array) {
+        var copy = array.slice();
+        copy.reverse();
+        return copy;
+    }
+
+    module.exports = reverse;
+
+
diff --git a/node_modules/mout/array/shuffle.js b/node_modules/mout/array/shuffle.js
new file mode 100644
index 0000000..99d0660
--- /dev/null
+++ b/node_modules/mout/array/shuffle.js
@@ -0,0 +1,28 @@
+var randInt = require('../random/randInt');
+
+    /**
+     * Shuffle array items.
+     */
+    function shuffle(arr) {
+        var results = [],
+            rnd;
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            if (!i) {
+                results[0] = arr[0];
+            } else {
+                rnd = randInt(0, i);
+                results[i] = results[rnd];
+                results[rnd] = arr[i];
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = shuffle;
+
diff --git a/node_modules/mout/array/slice.js b/node_modules/mout/array/slice.js
new file mode 100644
index 0000000..0a4d5cf
--- /dev/null
+++ b/node_modules/mout/array/slice.js
@@ -0,0 +1,35 @@
+
+
+    /**
+     * Create slice of source array or array-like object
+     */
+    function slice(arr, start, end){
+        var len = arr.length;
+
+        if (start == null) {
+            start = 0;
+        } else if (start < 0) {
+            start = Math.max(len + start, 0);
+        } else {
+            start = Math.min(start, len);
+        }
+
+        if (end == null) {
+            end = len;
+        } else if (end < 0) {
+            end = Math.max(len + end, 0);
+        } else {
+            end = Math.min(end, len);
+        }
+
+        var result = [];
+        while (start < end) {
+            result.push(arr[start++]);
+        }
+
+        return result;
+    }
+
+    module.exports = slice;
+
+
diff --git a/node_modules/mout/array/some.js b/node_modules/mout/array/some.js
new file mode 100644
index 0000000..8d17772
--- /dev/null
+++ b/node_modules/mout/array/some.js
@@ -0,0 +1,27 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array some
+     */
+    function some(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback(arr[i], i, arr) ) {
+                result = true;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    module.exports = some;
+
diff --git a/node_modules/mout/array/sort.js b/node_modules/mout/array/sort.js
new file mode 100644
index 0000000..7807339
--- /dev/null
+++ b/node_modules/mout/array/sort.js
@@ -0,0 +1,55 @@
+
+
+    /**
+     * Merge sort (http://en.wikipedia.org/wiki/Merge_sort)
+     */
+    function mergeSort(arr, compareFn) {
+        if (arr == null) {
+            return [];
+        } else if (arr.length < 2) {
+            return arr;
+        }
+
+        if (compareFn == null) {
+            compareFn = defaultCompare;
+        }
+
+        var mid, left, right;
+
+        mid   = ~~(arr.length / 2);
+        left  = mergeSort( arr.slice(0, mid), compareFn );
+        right = mergeSort( arr.slice(mid, arr.length), compareFn );
+
+        return merge(left, right, compareFn);
+    }
+
+    function defaultCompare(a, b) {
+        return a < b ? -1 : (a > b? 1 : 0);
+    }
+
+    function merge(left, right, compareFn) {
+        var result = [];
+
+        while (left.length && right.length) {
+            if (compareFn(left[0], right[0]) <= 0) {
+                // if 0 it should preserve same order (stable)
+                result.push(left.shift());
+            } else {
+                result.push(right.shift());
+            }
+        }
+
+        if (left.length) {
+            result.push.apply(result, left);
+        }
+
+        if (right.length) {
+            result.push.apply(result, right);
+        }
+
+        return result;
+    }
+
+    module.exports = mergeSort;
+
+
diff --git a/node_modules/mout/array/sortBy.js b/node_modules/mout/array/sortBy.js
new file mode 100644
index 0000000..b84544c
--- /dev/null
+++ b/node_modules/mout/array/sortBy.js
@@ -0,0 +1,19 @@
+var sort = require('./sort');
+var makeIterator = require('../function/makeIterator_');
+
+    /*
+     * Sort array by the result of the callback
+     */
+    function sortBy(arr, callback, context){
+        callback = makeIterator(callback, context);
+
+        return sort(arr, function(a, b) {
+            a = callback(a);
+            b = callback(b);
+            return (a < b) ? -1 : ((a > b) ? 1 : 0);
+        });
+    }
+
+    module.exports = sortBy;
+
+
diff --git a/node_modules/mout/array/split.js b/node_modules/mout/array/split.js
new file mode 100644
index 0000000..4f3ba50
--- /dev/null
+++ b/node_modules/mout/array/split.js
@@ -0,0 +1,35 @@
+
+
+    /**
+     * Split array into a fixed number of segments.
+     */
+    function split(array, segments) {
+        segments = segments || 2;
+        var results = [];
+        if (array == null) {
+            return results;
+        }
+
+        var minLength = Math.floor(array.length / segments),
+            remainder = array.length % segments,
+            i = 0,
+            len = array.length,
+            segmentIndex = 0,
+            segmentLength;
+
+        while (i < len) {
+            segmentLength = minLength;
+            if (segmentIndex < remainder) {
+                segmentLength++;
+            }
+
+            results.push(array.slice(i, i + segmentLength));
+
+            segmentIndex++;
+            i += segmentLength;
+        }
+
+        return results;
+    }
+    module.exports = split;
+
diff --git a/node_modules/mout/array/take.js b/node_modules/mout/array/take.js
new file mode 100644
index 0000000..bd8eb07
--- /dev/null
+++ b/node_modules/mout/array/take.js
@@ -0,0 +1,24 @@
+
+
+    /**
+     * Iterates over a callback a set amount of times
+     * returning the results
+     */
+    function take(n, callback, thisObj){
+        var i = -1;
+        var arr = [];
+        if( !thisObj ){
+            while(++i < n){
+                arr[i] = callback(i, n);
+            }
+        } else {
+            while(++i < n){
+                arr[i] = callback.call(thisObj, i, n);
+            }
+        }
+        return arr;
+    }
+
+    module.exports = take;
+
+
diff --git a/node_modules/mout/array/toLookup.js b/node_modules/mout/array/toLookup.js
new file mode 100644
index 0000000..ce4c55d
--- /dev/null
+++ b/node_modules/mout/array/toLookup.js
@@ -0,0 +1,28 @@
+var isFunction = require('../lang/isFunction');
+
+    /**
+     * Creates an object that holds a lookup for the objects in the array.
+     */
+    function toLookup(arr, key) {
+        var result = {};
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length, value;
+        if (isFunction(key)) {
+            while (++i < len) {
+                value = arr[i];
+                result[key(value)] = value;
+            }
+        } else {
+            while (++i < len) {
+                value = arr[i];
+                result[value[key]] = value;
+            }
+        }
+
+        return result;
+    }
+    module.exports = toLookup;
+
diff --git a/node_modules/mout/array/union.js b/node_modules/mout/array/union.js
new file mode 100644
index 0000000..f1334a9
--- /dev/null
+++ b/node_modules/mout/array/union.js
@@ -0,0 +1,19 @@
+var unique = require('./unique');
+var append = require('./append');
+
+    /**
+     * Concat multiple arrays and remove duplicates
+     */
+    function union(arrs) {
+        var results = [];
+        var i = -1, len = arguments.length;
+        while (++i < len) {
+            append(results, arguments[i]);
+        }
+
+        return unique(results);
+    }
+
+    module.exports = union;
+
+
diff --git a/node_modules/mout/array/unique.js b/node_modules/mout/array/unique.js
new file mode 100644
index 0000000..5db2510
--- /dev/null
+++ b/node_modules/mout/array/unique.js
@@ -0,0 +1,25 @@
+var filter = require('./filter');
+
+    /**
+     * @return {array} Array of unique items
+     */
+    function unique(arr, compare){
+        compare = compare || isEqual;
+        return filter(arr, function(item, i, arr){
+            var n = arr.length;
+            while (++i < n) {
+                if ( compare(item, arr[i]) ) {
+                    return false;
+                }
+            }
+            return true;
+        });
+    }
+
+    function isEqual(a, b){
+        return a === b;
+    }
+
+    module.exports = unique;
+
+
diff --git a/node_modules/mout/array/xor.js b/node_modules/mout/array/xor.js
new file mode 100644
index 0000000..c125a99
--- /dev/null
+++ b/node_modules/mout/array/xor.js
@@ -0,0 +1,26 @@
+var unique = require('./unique');
+var filter = require('./filter');
+var contains = require('./contains');
+
+
+    /**
+     * Exclusive OR. Returns items that are present in a single array.
+     * - like ptyhon's `symmetric_difference`
+     */
+    function xor(arr1, arr2) {
+        arr1 = unique(arr1);
+        arr2 = unique(arr2);
+
+        var a1 = filter(arr1, function(item){
+                return !contains(arr2, item);
+            }),
+            a2 = filter(arr2, function(item){
+                return !contains(arr1, item);
+            });
+
+        return a1.concat(a2);
+    }
+
+    module.exports = xor;
+
+
diff --git a/node_modules/mout/array/zip.js b/node_modules/mout/array/zip.js
new file mode 100644
index 0000000..8bce9c0
--- /dev/null
+++ b/node_modules/mout/array/zip.js
@@ -0,0 +1,28 @@
+var max = require('./max');
+var map = require('./map');
+
+    function getLength(arr) {
+        return arr == null ? 0 : arr.length;
+    }
+
+    /**
+     * Merges together the values of each of the arrays with the values at the
+     * corresponding position.
+     */
+    function zip(arr){
+        var len = arr ? max(map(arguments, getLength)) : 0,
+            results = [],
+            i = -1;
+        while (++i < len) {
+            // jshint loopfunc: true
+            results.push(map(arguments, function(item) {
+                return item == null ? undefined : item[i];
+            }));
+        }
+
+        return results;
+    }
+
+    module.exports = zip;
+
+
diff --git a/node_modules/mout/collection.js b/node_modules/mout/collection.js
new file mode 100644
index 0000000..d5cf6ca
--- /dev/null
+++ b/node_modules/mout/collection.js
@@ -0,0 +1,22 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'contains' : require('./collection/contains'),
+    'every' : require('./collection/every'),
+    'filter' : require('./collection/filter'),
+    'find' : require('./collection/find'),
+    'forEach' : require('./collection/forEach'),
+    'make_' : require('./collection/make_'),
+    'map' : require('./collection/map'),
+    'max' : require('./collection/max'),
+    'min' : require('./collection/min'),
+    'pluck' : require('./collection/pluck'),
+    'reduce' : require('./collection/reduce'),
+    'reject' : require('./collection/reject'),
+    'size' : require('./collection/size'),
+    'some' : require('./collection/some')
+};
+
+
diff --git a/node_modules/mout/collection/contains.js b/node_modules/mout/collection/contains.js
new file mode 100644
index 0000000..a73f994
--- /dev/null
+++ b/node_modules/mout/collection/contains.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrContains = require('../array/contains');
+var objContains = require('../object/contains');
+
+    /**
+     */
+    module.exports = make(arrContains, objContains);
+
+
diff --git a/node_modules/mout/collection/every.js b/node_modules/mout/collection/every.js
new file mode 100644
index 0000000..300e03c
--- /dev/null
+++ b/node_modules/mout/collection/every.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrEvery = require('../array/every');
+var objEvery = require('../object/every');
+
+    /**
+     */
+    module.exports = make(arrEvery, objEvery);
+
+
diff --git a/node_modules/mout/collection/filter.js b/node_modules/mout/collection/filter.js
new file mode 100644
index 0000000..3875700
--- /dev/null
+++ b/node_modules/mout/collection/filter.js
@@ -0,0 +1,23 @@
+var forEach = require('./forEach');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * filter collection values, returns array.
+     */
+    function filter(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        var results = [];
+        if (!list) {
+            return results;
+        }
+        forEach(list, function(value, index, list) {
+            if (iterator(value, index, list)) {
+                results[results.length] = value;
+            }
+        });
+        return results;
+    }
+
+    module.exports = filter;
+
+
diff --git a/node_modules/mout/collection/find.js b/node_modules/mout/collection/find.js
new file mode 100644
index 0000000..14317e6
--- /dev/null
+++ b/node_modules/mout/collection/find.js
@@ -0,0 +1,10 @@
+var make = require('./make_');
+var arrFind = require('../array/find');
+var objFind = require('../object/find');
+
+    /**
+     * Find value that returns true on iterator check.
+     */
+    module.exports = make(arrFind, objFind);
+
+
diff --git a/node_modules/mout/collection/forEach.js b/node_modules/mout/collection/forEach.js
new file mode 100644
index 0000000..6e28dcb
--- /dev/null
+++ b/node_modules/mout/collection/forEach.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrForEach = require('../array/forEach');
+var objForEach = require('../object/forOwn');
+
+    /**
+     */
+    module.exports = make(arrForEach, objForEach);
+
+
diff --git a/node_modules/mout/collection/make_.js b/node_modules/mout/collection/make_.js
new file mode 100644
index 0000000..4fb8a81
--- /dev/null
+++ b/node_modules/mout/collection/make_.js
@@ -0,0 +1,19 @@
+var slice = require('../array/slice');
+
+    /**
+     * internal method used to create other collection modules.
+     */
+    function makeCollectionMethod(arrMethod, objMethod, defaultReturn) {
+        return function(){
+            var args = slice(arguments);
+            if (args[0] == null) {
+                return defaultReturn;
+            }
+            // array-like is treated as array
+            return (typeof args[0].length === 'number')? arrMethod.apply(null, args) : objMethod.apply(null, args);
+        };
+    }
+
+    module.exports = makeCollectionMethod;
+
+
diff --git a/node_modules/mout/collection/map.js b/node_modules/mout/collection/map.js
new file mode 100644
index 0000000..fc157f5
--- /dev/null
+++ b/node_modules/mout/collection/map.js
@@ -0,0 +1,23 @@
+var isObject = require('../lang/isObject');
+var values = require('../object/values');
+var arrMap = require('../array/map');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Map collection values, returns Array.
+     */
+    function map(list, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        // list.length to check array-like object, if not array-like
+        // we simply map all the object values
+        if( isObject(list) && list.length == null ){
+            list = values(list);
+        }
+        return arrMap(list, function (val, key, list) {
+            return callback(val, key, list);
+        });
+    }
+
+    module.exports = map;
+
+
diff --git a/node_modules/mout/collection/max.js b/node_modules/mout/collection/max.js
new file mode 100644
index 0000000..a8490e7
--- /dev/null
+++ b/node_modules/mout/collection/max.js
@@ -0,0 +1,10 @@
+var make = require('./make_');
+var arrMax = require('../array/max');
+var objMax = require('../object/max');
+
+    /**
+     * Get maximum value inside collection
+     */
+    module.exports = make(arrMax, objMax);
+
+
diff --git a/node_modules/mout/collection/min.js b/node_modules/mout/collection/min.js
new file mode 100644
index 0000000..51d9f14
--- /dev/null
+++ b/node_modules/mout/collection/min.js
@@ -0,0 +1,10 @@
+var make = require('./make_');
+var arrMin = require('../array/min');
+var objMin = require('../object/min');
+
+    /**
+     * Get minimum value inside collection.
+     */
+    module.exports = make(arrMin, objMin);
+
+
diff --git a/node_modules/mout/collection/pluck.js b/node_modules/mout/collection/pluck.js
new file mode 100644
index 0000000..9b28377
--- /dev/null
+++ b/node_modules/mout/collection/pluck.js
@@ -0,0 +1,14 @@
+var map = require('./map');
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(list, key) {
+        return map(list, function(value) {
+            return value[key];
+        });
+    }
+
+    module.exports = pluck;
+
+
diff --git a/node_modules/mout/collection/reduce.js b/node_modules/mout/collection/reduce.js
new file mode 100644
index 0000000..4c07573
--- /dev/null
+++ b/node_modules/mout/collection/reduce.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrReduce = require('../array/reduce');
+var objReduce = require('../object/reduce');
+
+    /**
+     */
+    module.exports = make(arrReduce, objReduce);
+
+
diff --git a/node_modules/mout/collection/reject.js b/node_modules/mout/collection/reject.js
new file mode 100644
index 0000000..2a92e3b
--- /dev/null
+++ b/node_modules/mout/collection/reject.js
@@ -0,0 +1,16 @@
+var filter = require('./filter');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Inverse or collection/filter
+     */
+    function reject(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        return filter(list, function(value, index, list) {
+            return !iterator(value, index, list);
+        }, thisObj);
+    }
+
+    module.exports = reject;
+
+
diff --git a/node_modules/mout/collection/size.js b/node_modules/mout/collection/size.js
new file mode 100644
index 0000000..244e33e
--- /dev/null
+++ b/node_modules/mout/collection/size.js
@@ -0,0 +1,19 @@
+var isArray = require('../lang/isArray');
+var objSize = require('../object/size');
+
+    /**
+     * Get collection size
+     */
+    function size(list) {
+        if (!list) {
+            return 0;
+        }
+        if (isArray(list)) {
+            return list.length;
+        }
+        return objSize(list);
+    }
+
+    module.exports = size;
+
+
diff --git a/node_modules/mout/collection/some.js b/node_modules/mout/collection/some.js
new file mode 100644
index 0000000..48fd252
--- /dev/null
+++ b/node_modules/mout/collection/some.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrSome = require('../array/some');
+var objSome = require('../object/some');
+
+    /**
+     */
+    module.exports = make(arrSome, objSome);
+
+
diff --git a/node_modules/mout/date.js b/node_modules/mout/date.js
new file mode 100644
index 0000000..9c2efe9
--- /dev/null
+++ b/node_modules/mout/date.js
@@ -0,0 +1,22 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'dayOfTheYear' : require('./date/dayOfTheYear'),
+    'diff' : require('./date/diff'),
+    'i18n_' : require('./date/i18n_'),
+    'isLeapYear' : require('./date/isLeapYear'),
+    'isSame' : require('./date/isSame'),
+    'parseIso' : require('./date/parseIso'),
+    'quarter' : require('./date/quarter'),
+    'startOf' : require('./date/startOf'),
+    'strftime' : require('./date/strftime'),
+    'timezoneAbbr' : require('./date/timezoneAbbr'),
+    'timezoneOffset' : require('./date/timezoneOffset'),
+    'totalDaysInMonth' : require('./date/totalDaysInMonth'),
+    'totalDaysInYear' : require('./date/totalDaysInYear'),
+    'weekOfTheYear' : require('./date/weekOfTheYear')
+};
+
+
diff --git a/node_modules/mout/date/dayOfTheYear.js b/node_modules/mout/date/dayOfTheYear.js
new file mode 100644
index 0000000..85905c5
--- /dev/null
+++ b/node_modules/mout/date/dayOfTheYear.js
@@ -0,0 +1,13 @@
+var isDate = require('../lang/isDate');
+
+    /**
+     * return the day of the year (1..366)
+     */
+    function dayOfTheYear(date){
+        return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -
+                Date.UTC(date.getFullYear(), 0, 1)) / 86400000 + 1;
+    }
+
+    module.exports = dayOfTheYear;
+
+
diff --git a/node_modules/mout/date/diff.js b/node_modules/mout/date/diff.js
new file mode 100644
index 0000000..1131cdc
--- /dev/null
+++ b/node_modules/mout/date/diff.js
@@ -0,0 +1,130 @@
+var totalDaysInMonth = require('./totalDaysInMonth');
+var totalDaysInYear = require('./totalDaysInYear');
+var convert = require('../time/convert');
+
+    /**
+     * calculate the difference between dates (range)
+     */
+    function diff(start, end, unitName){
+        // sort the dates to make it easier to process (specially year/month)
+        if (start > end) {
+            var swap = start;
+            start = end;
+            end = swap;
+        }
+
+        var output;
+
+        if (unitName === 'month') {
+            output = getMonthsDiff(start, end);
+        } else if (unitName === 'year'){
+            output = getYearsDiff(start, end);
+        } else if (unitName != null) {
+            if (unitName === 'day') {
+                // ignore timezone difference because of daylight savings time
+                start = toUtc(start);
+                end = toUtc(end);
+            }
+            output = convert(end - start, 'ms', unitName);
+        } else {
+            output = end - start;
+        }
+
+        return output;
+    }
+
+
+    function toUtc(d){
+        // we ignore timezone differences on purpose because of daylight
+        // savings time, otherwise it would return fractional days/weeks even
+        // if a full day elapsed. eg:
+        // Wed Feb 12 2014 00:00:00 GMT-0200 (BRST)
+        // Sun Feb 16 2014 00:00:00 GMT-0300 (BRT)
+        // diff should be 4 days and not 4.041666666666667
+        return Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(),
+                        d.getHours(), d.getMinutes(), d.getSeconds(),
+                        d.getMilliseconds());
+    }
+
+
+    function getMonthsDiff(start, end){
+        return getElapsedMonths(start, end) +
+               getElapsedYears(start, end) * 12 +
+               getFractionalMonth(start, end);
+    }
+
+
+    function getYearsDiff(start, end){
+        var elapsedYears = getElapsedYears(start, end);
+        return elapsedYears + getFractionalYear(start, end, elapsedYears);
+    }
+
+
+    function getElapsedMonths(start, end){
+        var monthDiff = end.getMonth() - start.getMonth();
+        if (monthDiff < 0) {
+            monthDiff += 12;
+        }
+        // less than a full month
+        if (start.getDate() > end.getDate()) {
+            monthDiff -= 1;
+        }
+        return monthDiff;
+    }
+
+
+    function getElapsedYears(start, end){
+        var yearDiff = end.getFullYear() - start.getFullYear();
+        // less than a full year
+        if (start.getMonth() > end.getMonth()) {
+            yearDiff -= 1;
+        }
+        return yearDiff;
+    }
+
+
+    function getFractionalMonth(start, end){
+        var fractionalDiff = 0;
+        var startDay = start.getDate();
+        var endDay = end.getDate();
+
+        if (startDay !== endDay) {
+            var startTotalDays = totalDaysInMonth(start);
+            var endTotalDays = totalDaysInMonth(end);
+            var totalDays;
+            var daysElapsed;
+
+            if (startDay > endDay) {
+                // eg: Jan 29 - Feb 27 (29 days elapsed but not a full month)
+                var baseDay = startTotalDays - startDay;
+                daysElapsed = endDay + baseDay;
+                // total days should be relative to 1st day of next month if
+                // startDay > endTotalDays
+                totalDays = (startDay > endTotalDays)?
+                    endTotalDays + baseDay + 1 : startDay + baseDay;
+            } else {
+                // fractional is only based on endMonth eg: Jan 12 - Feb 18
+                // (6 fractional days, 28 days until next full month)
+                daysElapsed = endDay - startDay;
+                totalDays = endTotalDays;
+            }
+
+            fractionalDiff = daysElapsed / totalDays;
+        }
+
+        return fractionalDiff;
+    }
+
+
+    function getFractionalYear(start, end, elapsedYears){
+        var base = elapsedYears?
+            new Date(end.getFullYear(), start.getMonth(), start.getDate()) :
+            start;
+        var elapsedDays = diff(base, end, 'day');
+        return elapsedDays / totalDaysInYear(end);
+    }
+
+
+    module.exports = diff;
+
+
diff --git a/node_modules/mout/date/i18n/de-DE.js b/node_modules/mout/date/i18n/de-DE.js
new file mode 100644
index 0000000..b3ab620
--- /dev/null
+++ b/node_modules/mout/date/i18n/de-DE.js
@@ -0,0 +1,61 @@
+
+    // de-DE (German)
+    module.exports = {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Januar",
+            "Februar",
+            "März",
+            "April",
+            "Mai",
+            "Juni",
+            "Juli",
+            "August",
+            "September",
+            "Oktober",
+            "November",
+            "Dezember"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Febr",
+            "März",
+            "Apr",
+            "Mai",
+            "Juni",
+            "Juli",
+            "Aug",
+            "Sept",
+            "Okt",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Sonntag",
+            "Montag",
+            "Dienstag",
+            "Mittwoch",
+            "Donnerstag",
+            "Freitag",
+            "Samstag"
+        ],
+
+        "days_abbr" : [
+            "So",
+            "Mo",
+            "Di",
+            "Mi",
+            "Do",
+            "Fr",
+            "Sa"
+        ]
+    };
+
diff --git a/node_modules/mout/date/i18n/en-US.js b/node_modules/mout/date/i18n/en-US.js
new file mode 100644
index 0000000..f9526ce
--- /dev/null
+++ b/node_modules/mout/date/i18n/en-US.js
@@ -0,0 +1,61 @@
+
+    // en-US (English, United States)
+    module.exports = {
+        "am" : "AM",
+        "pm" : "PM",
+
+        "x": "%m/%d/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %I:%M:%S %p %Z",
+
+        "months" : [
+            "January",
+            "February",
+            "March",
+            "April",
+            "May",
+            "June",
+            "July",
+            "August",
+            "September",
+            "October",
+            "November",
+            "December"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Feb",
+            "Mar",
+            "Apr",
+            "May",
+            "Jun",
+            "Jul",
+            "Aug",
+            "Sep",
+            "Oct",
+            "Nov",
+            "Dec"
+        ],
+
+        "days" : [
+            "Sunday",
+            "Monday",
+            "Tuesday",
+            "Wednesday",
+            "Thursday",
+            "Friday",
+            "Saturday"
+        ],
+
+        "days_abbr" : [
+            "Sun",
+            "Mon",
+            "Tue",
+            "Wed",
+            "Thu",
+            "Fri",
+            "Sat"
+        ]
+    };
+
diff --git a/node_modules/mout/date/i18n/pt-BR.js b/node_modules/mout/date/i18n/pt-BR.js
new file mode 100644
index 0000000..71ebadb
--- /dev/null
+++ b/node_modules/mout/date/i18n/pt-BR.js
@@ -0,0 +1,61 @@
+
+    // pt-BR (Brazillian Portuguese)
+    module.exports = {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Janeiro",
+            "Fevereiro",
+            "Março",
+            "Abril",
+            "Maio",
+            "Junho",
+            "Julho",
+            "Agosto",
+            "Setembro",
+            "Outubro",
+            "Novembro",
+            "Dezembro"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Fev",
+            "Mar",
+            "Abr",
+            "Mai",
+            "Jun",
+            "Jul",
+            "Ago",
+            "Set",
+            "Out",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Domingo",
+            "Segunda",
+            "Terça",
+            "Quarta",
+            "Quinta",
+            "Sexta",
+            "Sábado"
+        ],
+
+        "days_abbr" : [
+            "Dom",
+            "Seg",
+            "Ter",
+            "Qua",
+            "Qui",
+            "Sex",
+            "Sáb"
+        ]
+    };
+
diff --git a/node_modules/mout/date/i18n_.js b/node_modules/mout/date/i18n_.js
new file mode 100644
index 0000000..723fc10
--- /dev/null
+++ b/node_modules/mout/date/i18n_.js
@@ -0,0 +1,14 @@
+var mixIn = require('../object/mixIn');
+var enUS = require('./i18n/en-US');
+
+    // we also use mixIn to make sure we don't affect the original locale
+    var activeLocale = mixIn({}, enUS, {
+        // we expose a "set" method to allow overriding the global locale
+        set : function(localeData){
+            mixIn(activeLocale, localeData);
+        }
+    });
+
+    module.exports = activeLocale;
+
+
diff --git a/node_modules/mout/date/isLeapYear.js b/node_modules/mout/date/isLeapYear.js
new file mode 100644
index 0000000..4212870
--- /dev/null
+++ b/node_modules/mout/date/isLeapYear.js
@@ -0,0 +1,15 @@
+var isDate = require('../lang/isDate');
+
+    /**
+     * checks if it's a leap year
+     */
+    function isLeapYear(fullYear){
+        if (isDate(fullYear)) {
+            fullYear = fullYear.getFullYear();
+        }
+        return fullYear % 400 === 0 || (fullYear % 100 !== 0 && fullYear % 4 === 0);
+    }
+
+    module.exports = isLeapYear;
+
+
diff --git a/node_modules/mout/date/isSame.js b/node_modules/mout/date/isSame.js
new file mode 100644
index 0000000..4097d29
--- /dev/null
+++ b/node_modules/mout/date/isSame.js
@@ -0,0 +1,16 @@
+var startOf = require('./startOf');
+
+    /**
+     * Check if date is "same" with optional period
+     */
+    function isSame(date1, date2, period){
+        if (period) {
+            date1 = startOf(date1, period);
+            date2 = startOf(date2, period);
+        }
+        return Number(date1) === Number(date2);
+    }
+
+    module.exports = isSame;
+
+
diff --git a/node_modules/mout/date/parseIso.js b/node_modules/mout/date/parseIso.js
new file mode 100644
index 0000000..40a70a8
--- /dev/null
+++ b/node_modules/mout/date/parseIso.js
@@ -0,0 +1,146 @@
+var some = require('../array/some');
+
+    var datePatterns = [
+        /^([0-9]{4})$/,                        // YYYY
+        /^([0-9]{4})-([0-9]{2})$/,             // YYYY-MM (YYYYMM not allowed)
+        /^([0-9]{4})-?([0-9]{2})-?([0-9]{2})$/ // YYYY-MM-DD or YYYYMMDD
+    ];
+    var ORD_DATE = /^([0-9]{4})-?([0-9]{3})$/; // YYYY-DDD
+
+    var timePatterns = [
+        /^([0-9]{2}(?:\.[0-9]*)?)$/,                      // HH.hh
+        /^([0-9]{2}):?([0-9]{2}(?:\.[0-9]*)?)$/,          // HH:MM.mm
+        /^([0-9]{2}):?([0-9]{2}):?([0-9]{2}(\.[0-9]*)?)$/ // HH:MM:SS.ss
+    ];
+
+    var DATE_TIME = /^(.+)T(.+)$/;
+    var TIME_ZONE = /^(.+)([+\-])([0-9]{2}):?([0-9]{2})$/;
+
+    function matchAll(str, patterns) {
+        var match;
+        var found = some(patterns, function(pattern) {
+            return !!(match = pattern.exec(str));
+        });
+
+        return found ? match : null;
+    }
+
+    function getDate(year, month, day) {
+        var date = new Date(Date.UTC(year, month, day));
+
+        // Explicitly set year to avoid Date.UTC making dates < 100 relative to
+        // 1900
+        date.setUTCFullYear(year);
+
+        var valid =
+            date.getUTCFullYear() === year &&
+            date.getUTCMonth() === month &&
+            date.getUTCDate() === day;
+        return valid ? +date : NaN;
+    }
+
+    function parseOrdinalDate(str) {
+        var match = ORD_DATE.exec(str);
+        if (match ) {
+            var year = +match[1],
+                day = +match[2],
+                date = new Date(Date.UTC(year, 0, day));
+
+            if (date.getUTCFullYear() === year) {
+                return +date;
+            }
+        }
+
+        return NaN;
+    }
+
+    function parseDate(str) {
+        var match, year, month, day;
+
+        match = matchAll(str, datePatterns);
+        if (match === null) {
+            // Ordinal dates are verified differently.
+            return parseOrdinalDate(str);
+        }
+
+        year = (match[1] === void 0) ? 0 : +match[1];
+        month = (match[2] === void 0) ? 0 : +match[2] - 1;
+        day = (match[3] === void 0) ? 1 : +match[3];
+
+        return getDate(year, month, day);
+    }
+
+    function getTime(hr, min, sec) {
+        var valid =
+            (hr < 24 && hr >= 0 &&
+             min < 60 && min >= 0 &&
+             sec < 60 && min >= 0) ||
+            (hr === 24 && min === 0 && sec === 0);
+        if (!valid) {
+            return NaN;
+        }
+
+        return ((hr * 60 + min) * 60 + sec) * 1000;
+    }
+
+    function parseOffset(str) {
+        var match;
+        if (str.charAt(str.length - 1) === 'Z') {
+            str = str.substring(0, str.length - 1);
+        } else {
+            match = TIME_ZONE.exec(str);
+            if (match) {
+                var hours = +match[3],
+                    minutes = (match[4] === void 0) ? 0 : +match[4],
+                    offset = getTime(hours, minutes, 0);
+
+                if (match[2] === '-') {
+                    offset *= -1;
+                }
+
+                return { offset: offset, time: match[1] };
+            }
+        }
+
+        // No time zone specified, assume UTC
+        return { offset: 0, time: str };
+    }
+
+    function parseTime(str) {
+        var match;
+        var offset = parseOffset(str);
+
+        str = offset.time;
+        offset = offset.offset;
+        if (isNaN(offset)) {
+            return NaN;
+        }
+
+        match = matchAll(str, timePatterns);
+        if (match === null) {
+            return NaN;
+        }
+
+        var hours = (match[1] === void 0) ? 0 : +match[1],
+            minutes = (match[2] === void 0) ? 0 : +match[2],
+            seconds = (match[3] === void 0) ? 0 : +match[3];
+
+        return getTime(hours, minutes, seconds) - offset;
+    }
+
+    /**
+     * Parse an ISO8601 formatted date string, and return a Date object.
+     */
+    function parseISO8601(str){
+        var match = DATE_TIME.exec(str);
+        if (!match) {
+            // No time specified
+            return parseDate(str);
+        }
+
+        return parseDate(match[1]) + parseTime(match[2]);
+    }
+
+    module.exports = parseISO8601;
+
+
diff --git a/node_modules/mout/date/quarter.js b/node_modules/mout/date/quarter.js
new file mode 100644
index 0000000..8f61076
--- /dev/null
+++ b/node_modules/mout/date/quarter.js
@@ -0,0 +1,16 @@
+
+
+    /**
+     * gets date quarter
+     */
+    function quarter(date){
+        var month = date.getMonth();
+        if (month < 3) return 1;
+        if (month < 6) return 2;
+        if (month < 9) return 3;
+        return 4;
+    }
+
+    module.exports = quarter;
+
+
diff --git a/node_modules/mout/date/startOf.js b/node_modules/mout/date/startOf.js
new file mode 100644
index 0000000..072bc0e
--- /dev/null
+++ b/node_modules/mout/date/startOf.js
@@ -0,0 +1,54 @@
+var clone = require('../lang/clone');
+
+    /**
+     * get a new Date object representing start of period
+     */
+    function startOf(date, period){
+        date = clone(date);
+
+        // intentionally removed "break" from switch since start of
+        // month/year/etc should also reset the following periods
+        switch (period) {
+            case 'year':
+                date.setMonth(0);
+            /* falls through */
+            case 'month':
+                date.setDate(1);
+            /* falls through */
+            case 'week':
+            case 'day':
+                date.setHours(0);
+            /* falls through */
+            case 'hour':
+                date.setMinutes(0);
+            /* falls through */
+            case 'minute':
+                date.setSeconds(0);
+            /* falls through */
+            case 'second':
+                date.setMilliseconds(0);
+                break;
+            default:
+                throw new Error('"'+ period +'" is not a valid period');
+        }
+
+        // week is the only case that should reset the weekDay and maybe even
+        // overflow to previous month
+        if (period === 'week') {
+            var weekDay = date.getDay();
+            var baseDate = date.getDate();
+            if (weekDay) {
+                if (weekDay >= baseDate) {
+                    //start of the week is on previous month
+                    date.setDate(0);
+                }
+                date.setDate(date.getDate() - date.getDay());
+            }
+        }
+
+        return date;
+    }
+
+    module.exports = startOf;
+
+
diff --git a/node_modules/mout/date/strftime.js b/node_modules/mout/date/strftime.js
new file mode 100644
index 0000000..5e56633
--- /dev/null
+++ b/node_modules/mout/date/strftime.js
@@ -0,0 +1,121 @@
+var pad = require('../number/pad');
+var lpad = require('../string/lpad');
+var i18n = require('./i18n_');
+var dayOfTheYear = require('./dayOfTheYear');
+var timezoneOffset = require('./timezoneOffset');
+var timezoneAbbr = require('./timezoneAbbr');
+var weekOfTheYear = require('./weekOfTheYear');
+
+    var _combinations = {
+        'D': '%m/%d/%y',
+        'F': '%Y-%m-%d',
+        'r': '%I:%M:%S %p',
+        'R': '%H:%M',
+        'T': '%H:%M:%S',
+        'x': 'locale',
+        'X': 'locale',
+        'c': 'locale'
+    };
+
+
+    /**
+     * format date based on strftime format
+     */
+    function strftime(date, format, localeData){
+        localeData = localeData  || i18n;
+        var reToken = /%([a-z%])/gi;
+
+        function makeIterator(fn) {
+            return function(match, token){
+                return fn(date, token, localeData);
+            };
+        }
+
+        return format
+            .replace(reToken, makeIterator(expandCombinations))
+            .replace(reToken, makeIterator(convertToken));
+    }
+
+
+    function expandCombinations(date, token, l10n){
+        if (token in _combinations) {
+            var expanded = _combinations[token];
+            return expanded === 'locale'? l10n[token] : expanded;
+        } else {
+            return '%'+ token;
+        }
+    }
+
+
+    function convertToken(date, token, l10n){
+        switch (token){
+            case 'a':
+                return l10n.days_abbr[date.getDay()];
+            case 'A':
+                return l10n.days[date.getDay()];
+            case 'h':
+            case 'b':
+                return l10n.months_abbr[date.getMonth()];
+            case 'B':
+                return l10n.months[date.getMonth()];
+            case 'C':
+                return pad(Math.floor(date.getFullYear() / 100), 2);
+            case 'd':
+                return pad(date.getDate(), 2);
+            case 'e':
+                return pad(date.getDate(), 2, ' ');
+            case 'H':
+                return pad(date.getHours(), 2);
+            case 'I':
+                return pad(date.getHours() % 12, 2);
+            case 'j':
+                return pad(dayOfTheYear(date), 3);
+            case 'l':
+                return lpad(date.getHours() % 12, 2);
+            case 'L':
+                return pad(date.getMilliseconds(), 3);
+            case 'm':
+                return pad(date.getMonth() + 1, 2);
+            case 'M':
+                return pad(date.getMinutes(), 2);
+            case 'n':
+                return '\n';
+            case 'p':
+                return date.getHours() >= 12? l10n.pm : l10n.am;
+            case 'P':
+                return convertToken(date, 'p', l10n).toLowerCase();
+            case 's':
+                return date.getTime() / 1000;
+            case 'S':
+                return pad(date.getSeconds(), 2);
+            case 't':
+                return '\t';
+            case 'u':
+                var day = date.getDay();
+                return day === 0? 7 : day;
+            case 'U':
+                return pad(weekOfTheYear(date), 2);
+            case 'w':
+                return date.getDay();
+            case 'W':
+                return pad(weekOfTheYear(date, 1), 2);
+            case 'y':
+                return pad(date.getFullYear() % 100, 2);
+            case 'Y':
+                return pad(date.getFullYear(), 4);
+            case 'z':
+                return timezoneOffset(date);
+            case 'Z':
+                return timezoneAbbr(date);
+            case '%':
+                return '%';
+            default:
+                // keep unrecognized tokens
+                return '%'+ token;
+        }
+    }
+
+
+    module.exports = strftime;
+
+
diff --git a/node_modules/mout/date/timezoneAbbr.js b/node_modules/mout/date/timezoneAbbr.js
new file mode 100644
index 0000000..b100687
--- /dev/null
+++ b/node_modules/mout/date/timezoneAbbr.js
@@ -0,0 +1,17 @@
+var timezoneOffset = require('./timezoneOffset');
+
+    /**
+     * Abbreviated time zone name or similar information.
+     */
+    function timezoneAbbr(date){
+        // Date.toString gives different results depending on the
+        // browser/system so we fallback to timezone offset
+        // chrome: 'Mon Apr 08 2013 09:02:04 GMT-0300 (BRT)'
+        // IE: 'Mon Apr 8 09:02:04 UTC-0300 2013'
+        var tz = /\(([A-Z]{3,4})\)/.exec(date.toString());
+        return tz? tz[1] : timezoneOffset(date);
+    }
+
+    module.exports = timezoneAbbr;
+
+
diff --git a/node_modules/mout/date/timezoneOffset.js b/node_modules/mout/date/timezoneOffset.js
new file mode 100644
index 0000000..9492dce
--- /dev/null
+++ b/node_modules/mout/date/timezoneOffset.js
@@ -0,0 +1,16 @@
+var pad = require('../number/pad');
+
+    /**
+     * time zone as hour and minute offset from UTC (e.g. +0900)
+     */
+    function timezoneOffset(date){
+        var offset = date.getTimezoneOffset();
+        var abs = Math.abs(offset);
+        var h = pad(Math.floor(abs / 60), 2);
+        var m = pad(abs % 60, 2);
+        return (offset > 0? '-' : '+') + h + m;
+    }
+
+    module.exports = timezoneOffset;
+
+
diff --git a/node_modules/mout/date/totalDaysInMonth.js b/node_modules/mout/date/totalDaysInMonth.js
new file mode 100644
index 0000000..e5d5390
--- /dev/null
+++ b/node_modules/mout/date/totalDaysInMonth.js
@@ -0,0 +1,23 @@
+var isDate = require('../lang/isDate');
+var isLeapYear = require('./isLeapYear');
+
+    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+
+    /**
+     * returns the total amount of days in the month (considering leap years)
+     */
+    function totalDaysInMonth(fullYear, monthIndex){
+        if (isDate(fullYear)) {
+            monthIndex = fullYear.getMonth();
+        }
+
+        if (monthIndex === 1 && isLeapYear(fullYear)) {
+            return 29;
+        } else {
+            return DAYS_IN_MONTH[monthIndex];
+        }
+    }
+
+    module.exports = totalDaysInMonth;
+
+
diff --git a/node_modules/mout/date/totalDaysInYear.js b/node_modules/mout/date/totalDaysInYear.js
new file mode 100644
index 0000000..b4b7e9b
--- /dev/null
+++ b/node_modules/mout/date/totalDaysInYear.js
@@ -0,0 +1,13 @@
+var isLeapYear = require('./isLeapYear');
+
+    /**
+     * return the amount of days in the year following the gregorian calendar
+     * and leap years
+     */
+    function totalDaysInYear(fullYear){
+        return isLeapYear(fullYear)? 366 : 365;
+    }
+
+    module.exports = totalDaysInYear;
+
+
diff --git a/node_modules/mout/date/weekOfTheYear.js b/node_modules/mout/date/weekOfTheYear.js
new file mode 100644
index 0000000..dd51b7f
--- /dev/null
+++ b/node_modules/mout/date/weekOfTheYear.js
@@ -0,0 +1,16 @@
+var dayOfTheYear = require('./dayOfTheYear');
+
+    /**
+     * Return the week of the year based on given firstDayOfWeek
+     */
+    function weekOfTheYear(date, firstDayOfWeek){
+        firstDayOfWeek = firstDayOfWeek == null? 0 : firstDayOfWeek;
+        var doy = dayOfTheYear(date);
+        var dow = (7 + date.getDay() - firstDayOfWeek) % 7;
+        var relativeWeekDay = 6 - firstDayOfWeek - dow;
+        return Math.floor((doy + relativeWeekDay) / 7);
+    }
+
+    module.exports = weekOfTheYear;
+
+
diff --git a/node_modules/mout/doc/array.md b/node_modules/mout/doc/array.md
new file mode 100644
index 0000000..62ceb15
--- /dev/null
+++ b/node_modules/mout/doc/array.md
@@ -0,0 +1,982 @@
+# array #
+
+Array utilities.
+
+
+
+
+## append(arr1, arr2):Array
+
+Appends an array to the end of the other.
+The first array will be modified and will contain the appended items.
+
+See: [`union()`](#union), [`combine()`](#combine)
+
+```js
+var foo = ['a', 'b'],
+    bar = ['b', 'd'];
+
+append(foo, bar); // ['a', 'b', 'b', 'd']
+```
+
+
+
+## collect(arr, callback, [thisObj]):Array
+
+Maps the items in `arr` and concatenates the resulting arrays.
+
+See: [`map()`](#map)
+
+```js
+collect([1, 2, 3], function(val) {
+    return [val, val % 2];
+}); // [1, 1, 2, 0, 3, 1];
+
+collect(['a', 'bb', ''], function(val) {
+    return val.split('');
+}); // ['a', 'b', 'b']
+```
+
+It also supports a shorthand syntax:
+
+```js
+var items = [{ a: [1] }, { b: 'foo' }, { a: [2, 3] }];
+collect(items, 'a'); // [1, 2, 3];
+```
+
+
+
+## combine(arr1, arr2):Array
+
+Combines an array with all the items of another.
+The first array will be modified and will contain the combined items.
+Does not allow duplicates and is case and type sensitive.
+
+See: [`union()`](#union), [`append()`](#append)
+
+```js
+var foo = ['a', 'b'],
+    bar = ['b', 'd'];
+
+combine(foo, bar); // ['a', 'b', 'd']
+```
+
+
+
+## compact(arr):Array
+
+Returns a new Array without any `null` or `undefined` values. Note that it will
+keep empty strings and other falsy values (simillar to Ruby Array#compact).
+
+```js
+var arr = [0, 1, null, false, '', 'foo', undefined, 'bar'];
+compact(arr); // [0, 1, false, '', 'foo', 'bar'];
+```
+
+
+
+## contains(arr, value):Boolean
+
+Checks if Array contains value. Alias to `indexOf(arr, val) !== -1`.
+
+```js
+var arr = [1, 2, 3];
+contains(arr, 2);      // true
+contains(arr, 'foo');  // false
+```
+
+
+
+## difference(...arrs):Array
+
+Return a new Array with elements that aren't present in the other Arrays
+besides the first one.
+
+Works like [Python set#difference](http://docs.python.org/library/stdtypes.html#set.difference).
+
+It will remove duplicates.
+
+See: [`xor()`](#xor), [`intersection()`](#intersection)
+
+```js
+var a = ['a', 'b', 1];
+var b = ['c', 1];
+difference(a, b); // ['a', 'b']
+```
+
+
+## equals(a, b, [compare]):Boolean
+
+Checks if both arrays are equal.
+
+```js
+equals([1, 2], [1, 2]); // true
+equals([2, 4], [1, 2]); // false
+```
+
+By default it uses the [lang/is](lang.html#is) as the `compare` function but
+you can pass a custom function to change the behavior.
+
+```js
+function loose(a, b) {
+    return a == b;
+}
+equals(['1', 2], [1, 2], loose); // true
+```
+
+See: [object/equals](object.html#equals), [lang/deepEquals](lang.html#deepEquals)
+
+
+
+## every(arr, callback, [thisObj]):Array
+
+Crossbrowser `Array.every()`.
+
+Tests whether all elements in the array pass the test implemented by the provided function.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var items = [1, 'foo', 'bar'];
+every(items, isString);   // false
+every(items, isFunction); // false
+every(items, function(val, key, arr){
+    return val != null;
+}); // true
+```
+
+more info at [MDN Array#every](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every)
+
+It also supports a shorthand syntax:
+
+```js
+var items = [{id:1, active:true}, {id:3, active:true}, {id:8, active:true}];
+// all items with `id === 8`
+every(items, {id:8}); // false
+// `active` is truthy on all items
+every(items, 'active'); // true
+```
+
+
+
+## filter(arr, callback, [thisObj]):Array
+
+Crossbrowser `Array.filter()`.
+
+Creates a new array with all elements that pass the callback test.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var nums = [1, 2, 3, 4, 5, 6];
+var oddNumbers = filter(nums, function(val, key, arr){
+    return (val % 2) !== 0;
+});
+// > [1, 3, 5]
+```
+
+more info at [MDN Array#filter](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter)
+
+Filter also supports shorthand notation:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true},
+    {name:'jane', surname:'doe', beard:false}
+];
+// filter item that matches all properties/values pairs
+filter(arr, {name:'john', beard:false});
+// > [{name:'john', surnname:'connor', beard:false}]
+// items where 'beard' is a truthy value
+filter(arr, 'beard');
+// > [{name:'john', surnname:'doe', beard:true}]
+```
+
+See [`reject()`](#reject)
+
+
+
+## find(arr, callback, [thisObj]):*
+
+Loops through all the items in the Array and returns the first one that passes
+a truth test (callback).
+
+```js
+var arr = [123, {a:'b'}, 'foo', 'bar'];
+find(arr, isString); // "foo"
+find(arr, isNumber); // 123
+find(arr, isObject); // {a:'b'}
+```
+
+Find also supports shorthand notation:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true}
+];
+// first item that matches all properties/values pairs
+find(arr, {name:'john'}); // {name:'john', surnname:'connor', beard:false}
+// first item where 'beard' is a truthy value
+find(arr, 'beard'); // {name:'john', surnname:'doe', beard:true}
+```
+
+See: [findIndex()](#findIndex), [findLast()](#findLast),
+[findLastIndex()](#findLastIndex)
+
+
+
+## findLast(arr, callback, [thisObj]):*
+
+Loops through all the items in the Array (starting from last item) and returns
+the first one that passes a truth test (callback).
+
+```js
+var arr = [123, {a:'b'}, 'foo', 'bar'];
+findLast(arr, isString); // "bar"
+findLast(arr, isNumber); // 123
+findLast(arr, isObject); // {a:'b'}
+```
+
+`findLast` also supports shorthand notation:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true}
+];
+// last item that matches all properties/values pairs
+findLast(arr, {name:'john'}); // {name:'john', surnname:'doe', beard:true}
+// last item where 'beard' is a truthy value
+findLast(arr, 'beard'); // {name:'john', surnname:'doe', beard:true}
+```
+
+See: [find()](#find), [findIndex()](#findIndex),
+[findLastIndex()](#findLastIndex)
+
+
+
+## findIndex(arr, iterator, [thisObj]):Number
+
+Loops through the items in the Array and returns the index of the first one
+that passes a truth test (callback).
+
+Returns `-1` if no item was found that passes the truth test.
+
+```js
+var arr = [1, { a: 1 }, 'foo', 'bar'];
+findIndex(arr, isString); // 2
+findIndex(arr, isNumber); // 0
+findIndex(arr, isObject); // 1
+findIndex(arr, isRegExp); // -1
+```
+
+`findIndex` also supports shorthand notation:
+
+```js
+var pets = [
+    { pet: 'dog', name: 'Sam' },
+    { pet: 'dog', name: 'Maggie' }
+];
+
+findIndex(pets, { pet: 'dog' }); // 0
+findIndex(pets, { name: 'Maggie' }); // 1
+```
+
+See: [find()](#find), [findLastIndex()](#findLastIndex)
+
+
+
+## findLastIndex(arr, iterator, [thisObj]):Number
+
+Loops through the items in the Array on the reverse order and returns the index
+of the first one that passes a truth test (callback).
+
+Returns `-1` if no item was found that passes the truth test.
+
+```js
+var arr = [1, { a: 1 }, 'foo', 'bar'];
+findLastIndex(arr, isString); // 3
+findLastIndex(arr, isNumber); // 0
+findLastIndex(arr, isObject); // 1
+findLastIndex(arr, isRegExp); // -1
+```
+
+`findLastndex` also supports shorthand notation:
+
+```js
+var pets = [
+    { pet: 'dog', name: 'Sam' },
+    { pet: 'dog', name: 'Maggie' }
+];
+
+findLastIndex(pets, { pet: 'dog' }); // 1
+findLastIndex(pets, { name: 'Sam' }); // 0
+```
+
+See: [find()](#find), [findIndex()](#findIndex)
+
+
+
+## flatten(arr, [level]):Array
+
+Recursively flattens an array. A new array containing all the elements is
+returned. If `level` is specified, it will only flatten up to that level.
+Note that arrays within objects will not be flattened.
+
+### Example
+
+```js
+flatten([1, [2], [3, [4, 5]]]);
+// > [1, 2, 3, 4, 5]
+flatten([1, [2], [3, [4, 5]]], 1);
+// > [1, 2, 3, [4, 5]]
+```
+
+See: [`object/flatten()`](./object.html#flatten)
+
+
+## forEach(arr, callback, [thisObj]):void
+
+Crossbrowser `Array.forEach()`.
+
+It allows exiting the iteration early by returning `false` on the callback.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var items = ['foo', 'bar', 'lorem', 'ipsum'];
+forEach(items, function(val, key, arr){
+    console.log(key +' : '+ val);
+    if (val === 'lorem') {
+        // stop iteration (break)
+        return false;
+    }
+});
+```
+
+more info at [MDN Array#forEach](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach)
+
+
+
+## groupBy(arr, [categorize=identity], [thisObj]):Object
+
+Groups array elements by the `key` returned from the `categorize` function.
+
+It will use the [function/identity](function.html#identity) as the default
+`categorize` function.
+
+```js
+var items = ['lorem', 'ipsum', 'foo', 'bar', 'baz'];
+groupBy(items, function(val) { return val.length });
+// > {'3': ['foo', 'bar', 'baz'], '5': ['lorem', 'ipsum']}
+```
+
+
+
+## indexOf(arr, item, [fromIndex]):Number
+
+Crossbrowser `Array.indexOf()`.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#indexOf](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf)
+
+
+
+
+## insert(arr, ...items):Number
+
+Push items into array only if they aren't contained by it. Returns the new
+`length` of the array.
+
+See: [`remove()`](#remove), [`removeAll()`](#removeAll),
+[`contains()`](#contains)
+
+```js
+var arr = ['a', 'b'];
+insert(arr, 'a');       // 2 : ['a', 'b']
+insert(arr, 'c');       // 3 : ['a', 'b', 'c']
+insert(arr, 1, 2, 'b'); // 5 : ['a', 'b', 'c', 1, 2]
+```
+
+
+
+## intersection(...arrs):Array
+
+Return a new Array with elements common to all Arrays.
+
+Similar to Python set#intersection and underscore.js intersection.
+
+It will remove duplicates.
+
+See: [`difference()`](#difference), [`xor()`](#xor)
+
+```js
+var a = ['a', 'b', 1],
+    b = ['c', 1],
+    c = [1, 2, 3];
+intersection(a, b, c); // [1]
+```
+
+
+
+## invoke(arr, methodName[, ...args]):Array
+
+Call `methodName` on each item of the array passing custom arguments if needed.
+
+```js
+invoke([[3,2,1], [9,5,2]], 'sort'); // [[1,2,3], [2,5,9]]
+```
+
+
+
+## join(arr, [separator]):String
+
+Joins the strings in `arr`, inserting `separator` between each value.
+
+This ignores null values and empty strings that are in the array. `separator`
+defaults to an empty string. This will convert all non-string objects in the
+array to a string.
+
+### Example
+
+```js
+join(['a', 'b', 'c']); // 'abc'
+join(['foo', 'bar'], ', '); // 'foo, bar'
+join([null, 'foo', '', 'bar', undefined], ':'); // 'foo:bar'
+```
+
+
+## last(arr):*
+
+Returns the last element of an array without modifying the array.
+
+
+```js
+last( [1, 2, 3, 4] ) // > 4
+last( ['foo', 'bar'] ) // > 'bar'
+```
+
+
+## lastIndexOf(arr, item, [fromIndex]):Number
+
+Crossbrowser `Array.lastIndexOf()`.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#lastIndexOf](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf)
+
+
+
+## map(arr, callback, [thisObj]]):Array
+
+Crossbrowser `Array.map()`.
+
+Creates a new array with the results of calling a provided function on every
+element in this array.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+See: [`collect()`](#collect)
+
+```js
+var nums = [1,2,3,4];
+var double = map(nums, function(val, key, arr){
+    return val * 2;
+});
+// > [2, 4, 6, 8]
+```
+
+more info at [MDN Array#map](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map)
+
+It also supports a shorthand notation which can be used to achieve same result
+as [`array/pluck`](#pluck):
+
+```js
+var src = ['lorem', 'ipsum', 'foo', 'amet'];
+// grab the "length" property of all items
+var lengths = map(src, 'length'); // [5, 5, 3, 4]
+```
+
+
+
+## max(arr, [iterator], [thisObj]):*
+
+Returns maximum value inside array or use a custom iterator to define how items
+should be compared.
+
+See: [`min()`](#min)
+
+```js
+max([10, 2, 7]); // 10
+max(['foo', 'lorem', 'amet'], function(val){
+    return val.length;
+}); // 'lorem'
+```
+
+It also supports a shorthand notation:
+
+```js
+max(['foo', 'lorem', 'amet'], 'length'); // "lorem"
+```
+
+
+
+## min(arr, [iterator], [thisObj]):*
+
+Returns minimum value inside array or use a custom iterator to define how items
+should be compared.
+
+See: [`max()`](#max)
+
+```js
+min([10, 2, 7]); // 2
+min(['foo', 'lorem', 'amet'], function(val){
+    return val.length;
+}); // 'foo'
+```
+
+It also supports a shorthand notation:
+
+```js
+min(['foo', 'lorem', 'amet'], 'length'); // "foo"
+```
+
+
+
+## pick(arr, [nItems]):*
+
+Gets random item(s) and removes it from the original array.
+
+If `nItems` is specified it will return a new Array contained the *picked*
+items otherwise it returns a single item.
+
+See: [`random/choice()`](./random.html#choice)
+
+### Example:
+
+```js
+var arr = [1, 2, 3, 4, 5, 6];
+var item1 = pick(arr); // 4
+var item2 = pick(arr); // 1
+var items = pick(arr, 2); // [5, 2]
+console.log(arr); // [3, 6]
+```
+
+
+
+## pluck(arr, propName):Array
+
+Extract a list of property values.
+
+See: [`function/prop()`](function.html#prop)
+
+```js
+var users = [{name : 'John', age: 21}, {name: 'Jane', age : 27}];
+var names = pluck(users, 'name'); // ["John", "Jane"]
+var ages = pluck(users, 'age'); // [21, 27]
+```
+
+
+
+## range([start], stop[, step]):Array
+
+Creates a new Array with all the values inside the range. Works similarly to
+Python#range or PHP#range.
+
+### Arguments
+
+ 1. `[start]` (Number) : Range start. Default is `0`.
+ 2. `stop` (Number) : Range limit.
+ 3. `[step]` (Number) : Step size. Default is `1`.
+
+### Example
+
+```js
+range(5);         // [0, 1, 2, 3, 4, 5]
+range(0, 5);      // [0, 1, 2, 3, 4, 5]
+range(0, 5, 2);   // [0, 2, 4]
+range(20, 40, 5); // [20, 25, 30, 35, 40]
+```
+
+
+
+## reduce(arr, fn):*
+
+Crossbrowser `Array.reduce()`.
+
+Apply a function against an accumulator and each value of the array (from
+left-to-right) as to reduce it to a single value.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#reduce](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduce)
+
+
+
+## reduceRight(arr, fn):*
+
+Crossbrowser `Array.reduceRight()`.
+
+Apply a function simultaneously against two values of the array (from
+right-to-left) as to reduce it to a single value.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#reduceRight](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduceRight)
+
+
+
+## reject(arr, fn, thisObj):Array
+
+Creates a new array with all the elements that do **not** pass the truth test.
+Opposite of [`filter()`](#filter).
+
+See [`filter()`](#filter)
+
+### Example
+
+```js
+var numbers = [1, 2, 3, 4, 5, 6];
+reject(numbers, function(x) { return (x % 2) !== 0; }); // [2, 4, 6]
+```
+
+It also supports a shorthand syntax:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true},
+    {name:'jane', surname:'doe', beard:false}
+];
+// reject items that matches all properties/values pairs
+reject(arr, {name:'john'});
+// > [{name:'jane', surnname:'doe', beard:false}]
+// reject items where 'beard' is a truthy value
+filter(arr, 'beard');
+// > [{name:'john', surnname:'connor', beard:false},
+//    {name:'jane', surname:'doe', beard:false}]
+```
+
+
+
+## remove(arr, item):void
+
+Remove a single item from the array.
+
+IMPORTANT: it won't remove duplicates, just a single item.
+
+### Example
+
+```js
+var foo = [1, 2, 3, 4];
+remove(foo, 2);
+console.log(foo); // [1, 3, 4]
+```
+
+
+
+## removeAll(arr, item):void
+
+Remove all instances of an item from the array.
+
+### Example
+
+```js
+var foo = [1, 2, 3, 4, 2, 2];
+removeAll(foo, 2);
+console.log(foo); // [1, 3, 4];
+```
+
+## reverse(arr):void
+
+Returns a copy of the array with all elements in reversed order.
+
+### Example
+
+```js
+var foo = [1, 2, 3, 4, 5];
+var bar = reverse(foo);
+console.log(bar); // [5, 4, 3, 2, 1];
+
+console.log(foo); // [1, 2, 3, 4, 5];
+```
+
+
+
+
+## shuffle(arr):Array
+
+Returns a new Array with items randomly sorted (shuffled). Similar to Ruby Array#shuffle.
+
+### Example
+
+```js
+var arr = ['a', 'b', 'c', 'd', 'e'];
+shuffle(arr); // ['b', 'd', 'e', 'c', 'a']
+```
+
+
+
+## slice(arr, [start], [end]):Array
+
+Returns a new array containing the items from `arr` from the start index to the
+end index.
+
+If `start` is omitted, it will start at `0`. If `end` is omitted, it will used
+the last index of the array.  If `start` or `end` is negative, it is used as an
+offset from the end of the array.
+
+It will also convert array-like objects to arrays.
+
+### Example
+
+```js
+slice([1, 2, 3, 4], 1, 2); // [2, 3]
+slice([1, 2, 3], 1); // [2, 3]
+slice([1, 2, 3]); // [1, 2, 3]
+slice({ length: 2, 0: 'a', 1: 'b' }); // ['a', 'b']
+slice([1, 2, 3], 0, -1); // [1, 2]
+slice([1, 2, 3], -2); // [2, 3]
+```
+
+
+
+## some(arr, callback, [thisObj]):Array
+
+Crossbrowser `Array.some()`.
+
+Tests whether some element in the array passes the test implemented by the provided function.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var items = [1, 'foo', 'bar'];
+some(items, isString);   // true
+some(items, isFunction); // false
+```
+
+more info at [MDN Array#some](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some)
+
+It also supports a shorthand syntax:
+
+```js
+var items = [{id:1, active:true}, {id:3, active:false}, {id:8, active:false}];
+// at least one item with `id === 8`
+some(items, {id:8}); // true
+// `active` is truthy on at least one item
+some(items, 'active'); // true
+```
+
+see also: [`object/matches`](object.html#matches)
+
+
+
+## sort(arr, [compareFn]):Array
+
+Returns a sorted Array using the [Merge Sort](http://en.wikipedia.org/wiki/Merge_sort) algorithm (stable sort).
+
+The `Array.prototype.sort` browser implementations differ since the sorting algorithm isn't described in the ES spec - [in V8 it isn't stable](http://code.google.com/p/v8/issues/detail?id=90) and [on Firefox it is stable](https://bugzilla.mozilla.org/show_bug.cgi?id=224128) - so this function doesn't use the browser native implementation and is recommended in cases where a stable sort is required (items should preserve same order if already sorted).
+
+**Important:** It does logical comparisson by default (greater/less than) and
+not a string comparisson like the native `Array#sort`.
+
+### compareFn
+
+If `compareFn` is supplied elements are sorted based on the value returned by
+the `compareFn`.
+
+ - If `compareFn(a, b)` is less than `0`, sort `a` to a lower index than `b`.
+ - If `compareFn(a, b)` returns `0`, leave `a` and `b` unchanged with respect
+   to each other, but sorted with respect to all different elements.
+ - If `compareFn(a, b)` is greater than `0`, sort `b` to a lower index than
+   `a`.
+
+See: [`sortBy`](#sortBy)
+
+### Example
+
+```js
+sort([187, 23, 47, 987, 12, 59, 0]); // [0, 12, 23, 47, 59, 187, 987]
+sort(['a', 'z', 'c', 'beta', 'b']); // ['a', 'b', 'beta', 'c', 'z']
+
+// ['sit', 'amet', 'lorem', 'ipsum']
+sort(['lorem', 'ipsum', 'sit', 'amet'], function(a, b){
+    // sort by length, items with same length
+    // will keep the relative order (stable)
+    return a.length - b.length;
+});
+
+// [4, 3, 2, 1]
+sort([2, 3, 1, 4], function(a, b){
+    // reverse sort
+    return b - a;
+});
+```
+
+
+
+## sortBy(arr, callback, [context]):Array
+
+Returns an array sorted by the result of the callback.
+
+The callback is called for each item that is to be sorted, and the
+results of the callback are used to sort the array. The callback
+is called with the item as the first parameter, optionally with
+the provided context.
+
+It also supports a shorthand notation which can be used to sort by a property
+name.
+
+See: [`sort`](#sort)
+
+```js
+// Returns [{ a: 1 }, { a: 2 }, { a: 3 }]
+sortBy([{ a: 1 }, { a: 3 }, { a: 2 }],
+    function(item) { return item.a; });
+
+// Same as above, using shorthand notation
+sortBy([{ a: 1 }, { a: 3 }, { a: 2 }], 'a');
+```
+
+
+
+## split(arr, [segments]):Array
+
+Splits an array into a fixed number of segments.
+
+The number of segments is specified by `segments` and defaults to 2. If the
+array cannot be evenly split, the first segments will contain the extra items.
+If `arr` is empty, an empty array is returned. If `arr.length` is less than
+`segments`, then the resulting array will have `arr.length` number of
+single-element arrays.
+
+### Example
+```js
+split([1, 2, 3, 4, 5], 3) // [ [1, 2], [3, 4], [5] ]
+split([1, 2, 3, 4, 5]) // [ [1, 2, 3], [4, 5] ]
+split([]) // []
+split([1, 2], 3) // [ [1], [2] ]
+```
+
+
+
+## take(times, callback, [thisObj]):Array
+
+Builds a new array based on the returned values from the given `callback`.
+
+```js
+take(4, function(i, total) {
+    return i / total;
+});
+// > [0, 0.25, 0.5, 0.75]
+```
+
+see: [function/times](../function.html#times)
+
+
+
+## toLookup(arr, key):Object
+
+Create an object that indexes the items in the array by a key. If `key` is a function, the key for each value in the resulting object will be the result of calling the function with the value as an argument. Otherwise `key` specifies the property on each value to use as the key.
+
+### Example
+
+```js
+var foo = [{ name: 'a', thing: 1 }, { name: 'b', thing: 2 }];
+// { a: { name: 'a', thing: 1 }, b: { name: 'b', thing: 2 } }
+toLookup(foo, 'name');
+// same as above
+toLookup(foo, function (value) { return value.name; });
+```
+
+
+
+## union(...arrs):Array
+
+Concat multiple arrays removing duplicates.
+
+```js
+var a = ['a', 'b'],
+    b = ['c', 'a'],
+    c = [1, 'b', 2, 3, 'a'];
+
+//note that unique remove from begin to end
+union(a, b, c); // ['c', 1, 'b', 2, 3, 'a']
+```
+
+
+
+## unique(arr, [compare]):Array
+
+Return a new Array of unique items.
+
+**IMPORTANT:** duplicates are removed starting from begining of array.
+
+```js
+var arr = [1, 2, 3, 4, 2, 2, 4];
+var foo = unique(arr);
+console.log(foo);
+// > [1, 3, 2, 4];
+
+// you also have the option to set a custom compare function
+var users = [{name: 'john'}, {name: 'paul'}, {name: 'john'}];
+var uniqueNames = unique(arr, function(a, b){
+    return a.name === b.name;
+});
+console.log(uniqueNames);
+// > [{name: 'paul'}, {name: 'john'}]
+```
+
+
+
+## xor(arr1, arr2):Array
+
+Exclusive OR. Returns items that are present in a single array.
+
+Works like [Python set#symmetric_difference](http://docs.python.org/library/stdtypes.html#set.symmetric_difference) renamed for brevity.
+
+It will remove duplicates.
+
+See: [`difference()`](#difference), [`intersection()`](#intersection)
+
+```js
+var a = ['a', 'b', 1];
+var b = ['c', 1];
+xor(a, b); // ['a', 'b', 'c']
+```
+
+
+
+## zip(...arrs):Array
+
+Groups the elements of each array at their corresponding indexes.
+
+Useful for separate data sources that are coordinated through matching array
+indexes. For a matrix of nested arrays, `zip.apply(...)` can transpose the
+matrix in a similar fashion.
+
+```js
+// [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]
+zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
+```
+
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/mout/doc/collection.md b/node_modules/mout/doc/collection.md
new file mode 100644
index 0000000..2ffcab1
--- /dev/null
+++ b/node_modules/mout/doc/collection.md
@@ -0,0 +1,233 @@
+# collection #
+
+Methods for dealing with collections (Array or Objects).
+
+
+
+## contains(list, value):Boolean
+
+Checks if collection contains value.
+
+```js
+contains({a: 1, b: 2, c: 'bar'}, 2); // true
+contains([1, 2, 3], 'foo');  // false
+```
+
+See: [array/contains](array.html#contains), [object/contains](object.html#contains)
+
+
+
+## every(list, callback, [thisObj]):Boolean
+
+Tests whether all values in the collection pass the test implemented by the
+provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+every(obj, isNumber); // false
+```
+
+See: [array/every](array.html#every), [object/every](object.html#every)
+
+
+
+## filter(list, callback, [thisObj]):Array
+
+Filter collection properties.
+
+See: [array/filter](array.html#filter), [object/filter](object.html#filter)
+
+
+
+## find(list, callback, [thisObj]):*
+
+Loops through all the values in the collection and returns the first one that
+passes a truth test (callback).
+
+**Important:** loop order over objects properties isn't guaranteed to be the
+same on all environments.
+
+```js
+find({a: 'foo', b: 12}, isString); // 'foo'
+find(['foo', 12], isNumber); // 12
+```
+
+See: [array/find](array.html#find), [object/find](object.html#find)
+
+
+
+## forEach(list, callback, [thisObj])
+
+Loop through all values of the collection.
+
+See: [array/forEach](array.html#forEach), [object/forOwn](object.html#forOwn)
+
+
+
+## map(list, callback, [thisObj]):Array
+
+Returns a new collection where the properties values are the result of calling
+the callback for each property in the original collection.
+
+See: [array/map](array.html#map), [object/map](object.html#map)
+
+
+
+## max(list, [iterator]):*
+
+Returns maximum value inside collection or use a custom iterator to define how
+items should be compared.
+
+See: [`min()`](#min), [array/max](array.html#max), [object/max](object.html#max)
+
+```js
+max({a: 100, b: 2, c: 1, d: 3, e: 200}); // 200
+max(['foo', 'lorem', 'amet'], function(val){
+    return val.length;
+}); // 'lorem'
+```
+
+
+
+## min(list, [iterator]):*
+
+Returns minimum value inside collection or use a custom iterator to define how
+items should be compared.
+
+See: [`max()`](#max), [array/min](array.html#min), [object/min](object.html#min)
+
+```js
+min([10, 2, 7]); // 2
+min({a: 'foo', b: 'lorem', c: 'amet'}, function(val){
+    return val.length;
+}); // 'foo'
+```
+
+
+
+## pluck(list, propName):Array
+
+Extract a list of property values.
+
+```js
+var users = [
+    {
+        name : 'John',
+        age : 21
+    },
+    {
+        name : 'Jane',
+        age : 27
+    }
+];
+
+pluck(users, 'name'); // ["John", "Jane"]
+pluck(users, 'age'); // [21, 27]
+
+users = {
+    first: {
+        name : 'John',
+        age : 21
+    },
+    second: {
+        name : 'Mary',
+        age : 25
+    }
+};
+
+pluck(users, 'name'); // ['John', 'Mary']
+```
+
+See: [array/pluck](array.html#pluck), [object/pluck](object.html#pluck)
+
+
+
+## reduce(list, callback, initial, [thisObj]):*
+
+Apply a function against an accumulator and each value in the collection as to
+reduce it to a single value.
+
+```js
+var obj = {a: 1, b: 2, c: 3, d: 4};
+
+function sum(prev, cur, key, list) {
+    return prev + cur;
+}
+
+reduce(obj, sum); // 10
+```
+
+See: [array/reduce](array.html#reduce), [object/reduce](object.html#reduce)
+
+
+
+## reject(list, fn, [thisObj]):Array
+
+Creates a new array with all the elements that do **not** pass the truth test.
+Opposite of [`filter()`](#filter).
+
+### Example
+
+```js
+var numbers = [1, 2, 3, 4, 5];
+reject(numbers, function(x) { return (x % 2) !== 0; }); // [2, 4]
+
+var obj = {a: 1, b: 2, c: 3, d: 4, e: 5};
+reject(obj, function(x) { return (x % 2) !== 0; }); // [2, 4]
+```
+
+See: [array/reject](array.html#reject), [object/reject](object.html#reject)
+
+
+
+## size(list):Number
+
+Returns the number of values in the collection.
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+size(obj);     // 3
+size([1,2,3]); // 3
+size(null);    // 0
+```
+
+See: [object/size](object.html#size)
+
+
+
+## some(list, callback, [thisObj]):Boolean
+
+Tests whether any values in the collection pass the test implemented by the
+provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+some(obj, isNumber);      // true
+some(obj, isString);      // true
+some([1, 2, 3], isNumber) // true
+some([1, 2, 3], isString) // false
+```
+
+See: [array/some](array.html#some), [object/some](object.html#some)
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/mout/doc/date.md b/node_modules/mout/doc/date.md
new file mode 100644
index 0000000..e140399
--- /dev/null
+++ b/node_modules/mout/doc/date.md
@@ -0,0 +1,307 @@
+# date #
+
+Date utilities.
+
+
+## dayOfTheYear(date):Number
+
+How many days elapsed since begining of the year (following gregorian
+calendar).
+
+```js
+// Jan 1st
+dayOfTheYear(new Date(2013, 0, 1)); // 1
+// Dec 31th
+dayOfTheYear(new Date(2013, 11, 31)); // 364
+```
+
+
+
+## diff(date1, date2, [unitName]):Number
+
+Calculate the difference between dates (range).
+
+The returned value is always positive. The default `unitName` is `"ms"`.
+
+Available units: `year`, `month`, `week`, `day`, `hour`, `minute`, `second`,
+`millisecond`.
+
+See: [`time/convert()`](time.html#convert)
+
+```js
+var d1 = new Date(2012, 4, 5);
+var d2 = new Date(2013, 4, 8);
+diff(d1, d2);          // 31795200000
+diff(d1, d2, 'hour');  // 8832
+diff(d1, d2, 'week');  // 52.57142857142857
+diff(d1, d2, 'month'); // 12.096774193548388
+diff(d1, d2, 'year');  // 1.0082191780821919
+```
+
+
+
+## isLeapYear(fullYear|date):Boolean
+
+Checks if it's a [leap year](http://en.wikipedia.org/wiki/Leap_year) according
+to the Gregorian calendar.
+
+see: [`totalDaysInMonth()`](#totalDaysInMonth)
+
+```js
+isLeapYear(2012); // true
+isLeapYear(2013); // false
+isLeapYear(new Date(2012, 2, 28)); // true
+```
+
+
+## isSame(date1, date2[, period]):Boolean
+
+Check if both dates are the "same".
+
+You can pass an optional *period* used to set the comparisson precision.
+
+Available periods: `year`, `month`, `week`, `day`, `hour`, `minute`, `second`.
+
+```js
+var date1 = new Date(2013, 1, 3);
+var date2 = new Date(2013, 2, 9);
+isSame(date1, date2);          // false
+isSame(date1, date2, 'day');   // false
+isSame(date1, date2, 'month'); // false
+isSame(date1, date2, 'year');  // true
+```
+
+
+
+## parseIso(str):Number
+
+Parses an [ISO8601](http://en.wikipedia.org/wiki/Iso8601) date and returns the
+number of milliseconds since January 1, 1970, 00:00:00 UTC, or `NaN` if it is
+not a valid ISO8601 date.
+
+This parses *all* ISO8601 dates, including dates without times, [ordinal
+dates](https://en.wikipedia.org/wiki/ISO_8601#Ordinal_dates), and the compact
+representation (omitting delimeters). The only exception is [ISO week
+dates](https://en.wikipedia.org/wiki/ISO_week_date), which are not parsed.
+
+If no time zone offset is specified, it assumes UTC time.
+
+```js
+// Jan 01, 1970 00:00 GMT
+parseIso('1970-01-01T00:00:00')    // 0
+parseIso('1970-001')               // 0
+parseIso('1970-01-01')             // 0
+parseIso('19700101T000000.00')     // 0
+parseIso('1970-01-01T02:00+02:00') // 0
+
+// Jan 02, 2000 20:10 GMT+04:00
+parseIso('2000-01-02T20:10+04:00') // 946829400000
+```
+
+
+## quarter(date):Number
+
+Get a number between 1 to 4 that represents the quarter of the year.
+
+```js
+quarter(new Date(2013, 1, 19)); // 1
+quarter(new Date(2013, 4, 12)); // 2
+quarter(new Date(2013, 7, 25)); // 3
+quarter(new Date(2013, 10, 8)); // 4
+```
+
+
+## startOf(date, period):Date
+
+Get a new Date at the start of the period.
+
+Available periods: `year`, `month`, `week`, `day`, `hour`, `minute`, `second`.
+
+```js
+// Apr 05 2013 11:27:43
+var date = new Date(2013, 3, 5, 11, 27, 43, 123);
+startOf(date, 'year');  // Jan 01 2013 00:00:00
+startOf(date, 'month'); // Apr 01 2013 00:00:00
+startOf(date, 'day');   // Apr 05 2013 00:00:00
+startOf(date, 'hour');  // Apr 05 2013 11:00:00
+```
+
+
+
+## strftime(date, format, [l10n]):String
+
+Format date based on strftime format.
+
+Replaced tokens:
+
+<dl>
+<dt>%a</dt><dd> locale's abbreviated weekday name.</dd>
+<dt>%A</dt><dd> locale's full weekday name.</dd>
+<dt>%b</dt><dd> locale's abbreviated month name.</dd>
+<dt>%B</dt><dd> locale's full month name.</dd>
+<dt>%c</dt><dd> locale's appropriate date and time representation.</dd>
+<dt>%C</dt><dd> century number (the year divided by 100 and truncated
+to an integer) as a decimal number [00..99].</dd>
+<dt>%d</dt><dd> day of the month as a decimal number [01..31].</dd>
+<dt>%D</dt><dd>same as %m/%d/%y.</dd>
+<dt>%e</dt><dd> day of the month as a decimal number [1..31];
+a single digit is preceded by a space.</dd>
+<dt>%F</dt><dd>The ISO 8601 date format (%Y-%m-%d)</dd>
+<dt>%h</dt><dd>same as %b.</dd>
+<dt>%H</dt><dd> hour (24-hour clock) as a decimal number [00..23].</dd>
+<dt>%I</dt><dd> hour (12-hour clock) as a decimal number [01..12].</dd>
+<dt>%j</dt><dd> day of the year as a decimal number [001..366].</dd>
+<dt>%l</dt><dd> hour (12-hour clock) as a decimal number (range 1 to 12); single digits are preceded by a blank</dd>
+<dt>%L</dt><dd> zero-padded milliseconds [000..999]</dd>
+<dt>%m</dt><dd> month as a decimal number [01..12].</dd>
+<dt>%M</dt><dd> minute as a decimal number [00..59].</dd>
+<dt>%n</dt><dd> newline character.</dd>
+<dt>%p</dt><dd> locale's equivalent of either "am" or "pm"</dd>
+<dt>%P</dt><dd> locale's equivalent of either "AM" or "PM"</dd>
+<dt>%r</dt><dd> time in a.m. and
+p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.</dd>
+<dt>%R</dt><dd> time in 24 hour notation (%H:%M).</dd>
+<dt>%s</dt><dd> seconds since Epoch (1970-01-01 00:00:00 UTC)</dd>
+<dt>%S</dt><dd> second as a decimal number [00..60].</dd>
+<dt>%t</dt><dd> tab character.</dd>
+<dt>%T</dt><dd> time (%H:%M:%S).</dd>
+<dt>%u</dt><dd> weekday as a decimal number [1..7], with 1 representing
+Monday.</dd>
+<dt>%U</dt><dd> week number of the year (Sunday as the first day of
+the week) as a decimal number [00..53].</dd>
+<del><dt>%V</dt><dd> week number of the year (Monday as the first day of the
+week) as a decimal number [01..53].  If the week containing 1 January has
+four or more days in the new year, then it is considered week 1. Otherwise,
+it is the last week of the previous year, and the next week is week 1.</dd></del>
+<dt>%w</dt><dd> weekday as a decimal number [0..6], with 0 representing
+Sunday.</dd>
+<dt>%W</dt><dd> week number of the year (Monday as the first day of
+the week) as a decimal number [00..53].  All days in a new year preceding
+the first Monday are considered to be in week 0.</dd>
+<dt>%x</dt><dd> locale's appropriate date representation.</dd>
+<dt>%X</dt><dd> locale's appropriate time representation.</dd>
+<dt>%y</dt><dd> year without century as a decimal number [00..99].</dd>
+<dt>%Y</dt><dd> year with century as a decimal number.</dd>
+<dt>%Z</dt><dd> timezone name or abbreviation, or by no bytes
+if no timezone information exists.</dd>
+<dt>%%</dt><dd>is replaced by %.</dd>
+</dl>
+
+```js
+var date = new Date(2013, 3, 8, 9, 2, 4);
+strftime(date, '%Y-%m-%d'); // "2013-04-08"
+strftime(date, '%R'); // "09:02"
+strftime(date, '%Y-%m-%dT%H:%M:%S%z'); // "2013-04-08T09:02:04+0000"
+```
+
+You can also set a custom locale:
+
+```js
+var ptBr = require('mout/date/i18n/pt-BR');
+strftime(date, '%a, %d %b', ptBr); // 'Seg, 08 Abr'
+strftime(date, '%A, %d %B', ptBr); // 'Segunda, 08 Abril'
+```
+
+To set it globally:
+
+```js
+require('mout/date/i18n_').set( customLocaleData );
+```
+
+See [date/i18n](https://github.com/mout/mout/tree/master/src/date/i18n)
+for localization examples.
+
+
+
+## timezoneAbbr(date):String
+
+Return timezone abbreviation or similar data.
+
+The result will vary based on the OS/browser since some environments doesn't
+provide enough info about the current locale.
+
+```js
+// IE 7-8
+timezoneAbbr(new Date()); // "-0500"
+// Chrome, FF, V8
+timezoneAbbr(new Date()); // "EST"
+```
+
+
+
+## timezoneOffset(date):String
+
+Return time zone as hour and minute offset from UTC (e.g. +0900).
+
+It's important to note that JavaScript Date object will use the system locale
+info to determinate the [timezone
+offset](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)
+and that daylight saving time affects the result.
+
+```js
+// if system locale is EST
+timezoneOffset(new Date()); // -0500
+```
+
+
+
+## totalDaysInMonth(fullYear, monthIndex):Number
+
+Returns the amount of days in the month taking into consideration leap years
+(following Gregorian calendar).
+
+see: [`isLeapYear()`](#isLeapYear)
+
+```js
+totalDaysInMonth(2008, 1); // 29 (leap year)
+totalDaysInMonth(2009, 1); // 28
+
+// you can also pass a Date object as single argument
+totalDaysInMonth( new Date(2013, 0, 1) ); // 31
+```
+
+
+## totalDaysInYear(fullYear):Number
+
+Returns the amount of days in the year taking into consideration leap years
+(following Gregorian calendar).
+
+see: [`isLeapYear()`](#isLeapYear), [`totalDaysInMonth()`](#totalDaysInMonth)
+
+```js
+totalDaysInYear(2008); // 366 (leap year)
+totalDaysInYear(2009); // 365
+
+// you can also pass a Date object as single argument
+totalDaysInYear( new Date(2013, 0, 1) ); // 365
+```
+
+
+
+## weekOfTheYear(date, [firstDayOfWeek]):Number
+
+Returns how many weeks elapsed since start of the year (`0..53`).
+
+`firstDayOfWeek` can be `0` (Sunday) or `1` (Monday). By default weeks start at
+Sunday.
+
+It will return `0` if `date` is before the first `firstDayOfWeek` of the year.
+
+```js
+// Tue Jan 01 2013
+weekOfTheYear( new Date(2013,0,1) ); // 0
+// Wed Jan 09 2013
+weekOfTheYear( new Date(2013,0,9) ); // 1
+// Sun Jan 01 2012
+weekOfTheYear( new Date(2012,0,1) ); // 1
+// Mon Jan 09 2012
+weekOfTheYear( new Date(2012,0,9) ); // 2
+```
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/mout/doc/function.md b/node_modules/mout/doc/function.md
new file mode 100644
index 0000000..5c55242
--- /dev/null
+++ b/node_modules/mout/doc/function.md
@@ -0,0 +1,293 @@
+# function #
+
+Function*(al)* utilities.
+
+
+## awaitDelay(fn, delay):Function
+
+Returns a function that ensures that `fn` is only called *after* `delay`
+milliseconds have elapsed. When the returned function is called before the
+delay has elapsed, it will wait until the delay has elapsed and then call `fn`.
+When the returned function is called after the delay has elapsed, it will call
+`fn` after the next "tick" (it will always be called asynchronously). The
+context and arguments that the returned function is called in are applied to
+`fn`.
+
+In the below example `onLoaded` will not be executed before a 1000 millisecond
+delay. Even if `loadImages` loads and calls `callback` earlier.  However, say
+the images take 1500 milliseconds to load, it will trigger `onLoaded`
+immediately.
+
+```js
+var callback = awaitDelay(onLoaded, 1000);
+loadImages(callback);
+function onLoaded(){
+    console.log('loaded');
+}
+```
+
+You can also cancel de delayed call by simply using the native `clearTimeout`
+method (like a regular `setTimeout` call).
+
+```js
+var timeoutId = callback();
+// onLoaded won't be called since it was canceled before the 1000ms delay
+clearTimeout(timeoutId);
+```
+
+### Arguments:
+
+ 1. `fn` (Function)    : Target Function
+ 2. `delay` (Number)   : Delay of execution in milliseconds
+
+See: [`debounce()`](#debounce)
+
+
+
+## bind(fn, context, [...args]):Function
+
+Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
+
+### Arguments
+
+ 1. `fn` (Function)    : Target Function
+ 2. `context` (Object) : Execution context (object used as `this`)
+ 3. `[...args]` (*)    : Arguments (0...n arguments)
+
+See: [`partial()`](#partial), [object/bindAll](./object.html#bindAll)
+
+
+
+## compose(...fn):Function
+
+Returns the composition of a list of functions, where each function consumes
+the return value of the function that follows. In math terms, composing the
+functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
+
+```js
+function add2(x) { return x + 2 }
+function multi2(x) { return x * 2 }
+map([1, 2, 3], compose(add2, multi2)); // [4, 6, 8]
+
+//same as
+map([1, 2, 3], function(x){
+    return add2( multi2(x) );
+});
+```
+
+
+
+## constant(value):Function
+
+Returns a new function that will always return `value` when called.
+
+```js
+var f = constant('foo');
+f(); // 'foo'
+
+// Provided arguments are ignored; value is always returned
+f(1); // 'foo'
+
+f = constant({ foo: 'bar' });
+f(); // { foo: 'bar' }
+```
+
+
+
+## debounce(fn, delay[, isAsap]):Function
+
+Creates a function that will delay the execution of `fn` until after `delay`
+milliseconds have elapsed since the last time it was invoked.
+
+Subsequent calls to the debounced function will return the result of the last
+`fn` call.
+
+```js
+// sometimes less is more
+var lazyRedraw = debounce(redraw, 300);
+foo.on.resize.add(lazyRedraw);
+```
+
+In this visualization, `|` is a debounced-function call and `X` is the actual
+callback execution:
+
+    Default
+    ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
+                             X                                 X
+
+    Debounced with `isAsap == true`:
+    ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
+    X                                 X
+
+You also have the option to cancel the debounced call if it didn't happen yet:
+
+```js
+lazyRedraw();
+// lazyRedraw won't be called since `cancel` was called before the `delay`
+lazyRedraw.cancel();
+```
+
+See: [`throttle()`](#throttle)
+
+
+## func(name):Function
+
+Returns a function that calls a method with given `name` on supplied object.
+Useful for iteration methods like `array/map` and `array/forEach`.
+
+See: [`prop()`](#prop)
+
+```js
+// will call the method `getName()` for each `user`
+var names = map(users, func('getName'));
+```
+
+
+
+## identity(val):*
+
+Returns the first argument provided to it.
+
+```js
+identity(3);     // 3
+identity(1,2,3); // 1
+identity('foo'); // "foo"
+```
+
+
+
+## partial(fn, [...args]):Function
+
+Return a partially applied function supplying default arguments.
+
+This method is similar to [`bind`](#bind), except it does not alter the this
+binding.
+
+### Arguments
+
+ 1. `fn` (Function)    : Target Function
+ 2. `[...args]` (*)    : Arguments (0...n arguments)
+
+See: [`bind()`](#bind)
+
+```js
+function add(a, b){ return a + b }
+var add10 = partial(add, 10);
+console.log( add10(2) ); // 12
+```
+
+
+
+## prop(name):Function
+
+Returns a function that gets a property with given `name` from supplied object.
+Useful for using in conjunction with `array/map` and/or for creating getters.
+
+See: [`array/pluck()`](array.html#pluck)
+
+```js
+var users = [{name:"John", age:21}, {name:"Jane", age:25}];
+// ["John", "Jane"]
+var names = map(users, prop('name'));
+```
+
+
+
+## series(...fn):Function
+
+Returns a function that will execute all the supplied functions in order and
+passing the same parameters to all of them. Useful for combining multiple
+`array/forEach` into a single one and/or for debugging.
+
+```js
+// call `console.log()` and `doStuff()` for each item item in the array
+forEach(arr, series(console.log, doStuff));
+```
+
+
+
+## throttle(fn, interval):Function
+
+Creates a function that, when executed, will only call the `fn` function at
+most once per every `interval` milliseconds.
+
+If the throttled function is invoked more than once during the wait timeout,
+`fn` will also be called on the trailing edge of the timeout.
+
+Subsequent calls to the throttled function will return the result of the last
+`fn` call.
+
+```js
+// sometimes less is more
+var lazyRedraw = throttle(redraw, 300);
+foo.on.resize.add(lazyRedraw);
+```
+
+In this visualization, `|` is a throttled-function call and `X` is the actual
+`fn` execution:
+
+    ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
+    X    X    X    X    X    X        X    X    X    X    X    X
+
+You also have the option to cancel the throttled call if it didn't happen yet:
+
+```js
+lazyRedraw();
+setTimeout(function(){
+    lazyRedraw();
+    // lazyRedraw will be called only once since `cancel` was called before
+    // the `interval` for 2nd call completed
+    lazyRedraw.cancel();
+}, 250);
+```
+
+See: [`debounce()`](#debounce)
+
+
+## timeout(fn, millis, context, [...args]):Number
+
+Functions as a wrapper for `setTimeout`. Calls a the function `fn` after a given delay `millis` in milliseconds.
+The function is called within the specified context. The return value can be used to clear the timeout using `clearTimeout`.
+
+```js
+var id = timeout(doStuff, 300, this);
+
+clearTimeout(id);
+```
+
+## times(n, callback, [context]):void
+
+Iterates over a callback `n` times.
+
+### Arguments
+
+ 1. `n` (Number)           : Number of iterations
+ 2. `callback` (Function)  : Closure executed for every iteration
+ 3. `context` (Object)     : Execution context (object used as `this`)
+
+```js
+var output = '';
+times(5, function(i) {
+    output += i.toString();
+});
+// output: 01234
+```
+
+## wrap(fn, wrapper):Function
+
+Wraps the first `fn` inside of the `wrapper` function, passing it as the first argument. This allows the `wrapper` to execute code before and after the `fn` runs, adjust the arguments, and execute it conditionally.
+
+```js
+var hello = function(name) { return "hello: " + name; };
+hello = wrap(hello, function(func) {
+  return "before, " + func("moe") + ", after";
+});
+hello();
+// output: 'before, hello: moe, after'
+```
+
+See: [`partial()`](#partial)
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/mout/doc/lang.md b/node_modules/mout/doc/lang.md
new file mode 100644
index 0000000..9324968
--- /dev/null
+++ b/node_modules/mout/doc/lang.md
@@ -0,0 +1,516 @@
+# lang #
+
+Language Utilities. Easier inheritance, scope handling, type checks.
+
+
+
+## clone(val):*
+
+Clone native types like Object, Array, RegExp, Date and primitives.
+
+This method will not clone values that are referenced within `val`. It will
+only copy the value reference to the new value. If the value is not a plain
+object but is an object, it will return the value unchanged.
+
+### Example
+
+```js
+var a = { foo: 'bar' };
+var b = clone(a);
+console.log(a === b); // false
+console.log(a.foo === b.foo); // true
+
+var c = [1, 2, 3];
+var d = clone(b);
+console.log(c === d); // false
+console.log(c); // [1, 2, 3]
+```
+
+See: [`deepClone()`](#deepClone)
+
+
+
+## createObject(parent, [props]):Object
+
+Create Object using prototypal inheritance and setting custom properties.
+
+Mix between [Douglas Crockford Prototypal Inheritance](http://javascript.crockford.com/prototypal.html) and [`object/mixIn`](./object.html#mixIn).
+
+### Arguments
+
+ 1. `parent` (Object)  : Parent Object
+ 2. `[props]` (Object) : Object properties
+
+### Example
+
+```js
+var base = {
+    trace : function(){
+        console.log(this.name);
+    }
+};
+
+var myObject = createObject(base, {
+    name : 'Lorem Ipsum'
+});
+
+myObject.trace(); // "Lorem Ipsum"
+```
+
+
+
+## ctorApply(constructor, args):Object
+
+Do `Function.prototype.apply()` on a constructor while maintaining prototype
+chain.
+
+```js
+function Person(name, surname) {
+    this.name = name;
+    this.surname = surname;
+}
+
+Person.prototype.walk = function(){
+    console.log(this.name +' is walking');
+};
+
+var args = ['John', 'Doe'];
+
+// "similar" effect as calling `new Person("John", "Doe")`
+var john = ctorApply(Person, args);
+john.walk(); // "John is walking"
+```
+
+
+
+## deepClone(val, [instanceClone]):*
+
+Deep clone native types like Object, Array, RegExp, Date and primitives.
+
+The `instanceClone` function will be invoked to clone objects that are not
+"plain" objects (as defined by [`isPlainObject`](#isPlainObject)) if it is
+provided. If `instanceClone` is not specified, it will not attempt to clone
+non-plain objects, and will copy the object reference.
+
+### Example
+
+```js
+var a = {foo:'bar', obj: {a:1, b:2}};
+var b = deepClone(a); // {foo:'bar', obj: {a:1, b:2}}
+console.log( a === b ); // false
+console.log( a.obj === b.obj ); // false
+
+var c = [1, 2, [3, 4]];
+var d = deepClone(c); // [1, 2, [3, 4]]
+var e = c.concat(); // [1, 2, [3, 4]]
+
+console.log( c[2] === d[2] ); // false
+// concat doesn't do a deep clone, arrays are passed by reference
+console.log( e[2] === d[2] ); // true
+
+function Custom() { }
+function cloneCustom(x) { return new Custom(); }
+var f = { test: new Custom() };
+var g = deepClone(f, cloneCustom);
+g.test === f.test // false, since new Custom instance will be created
+```
+
+See: [`clone()`](#clone)
+
+
+
+## deepEquals(a, b, [callback]):Boolean
+
+Recursively tests whether two values contains the same keys and values.
+
+`callback` specifies the equality comparison function used to compare
+non-object values. It defaults to using the [`is()`](#is) function.
+
+If the values are both an object or array, it will recurse into both values,
+checking if their keys/values are equal. It will only check the keys and values
+contained by the objects; it will not check the objects' prototypes.  If either
+of the values are not objects, they will be checked using the `callback`
+function.
+
+Example:
+
+```js
+deepEquals({ a: 1 }, { a: 1 }); // true
+deepEquals({ value: { a: 1 } }, { value: { a: 1 } }); // true
+deepEquals({ value: { a: 1 } }, { value: { a: 2 } }); // false
+deepEquals({ value: { a: 1 } }, { value: { a: 1, b: 2 } }); // false
+deepEquals({}, null); // false
+deepEquals(null, null); // true
+deepEquals(
+    { a: { b: 1 } },
+    { a: { b: '1' } },
+    function(a, b) { return a == b; }); // true
+```
+
+See: [object/equals](object.html#equals), [array/equals](array.html#equals)
+
+
+
+## defaults(val, ...defaults):void
+
+Return first value that isn't `null` or `undefined`.
+
+    function doSomethingAwesome(foo, bar) {
+        // default arguments
+        foo = defaults(foo, 'lorem');
+        bar = defaults(bar, 123);
+        // ...
+    }
+
+
+
+## GLOBAL:Object
+
+Reference to the global context (`window` inside a browser, `global` on
+node.js). Works on ES3 and ES5 strict-mode.
+
+
+
+## inheritPrototype(childCtor, parentCtor):Object
+
+Inherit the prototype methods from one constructor into another.
+
+Similar to [node.js util/inherits](http://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor).
+
+It returns the the `childCtor.prototype` for convenience.
+
+```js
+function Foo(name){
+    this.name = name;
+}
+Foo.prototype = {
+    getName : function(){
+        return this.name;
+    }
+};
+
+function Bar(name){
+    Foo.call(this, name);
+}
+//should be called before calling constructor
+var proto = inheritPrototype(Bar, Foo);
+
+// for convenience we return the new prototype object
+console.log(proto === Bar.prototype); // true
+
+var myObj = new Bar('lorem ipsum');
+myObj.getName(); // "lorem ipsum"
+
+console.log(myObj instanceof Foo); // true
+
+// you also have access to the "super" constructor
+console.log(Bar.super_ === Foo); // true
+```
+
+
+## is(x, y):Boolean
+
+Check if both values are identical/egal.
+
+```js
+// wtfjs
+NaN === NaN; // false
+-0 === +0;   // true
+
+is(NaN, NaN); // true
+is(-0, +0);   // false
+is('a', 'b'); // false
+```
+
+See: [`isnt()`](#isnt)
+
+
+
+## isnt(x, y):Boolean
+
+Check if both values are not identical/egal.
+
+```js
+// wtfjs
+NaN === NaN; // false
+-0 === +0;   // true
+
+isnt(NaN, NaN); // false
+isnt(-0, +0);   // true
+isnt('a', 'b'); // true
+```
+
+See: [`is()`](#is)
+
+
+
+
+## isArguments(val):Boolean
+
+If value is an "Arguments" object.
+
+
+
+## isArray(val):Boolean
+
+If value is an Array. Uses native ES5 `Array.isArray()` if available.
+
+
+
+## isBoolean(val):Boolean
+
+If value is a Boolean.
+
+
+
+## isDate(val):Boolean
+
+If value is a Date.
+
+
+
+## isEmpty(val):Boolean
+
+Checks if Array/Object/String is empty.
+
+Will return `true` for any object that doesn't contain enumerable properties
+and also to any type of value that isn't considered a collection (boolean,
+null, undefined, function, etc).
+
+```js
+isEmpty('');         // true
+isEmpty('bar');      // false
+isEmpty([]);         // true
+isEmpty([1, 2]);     // false
+isEmpty({});         // true
+isEmpty({a:1, b:2}); // false
+// null, undefined, booleans, numbers are considered as "empty" values
+isEmpty(null);       // true
+isEmpty(undefined);  // true
+isEmpty(123);        // true
+isEmpty(true);       // true
+```
+
+
+## isFinite(val):Boolean
+
+Checks if value is Finite.
+
+**IMPORTANT:** This is not the same as native `isFinite`, which will return
+`true` for values that can be coerced into finite numbers. See
+http://es5.github.com/#x15.1.2.5.
+
+```js
+isFinite(123);      // true
+isFinite(Infinity); // false
+
+// this is different than native behavior
+isFinite('');   // false
+isFinite(true); // false
+isFinite([]);   // false
+isFinite(null); // false
+```
+
+
+## isFunction(val):Boolean
+
+If value is a Function.
+
+
+
+## isKind(val, kind):Boolean
+
+If value is of "kind". (used internally by some of the *isSomething* checks).
+
+Favor the other methods since strings are commonly mistyped and also because
+some "kinds" can only be accurately checked by using other methods (e.g.
+`Arguments`), some of the other checks are also faster.
+
+```js
+isKind([1,2], 'Array'); // true
+isKind(3, 'Array');     // false
+isKind(3, 'Number');    // true
+```
+
+See: [`kindOf()`](#kindOf)
+
+
+
+## isInteger(val):Boolean
+
+Check if value is an integer.
+
+```js
+isInteger(123);    // true
+isInteger(123.45); // false
+isInteger({});     // false
+isInteger('foo');  // false
+isInteger('123');  // false
+```
+
+
+
+## isNaN(val):Boolean
+
+Check if value is not a number.
+
+It doesn't coerce value into number before doing the check, giving better
+results than native `isNaN`. Returns `true` for everything besides numeric
+values.
+
+**IMPORTANT:** behavior is very different than the native `isNaN` and way more
+useful!!! See: http://es5.github.io/#x15.1.2.4
+
+```js
+isNaN(123);       // false
+
+isNaN(NaN);       // true
+isNaN({});        // true
+isNaN(undefined); // true
+isNaN([4,5]);     // true
+
+// these are all "false" on native isNaN and main reason why this module exists
+isNaN('');    // true
+isNaN(null);  // true
+isNaN(true);  // true
+isNaN(false); // true
+isNaN("123"); // true
+isNaN([]);    // true
+isNaN([5]);   // true
+```
+
+
+
+## isNull(val):Boolean
+
+If value is `null`.
+
+
+
+## isNumber(val):Boolean
+
+If value is a Number.
+
+
+
+## isObject(val):Boolean
+
+If value is an Object.
+
+
+
+## isPlainObject(val):Boolean
+
+If the value is an Object created by the Object constructor.
+
+
+
+## isRegExp(val):Boolean
+
+If value is a RegExp.
+
+
+
+## isString(val):Boolean
+
+If value is a String.
+
+
+
+## isUndefined(val):Boolean
+
+If value is `undefined`.
+
+
+
+## kindOf(val):String
+
+Gets kind of value (e.g. "String", "Number", "RegExp", "Null", "Date").
+Used internally by `isKind()` and most of the other *isSomething* checks.
+
+```js
+kindOf([1,2]); // "Array"
+kindOf('foo'); // "String"
+kindOf(3);     // "Number"
+```
+
+See: [`isKind()`](#isKind)
+
+
+## toArray(val):Array
+
+Convert array-like object into Array or wrap value into Array.
+
+```js
+toArray({
+    "0" : "foo",
+    "1" : "bar",
+    "length" : 2
+});                              // ["foo", "bar"]
+
+function foo(){
+    return toArray(arguments);
+}
+foo("lorem", 123);               // ["lorem", 123]
+
+toArray("lorem ipsum");          // ["lorem ipsum"]
+toArray(window);                 // [window]
+toArray({foo:"bar", lorem:123}); // [{foo:"bar", lorem:123}]
+```
+
+See: object/values()
+
+
+
+## toNumber(val):Number
+
+Convert value into number.
+
+```js
+// numeric values are typecasted as Number
+toNumber('123');     // 123
+toNumber(-567);      // -567
+
+// falsy values returns zero
+toNumber('');        // 0
+toNumber(null);      // 0
+toNumber(undefined); // 0
+toNumber(false);     // 0
+
+// non-numeric values returns NaN
+toNumber('asd');     // NaN
+toNumber({});        // NaN
+toNumber([]);        // NaN
+
+// Date objects return milliseconds since epoch
+toNumber(new Date(1985, 6, 23)); // 490935600000
+```
+
+
+
+## toString(val):String
+
+Convert any value to its string representation.
+
+Will return an empty string for `undefined` or `null`, otherwise will convert
+the value to its string representation.
+
+```js
+// null and undefined are converted into empty strings
+toString(null);      // ""
+toString(undefined); // ""
+
+toString(1);       // "1"
+toString([1,2,3]); // "1,2,3"
+toString(false);   // "false"
+
+// uses `val.toString()` to convert value
+toString({toString:funtion(){ return 'foo'; }}); // "foo"
+```
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/mout/doc/math.md b/node_modules/mout/doc/math.md
new file mode 100644
index 0000000..d6b9994
--- /dev/null
+++ b/node_modules/mout/doc/math.md
@@ -0,0 +1,303 @@
+# math #
+
+Math utilities.
+
+
+## ceil(val[, step]):Number
+
+Round value up to full steps. Similar to `Math.ceil()` but can round value
+to an arbitrary *radix*.
+
+    ceil(7.2);   // 8
+    ceil(7.8);   // 8
+    ceil(7, 5);  // 10
+    ceil(11, 5); // 15
+    ceil(15, 5); // 15
+
+### Common use cases
+
+Round values by increments of 5/10/1000/etc.
+
+See: [`round()`](#round), [`floor()`](#floor), [`countSteps()`](#countSteps)
+
+
+
+## clamp(val, min, max):Number
+
+Clamps value inside range.
+
+`clamp()` is extremely useful in cases where you need to limit a value inside
+a certain range. So instead of doing a complex `if/else` to filter/process the
+value you can restrict it to always be inside the desired range:
+
+    clamp(-5, 0, 10); // 0
+    clamp(7, 1, 10);  // 7
+    clamp(8, 1, 10);  // 8
+    clamp(10, 1, 10); // 10
+    clamp(11, 1, 10); // 10
+
+If the value is smaller than `min` it returns the `min`, if `val` is higher
+than `max` it returns `max`.
+
+### Common use cases
+
+Any situation where you need to limit a number inside a range like: slider
+position, image galleries <small>(so user can't skip to an image that doesn't
+exist)</small>, drag and drop, scroll boundaries, etc.
+
+See: [`loop()`](#loop)
+
+
+
+
+## countSteps(val, step[, overflow]):Number
+
+Count number of full steps.
+
+### Arguments:
+
+ 1. `val` (Number)        : Value.
+ 2. `step` (Number)       : Step size.
+ 3. `[overflow]` (Number) : Maximum number of steps, nSteps will loop if
+`>=` than overflow.
+
+
+Count steps is very useful for cases where you need to know how many "full
+steps" the number *completed*. Think of it as a division that only returns
+integers and ignore remainders.
+
+    countSteps(3,  5);    // 0
+    countSteps(6,  5);    // 1
+    countSteps(12, 5);    // 2
+    countSteps(18, 5);    // 3
+    countSteps(21, 5);    // 4
+
+You can also set an `overflow` which will reset the *counter* before reaching
+this number.
+
+    countSteps(3, 5, 3);  // 0
+    countSteps(6, 5, 3);  // 1
+    countSteps(12, 5, 3); // 2
+    countSteps(18, 5, 3); // 0
+    countSteps(21, 5, 3); // 1
+
+### Common use cases
+
+#### How many items fit inside an area:
+
+    var containerWidth = 100;
+    var itemWidth = 8;
+    var howManyFit = countSteps(containerWidth, itemWidth); // 12
+
+#### Split value into different scales or convert value from one scale to another
+
+From [mout/time/parseMs](time.html#parseMs):
+
+    function parseMs(ms){
+        return {
+            milliseconds : countSteps(ms, 1, 1000),
+            seconds      : countSteps(ms, 1000, 60),
+            minutes      : countSteps(ms, 60000, 60),
+            hours        : countSteps(ms, 3600000, 24),
+            days         : countSteps(ms, 86400000)
+        };
+    }
+
+    // {days:27, hours:4, minutes:26, seconds:5, milliseconds:454}
+    parseMs(2348765454);
+
+
+
+## floor(val[, step]):Number
+
+Round value down to full steps. Similar to `Math.floor()` but can round value
+to an arbitrary *radix*. (formerly `snap`)
+
+    floor(7.2);   // 7
+    floor(7.8);   // 7
+    floor(7, 5);  // 5
+    floor(11, 5); // 10
+    floor(15, 5); // 15
+
+### Common use cases
+
+Round values by increments of 5/10/1000/etc.
+
+See: [`round()`](#round), [`ceil()`](#ceil), [`countSteps()`](#countSteps)
+
+
+
+## inRange(val, min, max[, threshold]):Boolean
+
+Checks if value is inside the range.
+
+    inRange(-6, 1, 10);    // false
+    inRange( 5, 1, 10);    // true
+    inRange(12, 1, 10);    // false
+
+The threshold can be useful when you want granular control of what should match
+and/or the precision could change at runtime or by some configuration option,
+avoids the clutter of adding/subtracting the `threshold` from `mix` and `max`.
+
+    inRange(12, 1, 10, 2); // true
+    inRange(13, 1, 10, 2); // false
+
+### Common use cases
+
+Anything that needs to check if value is inside a range, be it collision
+detection, limiting interaction by mouse position, ignoring parts of the logic
+that shouldn't happen if value isn't valid, simplify `if/else` conditions,
+making code more readable, etc...
+
+
+
+
+## isNear(val, target, threshold):Boolean
+
+Check if value is close to target.
+
+Similar to `inRange()` but used to check if value is close to a certain value
+or match the desired value. Basically to simplify `if/else` conditions and to
+make code clearer.
+
+    isNear( 10.2, 10, 0.5); // true
+    isNear( 10.5, 10, 0.5); // true
+    isNear(10.51, 10, 0.5); // false
+
+### Common use cases
+
+Games where a certain action should happen if an *actor* is close to a target,
+gravity fields, any numeric check that has some tolerance.
+
+
+
+
+## lerp(ratio, start, end):Number
+
+Linear interpolation.
+
+    lerp(0.5, 0, 10);  // 5
+    lerp(0.75, 0, 10); // 7.5
+
+### Common use cases
+
+Linear interpolation is commonly used to create animations of elements moving
+from one point to another, where you simply update the current ratio (which in
+this case represents time) and get back the position of the element at that
+"frame".
+
+The core idea of `lerp` is that you are using a number that goes from `0` to
+`1` to specify a ratio inside that scale. This concept can be applied to
+convert numbers from different scales easily.
+
+See: [`map()`](#map), [`norm()`](#norm)
+
+
+
+
+## loop(val, min, max):Number
+
+Loops value inside range. Will return `min` if `val > max` and `max` if `val
+< min`, otherwise it returns `val`.
+
+    loop(-1, 0, 10); // 10
+    loop( 1, 0, 10); // 1
+    loop( 5, 0, 10); // 5
+    loop( 9, 0, 10); // 9
+    loop(10, 0, 10); // 10
+    loop(11, 0, 10); // 0
+
+Similar to [`clamp()`](#clamp) but *loops* the value inside the range when an
+overflow occurs.
+
+### Common use cases
+
+Image galleries, infinite scroll, any kind of logic that requires that the
+first item should be displayed after the last one or the last one should be
+displayed after first if going on the opposite direction.
+
+See: [`clamp()`](#clamp)
+
+
+
+
+## map(val, min1, max1, min2, max2):Number
+
+Maps a number from one scale to another.
+
+    map(3, 0, 4, -1, 1)   // 0.5
+    map(3, 0, 10, 0, 100) // 30
+
+### Common use cases
+
+Very useful to convert values from/to multiple scales.
+
+Let's suppose we have a slider that needs to go from `2000` to `5000` and that slider
+has `300px` of width, here is how we would translate the knob position into the
+current value:
+
+    var knobX = 123;
+    var sliderWid = 300;
+    var minVal = 2000;
+    var maxVal = 5000;
+
+    var curVal = map(knobX, 0, sliderWid, minVal, maxVal); // 3230
+
+See: [`lerp()`](#lerp), [`norm()`](#norm)
+
+
+
+
+## norm(val, min, max):Number
+
+Gets normalized ratio of value inside range.
+
+If `val < min` or `val > max` it will throw a `RangeError` since we can't
+normalize the value.
+
+    norm(50, 0, 100); // 0.5
+    norm(75, 0, 100); // 0.75
+    norm(100, 0, 100); // 1
+    norm(-50, 0, 100); // RangeError: value (-50) must be between 0 and 100
+
+### Common use cases
+
+Convert values between scales, used by [`map()`](#map) internally. Direct
+opposite of [`lerp()`](#lerp).
+
+See: [`lerp()`](#lerp), [`map()`](#map)
+
+
+
+## round(val[, step]):Number
+
+Round value to full steps. Similar to `Math.round()` but allow setting an
+arbitrary *radix*.
+
+    // default
+    round(0.22);      // 0
+    round(0.49);      // 0
+    round(0.51);      // 1
+
+    // custom radix
+    round(0.22, 0.5); // 0
+    round(0.49, 0.5); // 0.5
+    round(0.51, 0.5); // 0.5
+    round(0.74, 0.5); // 0.5
+    round(0.75, 0.5); // 1
+    round(1.24, 0.5); // 1
+    round(1.25, 0.5); // 1.5
+    round(1.74, 0.5); // 1.5
+
+### Common use cases
+
+Round values by increments of 0.5/5/10/1000/etc.
+
+See: [`floor()`](#floor), [`ceil()`](#ceil), [`countSteps()`](#countSteps)
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage more info check the specs and source code.
+
diff --git a/node_modules/mout/doc/number.md b/node_modules/mout/doc/number.md
new file mode 100644
index 0000000..78e9c07
--- /dev/null
+++ b/node_modules/mout/doc/number.md
@@ -0,0 +1,279 @@
+# number #
+
+Number utilities.
+
+
+## abbreviate(val[, nDecimalDigits, dictionary]):String
+
+Abbreviate number to thousands (K), millions (M) or billions (B).
+
+The default value for `nDecimalDigits` is `1`.
+
+### Example
+
+    abbreviate(123456);     // "123.5K"
+    abbreviate(12345678);   // "12.3M"
+    abbreviate(1234567890); // "1.2B"
+
+You can set the amount of decimal digits (default is `1`):
+
+    abbreviate(543);    // "0.5K"
+    abbreviate(543, 1); // "0.5K"
+    abbreviate(543, 2); // "0.54K"
+    abbreviate(543, 3); // "0.543K"
+
+You can customize the abbreviation by passing a custom "dictionary":
+
+    var _ptbrDict = {
+        thousand: ' mil',
+        million: ' Mi',
+        billion: ' Bi'
+    };
+    function customAbbr(val) {
+        return abbreviate(val, 1, _ptbrDict);
+    }
+
+    customAbbr(123456); // "123.5 mil"
+    customAbbr(12345678); // "12.3 Mi"
+    customAbbr(1234567890); // "1.2 Bi"
+
+
+
+## currencyFormat(val[, nDecimalDigits, decimalSeparator, thousandsSeparator]):String
+
+Format a number as currency.
+
+### Example:
+
+    currencyFormat(1000);              // "1,000.00"
+    currencyFormat(1000, 1);           // "1,000.0"
+    currencyFormat(1000, 2, ',', '.'); // "1.000,00"
+
+
+
+## enforcePrecision(val, nDecimalDigits):Number
+
+Enforce a specific amount of decimal digits and also fix floating point
+rounding issues.
+
+### Example:
+
+```js
+enforcePrecision(0.615, 2); // 0.62
+enforcePrecision(0.625, 2); // 0.63
+//floating point rounding "error" (rounds to odd number)
++(0.615).toFixed(2);        // 0.61
++(0.625).toFixed(2);        // 0.63
+```
+
+
+## isNaN(val):Boolean
+
+ES6 `Number.isNaN()`, checks if supplied value is `NaN`.
+
+```js
+// only returns `true` for `NaN`
+isNaN(NaN);    // true
+isNaN(0 / 0);  // true
+
+// everything else is `false`
+isNaN(true);   // false
+isNaN(123);    // false
+isNaN('asd');  // false
+isNaN('NaN');  // false
+```
+
+
+## MAX_INT:Number
+
+Maximum 32-bit signed integer value. `Math.pow(2, 31) - 1`
+
+### Example:
+
+```js
+console.log( MAX_INT ); // 2147483647
+```
+
+
+## MAX_SAFE_INTEGER:Number
+
+Maximum safe integer. `Math.pow(2,53) − 1`
+
+
+## MAX_UINT:Number
+
+Maximum 32-bit unsigned integer value. `Math.pow(2, 32) - 1`
+
+### Example:
+
+```js
+console.log( MAX_UINT ); // 4294967295
+```
+
+
+## MIN_INT:Number
+
+Minimum 32-bit signed integer value. `Math.pow(2, 31) * -1`.
+
+### Example:
+
+```js
+console.log( MIN_INT ); // -2147483648
+```
+
+
+## nth(n):String
+
+Returns the "nth" of number. (`"st"`, `"nd"`, `"rd"`, `"th"`)
+
+```js
+nth(1); // "st"
+nth(2); // "nd"
+nth(12); // "th"
+nth(22); // "nd"
+nth(23); // "rd"
+nth(34); // "th"
+```
+
+See: [`ordinal()`](#ordinal)
+
+
+
+## ordinal(n):String
+
+Converts number into ordinal form (1st, 2nd, 3rd, 4th, ...)
+
+```js
+ordinal(1); // "1st"
+ordinal(2); // "2nd"
+ordinal(3); // "3rd"
+ordinal(14); // "14th"
+ordinal(21); // "21st"
+```
+
+See: [`nth()`](#nth)
+
+
+
+## pad(n, minLength[, char]):String
+
+Add padding zeros if `n.length` < `minLength`.
+
+### Example:
+
+```js
+pad(1, 5);      // "00001"
+pad(12, 5);     // "00012"
+pad(123, 5);    // "00123"
+pad(1234, 5);   // "01234"
+pad(12345, 5);  // "12345"
+pad(123456, 5); // "123456"
+
+// you can also specify the "char" used for padding
+pad(12, 5, '_'); // "___12"
+```
+
+see: [string/lpad](./string.html#lpad)
+
+
+
+## rol(val, shift):Number
+
+Bitwise circular shift left.
+
+More info at [Wikipedia#Circular_shift](http://en.wikipedia.org/wiki/Circular_shift)
+
+
+
+## ror(val, shift):Number
+
+Bitwise circular shift right.
+
+More info at [Wikipedia#Circular_shift](http://en.wikipedia.org/wiki/Circular_shift)
+
+
+
+## sign(val):Number
+
+Returns `-1` if value is negative, `0` if the value is `0` and `1` if value is positive. Useful for
+multiplications.
+
+```js
+sign(-123); // -1
+sign(123);  // 1
+sign(0);    // 0
+```
+
+
+
+## toInt(val):Number
+
+"Convert" value into an 32-bit integer.  Works like `Math.floor` if `val > 0` and
+`Math.ceil` if `val < 0`.
+
+**IMPORTANT:** val will wrap at [number/MIN_INT](#MIN_INT) and
+[number/MAX_INT](#MAX_INT).
+
+Created because most people don't know bitwise operations and also because this
+feature is commonly needed.
+
+[Perf tests](http://jsperf.com/vs-vs-parseint-bitwise-operators/7)
+
+### Example:
+
+```js
+toInt(1.25);   // 1
+toInt(0.75);   // 0
+toInt(-0.55);  // 0
+toInt(-5.0001) // -5
+```
+
+
+
+## toUInt(val):Number
+
+"Convert" value into an 32-bit unsigned integer.
+
+Works like AS3#uint().
+
+**IMPORTANT:** val will wrap at 2^32.
+
+### Example:
+
+```js
+toUInt(1.25);                 // 1
+toUInt(0.75);                 // 0
+toUInt(-0.55);                // 0
+toUInt(-5.0001);              // 4294967291
+toUInt(Math.pow(2,32) - 0.5); // 4294967295
+toUInt(Math.pow(2,32) + 0.5); // 0
+```
+
+
+## toUInt31(val):Number
+
+"Convert" value into an 31-bit unsigned integer (since 1 bit is used for sign).
+
+Useful since all bitwise operators besides `>>>` treat numbers as signed
+integers.
+
+**IMPORTANT:** val will wrap at 2^31 and negative numbers will be treated as
+`zero`.
+
+### Example:
+
+```js
+toUInt31(1.25);                 // 1
+toUInt31(0.75);                 // 0
+toUInt31(-0.55);                // 0
+toUInt31(-5.0001);              // 0
+toUInt31(Math.pow(2,31) - 0.5); // 21474836470
+toUInt31(Math.pow(2,31) + 0.5); // 0
+```
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/mout/doc/object.md b/node_modules/mout/doc/object.md
new file mode 100644
index 0000000..02bf4e6
--- /dev/null
+++ b/node_modules/mout/doc/object.md
@@ -0,0 +1,811 @@
+# object #
+
+Object utilities.
+
+
+
+## bindAll(obj, [...methodNames]):void
+
+Bind methods of the target object to always execute on its own context
+(ovewritting the original function).
+
+See: [function/bind](./function.html#bind)
+
+```js
+var view = {
+    name: 'Lorem Ipsum',
+    logNameOnClick: function() {
+        console.log(this.name);
+    }
+};
+
+// binds all methods by default
+bindAll(view);
+jQuery('#docs').on('click', view.logNameOnClick);
+```
+
+You can also specify the list of methods that you want to bind (in case you
+just want to bind a few of them).
+
+```js
+// only the listed methods will be bound to `obj` context
+bindAll(obj, 'logNameOnClick', 'doAwesomeStuffOnDrag');
+```
+
+
+
+## contains(obj, value):Boolean
+
+Similar to [Array/contains](array.html#contains). Checks if Object contains
+value.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 'bar'
+};
+contains(obj, 2);      // true
+contains(obj, 'foo');  // false
+```
+
+
+
+## deepFillIn(target, ...objects):Object
+
+Fill missing properties recursively.
+
+It's different from `deepMixIn` since it won't override any existing property.
+It's also different from `merge` since it won't clone child objects during the
+process.
+
+It returns the target object and mutates it in place.
+
+See: [`fillIn()`](#fillIn), [`deepMixIn()`](#deepMixIn), [`merge()`](#merge)
+
+```js
+var base = {
+    foo : {
+        bar : 123
+    },
+    lorem : 'ipsum'
+};
+var options = deepFillIn({foo : { baz : 45 }, lorem : 'amet'}, base);
+// > {foo: {bar:123, baz : 45}, lorem : 'amet'}
+```
+
+
+
+## deepMatches(target, pattern):Boolean
+
+Recursively checks if object contains all properties/value pairs. When both
+the target and pattern values are arrays, it checks that the target value
+contain matches for all the items in the pattern array (independent of order).
+
+```js
+var john = {
+    name: 'John',
+    age: 22,
+    pets: [
+        { type: 'cat', name: 'Grumpy Cat' },
+        { type: 'dog', name: 'Hawk' }
+    ]
+};
+
+deepMatches(john, { name: 'John' }); // true
+deepMatches(john, { age: 21 }); // false
+deepMatches(john, { pets: [ { type: 'cat' } ] }); // true
+deepMatches(john, { pets: [ { name: 'Hawk' } ] }); // true
+deepMatches(john, { pets: [ { name: 'Hairball' } ] }); // false
+```
+
+See [`matches()`](#matches)
+
+
+
+## deepMixIn(target, ...objects):Object
+
+Mixes objects into the target object, recursively mixing existing child objects
+as well.
+
+It will only recursively mix objects if both (existing and new) values are
+plain objects.
+
+Returns the target object. Like [`merge()`](#merge), but mutates the target
+object, and does not clone child objects.
+
+```js
+var target = {
+    foo: {
+        name: "foo",
+        id: 1
+    }
+};
+
+deepMixIn(target, { foo: { id: 2 } });
+console.log(target); // { foo: { name: "foo", id: 2 } }
+```
+
+See: [`mixIn()`](#mixIn), [`merge()`](#merge), [`deepFillIn()`](#deepFillIn)
+
+
+
+## equals(a, b, [callback]):Boolean
+
+Tests whether two objects contain the same keys and values.
+
+`callback` specifies the equality comparison function used to compare the
+values. It defaults to using [lang/is](lang.html#is).
+
+It will only check the keys and values contained by the objects; it will not
+check the objects' prototypes. If either of the values are not objects, they
+will be compared using the `callback` function.
+
+```js
+equals({}, {}); // true
+equals({ a: 1 }, { a: 1 }); // true
+equals({ a: 1 }, { a: 2 }); // false
+equals({ a: 1, b: 2 }, { a: 1 }); // false
+equals({ a: 1 }, { a: 1, b: 2 }); // false
+equals(null, null); // true
+equals(null, {}); // false
+equals({ a: 1 }, { a: '1' }, function(a, b) { return a == b; }); // true
+```
+
+See: [array/equals](array.html#equals), [lang/deepEquals](lang.html#deepEquals)
+
+
+## every(obj, callback, [thisObj]):Boolean
+
+Similar to [Array/every](array.html#every). Tests whether all properties in the
+object pass the test implemented by the provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+every(obj, isNumber); // false
+```
+
+
+
+## fillIn(obj, ...default):Object
+
+Fill in missing properties in object with values from the *defaults* objects.
+
+    var base = {
+        foo : 'bar',
+        num : 123
+    };
+
+    fillIn({foo:'ipsum'}, base); // {foo:'ipsum', num:123}
+
+PS: it allows merging multiple objects at once, the first ones will take
+precedence.
+
+See: [`mixIn()`](#mixIn), [`merge()`](#merge), [`deepFillIn()`](#deepFillIn)
+
+
+
+## filter(obj, callback, [thisObj])
+
+Returns a new object containing all properties where `callback` returns true,
+similar to Array/filter. It does not use properties from the object's
+prototype.
+
+Callback receives the same arguments as `forOwn()`.
+
+See: [`forOwn()`](#forOwn), [`forIn()`](#forIn), [`pick()`](#pick)
+
+```js
+var obj = {
+    foo: 'value',
+    bar: 'bar value'
+};
+
+// returns { bar: 'bar value' }
+filter(obj, function(v) { return v.length > 5; });
+
+// returns { foo: 'value' }
+filter(obj, function(v, k) { return k === 'foo'; });
+```
+
+
+
+## find(obj, callback, [thisObj])
+
+Loops through all the properties in the Object and returns the first one that
+passes a truth test (callback), similar to [Array/find](array.html#find).
+Unlike Array/find, order of iteration is not guaranteed.
+
+```js
+var obj = {
+    a: 'foo',
+    b: 12
+};
+
+find(obj, isString); // 'foo'
+find(obj, isNumber); // 12
+```
+
+
+
+## flatten(object, [level]):Object
+
+Recursively flattens an object. A new object containing all the values is
+returned. If `level` is specified, it will only flatten up to that level.
+Note that objects within arrays will not be flattened.
+
+### Example
+
+```js
+flatten({ a: 1, b: { c: 2, d: { e: 3 } } });
+// > { a: 1, 'b.c': 2, 'b.d.e': 3 }
+flatten({ a: 1, b: { c: 2, d: { e: 3 } } }, 1);
+// > { a: 1, 'b.c': 2, 'b.d': { e: 3 } }
+```
+
+See: [`array/flatten()`](./array.html#flatten)
+
+
+## forIn(obj, callback[, thisObj])
+
+Iterate over all properties of an Object, similar to
+[Array/forEach](array.html#forEach).
+
+It [avoids don't enum bug on IE](https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug).
+It **will** iterate over inherited (enumerable) properties from the prototype.
+
+It allows exiting the iteration early by returning `false` on the callback.
+
+See: [`forOwn()`](#forOwn), [`keys()`](#keys), [`values()`](#values)
+
+### Callback arguments
+
+Callback will receive the following arguments:
+
+ 1. Property Value (*)
+ 2. Key name (String)
+ 3. Target object (Object)
+
+### Example
+
+```js
+function Foo(){
+    this.foo = 1;
+    this.bar = 2;
+}
+
+Foo.prototype.lorem = 4;
+
+var obj = new Foo();
+
+var result = 0;
+var keys = [];
+
+forIn(obj, function(val, key, o){
+    result += val;
+    keys.push(key);
+});
+
+console.log(result); // 7
+console.log(keys);   // ['foo', 'bar', 'lorem']
+```
+
+
+
+## forOwn(obj, callback[, thisObj])
+
+Iterate over all own properties from an Object, similar to
+[Array/forEach](array.html#forEach).
+
+It [avoids don't enum bug on IE](https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug).
+Notice that it **won't** iterate over properties from the prototype.
+
+It allows exiting the iteration early by returning `false` on the callback.
+
+See: [`forIn()`](#forIn), [`keys()`](#keys), [`values()`](#values)
+
+### Callback arguments
+
+Callback will receive the following arguments:
+
+ 1. Property Value (*)
+ 2. Key name (String)
+ 3. Target object (Object)
+
+### Example
+
+```js
+function Foo(){
+    this.foo = 1;
+    this.bar = 2;
+}
+
+// will be ignored
+Foo.prototype.lorem = 4;
+
+var obj = new Foo();
+
+var result = 0;
+var keys = [];
+
+forOwn(obj, function(val, key, o){
+    result += val;
+    keys.push(key);
+});
+
+console.log(result); // 3
+console.log(keys);   // ['foo', 'bar']
+```
+
+
+
+## functions(obj):Array
+
+Returns a sorted list of all enumerable properties that have function values
+(including inherited properties).
+
+```js
+var obj = {
+    foo : function(){},
+    bar : 'baz'
+};
+functions(obj); // ['foo']
+```
+
+
+
+## get(obj, propName):*
+
+Returns nested property value. Will return `undefined` if property doesn't
+exist.
+
+See: [`set()`](#set), [`namespace()`](#namespace), [`has()`](#has)
+
+```js
+var lorem = {
+        ipsum : {
+            dolor : {
+                sit : 'amet'
+            }
+        }
+    };
+
+get(lorem, 'ipsum.dolor.sit'); // "amet"
+get(lorem, 'foo.bar');         // undefined
+```
+
+
+
+## has(obj, propName):Boolean
+
+Checks if object contains a child property. Useful for cases where you need to
+check if an object contain a *nested* property. It will get properties
+inherited by the prototype.
+
+see: [`hasOwn()`](#hasOwn), [`get()`](#get)
+
+```js
+var a = {
+        b : {
+            c : 123
+        }
+    };
+
+has(a, 'b.c');   // true
+has(a, 'foo.c'); // false
+```
+
+### Common use case
+
+```js
+if( has(a, 'foo.c') ){ // false
+    // ...
+}
+
+if( a.foo.c ){ // ReferenceError: `foo` is not defined
+    // ...
+}
+```
+
+
+
+## hasOwn(obj, propName):Boolean
+
+Safer `Object.hasOwnProperty`. Returns a boolean indicating whether the object
+has the specified property.
+
+see: [`has()`](#has)
+
+```js
+var obj = {
+    foo: 1,
+    hasOwnProperty : 'bar'
+};
+
+obj.hasOwnProperty('foo'); // ERROR! hasOwnProperty is not a function
+
+hasOwn(obj, 'foo');            // true
+hasOwn(obj, 'hasOwnProperty'); // true
+hasOwn(obj, 'toString');       // false
+```
+
+
+
+## keys(obj):Array
+
+Returns an array of all own enumerable properties found upon a given object.
+It will use the native `Object.keys` if present.
+
+PS: it won't return properties from the prototype.
+
+See: [`forOwn()`](#forOwn), [`values()`](#values)
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+keys(obj); // ['foo', 'bar', 'lorem']
+```
+
+
+
+## map(obj, callback, [thisObj]):Object
+
+Returns a new object where the property values are the result of calling the
+callback for each property in the original object, similar to Array/map.
+
+The callback function receives the same arguments as in `forOwn()`.
+
+See: [`forOwn()`](#forOwn)
+
+```js
+var obj = { foo: 1, bar: 2 },
+    data = { foo: 0, bar: 1 };
+
+map(obj, function(v) { return v + 1; }); // { foo: 2, bar: 3 }
+map(obj, function(v, k) { return k; }); // { foo: "foo", bar: "bar" }
+map(obj, function(v, k) { return this[k]; }, data); // { foo: 0, bar: 1 }
+```
+
+
+
+## matches(obj, props):Boolean
+
+Checks if object contains all properties/values pairs. Useful for validation
+and filtering.
+
+```js
+var john = {age:25, hair:'long', beard:true};
+var mark = {age:27, hair:'short', beard:false};
+var hippie = {hair:'long', beard:true};
+matches(john, hippie); // true
+matches(mark, hippie); // false
+```
+
+See [`deepMatches()`](#deepMatches)
+
+
+
+## merge(...objects):Object
+
+Deep merges objects. Note that objects and properties will be cloned during the
+process to avoid undesired side effects. It return a new object and won't
+affect source objects.
+
+```js
+var obj1 = {a: {b: 1, c: 1, d: {e: 1, f: 1}}};
+var obj2 = {a: {b: 2, d : {f : 'yeah'} }};
+
+merge(obj1, obj2); // {a: {b : 2, c : 1, d : {e : 1, f : 'yeah'}}}
+```
+
+See: [`deepMixIn()`](#deepMixIn), [`deepFillIn()`](#deepFillIn)
+
+
+
+## max(obj[, iterator]):*
+
+Returns maximum value inside object or use a custom iterator to define how
+items should be compared. Similar to [Array/max](array.html#max).
+
+See: [`min()`](#min)
+
+```js
+max({a: 100, b: 2, c: 1, d: 3, e: 200}); // 200
+max({a: 'foo', b: 'lorem', c: 'amet'}, function(val){
+    return val.length;
+}); // 'lorem'
+```
+
+
+
+## min(obj[, iterator]):*
+
+Returns minimum value inside object or use a custom iterator to define how
+items should be compared. Similar to [Array/min](array.html#min).
+
+See: [`max()`](#max)
+
+```js
+min({a: 100, b: 2, c: 1, d: 3, e: 200}); // 1
+min({a: 'foo', b: 'lorem', c: 'amet'}, function(val){
+    return val.length;
+}); // 'foo'
+```
+
+
+
+## mixIn(target, ...objects):Object
+
+Combine properties from all the objects into first one.
+
+This method affects target object in place, if you want to create a new Object
+pass an empty object as first parameter.
+
+### Arguments
+
+ 1. `target` (Object)        : Target Object.
+ 2. `...objects` (...Object) : Objects to be combined (0...n objects).
+
+### Example
+
+```js
+var a = {foo: "bar"};
+var b = {lorem: 123};
+
+mixIn({}, a, b); // {foo: "bar", lorem: 123}
+console.log(a);  // {foo: "bar"}
+
+mixIn(a, b);     // {foo: "bar", lorem: 123}
+console.log(a);  // {foo: "bar", lorem: 123}
+```
+
+See: [`fillIn()`](#fillIn), [`merge()`](#merge)
+
+
+
+
+## namespace(obj, propName):Object
+
+Creates an empty object inside namespace if not existent. Will return created
+object or existing object.
+
+See: [`get()`](#get), [`set()`](#set)
+
+```js
+var obj = {};
+namespace(obj, 'foo.bar'); // {}
+console.log(obj);          // {foo:{bar:{}}}
+```
+
+
+## omit(obj, ...keys):Object
+
+Return a copy of the object without the blacklisted keys.
+
+See: [`filter()`](#filter)
+
+```js
+var user = {
+    firstName : 'John',
+    lastName : 'Doe',
+    dob : '1985/07/23',
+    gender : 'male'
+};
+
+// can pass an array of keys as second argument
+var keys = ['firstName', 'dob']
+omit(user, keys); // {lastName : 'Doe', gender : 'male'}
+
+// or multiple arguments
+omit(user, 'firstName', 'lastName'); // {dob : '1985/07/23', gender : 'male'}
+```
+
+
+
+## pick(obj, ...keys):Object
+
+Return a copy of the object that contains only the whitelisted keys.
+
+See: [`filter()`](#filter)
+
+```js
+var user = {
+    firstName : 'John',
+    lastName : 'Doe',
+    dob : '1985/07/23',
+    gender : 'male'
+};
+
+// can pass an array of keys as second argument
+var keys = ['firstName', 'dob']
+pick(user, keys); // {firstName:"John", dob: "1985/07/23"}
+
+// or multiple arguments
+pick(user, 'firstName', 'lastName'); // {firstName:"John", lastName: "Doe"}
+```
+
+
+
+## pluck(obj, propName):Object
+
+Extract an object containing property values with keys as they appear in the
+passed object.
+
+```js
+var users = {
+    first: {
+        name : 'John',
+        age : 21
+    },
+    second: {
+        name : 'Mary',
+        age : 25
+    }
+};
+
+pluck(users, 'name'); // {first: 'John', second: 'Mary'} );
+pluck(users, 'age');  // {first: 21, second: 25} );
+```
+
+
+
+## reduce(obj, callback, initial, [thisObj]):*
+
+Similar to [Array/reduce](array.html#reduce).
+
+Apply a function against an accumulator and each property of the object (order
+is undefined) as to reduce it to a single value.
+
+```js
+var obj = {a: 1, b: 2, c: 3, d: 4};
+
+function sum(prev, cur, key, list) {
+    compare1.push(prev);
+    return prev + cur;
+}
+
+reduce(obj, sum); // 10
+```
+
+
+
+## reject(obj, callback, thisObj):Object
+
+Returns a new object containing all properties where `callback` returns true,
+similar to [Array/reject](array.html#reject). It does not use properties from
+the object's prototype. Opposite of [`filter()`](#filter).
+
+See [`filter()`](#filter)
+
+### Example
+
+```js
+var obj = {a: 1, b: 2, c: 3, d: 4, e: 5};
+reject(obj, function(x) { return (x % 2) !== 0; }); // {b: 2, d: 4}
+```
+
+
+
+## values(obj):Array
+
+Returns an array of all own enumerable properties values found upon a given object.
+
+PS: it won't return properties from the prototype.
+
+See: [`forOwn()`](#forOwn), [`keys()`](#keys)
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+values(obj); // [1, 2, 3]
+```
+
+
+
+## set(obj, propName, value)
+
+Sets a nested property value.
+
+See: [`get()`](#get), [`namespace()`](#namespace)
+
+```js
+var obj = {};
+set(obj, 'foo.bar', 123);
+console.log(obj.foo.bar); // 123
+console.log(obj);         // {foo:{bar:123}}
+```
+
+
+
+## size(obj):Number
+
+Returns the count of own enumerable properties found upon a given object.
+
+PS: it won't return properties from the prototype.
+
+See: [`forOwn()`](#forOwn), [`keys()`](#keys)
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+size(obj); // 3
+```
+
+
+
+## some(obj, callback, [thisObj]):Boolean
+
+Similar to [Array/some](array.html#some). Tests whether any properties in the
+object pass the test implemented by the provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+some(obj, isNumber); // true
+```
+
+
+
+## unset(obj, propName):Boolean
+
+Delete object property if existent and returns a boolean indicating succes. It
+will also return `true` if property doesn't exist.
+
+Some properties can't be deleted, to understand why [check this
+article](http://perfectionkills.com/understanding-delete/).
+
+See: [`set()`](#set)
+
+```js
+var lorem = {
+        ipsum : {
+            dolor : {
+                sit : 'amet'
+            }
+        }
+    };
+
+unset(lorem, 'ipsum.dolor.sit'); // true
+console.log(lorem.ipsum.dolor);  // {}
+unset(lorem, 'foo.bar');         // true
+```
+
+
+
+## result(object, property):Mixed
+
+Evaluates an objects property and returns result.
+
+```js
+var person = {
+    name: 'john',
+
+    mood: function() {
+        // some dynamic calculated property.
+        return 'happy';
+    }
+};
+
+var name = result(person, 'name'), // john
+    mood = result(person, 'mood'); // happy
+```
diff --git a/node_modules/mout/doc/queryString.md b/node_modules/mout/doc/queryString.md
new file mode 100644
index 0000000..1be3c10
--- /dev/null
+++ b/node_modules/mout/doc/queryString.md
@@ -0,0 +1,115 @@
+# queryString #
+
+Utilities for query string manipulation.
+
+
+
+## contains(url, paramName):Boolen
+
+Checks if query string contains parameter.
+
+### Arguments:
+
+ 1. `url` (String)     : URL or query string.
+ 2. `paramName` (String) : Parameter name.
+
+### Example:
+
+```js
+var url = 'example.com/?lorem=ipsum';
+contains(url, 'lorem'); // true
+contains(url, 'foo');   //false
+```
+
+
+
+## decode(queryStr[, shouldTypecast]):Object
+
+Parses query string and creates an object of keys => vals.
+
+Will typecast value with [`string/typecast`](string.html#typecast) by default
+and decode string parameters using `decodeURIComponent()`.
+
+```js
+var query = '?foo=bar&lorem=123';
+decode(query);        // {foo: "bar", lorem: 123}
+decode(query, false); // {foo: "bar", lorem: "123"}
+```
+
+
+## encode(obj):String
+
+Encode object into a query string.
+
+Will encode parameters with `encodeURIComponent()`.
+
+```js
+encode({foo: "bar", lorem: 123}); // "?foo=bar&lorem=123"
+```
+
+
+## getParam(url, param[, shouldTypecast]):*
+
+Get query parameter value.
+
+Will typecast value with [`string/typecast`](string.html#typecast) by default.
+
+See: [`setParam()`](#setParam)
+
+### Arguments:
+
+ 1. `url` (String) : Url.
+ 2. `param` (String) : Parameter name.
+ 3. `[shouldTypecast]` (Boolean) : If it should typecast value.
+
+### Example:
+
+```js
+var url = 'example.com/?foo=bar&lorem=123&ipsum=false';
+getParam(url, 'dolor');        // "amet"
+getParam(url, 'lorem');        // 123
+getParam(url, 'lorem', false); // "123"
+```
+
+
+## parse(url[, shouldTypecast]):Object
+
+Parses URL, extracts query string and decodes it.
+
+It will typecast all properties of the query object unless second argument is
+`false`.
+
+Alias to: `decode(getQuery(url))`.
+
+```js
+var url = 'example.com/?lorem=ipsum&a=123';
+parse(url);        // {lorem: "ipsum", a: 123}
+parse(url, false); // {lorem: "ipsum", a: "123"}
+```
+
+
+## getQuery(url):String
+
+Gets full query as string with all special chars decoded.
+
+```js
+getQuery('example.com/?lorem=ipsum'); // "?lorem=ipsum"
+```
+
+
+## setParam(url, paramName, value):String
+
+Add new query string parameter to URL or update existing value.
+
+See: [`getParam()`](#getParam)
+
+```js
+setParam('?foo=bar&lorem=0', 'lorem', 'ipsum'); // '?foo=bar&lorem=ipsum'
+setParam('?lorem=1', 'foo', 123); // '?lorem=1&foo=123'
+```
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/mout/doc/random.md b/node_modules/mout/doc/random.md
new file mode 100644
index 0000000..cd32eb3
--- /dev/null
+++ b/node_modules/mout/doc/random.md
@@ -0,0 +1,256 @@
+# random #
+
+Pseudo-random generators.
+
+mout uses `Math.random` by default on all the pseudo-random generators, if
+you need a seeded random or a better algorithm see the [`random()`](#random)
+documentation for instructions.
+
+
+
+## choice(...items):*
+
+Returns a random element from the supplied arguments or from an array if single
+argument is an array.
+
+### Example:
+
+```js
+choice(1, 2, 3, 4, 5); // 3
+
+var arr = ['lorem', 'ipsum', 'dolor'];
+choice(arr); // 'dolor'
+```
+
+
+
+## guid():String
+
+Generates a pseudo-random [Globally Unique Identifier](http://en.wikipedia.org/wiki/Globally_unique_identifier) (v4).
+
+Since the total number of GUIDs is 2<sup>122</sup> the chance of generating the
+same value twice is negligible.
+
+**Important:** this method uses `Math.random` by default so the UUID isn't
+*safe* (sequence of outputs can be predicted in some cases), check the
+[`random()`](#random) documentation for more info on how to replace the default
+PRNG if you need extra safety or need *seeded* results.
+
+See: [`randHex()`](#randHex), [`random()`](#random)
+
+### Example:
+
+```js
+guid();      // 830e9f50-ac7f-4369-a14f-ed0e62b2fa0b
+guid();      // 5de3d09b-e79c-4727-932b-48c49228d508
+```
+
+
+
+## rand([min], [max]):Number
+
+Gets a random number inside range or snap to min/max values.
+
+### Arguments:
+
+ 1. `[min]` (Number)         : Minimum value. Defaults to `number/MIN_INT`.
+ 2. `[max]` (Number)         : Maximum value. Defaults to `number/MAX_INT`.
+
+
+### Example:
+
+```js
+rand();      // 448740433.55274725
+rand();      // -31797596.097682
+rand(0, 10); // 7.369723
+rand(0, 10); // 5.987042
+```
+
+See: [`random()`](#random)
+
+
+
+## randBit():Number
+
+Returns a random "bit" (0 or 1). Useful for addition/subtraction.
+
+It's slightly faster than `choice(0, 1)` since implementation is simpler (not
+that it will make a huge difference in most cases).
+
+See: [`choice()`](#choice)
+
+### Example:
+
+```js
+randBit(); // 1
+randBit(); // 0
+
+//same effect as
+choice(0, 1);
+```
+
+
+## randBool():Boolean
+
+Returns a random Boolean (`true` or `false`).
+
+Since this is very common it makes sense to abstract it into a discrete method.
+
+### Example:
+
+```js
+randBool(); // true
+randBool(); // false
+```
+
+
+
+## randHex([size]):String
+
+Returns a random hexadecimal string.
+
+The default `size` is `6`.
+
+### Example:
+
+```js
+randHex();   // "dd8575"
+randHex();   // "e6baeb"
+randHex(2);  // "a2"
+randHex(30); // "effd7e2ad9a4a3067e30525fab983a"
+```
+
+
+
+## randInt([min], [max]):Number
+
+Gets a random integer inside range or snap to min/max values.
+
+### Arguments:
+
+ 1. `[min]` (Number)         : Minimum value. Defaults to `number/MIN_INT`.
+ 2. `[max]` (Number)         : Maximum value. Defaults to `number/MAX_INT`.
+
+
+### Example:
+
+```js
+randInt();      // 448740433
+randInt();      // -31797596
+randInt(0, 10); // 7
+randInt(0, 10); // 5
+```
+
+
+
+## randSign():Number
+
+Returns a random "sign" (-1 or 1). Useful for multiplications.
+
+It's slightly faster than `choice(-1, 1)` since implementation is simpler (not
+that it will make a huge difference in most cases).
+
+See: [`choice()`](#choice)
+
+### Example:
+
+```js
+randSign(); // -1
+randSign(); // 1
+
+//same effect as
+choice(-1, 1);
+```
+
+
+
+## random():Number
+
+Returns a random number between `0` and `1`. Same as `Math.random()`.
+
+```js
+random(); // 0.35435103671625257
+random(); // 0.8768321881070733
+```
+
+**Important:** No methods inside mout should call `Math.random()`
+directly, they all use `random/random` as a proxy, that way we can
+inject/replace the pseudo-random number generator if needed (ie. in case we
+need a seeded random or a better algorithm than the native one).
+
+### Replacing the PRNG
+
+In some cases we might need better/different algorithms than the one provided
+by `Math.random` (ie. safer, seeded).
+
+Because of licensing issues, file size limitations and different needs we
+decided to **not** implement a custom PRNG and instead provide a easy way to
+override the default behavior. - [issue #99](https://github.com/millermedeiros/amd-utils/issues/99)
+
+If you are using mout with a loader that supports the [AMD map
+config](https://github.com/amdjs/amdjs-api/wiki/Common-Config), such as
+[RequireJS](http://requirejs.org/), you can use it to replace the PRNG
+(recommended approach):
+
+```js
+requirejs.config({
+    map : {
+        // all modules will load "my_custom_prng" instead of
+        // "mout/random/random"
+        '*' : {
+            'mout/random/random' : 'my_custom_prng'
+        }
+    }
+});
+```
+
+You also have the option to override `random.get` in case you are using
+mout on node.js or with a loader which doesn't support the map config:
+
+```js
+// replace the PRNG
+var n = 0;
+random.get = function(){
+    return ++n % 2? 0 : 1; // not so random :P
+};
+random(); // 0
+random(); // 1
+random(); // 0
+random(); // 1
+```
+
+See this [detailed explanation about PRNG in
+JavaScript](http://baagoe.org/en/w/index.php/Better_random_numbers_for_javascript)
+to understand the issues with the native `Math.random` and also for a list of
+algorithms that could be used instead.
+
+
+
+## randString([length, dictionary]):String
+
+Returns a random string.
+
+By default returns string containing alphanumeric characters (lowercase and uppercase) with a length of 8.
+
+### Arguments:
+
+ 1. `[length]`      (number)       : Length of the string to return. Defaults to 8.
+ 2. `[dictionary]`  (string)       : A string containing all characters used as a dictionary for the random string construction. Defaults to alphanumeric characters (lowercase and uppercase).
+
+### Example:
+
+```js
+randString();             // returns a string with length 8.
+randString(12);           // returns a string of length 12.
+randString(-1);           // returns a string of length 8.
+randString(null, 'pew!'); // returns a random string of length 8 composed of 'p', 'e', 'w' and '!'.
+randString(10, '0');      // always returns '0's of length 10.
+randString(rand(8, 10));  // returns a random string with length between 8 and 10.
+```
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/mout/doc/string.md b/node_modules/mout/doc/string.md
new file mode 100644
index 0000000..70a36fc
--- /dev/null
+++ b/node_modules/mout/doc/string.md
@@ -0,0 +1,626 @@
+# string #
+
+String utilities.
+
+
+## camelCase(str):String
+
+Convert string to "camelCase" text.
+
+See: [`pascalCase()`](#pascalCase), [`unCamelCase()`](#unCamelCase)
+
+### Example
+
+```js
+camelCase('lorem-ipsum-dolor'); // "loremIpsumDolor"
+camelCase('lorem ipsum dolor'); // "loremIpsumDolor"
+```
+
+
+
+## contains(str, substring, [fromIndex]):Boolean
+
+Checks if string contains the given substring.
+
+See: [`startsWith()`](#startsWith), [`endsWith()`](#endsWith)
+
+### Example
+
+```js
+contains('lorem', 'or');  // true
+contains('lorem', 'bar'); // false
+```
+
+
+
+## crop(str, maxChars, [append]):String
+
+Truncate string at full words. Alias to `truncate(str, maxChars, append, true);`.
+
+See: [`truncate()`](#truncate)
+
+### Example
+
+```js
+crop('lorem ipsum dolor', 10);      // "lorem..."
+crop('lorem ipsum dolor', 10, '+'); // "lorem+"
+```
+
+
+
+## endsWith(str, suffix):Boolean
+
+Checks if string ends with specified suffix.
+
+See: [`startsWith()`](#startsWith), [`contains()`](#contains)
+
+### Example
+
+```js
+endsWith('lorem ipsum', 'lorem'); // false
+endsWith('lorem ipsum', 'ipsum'); // true
+```
+
+
+
+## escapeHtml(str):String
+
+Escapes the following special characters for use in HTML:
+
+* `&` becomes `&amp;`
+* `<` becomes `&lt;`
+* `>` becomes `&gt;`
+* `'` becomes `&#39;`
+* `"` becomes `&quot;`
+
+No other characters are escaped. To HTML-escape other characters as well, use a third-party library like [_he_](http://mths.be/he).
+
+See: [`unescapeHtml()`](#unescapeHtml)
+
+### Example
+
+```js
+escapeHtml('lorem & "ipsum"'); // "lorem &amp;amp; &amp;quot;ipsum&amp;quot;"
+```
+
+
+
+## escapeRegExp(str):String
+
+Escape special chars to be used as literals in RegExp constructors.
+
+### Example
+
+```js
+str = escapeRegExp('[lorem.ipsum]'); // "\\[lorem\\.ipsum\\]"
+reg = new RegExp(str);               // /\[lorem\.ipsum\]/
+```
+
+
+
+## escapeUnicode(str[, shouldEscapePrintable]):String
+
+Unicode escape chars.
+
+It will only escape non-printable ASCII chars unless `shouldEscapePrintable` is
+set to `true`.
+
+See: [`unescapeUnicode()`](#unescapeUnicode)
+
+```js
+escapeUnicode('føo bår');
+// > "f\u00f8o b\u00e5r"
+escapeUnicode('føo bår', true);
+// > "\u0066\u00f8\u006f\u0020\u0062\u00e5\u0072"
+```
+
+
+
+## hyphenate(str):String
+
+Replaces spaces with hyphens, split camelCase text, remove non-word chars,
+remove accents and convert to lower case.
+
+See: [`slugify()`](#slugify), [`underscore()`](#underscore),
+[`unhyphenate`](#unhyphenate)
+
+```js
+hyphenate(' %# lorem ipsum  ? $  dolor'); // "lorem-ipsum-dolor"
+hyphenate('spéçïãl çhârs');               // "special-chars"
+hyphenate('loremIpsum');                  // "lorem-ipsum"
+```
+
+
+
+## insert(str, index, partial):String
+
+Inserts a `partial` before the given `index` in the provided `str`.
+If the index is larger than the length of the string the partial is appended at the end.
+A negative index is treated as `length - index` where `length` is the length or the string.
+
+```js
+insert('this is a sentence', 10, 'sample '); // "this is a sample sentence"
+insert('foo', 100, 'bar'); // "foobar"
+insert('image.png', -4, '-large'); // "image-large.png"
+```
+
+## interpolate(str, replacements[, syntax]):String
+
+String interpolation. Format/replace tokens with object properties.
+
+```js
+var tmpl = 'Hello {{name}}!';
+interpolate(tmpl, {name: 'World'});       // "Hello World!"
+interpolate(tmpl, {name: 'Lorem Ipsum'}); // "Hello Lorem Ipsum!"
+
+tmpl = 'Hello {{name.first}}!';
+interpolate(tmpl, {name: {first: 'Lorem'}}); // "Hello Lorem!"
+```
+
+It uses a mustache-like syntax by default but you can set your own format if
+needed. You can also use Arrays for the replacements (since Arrays are
+objects as well):
+
+```js
+// matches everything inside "${}"
+var syntax = /\$\{([^}]+)\}/g;
+var tmpl = "Hello ${0}!";
+interpolate(tmpl, ['Foo Bar'], syntax); // "Hello Foo Bar!"
+```
+
+
+
+## lowerCase(str):String
+
+"Safer" `String.toLowerCase()`. (Used internally)
+
+### Example
+
+```js
+(null).toLowerCase();      // Error!
+(undefined).toLowerCase(); // Error!
+lowerCase(null);           // ""
+lowerCase(undefined);      // ""
+```
+
+
+
+## lpad(str, minLength[, char]):String
+
+Pad string from left with `char` if its' length is smaller than `minLen`.
+
+See: [`rpad()`](#rpad)
+
+### Example
+
+```js
+lpad('a', 5);        // "    a"
+lpad('a', 5, '-');   // "----a"
+lpad('abc', 3, '-'); // "abc"
+lpad('abc', 4, '-'); // "-abc"
+```
+
+
+
+## ltrim(str, [chars]):String
+
+Remove chars or white-spaces from beginning of string.
+
+`chars` is an array of chars to remove from the beginning of the string. If
+`chars` is not specified, Unicode whitespace chars will be used instead.
+
+See: [`rtrim()`](#rtrim), [`trim()`](#trim)
+
+### Example
+
+```js
+ltrim('   lorem ipsum   ');      // "lorem ipsum   "
+ltrim('--lorem ipsum--', ['-']); // "lorem ipsum--"
+```
+
+
+
+## makePath(...args):String
+
+Group arguments as path segments, if any of the args is `null` or `undefined`
+it will be ignored from resulting path. It will also remove duplicate "/".
+
+See: [`array/join()`](array.html#join)
+
+### Example
+
+```js
+makePath('lorem', 'ipsum', null, 'dolor'); // "lorem/ipsum/dolor"
+makePath('foo///bar/');                    // "foo/bar/"
+```
+
+
+
+## normalizeLineBreaks(str, [lineBreak]):String
+
+Normalize line breaks to a single format. Defaults to Unix `\n`.
+
+It handles DOS (`\r\n`), Mac (`\r`) and Unix (`\n`) formats.
+
+### Example
+
+```js
+// "foo\nbar\nlorem\nipsum"
+normalizeLineBreaks('foo\nbar\r\nlorem\ripsum');
+
+// "foo\rbar\rlorem\ripsum"
+normalizeLineBreaks('foo\nbar\r\nlorem\ripsum', '\r');
+
+// "foo bar lorem ipsum"
+normalizeLineBreaks('foo\nbar\r\nlorem\ripsum', ' ');
+```
+
+
+
+## pascalCase(str):String
+
+Convert string to "PascalCase" text.
+
+See: [`camelCase()`](#camelCase)
+
+### Example
+
+```js
+pascalCase('lorem-ipsum-dolor'); // "LoremIpsumDolor"
+pascalCase('lorem ipsum dolor'); // "LoremIpsumDolor"
+```
+
+
+
+## properCase(str):String
+
+UPPERCASE first char of each word, lowercase other chars.
+
+### Example
+
+```js
+properCase('loRem iPSum'); // "Lorem Ipsum"
+```
+
+
+
+## removeNonASCII(str):String
+
+Remove [non-printable ASCII
+chars](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).
+
+### Example
+
+```js
+removeNonASCII('äÄçÇéÉêlorem-ipsumöÖÐþúÚ'); // "lorem-ipsum"
+```
+
+
+
+## removeNonWord(str):String
+
+Remove non-word chars.
+
+### Example
+
+```js
+var str = 'lorem ~!@#$%^&*()_+`-={}[]|\\:";\'/?><., ipsum';
+removeNonWord(str); // "lorem - ipsum"
+```
+
+
+
+## repeat(str, n):String
+
+Repeat string n-times.
+
+### Example
+
+```js
+repeat('a', 3);  // "aaa"
+repeat('bc', 2); // "bcbc"
+repeat('a', 0);  // ""
+```
+
+
+
+## replace(str, search, replacements):String
+
+Replace string(s) with the replacement(s) in the source.
+
+`search` and `replacements` can be an array, or a single item. For every item
+in `search`, it will call `str.replace` with the search item and the matching
+replacement in `replacements`. If `replacements` only contains one replacement,
+it will be used for all the searches, otherwise it will use the replacement at
+the same index as the search.
+
+### Example
+
+```js
+replace('foo bar', 'foo', 'test');                // "test bar"
+replace('test 1 2', ['1', '2'], 'n');             // "test n n"
+replace('test 1 2', ['1', '2'], ['one', 'two']);  // "test one two"
+replace('123abc', [/\d/g, /[a-z]/g], ['0', '.']); // "000..."
+```
+
+
+
+## replaceAccents(str):String
+
+Replaces all accented chars with regular ones.
+
+**Important:** Only covers **Basic Latin** and **Latin-1** unicode chars.
+
+### Example
+
+```js
+replaceAccents('spéçïãl çhârs'); // "special chars"
+```
+
+
+
+## rpad(str, minLength[, char]):String
+
+Pad string from right with `char` if its' length is smaller than `minLen`.
+
+See: [`lpad()`](#lpad)
+
+### Example
+
+```js
+rpad('a', 5);        // "a    "
+rpad('a', 5, '-');   // "a----"
+rpad('abc', 3, '-'); // "abc"
+rpad('abc', 4, '-'); // "abc-"
+```
+
+
+
+## rtrim(str, [chars]):String
+
+Remove chars or white-spaces from end of string.
+
+`chars` is an array of chars to remove from the end of the string. If
+`chars` is not specified, Unicode whitespace chars will be used instead.
+
+See: [`trim()`](#trim), [`ltrim()`](#ltrim)
+
+### Example
+
+```js
+rtrim('   lorem ipsum   ');      // "   lorem ipsum"
+rtrim('--lorem ipsum--', ['-']); // "--lorem ipsum"
+```
+
+
+
+## sentenceCase(str):String
+
+UPPERCASE first char of each sentence and lowercase other chars.
+
+### Example
+
+```js
+var str = 'Lorem IpSum DoLOr. maeCeNnas Ullamcor.';
+sentenceCase(str); // "Lorem ipsum dolor. Maecennas ullamcor."
+```
+
+
+
+## stripHtmlTags(str):String
+
+Remove HTML/XML tags from string.
+
+### Example
+
+```js
+var str = '<p><em>lorem</em> <strong>ipsum</strong></p>';
+stripHtmlTags(str); // "lorem ipsum"
+```
+
+
+
+## startsWith(str, prefix):Boolean
+
+Checks if string starts with specified prefix.
+
+See: [`endsWith()`](#endsWith), [`contains()`](#contains)
+
+### Example
+
+```js
+startsWith('lorem ipsum', 'lorem'); // true
+startsWith('lorem ipsum', 'ipsum'); // false
+```
+
+
+
+## slugify(str[, delimeter]):String
+
+Convert to lower case, remove accents, remove non-word chars and replace spaces
+with the delimeter. The default delimeter is a hyphen.
+
+Note that this does not split camelCase text.
+
+See: [`hyphenate()`](#hyphenate) and [`underscore()`](#underscore)
+
+### Example
+
+```js
+var str = 'loremIpsum dolor spéçïãl chârs';
+slugify(str); // "loremipsum-dolor-special-chars"
+slugify(str, '_'); // "loremipsum_dolor_special_chars"
+```
+
+
+
+## trim(str, [chars]):String
+
+Remove chars or white-spaces from beginning and end of string.
+
+`chars` is an array of chars to remove from the beginning and end of the
+string. If `chars` is not specified, Unicode whitespace chars will be used
+instead.
+
+See: [`rtrim()`](#rtrim), [`ltrim()`](#ltrim)
+
+### Example
+
+```js
+trim('   lorem ipsum   ');             // "lorem ipsum"
+trim('-+-lorem ipsum-+-', ['-', '+']); // "lorem ipsum"
+```
+
+
+
+## truncate(str, maxChars, [append], [onlyFullWords]):String
+
+Limit number of chars. Returned string `length` will be `<= maxChars`.
+
+See: [`crop()`](#crop)
+
+### Arguments
+
+ 1. `str` (String) : String
+ 2. `maxChars` (Number) : Maximum number of characters including `append.length`.
+ 3. `[append]` (String) : Value that should be added to the end of string.
+    Defaults to "...".
+ 4. `[onlyFullWords]` (Boolean) : If it shouldn't break words. Default is
+    `false`. (favor [`crop()`](#crop) since code will be clearer).
+
+### Example
+
+```js
+truncate('lorem ipsum dolor', 11);             // "lorem ip..."
+truncate('lorem ipsum dolor', 11, '+');        // "lorem ipsu+"
+truncate('lorem ipsum dolor', 11, null, true); // "lorem..."
+```
+
+
+
+## typecast(str):*
+
+Parses string and convert it into a native value.
+
+### Example
+
+```js
+typecast('lorem ipsum'); // "lorem ipsum"
+typecast('123');         // 123
+typecast('123.45');      // 123.45
+typecast('false');       // false
+typecast('true');        // true
+typecast('null');        // null
+typecast('undefined');   // undefined
+```
+
+
+
+## unCamelCase(str, [delimiter]):String
+
+Add the delimiter between camelCase text and convert first char of each word to
+lower case.
+
+The delimiter defaults to a space character.
+
+See: [`camelCase()`][#camelCase]
+
+### Example
+
+```js
+unCamelCase('loremIpsumDolor'); // "lorem ipsum dolor"
+unCamelCase('loremIpsumDolor', '-'); // "lorem-ipsum-color"
+```
+
+
+## underscore(str):String
+
+Replaces spaces with underscores, split camelCase text, remove non-word chars,
+remove accents and convert to lower case.
+
+See: [`slugify()`](#slugify), [`hyphenate()`](#hyphenate)
+
+```js
+underscore(' %# lorem ipsum  ? $  dolor'); // "lorem_ipsum_dolor"
+underscore('spéçïãl çhârs');               // "special_chars"
+underscore('loremIpsum');                  // "lorem_ipsum"
+```
+
+
+
+## unescapeHtml(str):String
+
+Unescapes the following HTML character references back into the raw symbol they map to: 
+
+* `&amp;` becomes `&`
+* `&lt;` becomes `<`
+* `&gt;` becomes `>`
+* `&#39;` becomes `'`
+* `&quot;` becomes `"`
+
+No other HTML character references are unescaped. To HTML-unescape other entities as well, use a third-party library like [_he_](http://mths.be/he).
+
+
+See: [`escapeHtml()`](#escapeHtml)
+
+### Example
+
+```js
+unescapeHtml('lorem &amp;amp; &amp;quot;ipsum&amp;quot;'); // 'lorem & "ipsum"'
+```
+
+
+
+## unescapeUnicode(str):String
+
+Unescapes unicode char sequences.
+
+See: [`escapeUnicode()`](#escapeUnicode)
+
+```js
+unescapeUnicode('\\u0066\\u00f8\\u006f\\u0020\\u0062\\u00e5\\u0072');
+// > 'føo bår'
+```
+
+
+
+## unhyphenate(str):String
+
+Replaces hyphens with spaces. (only hyphens between word chars)
+
+See : [`hyphenate()`](#hyphenate)
+
+### Example
+
+```js
+unhyphenate('lorem-ipsum-dolor'); // "lorem ipsum dolor"
+```
+
+
+## upperCase(str):String
+
+"Safer" `String.toUpperCase()`. (Used internally)
+
+### Example
+
+```js
+(null).toUpperCase();      // Error!
+(undefined).toUpperCase(); // Error!
+upperCase(null);           // ""
+upperCase(undefined);      // ""
+```
+
+
+
+## WHITE_SPACES:Array
+
+Constant array of all [Unicode white-space
+characters](http://en.wikipedia.org/wiki/Whitespace_character).
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/mout/doc/time.md b/node_modules/mout/doc/time.md
new file mode 100644
index 0000000..628c2a9
--- /dev/null
+++ b/node_modules/mout/doc/time.md
@@ -0,0 +1,64 @@
+# time #
+
+Utilities for time manipulation.
+
+
+## convert(value, sourceUnit, [destinationUnit]):Number
+
+Converts time between units.
+
+Available units: `millisecond`, `second`, `minute`, `hour`, `day`, `week`.
+Abbreviations: `ms`, `s`, `m`, `h`, `d`, `w`.
+
+We do **not** support year and month as a time unit since their values are not
+fixed.
+
+The default `destinationUnit` is `ms`.
+
+```js
+convert(1, 'minute');    // 60000
+convert(2.5, 's', 'ms'); // 2500
+convert(2, 'm', 's');    // 120
+convert(500, 'ms', 's'); // 0.5
+```
+
+
+
+## now():Number
+
+Returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.
+Uses `Date.now()` if available.
+
+### Example
+
+```js
+now(); // 1335449614650
+```
+
+
+
+## parseMs(ms):Object
+
+Parse timestamp (milliseconds) into an object `{milliseconds:number,
+seconds:number, minutes:number, hours:number, days:number}`.
+
+### Example
+
+```js
+// {days:27, hours:4, minutes:26, seconds:5, milliseconds:454}
+parseMs(2348765454);
+```
+
+
+
+## toTimeString(ms):String
+
+Convert timestamp (milliseconds) into a time string in the format "[H:]MM:SS".
+
+### Example
+
+```js
+toTimeString(12513);   // "00:12"
+toTimeString(951233);  // "15:51"
+toTimeString(8765235); // "2:26:05"
+```
diff --git a/node_modules/mout/function.js b/node_modules/mout/function.js
new file mode 100644
index 0000000..f8de638
--- /dev/null
+++ b/node_modules/mout/function.js
@@ -0,0 +1,23 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'awaitDelay' : require('./function/awaitDelay'),
+    'bind' : require('./function/bind'),
+    'compose' : require('./function/compose'),
+    'constant' : require('./function/constant'),
+    'debounce' : require('./function/debounce'),
+    'func' : require('./function/func'),
+    'identity' : require('./function/identity'),
+    'makeIterator_' : require('./function/makeIterator_'),
+    'partial' : require('./function/partial'),
+    'prop' : require('./function/prop'),
+    'series' : require('./function/series'),
+    'throttle' : require('./function/throttle'),
+    'timeout' : require('./function/timeout'),
+    'times' : require('./function/times'),
+    'wrap' : require('./function/wrap')
+};
+
+
diff --git a/node_modules/mout/function/awaitDelay.js b/node_modules/mout/function/awaitDelay.js
new file mode 100644
index 0000000..8c9b1a3
--- /dev/null
+++ b/node_modules/mout/function/awaitDelay.js
@@ -0,0 +1,22 @@
+var now = require('../time/now');
+var timeout = require('./timeout');
+var append = require('../array/append');
+
+    /**
+     * Ensure a minimum delay for callbacks
+     */
+    function awaitDelay( callback, delay ){
+        var baseTime = now() + delay;
+        return function() {
+            // ensure all browsers will execute it asynchronously (avoid hard
+            // to catch errors) not using "0" because of old browsers and also
+            // since new browsers increase the value to be at least "4"
+            // http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout
+            var ms = Math.max(baseTime - now(), 4);
+            return timeout.apply(this, append([callback, ms, this], arguments));
+        };
+    }
+
+    module.exports = awaitDelay;
+
+
diff --git a/node_modules/mout/function/bind.js b/node_modules/mout/function/bind.js
new file mode 100644
index 0000000..c6c4719
--- /dev/null
+++ b/node_modules/mout/function/bind.js
@@ -0,0 +1,19 @@
+var slice = require('../array/slice');
+
+    /**
+     * Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
+     * @param {Function} fn  Function.
+     * @param {object} context   Execution context.
+     * @param {rest} args    Arguments (0...n arguments).
+     * @return {Function} Wrapped Function.
+     */
+    function bind(fn, context, args){
+        var argsArr = slice(arguments, 2); //curried args
+        return function(){
+            return fn.apply(context, argsArr.concat(slice(arguments)));
+        };
+    }
+
+    module.exports = bind;
+
+
diff --git a/node_modules/mout/function/compose.js b/node_modules/mout/function/compose.js
new file mode 100644
index 0000000..8cd5c5f
--- /dev/null
+++ b/node_modules/mout/function/compose.js
@@ -0,0 +1,23 @@
+
+
+    /**
+     * Returns a function that composes multiple functions, passing results to
+     * each other.
+     */
+    function compose() {
+        var fns = arguments;
+        return function(arg){
+            // only cares about the first argument since the chain can only
+            // deal with a single return value anyway. It should start from
+            // the last fn.
+            var n = fns.length;
+            while (n--) {
+                arg = fns[n].call(this, arg);
+            }
+            return arg;
+         };
+     }
+
+     module.exports = compose;
+
+
diff --git a/node_modules/mout/function/constant.js b/node_modules/mout/function/constant.js
new file mode 100644
index 0000000..ab932d9
--- /dev/null
+++ b/node_modules/mout/function/constant.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a new function that will return the value
+     */
+    function constant(value){
+        return function() {
+            return value;
+        };
+    }
+
+    module.exports = constant;
+
+
diff --git a/node_modules/mout/function/debounce.js b/node_modules/mout/function/debounce.js
new file mode 100644
index 0000000..7f6f302
--- /dev/null
+++ b/node_modules/mout/function/debounce.js
@@ -0,0 +1,32 @@
+
+
+    /**
+     * Debounce callback execution
+     */
+    function debounce(fn, threshold, isAsap){
+        var timeout, result;
+        function debounced(){
+            var args = arguments, context = this;
+            function delayed(){
+                if (! isAsap) {
+                    result = fn.apply(context, args);
+                }
+                timeout = null;
+            }
+            if (timeout) {
+                clearTimeout(timeout);
+            } else if (isAsap) {
+                result = fn.apply(context, args);
+            }
+            timeout = setTimeout(delayed, threshold);
+            return result;
+        }
+        debounced.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return debounced;
+    }
+
+    module.exports = debounce;
+
+
diff --git a/node_modules/mout/function/func.js b/node_modules/mout/function/func.js
new file mode 100644
index 0000000..b81bf0a
--- /dev/null
+++ b/node_modules/mout/function/func.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a function that call a method on the passed object
+     */
+    function func(name){
+        return function(obj){
+            return obj[name]();
+        };
+    }
+
+    module.exports = func;
+
+
diff --git a/node_modules/mout/function/identity.js b/node_modules/mout/function/identity.js
new file mode 100644
index 0000000..d07b01a
--- /dev/null
+++ b/node_modules/mout/function/identity.js
@@ -0,0 +1,12 @@
+
+
+    /**
+     * Returns the first argument provided to it.
+     */
+    function identity(val){
+        return val;
+    }
+
+    module.exports = identity;
+
+
diff --git a/node_modules/mout/function/makeIterator_.js b/node_modules/mout/function/makeIterator_.js
new file mode 100644
index 0000000..20cc0e7
--- /dev/null
+++ b/node_modules/mout/function/makeIterator_.js
@@ -0,0 +1,34 @@
+var identity = require('./identity');
+var prop = require('./prop');
+var deepMatches = require('../object/deepMatches');
+
+    /**
+     * Converts argument into a valid iterator.
+     * Used internally on most array/object/collection methods that receives a
+     * callback/iterator providing a shortcut syntax.
+     */
+    function makeIterator(src, thisObj){
+        if (src == null) {
+            return identity;
+        }
+        switch(typeof src) {
+            case 'function':
+                // function is the first to improve perf (most common case)
+                // also avoid using `Function#call` if not needed, which boosts
+                // perf a lot in some cases
+                return (typeof thisObj !== 'undefined')? function(val, i, arr){
+                    return src.call(thisObj, val, i, arr);
+                } : src;
+            case 'object':
+                return function(val){
+                    return deepMatches(val, src);
+                };
+            case 'string':
+            case 'number':
+                return prop(src);
+        }
+    }
+
+    module.exports = makeIterator;
+
+
diff --git a/node_modules/mout/function/partial.js b/node_modules/mout/function/partial.js
new file mode 100644
index 0000000..a31dc12
--- /dev/null
+++ b/node_modules/mout/function/partial.js
@@ -0,0 +1,23 @@
+var slice = require('../array/slice');
+
+    /**
+     * Creates a partially applied function.
+     */
+    function partial(f) {
+        var as = slice(arguments, 1);
+        return function() {
+            var args = as.concat(slice(arguments));
+            for (var i = args.length; i--;) {
+                if (args[i] === partial._) {
+                    args[i] = args.splice(-1)[0];
+                }
+            }
+            return f.apply(this, args);
+        };
+    }
+
+    partial._ = {};
+
+    module.exports = partial;
+
+
diff --git a/node_modules/mout/function/prop.js b/node_modules/mout/function/prop.js
new file mode 100644
index 0000000..734acb7
--- /dev/null
+++ b/node_modules/mout/function/prop.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a function that gets a property of the passed object
+     */
+    function prop(name){
+        return function(obj){
+            return obj[name];
+        };
+    }
+
+    module.exports = prop;
+
+
diff --git a/node_modules/mout/function/series.js b/node_modules/mout/function/series.js
new file mode 100644
index 0000000..25159c2
--- /dev/null
+++ b/node_modules/mout/function/series.js
@@ -0,0 +1,22 @@
+
+
+    /**
+     * Returns a function that will execute a list of functions in sequence
+     * passing the same arguments to each one. (useful for batch processing
+     * items during a forEach loop)
+     */
+    function series(){
+        var fns = arguments;
+        return function(){
+            var i = 0,
+                n = fns.length;
+            while (i < n) {
+                fns[i].apply(this, arguments);
+                i += 1;
+            }
+        };
+    }
+
+    module.exports = series;
+
+
diff --git a/node_modules/mout/function/throttle.js b/node_modules/mout/function/throttle.js
new file mode 100644
index 0000000..0a5e161
--- /dev/null
+++ b/node_modules/mout/function/throttle.js
@@ -0,0 +1,33 @@
+var now = require('../time/now');
+
+    /**
+     */
+    function throttle(fn, delay){
+        var context, timeout, result, args,
+            diff, prevCall = 0;
+        function delayed(){
+            prevCall = now();
+            timeout = null;
+            result = fn.apply(context, args);
+        }
+        function throttled(){
+            context = this;
+            args = arguments;
+            diff = delay - (now() - prevCall);
+            if (diff <= 0) {
+                clearTimeout(timeout);
+                delayed();
+            } else if (! timeout) {
+                timeout = setTimeout(delayed, diff);
+            }
+            return result;
+        }
+        throttled.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return throttled;
+    }
+
+    module.exports = throttle;
+
+
diff --git a/node_modules/mout/function/timeout.js b/node_modules/mout/function/timeout.js
new file mode 100644
index 0000000..509dd68
--- /dev/null
+++ b/node_modules/mout/function/timeout.js
@@ -0,0 +1,17 @@
+var slice = require('../array/slice');
+
+    /**
+     * Delays the call of a function within a given context.
+     */
+    function timeout(fn, millis, context){
+
+        var args = slice(arguments, 3);
+
+        return setTimeout(function() {
+            fn.apply(context, args);
+        }, millis);
+    }
+
+    module.exports = timeout;
+
+
diff --git a/node_modules/mout/function/times.js b/node_modules/mout/function/times.js
new file mode 100644
index 0000000..04a11c2
--- /dev/null
+++ b/node_modules/mout/function/times.js
@@ -0,0 +1,17 @@
+
+
+    /**
+     * Iterates over a callback a set amount of times
+     */
+    function times(n, callback, thisObj){
+        var i = -1;
+        while (++i < n) {
+            if ( callback.call(thisObj, i) === false ) {
+                break;
+            }
+        }
+    }
+
+    module.exports = times;
+
+
diff --git a/node_modules/mout/function/wrap.js b/node_modules/mout/function/wrap.js
new file mode 100644
index 0000000..82d77ff
--- /dev/null
+++ b/node_modules/mout/function/wrap.js
@@ -0,0 +1,14 @@
+var partial = require('./partial');
+
+    /**
+     * Returns the first function passed as an argument to the second,
+     * allowing you to adjust arguments, run code before and after, and
+     * conditionally execute the original function.
+     */
+    function wrap(fn, wrapper){
+        return partial(wrapper, fn);
+    }
+
+    module.exports = wrap;
+
+
diff --git a/node_modules/mout/index.js b/node_modules/mout/index.js
new file mode 100644
index 0000000..17ef9dd
--- /dev/null
+++ b/node_modules/mout/index.js
@@ -0,0 +1,25 @@
+/**@license
+ * mout v0.11.1 | http://moutjs.com | MIT license
+ */
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'VERSION' : '0.11.1',
+    'array' : require('./array'),
+    'collection' : require('./collection'),
+    'date' : require('./date'),
+    'function' : require('./function'),
+    'lang' : require('./lang'),
+    'math' : require('./math'),
+    'number' : require('./number'),
+    'object' : require('./object'),
+    'queryString' : require('./queryString'),
+    'random' : require('./random'),
+    'string' : require('./string'),
+    'time' : require('./time'),
+    'fn' : require('./function')
+};
+
+
diff --git a/node_modules/mout/lang.js b/node_modules/mout/lang.js
new file mode 100644
index 0000000..150007f
--- /dev/null
+++ b/node_modules/mout/lang.js
@@ -0,0 +1,40 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'GLOBAL' : require('./lang/GLOBAL'),
+    'clone' : require('./lang/clone'),
+    'createObject' : require('./lang/createObject'),
+    'ctorApply' : require('./lang/ctorApply'),
+    'deepClone' : require('./lang/deepClone'),
+    'deepEquals' : require('./lang/deepEquals'),
+    'defaults' : require('./lang/defaults'),
+    'inheritPrototype' : require('./lang/inheritPrototype'),
+    'is' : require('./lang/is'),
+    'isArguments' : require('./lang/isArguments'),
+    'isArray' : require('./lang/isArray'),
+    'isBoolean' : require('./lang/isBoolean'),
+    'isDate' : require('./lang/isDate'),
+    'isEmpty' : require('./lang/isEmpty'),
+    'isFinite' : require('./lang/isFinite'),
+    'isFunction' : require('./lang/isFunction'),
+    'isInteger' : require('./lang/isInteger'),
+    'isKind' : require('./lang/isKind'),
+    'isNaN' : require('./lang/isNaN'),
+    'isNull' : require('./lang/isNull'),
+    'isNumber' : require('./lang/isNumber'),
+    'isObject' : require('./lang/isObject'),
+    'isPlainObject' : require('./lang/isPlainObject'),
+    'isPrimitive' : require('./lang/isPrimitive'),
+    'isRegExp' : require('./lang/isRegExp'),
+    'isString' : require('./lang/isString'),
+    'isUndefined' : require('./lang/isUndefined'),
+    'isnt' : require('./lang/isnt'),
+    'kindOf' : require('./lang/kindOf'),
+    'toArray' : require('./lang/toArray'),
+    'toNumber' : require('./lang/toNumber'),
+    'toString' : require('./lang/toString')
+};
+
+
diff --git a/node_modules/mout/lang/GLOBAL.js b/node_modules/mout/lang/GLOBAL.js
new file mode 100644
index 0000000..4d759ba
--- /dev/null
+++ b/node_modules/mout/lang/GLOBAL.js
@@ -0,0 +1,7 @@
+
+
+    // Reference to the global context (works on ES3 and ES5-strict mode)
+    //jshint -W061, -W064
+    module.exports = Function('return this')();
+
+
diff --git a/node_modules/mout/lang/clone.js b/node_modules/mout/lang/clone.js
new file mode 100644
index 0000000..e515487
--- /dev/null
+++ b/node_modules/mout/lang/clone.js
@@ -0,0 +1,49 @@
+var kindOf = require('./kindOf');
+var isPlainObject = require('./isPlainObject');
+var mixIn = require('../object/mixIn');
+
+    /**
+     * Clone native types.
+     */
+    function clone(val){
+        switch (kindOf(val)) {
+            case 'Object':
+                return cloneObject(val);
+            case 'Array':
+                return cloneArray(val);
+            case 'RegExp':
+                return cloneRegExp(val);
+            case 'Date':
+                return cloneDate(val);
+            default:
+                return val;
+        }
+    }
+
+    function cloneObject(source) {
+        if (isPlainObject(source)) {
+            return mixIn({}, source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneRegExp(r) {
+        var flags = '';
+        flags += r.multiline ? 'm' : '';
+        flags += r.global ? 'g' : '';
+        flags += r.ignoreCase ? 'i' : '';
+        return new RegExp(r.source, flags);
+    }
+
+    function cloneDate(date) {
+        return new Date(+date);
+    }
+
+    function cloneArray(arr) {
+        return arr.slice();
+    }
+
+    module.exports = clone;
+
+
diff --git a/node_modules/mout/lang/createObject.js b/node_modules/mout/lang/createObject.js
new file mode 100644
index 0000000..bbc14c1
--- /dev/null
+++ b/node_modules/mout/lang/createObject.js
@@ -0,0 +1,18 @@
+var mixIn = require('../object/mixIn');
+
+    /**
+     * Create Object using prototypal inheritance and setting custom properties.
+     * - Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.
+     * @param {object} parent    Parent Object.
+     * @param {object} [props] Object properties.
+     * @return {object} Created object.
+     */
+    function createObject(parent, props){
+        function F(){}
+        F.prototype = parent;
+        return mixIn(new F(), props);
+
+    }
+    module.exports = createObject;
+
+
diff --git a/node_modules/mout/lang/ctorApply.js b/node_modules/mout/lang/ctorApply.js
new file mode 100644
index 0000000..d68dc50
--- /dev/null
+++ b/node_modules/mout/lang/ctorApply.js
@@ -0,0 +1,17 @@
+
+
+    function F(){}
+
+    /**
+     * Do fn.apply on a constructor.
+     */
+    function ctorApply(ctor, args) {
+        F.prototype = ctor.prototype;
+        var instance = new F();
+        ctor.apply(instance, args);
+        return instance;
+    }
+
+    module.exports = ctorApply;
+
+
diff --git a/node_modules/mout/lang/deepClone.js b/node_modules/mout/lang/deepClone.js
new file mode 100644
index 0000000..25fd95f
--- /dev/null
+++ b/node_modules/mout/lang/deepClone.js
@@ -0,0 +1,48 @@
+var clone = require('./clone');
+var forOwn = require('../object/forOwn');
+var kindOf = require('./kindOf');
+var isPlainObject = require('./isPlainObject');
+
+    /**
+     * Recursively clone native types.
+     */
+    function deepClone(val, instanceClone) {
+        switch ( kindOf(val) ) {
+            case 'Object':
+                return cloneObject(val, instanceClone);
+            case 'Array':
+                return cloneArray(val, instanceClone);
+            default:
+                return clone(val);
+        }
+    }
+
+    function cloneObject(source, instanceClone) {
+        if (isPlainObject(source)) {
+            var out = {};
+            forOwn(source, function(val, key) {
+                this[key] = deepClone(val, instanceClone);
+            }, out);
+            return out;
+        } else if (instanceClone) {
+            return instanceClone(source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneArray(arr, instanceClone) {
+        var out = [],
+            i = -1,
+            n = arr.length,
+            val;
+        while (++i < n) {
+            out[i] = deepClone(arr[i], instanceClone);
+        }
+        return out;
+    }
+
+    module.exports = deepClone;
+
+
+
diff --git a/node_modules/mout/lang/deepEquals.js b/node_modules/mout/lang/deepEquals.js
new file mode 100644
index 0000000..bf2b90d
--- /dev/null
+++ b/node_modules/mout/lang/deepEquals.js
@@ -0,0 +1,30 @@
+var is = require('./is');
+var isObject = require('./isObject');
+var isArray = require('./isArray');
+var objEquals = require('../object/equals');
+var arrEquals = require('../array/equals');
+
+    /**
+     * Recursively checks for same properties and values.
+     */
+    function deepEquals(a, b, callback){
+        callback = callback || is;
+
+        var bothObjects = isObject(a) && isObject(b);
+        var bothArrays = !bothObjects && isArray(a) && isArray(b);
+
+        if (!bothObjects && !bothArrays) {
+            return callback(a, b);
+        }
+
+        function compare(a, b){
+            return deepEquals(a, b, callback);
+        }
+
+        var method = bothObjects ? objEquals : arrEquals;
+        return method(a, b, compare);
+    }
+
+    module.exports = deepEquals;
+
+
diff --git a/node_modules/mout/lang/defaults.js b/node_modules/mout/lang/defaults.js
new file mode 100644
index 0000000..1111b2e
--- /dev/null
+++ b/node_modules/mout/lang/defaults.js
@@ -0,0 +1,17 @@
+var toArray = require('./toArray');
+var find = require('../array/find');
+
+    /**
+     * Return first non void argument
+     */
+    function defaults(var_args){
+        return find(toArray(arguments), nonVoid);
+    }
+
+    function nonVoid(val){
+        return val != null;
+    }
+
+    module.exports = defaults;
+
+
diff --git a/node_modules/mout/lang/inheritPrototype.js b/node_modules/mout/lang/inheritPrototype.js
new file mode 100644
index 0000000..1c9da1f
--- /dev/null
+++ b/node_modules/mout/lang/inheritPrototype.js
@@ -0,0 +1,18 @@
+var createObject = require('./createObject');
+
+    /**
+    * Inherit prototype from another Object.
+    * - inspired by Nicholas Zackas <http://nczonline.net> Solution
+    * @param {object} child Child object
+    * @param {object} parent    Parent Object
+    */
+    function inheritPrototype(child, parent){
+        var p = createObject(parent.prototype);
+        p.constructor = child;
+        child.prototype = p;
+        child.super_ = parent;
+        return p;
+    }
+
+    module.exports = inheritPrototype;
+
diff --git a/node_modules/mout/lang/is.js b/node_modules/mout/lang/is.js
new file mode 100644
index 0000000..4a83573
--- /dev/null
+++ b/node_modules/mout/lang/is.js
@@ -0,0 +1,23 @@
+
+
+    /**
+     * Check if both arguments are egal.
+     */
+    function is(x, y){
+        // implementation borrowed from harmony:egal spec
+        if (x === y) {
+          // 0 === -0, but they are not identical
+          return x !== 0 || 1 / x === 1 / y;
+        }
+
+        // NaN !== NaN, but they are identical.
+        // NaNs are the only non-reflexive value, i.e., if x !== x,
+        // then x is a NaN.
+        // isNaN is broken: it converts its argument to number, so
+        // isNaN("foo") => true
+        return x !== x && y !== y;
+    }
+
+    module.exports = is;
+
+
diff --git a/node_modules/mout/lang/isArguments.js b/node_modules/mout/lang/isArguments.js
new file mode 100644
index 0000000..f7b08ba
--- /dev/null
+++ b/node_modules/mout/lang/isArguments.js
@@ -0,0 +1,15 @@
+var isKind = require('./isKind');
+
+    /**
+     */
+    var isArgs = isKind(arguments, 'Arguments')?
+            function(val){
+                return isKind(val, 'Arguments');
+            } :
+            function(val){
+                // Arguments is an Object on IE7
+                return !!(val && Object.prototype.hasOwnProperty.call(val, 'callee'));
+            };
+
+    module.exports = isArgs;
+
diff --git a/node_modules/mout/lang/isArray.js b/node_modules/mout/lang/isArray.js
new file mode 100644
index 0000000..262ee40
--- /dev/null
+++ b/node_modules/mout/lang/isArray.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    var isArray = Array.isArray || function (val) {
+        return isKind(val, 'Array');
+    };
+    module.exports = isArray;
+
diff --git a/node_modules/mout/lang/isBoolean.js b/node_modules/mout/lang/isBoolean.js
new file mode 100644
index 0000000..86557cb
--- /dev/null
+++ b/node_modules/mout/lang/isBoolean.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isBoolean(val) {
+        return isKind(val, 'Boolean');
+    }
+    module.exports = isBoolean;
+
diff --git a/node_modules/mout/lang/isDate.js b/node_modules/mout/lang/isDate.js
new file mode 100644
index 0000000..4a5130f
--- /dev/null
+++ b/node_modules/mout/lang/isDate.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isDate(val) {
+        return isKind(val, 'Date');
+    }
+    module.exports = isDate;
+
diff --git a/node_modules/mout/lang/isEmpty.js b/node_modules/mout/lang/isEmpty.js
new file mode 100644
index 0000000..c7854c6
--- /dev/null
+++ b/node_modules/mout/lang/isEmpty.js
@@ -0,0 +1,24 @@
+var forOwn = require('../object/forOwn');
+var isArray = require('./isArray');
+
+    function isEmpty(val){
+        if (val == null) {
+            // typeof null == 'object' so we check it first
+            return true;
+        } else if ( typeof val === 'string' || isArray(val) ) {
+            return !val.length;
+        } else if ( typeof val === 'object' ) {
+            var result = true;
+            forOwn(val, function(){
+                result = false;
+                return false; // break loop
+            });
+            return result;
+        } else {
+            return true;
+        }
+    }
+
+    module.exports = isEmpty;
+
+
diff --git a/node_modules/mout/lang/isFinite.js b/node_modules/mout/lang/isFinite.js
new file mode 100644
index 0000000..812e317
--- /dev/null
+++ b/node_modules/mout/lang/isFinite.js
@@ -0,0 +1,20 @@
+var isNumber = require('./isNumber');
+var GLOBAL = require('./GLOBAL');
+
+    /**
+     * Check if value is finite
+     */
+    function isFinite(val){
+        var is = false;
+        if (typeof val === 'string' && val !== '') {
+            is = GLOBAL.isFinite( parseFloat(val) );
+        } else if (isNumber(val)){
+            // need to use isNumber because of Number constructor
+            is = GLOBAL.isFinite( val );
+        }
+        return is;
+    }
+
+    module.exports = isFinite;
+
+
diff --git a/node_modules/mout/lang/isFunction.js b/node_modules/mout/lang/isFunction.js
new file mode 100644
index 0000000..216879f
--- /dev/null
+++ b/node_modules/mout/lang/isFunction.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isFunction(val) {
+        return isKind(val, 'Function');
+    }
+    module.exports = isFunction;
+
diff --git a/node_modules/mout/lang/isInteger.js b/node_modules/mout/lang/isInteger.js
new file mode 100644
index 0000000..29f95d9
--- /dev/null
+++ b/node_modules/mout/lang/isInteger.js
@@ -0,0 +1,12 @@
+var isNumber = require('./isNumber');
+
+    /**
+     * Check if value is an integer
+     */
+    function isInteger(val){
+        return isNumber(val) && (val % 1 === 0);
+    }
+
+    module.exports = isInteger;
+
+
diff --git a/node_modules/mout/lang/isKind.js b/node_modules/mout/lang/isKind.js
new file mode 100644
index 0000000..02301e0
--- /dev/null
+++ b/node_modules/mout/lang/isKind.js
@@ -0,0 +1,9 @@
+var kindOf = require('./kindOf');
+    /**
+     * Check if value is from a specific "kind".
+     */
+    function isKind(val, kind){
+        return kindOf(val) === kind;
+    }
+    module.exports = isKind;
+
diff --git a/node_modules/mout/lang/isNaN.js b/node_modules/mout/lang/isNaN.js
new file mode 100644
index 0000000..b1018ec
--- /dev/null
+++ b/node_modules/mout/lang/isNaN.js
@@ -0,0 +1,16 @@
+var isNumber = require('./isNumber');
+var $isNaN = require('../number/isNaN');
+
+    /**
+     * Check if value is NaN for realz
+     */
+    function isNaN(val){
+        // based on the fact that NaN !== NaN
+        // need to check if it's a number to avoid conflicts with host objects
+        // also need to coerce ToNumber to avoid edge case `new Number(NaN)`
+        return !isNumber(val) || $isNaN(Number(val));
+    }
+
+    module.exports = isNaN;
+
+
diff --git a/node_modules/mout/lang/isNull.js b/node_modules/mout/lang/isNull.js
new file mode 100644
index 0000000..6252f9e
--- /dev/null
+++ b/node_modules/mout/lang/isNull.js
@@ -0,0 +1,9 @@
+
+    /**
+     */
+    function isNull(val){
+        return val === null;
+    }
+    module.exports = isNull;
+
+
diff --git a/node_modules/mout/lang/isNumber.js b/node_modules/mout/lang/isNumber.js
new file mode 100644
index 0000000..126c1cc
--- /dev/null
+++ b/node_modules/mout/lang/isNumber.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isNumber(val) {
+        return isKind(val, 'Number');
+    }
+    module.exports = isNumber;
+
diff --git a/node_modules/mout/lang/isObject.js b/node_modules/mout/lang/isObject.js
new file mode 100644
index 0000000..7350c89
--- /dev/null
+++ b/node_modules/mout/lang/isObject.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isObject(val) {
+        return isKind(val, 'Object');
+    }
+    module.exports = isObject;
+
diff --git a/node_modules/mout/lang/isPlainObject.js b/node_modules/mout/lang/isPlainObject.js
new file mode 100644
index 0000000..b81342e
--- /dev/null
+++ b/node_modules/mout/lang/isPlainObject.js
@@ -0,0 +1,13 @@
+
+
+    /**
+     * Checks if the value is created by the `Object` constructor.
+     */
+    function isPlainObject(value) {
+        return (!!value && typeof value === 'object' &&
+            value.constructor === Object);
+    }
+
+    module.exports = isPlainObject;
+
+
diff --git a/node_modules/mout/lang/isPrimitive.js b/node_modules/mout/lang/isPrimitive.js
new file mode 100644
index 0000000..e255475
--- /dev/null
+++ b/node_modules/mout/lang/isPrimitive.js
@@ -0,0 +1,21 @@
+
+
+    /**
+     * Checks if the object is a primitive
+     */
+    function isPrimitive(value) {
+        // Using switch fallthrough because it's simple to read and is
+        // generally fast: http://jsperf.com/testing-value-is-primitive/5
+        switch (typeof value) {
+            case "string":
+            case "number":
+            case "boolean":
+                return true;
+        }
+
+        return value == null;
+    }
+
+    module.exports = isPrimitive;
+
+
diff --git a/node_modules/mout/lang/isRegExp.js b/node_modules/mout/lang/isRegExp.js
new file mode 100644
index 0000000..fc5459a
--- /dev/null
+++ b/node_modules/mout/lang/isRegExp.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isRegExp(val) {
+        return isKind(val, 'RegExp');
+    }
+    module.exports = isRegExp;
+
diff --git a/node_modules/mout/lang/isString.js b/node_modules/mout/lang/isString.js
new file mode 100644
index 0000000..f890658
--- /dev/null
+++ b/node_modules/mout/lang/isString.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isString(val) {
+        return isKind(val, 'String');
+    }
+    module.exports = isString;
+
diff --git a/node_modules/mout/lang/isUndefined.js b/node_modules/mout/lang/isUndefined.js
new file mode 100644
index 0000000..fb2261d
--- /dev/null
+++ b/node_modules/mout/lang/isUndefined.js
@@ -0,0 +1,10 @@
+
+    var UNDEF;
+
+    /**
+     */
+    function isUndef(val){
+        return val === UNDEF;
+    }
+    module.exports = isUndef;
+
diff --git a/node_modules/mout/lang/isnt.js b/node_modules/mout/lang/isnt.js
new file mode 100644
index 0000000..9dad58c
--- /dev/null
+++ b/node_modules/mout/lang/isnt.js
@@ -0,0 +1,12 @@
+var is = require('./is');
+
+    /**
+     * Check if both values are not identical/egal
+     */
+    function isnt(x, y){
+        return !is(x, y);
+    }
+
+    module.exports = isnt;
+
+
diff --git a/node_modules/mout/lang/kindOf.js b/node_modules/mout/lang/kindOf.js
new file mode 100644
index 0000000..663464d
--- /dev/null
+++ b/node_modules/mout/lang/kindOf.js
@@ -0,0 +1,20 @@
+
+
+    var _rKind = /^\[object (.*)\]$/,
+        _toString = Object.prototype.toString,
+        UNDEF;
+
+    /**
+     * Gets the "kind" of value. (e.g. "String", "Number", etc)
+     */
+    function kindOf(val) {
+        if (val === null) {
+            return 'Null';
+        } else if (val === UNDEF) {
+            return 'Undefined';
+        } else {
+            return _rKind.exec( _toString.call(val) )[1];
+        }
+    }
+    module.exports = kindOf;
+
diff --git a/node_modules/mout/lang/toArray.js b/node_modules/mout/lang/toArray.js
new file mode 100644
index 0000000..1f3a2b6
--- /dev/null
+++ b/node_modules/mout/lang/toArray.js
@@ -0,0 +1,30 @@
+var kindOf = require('./kindOf');
+var GLOBAL = require('./GLOBAL');
+
+    /**
+     * Convert array-like object into array
+     */
+    function toArray(val){
+        var ret = [],
+            kind = kindOf(val),
+            n;
+
+        if (val != null) {
+            if ( val.length == null || kind === 'String' || kind === 'Function' || kind === 'RegExp' || val === GLOBAL ) {
+                //string, regexp, function have .length but user probably just want
+                //to wrap value into an array..
+                ret[ret.length] = val;
+            } else {
+                //window returns true on isObject in IE7 and may have length
+                //property. `typeof NodeList` returns `function` on Safari so
+                //we can't use it (#58)
+                n = val.length;
+                while (n--) {
+                    ret[n] = val[n];
+                }
+            }
+        }
+        return ret;
+    }
+    module.exports = toArray;
+
diff --git a/node_modules/mout/lang/toNumber.js b/node_modules/mout/lang/toNumber.js
new file mode 100644
index 0000000..8b6df34
--- /dev/null
+++ b/node_modules/mout/lang/toNumber.js
@@ -0,0 +1,20 @@
+var isArray = require('./isArray');
+
+    /**
+     * covert value into number if numeric
+     */
+    function toNumber(val){
+        // numberic values should come first because of -0
+        if (typeof val === 'number') return val;
+        // we want all falsy values (besides -0) to return zero to avoid
+        // headaches
+        if (!val) return 0;
+        if (typeof val === 'string') return parseFloat(val);
+        // arrays are edge cases. `Number([4]) === 4`
+        if (isArray(val)) return NaN;
+        return Number(val);
+    }
+
+    module.exports = toNumber;
+
+
diff --git a/node_modules/mout/lang/toString.js b/node_modules/mout/lang/toString.js
new file mode 100644
index 0000000..ae5c2b0
--- /dev/null
+++ b/node_modules/mout/lang/toString.js
@@ -0,0 +1,13 @@
+
+
+    /**
+     * Typecast a value to a String, using an empty string value for null or
+     * undefined.
+     */
+    function toString(val){
+        return val == null ? '' : val.toString();
+    }
+
+    module.exports = toString;
+
+
diff --git a/node_modules/mout/math.js b/node_modules/mout/math.js
new file mode 100644
index 0000000..c6ee889
--- /dev/null
+++ b/node_modules/mout/math.js
@@ -0,0 +1,19 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'ceil' : require('./math/ceil'),
+    'clamp' : require('./math/clamp'),
+    'countSteps' : require('./math/countSteps'),
+    'floor' : require('./math/floor'),
+    'inRange' : require('./math/inRange'),
+    'isNear' : require('./math/isNear'),
+    'lerp' : require('./math/lerp'),
+    'loop' : require('./math/loop'),
+    'map' : require('./math/map'),
+    'norm' : require('./math/norm'),
+    'round' : require('./math/round')
+};
+
+
diff --git a/node_modules/mout/math/ceil.js b/node_modules/mout/math/ceil.js
new file mode 100644
index 0000000..a279e15
--- /dev/null
+++ b/node_modules/mout/math/ceil.js
@@ -0,0 +1,11 @@
+
+    /**
+     * Round value up with a custom radix.
+     */
+    function ceil(val, step){
+        step = Math.abs(step || 1);
+        return Math.ceil(val / step) * step;
+    }
+
+    module.exports = ceil;
+
diff --git a/node_modules/mout/math/clamp.js b/node_modules/mout/math/clamp.js
new file mode 100644
index 0000000..e929a9a
--- /dev/null
+++ b/node_modules/mout/math/clamp.js
@@ -0,0 +1,9 @@
+
+    /**
+     * Clamps value inside range.
+     */
+    function clamp(val, min, max){
+        return val < min? min : (val > max? max : val);
+    }
+    module.exports = clamp;
+
diff --git a/node_modules/mout/math/countSteps.js b/node_modules/mout/math/countSteps.js
new file mode 100644
index 0000000..60ac90c
--- /dev/null
+++ b/node_modules/mout/math/countSteps.js
@@ -0,0 +1,16 @@
+
+    /**
+    * Count number of full steps.
+    */
+    function countSteps(val, step, overflow){
+        val = Math.floor(val / step);
+
+        if (overflow) {
+            return val % overflow;
+        }
+
+        return val;
+    }
+
+    module.exports = countSteps;
+
diff --git a/node_modules/mout/math/floor.js b/node_modules/mout/math/floor.js
new file mode 100644
index 0000000..9de5053
--- /dev/null
+++ b/node_modules/mout/math/floor.js
@@ -0,0 +1,10 @@
+
+    /**
+    * Floor value to full steps.
+    */
+    function floor(val, step){
+        step = Math.abs(step || 1);
+        return Math.floor(val / step) * step;
+    }
+    module.exports = floor;
+
diff --git a/node_modules/mout/math/inRange.js b/node_modules/mout/math/inRange.js
new file mode 100644
index 0000000..763218f
--- /dev/null
+++ b/node_modules/mout/math/inRange.js
@@ -0,0 +1,11 @@
+
+    /**
+    * Checks if value is inside the range.
+    */
+    function inRange(val, min, max, threshold){
+        threshold = threshold || 0;
+        return (val + threshold >= min && val - threshold <= max);
+    }
+
+    module.exports = inRange;
+
diff --git a/node_modules/mout/math/isNear.js b/node_modules/mout/math/isNear.js
new file mode 100644
index 0000000..45486b6
--- /dev/null
+++ b/node_modules/mout/math/isNear.js
@@ -0,0 +1,9 @@
+
+    /**
+    * Check if value is close to target.
+    */
+    function isNear(val, target, threshold){
+        return (Math.abs(val - target) <= threshold);
+    }
+    module.exports = isNear;
+
diff --git a/node_modules/mout/math/lerp.js b/node_modules/mout/math/lerp.js
new file mode 100644
index 0000000..111e271
--- /dev/null
+++ b/node_modules/mout/math/lerp.js
@@ -0,0 +1,11 @@
+
+    /**
+    * Linear interpolation.
+    * IMPORTANT:will return `Infinity` if numbers overflow Number.MAX_VALUE
+    */
+    function lerp(ratio, start, end){
+        return start + (end - start) * ratio;
+    }
+
+    module.exports = lerp;
+
diff --git a/node_modules/mout/math/loop.js b/node_modules/mout/math/loop.js
new file mode 100644
index 0000000..35207c1
--- /dev/null
+++ b/node_modules/mout/math/loop.js
@@ -0,0 +1,10 @@
+
+    /**
+    * Loops value inside range.
+    */
+    function loop(val, min, max){
+        return val < min? max : (val > max? min : val);
+    }
+
+    module.exports = loop;
+
diff --git a/node_modules/mout/math/map.js b/node_modules/mout/math/map.js
new file mode 100644
index 0000000..96c4b78
--- /dev/null
+++ b/node_modules/mout/math/map.js
@@ -0,0 +1,11 @@
+var lerp = require('./lerp');
+var norm = require('./norm');
+    /**
+    * Maps a number from one scale to another.
+    * @example map(3, 0, 4, -1, 1) -> 0.5
+    */
+    function map(val, min1, max1, min2, max2){
+        return lerp( norm(val, min1, max1), min2, max2 );
+    }
+    module.exports = map;
+
diff --git a/node_modules/mout/math/norm.js b/node_modules/mout/math/norm.js
new file mode 100644
index 0000000..8ee53d8
--- /dev/null
+++ b/node_modules/mout/math/norm.js
@@ -0,0 +1,13 @@
+
+    /**
+    * Gets normalized ratio of value inside range.
+    */
+    function norm(val, min, max){
+        if (val < min || val > max) {
+            throw new RangeError('value (' + val + ') must be between ' + min + ' and ' + max);
+        }
+
+        return val === max ? 1 : (val - min) / (max - min);
+    }
+    module.exports = norm;
+
diff --git a/node_modules/mout/math/round.js b/node_modules/mout/math/round.js
new file mode 100644
index 0000000..d108e6c
--- /dev/null
+++ b/node_modules/mout/math/round.js
@@ -0,0 +1,12 @@
+
+    /**
+     * Round number to a specific radix
+     */
+    function round(value, radix){
+        radix = radix || 1; // default round 1
+        return Math.round(value / radix) * radix;
+    }
+
+    module.exports = round;
+
+
diff --git a/node_modules/mout/number.js b/node_modules/mout/number.js
new file mode 100644
index 0000000..ba7034a
--- /dev/null
+++ b/node_modules/mout/number.js
@@ -0,0 +1,25 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'MAX_INT' : require('./number/MAX_INT'),
+    'MAX_SAFE_INTEGER' : require('./number/MAX_SAFE_INTEGER'),
+    'MAX_UINT' : require('./number/MAX_UINT'),
+    'MIN_INT' : require('./number/MIN_INT'),
+    'abbreviate' : require('./number/abbreviate'),
+    'currencyFormat' : require('./number/currencyFormat'),
+    'enforcePrecision' : require('./number/enforcePrecision'),
+    'isNaN' : require('./number/isNaN'),
+    'nth' : require('./number/nth'),
+    'ordinal' : require('./number/ordinal'),
+    'pad' : require('./number/pad'),
+    'rol' : require('./number/rol'),
+    'ror' : require('./number/ror'),
+    'sign' : require('./number/sign'),
+    'toInt' : require('./number/toInt'),
+    'toUInt' : require('./number/toUInt'),
+    'toUInt31' : require('./number/toUInt31')
+};
+
+
diff --git a/node_modules/mout/number/MAX_INT.js b/node_modules/mout/number/MAX_INT.js
new file mode 100644
index 0000000..1d6f0e4
--- /dev/null
+++ b/node_modules/mout/number/MAX_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit signed integer value. (2^31 - 1)
+ */
+
+    module.exports = 2147483647;
+
diff --git a/node_modules/mout/number/MAX_SAFE_INTEGER.js b/node_modules/mout/number/MAX_SAFE_INTEGER.js
new file mode 100644
index 0000000..b13e538
--- /dev/null
+++ b/node_modules/mout/number/MAX_SAFE_INTEGER.js
@@ -0,0 +1,7 @@
+
+
+    // maximum safe integer (Math.pow(2, 53) - 1)
+    // see: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer
+    module.exports = 9007199254740991;
+
+
diff --git a/node_modules/mout/number/MAX_UINT.js b/node_modules/mout/number/MAX_UINT.js
new file mode 100644
index 0000000..700da0f
--- /dev/null
+++ b/node_modules/mout/number/MAX_UINT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit unsigned integet value (2^32 - 1)
+ */
+
+    module.exports = 4294967295;
+
diff --git a/node_modules/mout/number/MIN_INT.js b/node_modules/mout/number/MIN_INT.js
new file mode 100644
index 0000000..b34ab2c
--- /dev/null
+++ b/node_modules/mout/number/MIN_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Minimum 32-bit signed integer value (-2^31).
+ */
+
+    module.exports = -2147483648;
+
diff --git a/node_modules/mout/number/abbreviate.js b/node_modules/mout/number/abbreviate.js
new file mode 100644
index 0000000..dd6716b
--- /dev/null
+++ b/node_modules/mout/number/abbreviate.js
@@ -0,0 +1,35 @@
+var enforcePrecision = require('./enforcePrecision');
+
+    var _defaultDict = {
+        thousand : 'K',
+        million : 'M',
+        billion : 'B'
+    };
+
+    /**
+     * Abbreviate number if bigger than 1000. (eg: 2.5K, 17.5M, 3.4B, ...)
+     */
+    function abbreviateNumber(val, nDecimals, dict){
+        nDecimals = nDecimals != null? nDecimals : 1;
+        dict = dict || _defaultDict;
+        val = enforcePrecision(val, nDecimals);
+
+        var str, mod;
+
+        if (val < 1000000) {
+            mod = enforcePrecision(val / 1000, nDecimals);
+            // might overflow to next scale during rounding
+            str = mod < 1000? mod + dict.thousand : 1 + dict.million;
+        } else if (val < 1000000000) {
+            mod = enforcePrecision(val / 1000000, nDecimals);
+            str = mod < 1000? mod + dict.million : 1 + dict.billion;
+        } else {
+            str = enforcePrecision(val / 1000000000, nDecimals) + dict.billion;
+        }
+
+        return str;
+    }
+
+    module.exports = abbreviateNumber;
+
+
diff --git a/node_modules/mout/number/currencyFormat.js b/node_modules/mout/number/currencyFormat.js
new file mode 100644
index 0000000..c85a668
--- /dev/null
+++ b/node_modules/mout/number/currencyFormat.js
@@ -0,0 +1,27 @@
+var toNumber = require('../lang/toNumber');
+
+    /**
+     * Converts number into currency format
+     */
+    function currencyFormat(val, nDecimalDigits, decimalSeparator, thousandsSeparator) {
+        val = toNumber(val);
+        nDecimalDigits = nDecimalDigits == null? 2 : nDecimalDigits;
+        decimalSeparator = decimalSeparator == null? '.' : decimalSeparator;
+        thousandsSeparator = thousandsSeparator == null? ',' : thousandsSeparator;
+
+        //can't use enforce precision since it returns a number and we are
+        //doing a RegExp over the string
+        var fixed = val.toFixed(nDecimalDigits),
+            //separate begin [$1], middle [$2] and decimal digits [$4]
+            parts = new RegExp('^(-?\\d{1,3})((?:\\d{3})+)(\\.(\\d{'+ nDecimalDigits +'}))?$').exec( fixed );
+
+        if(parts){ //val >= 1000 || val <= -1000
+            return parts[1] + parts[2].replace(/\d{3}/g, thousandsSeparator + '$&') + (parts[4] ? decimalSeparator + parts[4] : '');
+        }else{
+            return fixed.replace('.', decimalSeparator);
+        }
+    }
+
+    module.exports = currencyFormat;
+
+
diff --git a/node_modules/mout/number/enforcePrecision.js b/node_modules/mout/number/enforcePrecision.js
new file mode 100644
index 0000000..3d3b2d4
--- /dev/null
+++ b/node_modules/mout/number/enforcePrecision.js
@@ -0,0 +1,12 @@
+var toNumber = require('../lang/toNumber');
+    /**
+     * Enforce a specific amount of decimal digits and also fix floating
+     * point rounding issues.
+     */
+    function enforcePrecision(val, nDecimalDigits){
+        val = toNumber(val);
+        var pow = Math.pow(10, nDecimalDigits);
+        return +(Math.round(val * pow) / pow).toFixed(nDecimalDigits);
+    }
+    module.exports = enforcePrecision;
+
diff --git a/node_modules/mout/number/isNaN.js b/node_modules/mout/number/isNaN.js
new file mode 100644
index 0000000..3799f3b
--- /dev/null
+++ b/node_modules/mout/number/isNaN.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * ES6 Number.isNaN
+     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
+     */
+    function isNaN(val){
+        // jshint eqeqeq:false
+        return typeof val === 'number' && val != val;
+    }
+
+    module.exports = isNaN;
+
+
diff --git a/node_modules/mout/number/nth.js b/node_modules/mout/number/nth.js
new file mode 100644
index 0000000..43ffb21
--- /dev/null
+++ b/node_modules/mout/number/nth.js
@@ -0,0 +1,25 @@
+
+
+    /**
+     * Returns "nth" of number (1 = "st", 2 = "nd", 3 = "rd", 4..10 = "th", ...)
+     */
+    function nth(i) {
+        var t = (i % 100);
+        if (t >= 10 && t <= 20) {
+            return 'th';
+        }
+        switch(i % 10) {
+            case 1:
+                return 'st';
+            case 2:
+                return 'nd';
+            case 3:
+                return 'rd';
+            default:
+                return 'th';
+        }
+    }
+
+    module.exports = nth;
+
+
diff --git a/node_modules/mout/number/ordinal.js b/node_modules/mout/number/ordinal.js
new file mode 100644
index 0000000..939a0fa
--- /dev/null
+++ b/node_modules/mout/number/ordinal.js
@@ -0,0 +1,14 @@
+var toInt = require('./toInt');
+var nth = require('./nth');
+
+    /**
+     * converts number into ordinal form (1st, 2nd, 3rd, 4th, ...)
+     */
+    function ordinal(n){
+       n = toInt(n);
+       return n + nth(n);
+    }
+
+    module.exports = ordinal;
+
+
diff --git a/node_modules/mout/number/pad.js b/node_modules/mout/number/pad.js
new file mode 100644
index 0000000..1f83af4
--- /dev/null
+++ b/node_modules/mout/number/pad.js
@@ -0,0 +1,14 @@
+var lpad = require('../string/lpad');
+var toNumber = require('../lang/toNumber');
+
+    /**
+     * Add padding zeros if n.length < minLength.
+     */
+    function pad(n, minLength, char){
+        n = toNumber(n);
+        return lpad(''+ n, minLength, char || '0');
+    }
+
+    module.exports = pad;
+
+
diff --git a/node_modules/mout/number/rol.js b/node_modules/mout/number/rol.js
new file mode 100644
index 0000000..ecd58da
--- /dev/null
+++ b/node_modules/mout/number/rol.js
@@ -0,0 +1,10 @@
+
+    /**
+     * Bitwise circular shift left
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function rol(val, shift){
+        return (val << shift) | (val >> (32 - shift));
+    }
+    module.exports = rol;
+
diff --git a/node_modules/mout/number/ror.js b/node_modules/mout/number/ror.js
new file mode 100644
index 0000000..2eda81d
--- /dev/null
+++ b/node_modules/mout/number/ror.js
@@ -0,0 +1,10 @@
+
+    /**
+     * Bitwise circular shift right
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function ror(val, shift){
+        return (val >> shift) | (val << (32 - shift));
+    }
+    module.exports = ror;
+
diff --git a/node_modules/mout/number/sign.js b/node_modules/mout/number/sign.js
new file mode 100644
index 0000000..7f9a1e2
--- /dev/null
+++ b/node_modules/mout/number/sign.js
@@ -0,0 +1,15 @@
+var toNumber = require('../lang/toNumber');
+
+    /**
+     * Get sign of the value.
+     */
+    function sign(val) {
+        var num = toNumber(val);
+        if (num === 0) return num; // +0 and +0 === 0
+        if (isNaN(num)) return num; // NaN
+        return num < 0? -1 : 1;
+    }
+
+    module.exports = sign;
+
+
diff --git a/node_modules/mout/number/toInt.js b/node_modules/mout/number/toInt.js
new file mode 100644
index 0000000..72fd7de
--- /dev/null
+++ b/node_modules/mout/number/toInt.js
@@ -0,0 +1,17 @@
+
+
+    /**
+     * "Convert" value into an 32-bit integer.
+     * Works like `Math.floor` if val > 0 and `Math.ceil` if val < 0.
+     * IMPORTANT: val will wrap at 2^31 and -2^31.
+     * Perf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7
+     */
+    function toInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return ~~val;
+    }
+
+    module.exports = toInt;
+
+
diff --git a/node_modules/mout/number/toUInt.js b/node_modules/mout/number/toUInt.js
new file mode 100644
index 0000000..d279656
--- /dev/null
+++ b/node_modules/mout/number/toUInt.js
@@ -0,0 +1,15 @@
+
+
+    /**
+     * "Convert" value into a 32-bit unsigned integer.
+     * IMPORTANT: Value will wrap at 2^32.
+     */
+    function toUInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return val >>> 0;
+    }
+
+    module.exports = toUInt;
+
+
diff --git a/node_modules/mout/number/toUInt31.js b/node_modules/mout/number/toUInt31.js
new file mode 100644
index 0000000..6cd3bb5
--- /dev/null
+++ b/node_modules/mout/number/toUInt31.js
@@ -0,0 +1,15 @@
+var MAX_INT = require('./MAX_INT');
+
+    /**
+     * "Convert" value into an 31-bit unsigned integer (since 1 bit is used for sign).
+     * IMPORTANT: value wil wrap at 2^31, if negative will return 0.
+     */
+    function toUInt31(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return (val <= 0)? 0 : (val > MAX_INT? ~~(val % (MAX_INT + 1)) : ~~val);
+    }
+
+    module.exports = toUInt31;
+
+
diff --git a/node_modules/mout/object.js b/node_modules/mout/object.js
new file mode 100644
index 0000000..ee1e94e
--- /dev/null
+++ b/node_modules/mout/object.js
@@ -0,0 +1,44 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'bindAll' : require('./object/bindAll'),
+    'contains' : require('./object/contains'),
+    'deepFillIn' : require('./object/deepFillIn'),
+    'deepMatches' : require('./object/deepMatches'),
+    'deepMixIn' : require('./object/deepMixIn'),
+    'equals' : require('./object/equals'),
+    'every' : require('./object/every'),
+    'fillIn' : require('./object/fillIn'),
+    'filter' : require('./object/filter'),
+    'find' : require('./object/find'),
+    'flatten' : require('./object/flatten'),
+    'forIn' : require('./object/forIn'),
+    'forOwn' : require('./object/forOwn'),
+    'functions' : require('./object/functions'),
+    'get' : require('./object/get'),
+    'has' : require('./object/has'),
+    'hasOwn' : require('./object/hasOwn'),
+    'keys' : require('./object/keys'),
+    'map' : require('./object/map'),
+    'matches' : require('./object/matches'),
+    'max' : require('./object/max'),
+    'merge' : require('./object/merge'),
+    'min' : require('./object/min'),
+    'mixIn' : require('./object/mixIn'),
+    'namespace' : require('./object/namespace'),
+    'omit' : require('./object/omit'),
+    'pick' : require('./object/pick'),
+    'pluck' : require('./object/pluck'),
+    'reduce' : require('./object/reduce'),
+    'reject' : require('./object/reject'),
+    'result' : require('./object/result'),
+    'set' : require('./object/set'),
+    'size' : require('./object/size'),
+    'some' : require('./object/some'),
+    'unset' : require('./object/unset'),
+    'values' : require('./object/values')
+};
+
+
diff --git a/node_modules/mout/object/bindAll.js b/node_modules/mout/object/bindAll.js
new file mode 100644
index 0000000..c8a2034
--- /dev/null
+++ b/node_modules/mout/object/bindAll.js
@@ -0,0 +1,19 @@
+var functions = require('./functions');
+var bind = require('../function/bind');
+var forEach = require('../array/forEach');
+var slice = require('../array/slice');
+
+    /**
+     * Binds methods of the object to be run in it's own context.
+     */
+    function bindAll(obj, rest_methodNames){
+        var keys = arguments.length > 1?
+                    slice(arguments, 1) : functions(obj);
+        forEach(keys, function(key){
+            obj[key] = bind(obj[key], obj);
+        });
+    }
+
+    module.exports = bindAll;
+
+
diff --git a/node_modules/mout/object/contains.js b/node_modules/mout/object/contains.js
new file mode 100644
index 0000000..8076e2c
--- /dev/null
+++ b/node_modules/mout/object/contains.js
@@ -0,0 +1,13 @@
+var some = require('./some');
+
+    /**
+     * Check if object contains value
+     */
+    function contains(obj, needle) {
+        return some(obj, function(val) {
+            return (val === needle);
+        });
+    }
+    module.exports = contains;
+
+
diff --git a/node_modules/mout/object/deepFillIn.js b/node_modules/mout/object/deepFillIn.js
new file mode 100644
index 0000000..6568ea8
--- /dev/null
+++ b/node_modules/mout/object/deepFillIn.js
@@ -0,0 +1,33 @@
+var forOwn = require('./forOwn');
+var isPlainObject = require('../lang/isPlainObject');
+
+    /**
+     * Deeply copy missing properties in the target from the defaults.
+     */
+    function deepFillIn(target, defaults){
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n) {
+            obj = arguments[i];
+            if (obj) {
+                // jshint loopfunc: true
+                forOwn(obj, function(newValue, key) {
+                    var curValue = target[key];
+                    if (curValue == null) {
+                        target[key] = newValue;
+                    } else if (isPlainObject(curValue) &&
+                               isPlainObject(newValue)) {
+                        deepFillIn(curValue, newValue);
+                    }
+                });
+            }
+        }
+
+        return target;
+    }
+
+    module.exports = deepFillIn;
+
+
diff --git a/node_modules/mout/object/deepMatches.js b/node_modules/mout/object/deepMatches.js
new file mode 100644
index 0000000..3366c52
--- /dev/null
+++ b/node_modules/mout/object/deepMatches.js
@@ -0,0 +1,55 @@
+var forOwn = require('./forOwn');
+var isArray = require('../lang/isArray');
+
+    function containsMatch(array, pattern) {
+        var i = -1, length = array.length;
+        while (++i < length) {
+            if (deepMatches(array[i], pattern)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    function matchArray(target, pattern) {
+        var i = -1, patternLength = pattern.length;
+        while (++i < patternLength) {
+            if (!containsMatch(target, pattern[i])) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    function matchObject(target, pattern) {
+        var result = true;
+        forOwn(pattern, function(val, key) {
+            if (!deepMatches(target[key], val)) {
+                // Return false to break out of forOwn early
+                return (result = false);
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively check if the objects match.
+     */
+    function deepMatches(target, pattern){
+        if (target && typeof target === 'object') {
+            if (isArray(target) && isArray(pattern)) {
+                return matchArray(target, pattern);
+            } else {
+                return matchObject(target, pattern);
+            }
+        } else {
+            return target === pattern;
+        }
+    }
+
+    module.exports = deepMatches;
+
+
diff --git a/node_modules/mout/object/deepMixIn.js b/node_modules/mout/object/deepMixIn.js
new file mode 100644
index 0000000..a97e98d
--- /dev/null
+++ b/node_modules/mout/object/deepMixIn.js
@@ -0,0 +1,34 @@
+var forOwn = require('./forOwn');
+var isPlainObject = require('../lang/isPlainObject');
+
+    /**
+     * Mixes objects into the target object, recursively mixing existing child
+     * objects.
+     */
+    function deepMixIn(target, objects) {
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n){
+            obj = arguments[i];
+            if (obj) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+
+        return target;
+    }
+
+    function copyProp(val, key) {
+        var existing = this[key];
+        if (isPlainObject(val) && isPlainObject(existing)) {
+            deepMixIn(existing, val);
+        } else {
+            this[key] = val;
+        }
+    }
+
+    module.exports = deepMixIn;
+
+
diff --git a/node_modules/mout/object/equals.js b/node_modules/mout/object/equals.js
new file mode 100644
index 0000000..7c89ab8
--- /dev/null
+++ b/node_modules/mout/object/equals.js
@@ -0,0 +1,33 @@
+var hasOwn = require('./hasOwn');
+var every = require('./every');
+var isObject = require('../lang/isObject');
+var is = require('../lang/is');
+
+    // Makes a function to compare the object values from the specified compare
+    // operation callback.
+    function makeCompare(callback) {
+        return function(value, key) {
+            return hasOwn(this, key) && callback(value, this[key]);
+        };
+    }
+
+    function checkProperties(value, key) {
+        return hasOwn(this, key);
+    }
+
+    /**
+     * Checks if two objects have the same keys and values.
+     */
+    function equals(a, b, callback) {
+        callback = callback || is;
+
+        if (!isObject(a) || !isObject(b)) {
+            return callback(a, b);
+        }
+
+        return (every(a, makeCompare(callback), b) &&
+                every(b, checkProperties, a));
+    }
+
+    module.exports = equals;
+
diff --git a/node_modules/mout/object/every.js b/node_modules/mout/object/every.js
new file mode 100644
index 0000000..01106e5
--- /dev/null
+++ b/node_modules/mout/object/every.js
@@ -0,0 +1,23 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Object every
+     */
+    function every(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        forOwn(obj, function(val, key) {
+            // we consider any falsy values as "false" on purpose so shorthand
+            // syntax can be used to check property existence
+            if (!callback(val, key, obj)) {
+                result = false;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    module.exports = every;
+
+
diff --git a/node_modules/mout/object/fillIn.js b/node_modules/mout/object/fillIn.js
new file mode 100644
index 0000000..4010e28
--- /dev/null
+++ b/node_modules/mout/object/fillIn.js
@@ -0,0 +1,21 @@
+var forEach = require('../array/forEach');
+var slice = require('../array/slice');
+var forOwn = require('./forOwn');
+
+    /**
+     * Copy missing properties in the obj from the defaults.
+     */
+    function fillIn(obj, var_defaults){
+        forEach(slice(arguments, 1), function(base){
+            forOwn(base, function(val, key){
+                if (obj[key] == null) {
+                    obj[key] = val;
+                }
+            });
+        });
+        return obj;
+    }
+
+    module.exports = fillIn;
+
+
diff --git a/node_modules/mout/object/filter.js b/node_modules/mout/object/filter.js
new file mode 100644
index 0000000..3a83a92
--- /dev/null
+++ b/node_modules/mout/object/filter.js
@@ -0,0 +1,20 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Creates a new object with all the properties where the callback returns
+     * true.
+     */
+    function filterValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                output[key] = value;
+            }
+        });
+
+        return output;
+    }
+    module.exports = filterValues;
+
diff --git a/node_modules/mout/object/find.js b/node_modules/mout/object/find.js
new file mode 100644
index 0000000..d39c070
--- /dev/null
+++ b/node_modules/mout/object/find.js
@@ -0,0 +1,21 @@
+var some = require('./some');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result;
+        some(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                result = value;
+                return true; //break
+            }
+        });
+        return result;
+    }
+
+    module.exports = find;
+
+
diff --git a/node_modules/mout/object/flatten.js b/node_modules/mout/object/flatten.js
new file mode 100644
index 0000000..a356f15
--- /dev/null
+++ b/node_modules/mout/object/flatten.js
@@ -0,0 +1,38 @@
+var forOwn = require('./forOwn');
+var isPlainObject = require('../lang/isPlainObject');
+
+    /*
+     * Helper function to flatten to a destination object.
+     * Used to remove the need to create intermediate objects while flattening.
+     */
+    function flattenTo(obj, result, prefix, level) {
+        forOwn(obj, function (value, key) {
+            var nestedPrefix = prefix ? prefix + '.' + key : key;
+
+            if (level !== 0 && isPlainObject(value)) {
+                flattenTo(value, result, nestedPrefix, level - 1);
+            } else {
+                result[nestedPrefix] = value;
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively flattens an object.
+     * A new object containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(obj, level) {
+        if (obj == null) {
+            return {};
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(obj, {}, '', level);
+    }
+
+    module.exports = flatten;
+
+
diff --git a/node_modules/mout/object/forIn.js b/node_modules/mout/object/forIn.js
new file mode 100644
index 0000000..7fe96ce
--- /dev/null
+++ b/node_modules/mout/object/forIn.js
@@ -0,0 +1,76 @@
+var hasOwn = require('./hasOwn');
+
+    var _hasDontEnumBug,
+        _dontEnums;
+
+    function checkDontEnum(){
+        _dontEnums = [
+                'toString',
+                'toLocaleString',
+                'valueOf',
+                'hasOwnProperty',
+                'isPrototypeOf',
+                'propertyIsEnumerable',
+                'constructor'
+            ];
+
+        _hasDontEnumBug = true;
+
+        for (var key in {'toString': null}) {
+            _hasDontEnumBug = false;
+        }
+    }
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forIn(obj, fn, thisObj){
+        var key, i = 0;
+        // no need to check if argument is a real object that way we can use
+        // it for arrays, functions, date, etc.
+
+        //post-pone check till needed
+        if (_hasDontEnumBug == null) checkDontEnum();
+
+        for (key in obj) {
+            if (exec(fn, obj, key, thisObj) === false) {
+                break;
+            }
+        }
+
+
+        if (_hasDontEnumBug) {
+            var ctor = obj.constructor,
+                isProto = !!ctor && obj === ctor.prototype;
+
+            while (key = _dontEnums[i++]) {
+                // For constructor, if it is a prototype object the constructor
+                // is always non-enumerable unless defined otherwise (and
+                // enumerated above).  For non-prototype objects, it will have
+                // to be defined on this object, since it cannot be defined on
+                // any prototype objects.
+                //
+                // For other [[DontEnum]] properties, check if the value is
+                // different than Object prototype value.
+                if (
+                    (key !== 'constructor' ||
+                        (!isProto && hasOwn(obj, key))) &&
+                    obj[key] !== Object.prototype[key]
+                ) {
+                    if (exec(fn, obj, key, thisObj) === false) {
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+    function exec(fn, obj, key, thisObj){
+        return fn.call(thisObj, obj[key], key, obj);
+    }
+
+    module.exports = forIn;
+
+
diff --git a/node_modules/mout/object/forOwn.js b/node_modules/mout/object/forOwn.js
new file mode 100644
index 0000000..5f2dfbf
--- /dev/null
+++ b/node_modules/mout/object/forOwn.js
@@ -0,0 +1,19 @@
+var hasOwn = require('./hasOwn');
+var forIn = require('./forIn');
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forOwn(obj, fn, thisObj){
+        forIn(obj, function(val, key){
+            if (hasOwn(obj, key)) {
+                return fn.call(thisObj, obj[key], key, obj);
+            }
+        });
+    }
+
+    module.exports = forOwn;
+
+
diff --git a/node_modules/mout/object/functions.js b/node_modules/mout/object/functions.js
new file mode 100644
index 0000000..f571797
--- /dev/null
+++ b/node_modules/mout/object/functions.js
@@ -0,0 +1,18 @@
+var forIn = require('./forIn');
+
+    /**
+     * return a list of all enumerable properties that have function values
+     */
+    function functions(obj){
+        var keys = [];
+        forIn(obj, function(val, key){
+            if (typeof val === 'function'){
+                keys.push(key);
+            }
+        });
+        return keys.sort();
+    }
+
+    module.exports = functions;
+
+
diff --git a/node_modules/mout/object/get.js b/node_modules/mout/object/get.js
new file mode 100644
index 0000000..9c64e21
--- /dev/null
+++ b/node_modules/mout/object/get.js
@@ -0,0 +1,20 @@
+var isPrimitive = require('../lang/isPrimitive');
+
+    /**
+     * get "nested" object property
+     */
+    function get(obj, prop){
+        var parts = prop.split('.'),
+            last = parts.pop();
+
+        while (prop = parts.shift()) {
+            obj = obj[prop];
+            if (obj == null) return;
+        }
+
+        return obj[last];
+    }
+
+    module.exports = get;
+
+
diff --git a/node_modules/mout/object/has.js b/node_modules/mout/object/has.js
new file mode 100644
index 0000000..ca9f228
--- /dev/null
+++ b/node_modules/mout/object/has.js
@@ -0,0 +1,15 @@
+var get = require('./get');
+
+    var UNDEF;
+
+    /**
+     * Check if object has nested property.
+     */
+    function has(obj, prop){
+        return get(obj, prop) !== UNDEF;
+    }
+
+    module.exports = has;
+
+
+
diff --git a/node_modules/mout/object/hasOwn.js b/node_modules/mout/object/hasOwn.js
new file mode 100644
index 0000000..7e3c82a
--- /dev/null
+++ b/node_modules/mout/object/hasOwn.js
@@ -0,0 +1,12 @@
+
+
+    /**
+     * Safer Object.hasOwnProperty
+     */
+     function hasOwn(obj, prop){
+         return Object.prototype.hasOwnProperty.call(obj, prop);
+     }
+
+     module.exports = hasOwn;
+
+
diff --git a/node_modules/mout/object/keys.js b/node_modules/mout/object/keys.js
new file mode 100644
index 0000000..dd2f4f5
--- /dev/null
+++ b/node_modules/mout/object/keys.js
@@ -0,0 +1,16 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * Get object keys
+     */
+     var keys = Object.keys || function (obj) {
+            var keys = [];
+            forOwn(obj, function(val, key){
+                keys.push(key);
+            });
+            return keys;
+        };
+
+    module.exports = keys;
+
+
diff --git a/node_modules/mout/object/map.js b/node_modules/mout/object/map.js
new file mode 100644
index 0000000..dd449a7
--- /dev/null
+++ b/node_modules/mout/object/map.js
@@ -0,0 +1,18 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Creates a new object where all the values are the result of calling
+     * `callback`.
+     */
+    function mapValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(val, key, obj) {
+            output[key] = callback(val, key, obj);
+        });
+
+        return output;
+    }
+    module.exports = mapValues;
+
diff --git a/node_modules/mout/object/matches.js b/node_modules/mout/object/matches.js
new file mode 100644
index 0000000..6074faa
--- /dev/null
+++ b/node_modules/mout/object/matches.js
@@ -0,0 +1,20 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * checks if a object contains all given properties/values
+     */
+    function matches(target, props){
+        // can't use "object/every" because of circular dependency
+        var result = true;
+        forOwn(props, function(val, key){
+            if (target[key] !== val) {
+                // break loop at first difference
+                return (result = false);
+            }
+        });
+        return result;
+    }
+
+    module.exports = matches;
+
+
diff --git a/node_modules/mout/object/max.js b/node_modules/mout/object/max.js
new file mode 100644
index 0000000..3e8e92c
--- /dev/null
+++ b/node_modules/mout/object/max.js
@@ -0,0 +1,12 @@
+var arrMax = require('../array/max');
+var values = require('./values');
+
+    /**
+     * Returns maximum value inside object.
+     */
+    function max(obj, compareFn) {
+        return arrMax(values(obj), compareFn);
+    }
+
+    module.exports = max;
+
diff --git a/node_modules/mout/object/merge.js b/node_modules/mout/object/merge.js
new file mode 100644
index 0000000..6961f60
--- /dev/null
+++ b/node_modules/mout/object/merge.js
@@ -0,0 +1,40 @@
+var hasOwn = require('./hasOwn');
+var deepClone = require('../lang/deepClone');
+var isObject = require('../lang/isObject');
+
+    /**
+     * Deep merge objects.
+     */
+    function merge() {
+        var i = 1,
+            key, val, obj, target;
+
+        // make sure we don't modify source element and it's properties
+        // objects are passed by reference
+        target = deepClone( arguments[0] );
+
+        while (obj = arguments[i++]) {
+            for (key in obj) {
+                if ( ! hasOwn(obj, key) ) {
+                    continue;
+                }
+
+                val = obj[key];
+
+                if ( isObject(val) && isObject(target[key]) ){
+                    // inception, deep merge objects
+                    target[key] = merge(target[key], val);
+                } else {
+                    // make sure arrays, regexp, date, objects are cloned
+                    target[key] = deepClone(val);
+                }
+
+            }
+        }
+
+        return target;
+    }
+
+    module.exports = merge;
+
+
diff --git a/node_modules/mout/object/min.js b/node_modules/mout/object/min.js
new file mode 100644
index 0000000..e1e6697
--- /dev/null
+++ b/node_modules/mout/object/min.js
@@ -0,0 +1,12 @@
+var arrMin = require('../array/min');
+var values = require('./values');
+
+    /**
+     * Returns minimum value inside object.
+     */
+    function min(obj, iterator) {
+        return arrMin(values(obj), iterator);
+    }
+
+    module.exports = min;
+
diff --git a/node_modules/mout/object/mixIn.js b/node_modules/mout/object/mixIn.js
new file mode 100644
index 0000000..55ec8fd
--- /dev/null
+++ b/node_modules/mout/object/mixIn.js
@@ -0,0 +1,28 @@
+var forOwn = require('./forOwn');
+
+    /**
+    * Combine properties from all the objects into first one.
+    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
+    * @param {object} target    Target Object
+    * @param {...object} objects    Objects to be combined (0...n objects).
+    * @return {object} Target Object.
+    */
+    function mixIn(target, objects){
+        var i = 0,
+            n = arguments.length,
+            obj;
+        while(++i < n){
+            obj = arguments[i];
+            if (obj != null) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+        return target;
+    }
+
+    function copyProp(val, key){
+        this[key] = val;
+    }
+
+    module.exports = mixIn;
+
diff --git a/node_modules/mout/object/namespace.js b/node_modules/mout/object/namespace.js
new file mode 100644
index 0000000..c6e79f6
--- /dev/null
+++ b/node_modules/mout/object/namespace.js
@@ -0,0 +1,19 @@
+var forEach = require('../array/forEach');
+
+    /**
+     * Create nested object if non-existent
+     */
+    function namespace(obj, path){
+        if (!path) return obj;
+        forEach(path.split('.'), function(key){
+            if (!obj[key]) {
+                obj[key] = {};
+            }
+            obj = obj[key];
+        });
+        return obj;
+    }
+
+    module.exports = namespace;
+
+
diff --git a/node_modules/mout/object/omit.js b/node_modules/mout/object/omit.js
new file mode 100644
index 0000000..7a5ef05
--- /dev/null
+++ b/node_modules/mout/object/omit.js
@@ -0,0 +1,21 @@
+var slice = require('../array/slice');
+var contains = require('../array/contains');
+
+    /**
+     * Return a copy of the object, filtered to only contain properties except the blacklisted keys.
+     */
+    function omit(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {};
+
+        for (var property in obj) {
+            if (obj.hasOwnProperty(property) && !contains(keys, property)) {
+                out[property] = obj[property];
+            }
+        }
+        return out;
+    }
+
+    module.exports = omit;
+
+
diff --git a/node_modules/mout/object/pick.js b/node_modules/mout/object/pick.js
new file mode 100644
index 0000000..da5a564
--- /dev/null
+++ b/node_modules/mout/object/pick.js
@@ -0,0 +1,18 @@
+var slice = require('../array/slice');
+
+    /**
+     * Return a copy of the object, filtered to only have values for the whitelisted keys.
+     */
+    function pick(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {},
+            i = 0, key;
+        while (key = keys[i++]) {
+            out[key] = obj[key];
+        }
+        return out;
+    }
+
+    module.exports = pick;
+
+
diff --git a/node_modules/mout/object/pluck.js b/node_modules/mout/object/pluck.js
new file mode 100644
index 0000000..e844df4
--- /dev/null
+++ b/node_modules/mout/object/pluck.js
@@ -0,0 +1,13 @@
+var map = require('./map');
+var prop = require('../function/prop');
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(obj, propName){
+        return map(obj, prop(propName));
+    }
+
+    module.exports = pluck;
+
+
diff --git a/node_modules/mout/object/reduce.js b/node_modules/mout/object/reduce.js
new file mode 100644
index 0000000..6f19a3a
--- /dev/null
+++ b/node_modules/mout/object/reduce.js
@@ -0,0 +1,29 @@
+var forOwn = require('./forOwn');
+var size = require('./size');
+
+    /**
+     * Object reduce
+     */
+    function reduce(obj, callback, memo, thisObj) {
+        var initial = arguments.length > 2;
+
+        if (!size(obj) && !initial) {
+            throw new Error('reduce of empty object with no initial value');
+        }
+
+        forOwn(obj, function(value, key, list) {
+            if (!initial) {
+                memo = value;
+                initial = true;
+            }
+            else {
+                memo = callback.call(thisObj, memo, value, key, list);
+            }
+        });
+
+        return memo;
+    }
+
+    module.exports = reduce;
+
+
diff --git a/node_modules/mout/object/reject.js b/node_modules/mout/object/reject.js
new file mode 100644
index 0000000..7464379
--- /dev/null
+++ b/node_modules/mout/object/reject.js
@@ -0,0 +1,16 @@
+var filter = require('./filter');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Object reject
+     */
+    function reject(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        return filter(obj, function(value, index, obj) {
+            return !callback(value, index, obj);
+        }, thisObj);
+    }
+
+    module.exports = reject;
+
+
diff --git a/node_modules/mout/object/result.js b/node_modules/mout/object/result.js
new file mode 100644
index 0000000..0efdd41
--- /dev/null
+++ b/node_modules/mout/object/result.js
@@ -0,0 +1,14 @@
+var isFunction = require('../lang/isFunction');
+
+    function result(obj, prop) {
+        var property = obj[prop];
+
+        if(property === undefined) {
+            return;
+        }
+
+        return isFunction(property) ? property.call(obj) : property;
+    }
+
+    module.exports = result;
+
diff --git a/node_modules/mout/object/set.js b/node_modules/mout/object/set.js
new file mode 100644
index 0000000..9b3cdc4
--- /dev/null
+++ b/node_modules/mout/object/set.js
@@ -0,0 +1,17 @@
+var namespace = require('./namespace');
+
+    /**
+     * set "nested" object property
+     */
+    function set(obj, prop, val){
+        var parts = (/^(.+)\.(.+)$/).exec(prop);
+        if (parts){
+            namespace(obj, parts[1])[parts[2]] = val;
+        } else {
+            obj[prop] = val;
+        }
+    }
+
+    module.exports = set;
+
+
diff --git a/node_modules/mout/object/size.js b/node_modules/mout/object/size.js
new file mode 100644
index 0000000..9788595
--- /dev/null
+++ b/node_modules/mout/object/size.js
@@ -0,0 +1,16 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * Get object size
+     */
+    function size(obj) {
+        var count = 0;
+        forOwn(obj, function(){
+            count++;
+        });
+        return count;
+    }
+
+    module.exports = size;
+
+
diff --git a/node_modules/mout/object/some.js b/node_modules/mout/object/some.js
new file mode 100644
index 0000000..384c6f3
--- /dev/null
+++ b/node_modules/mout/object/some.js
@@ -0,0 +1,21 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Object some
+     */
+    function some(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        forOwn(obj, function(val, key) {
+            if (callback(val, key, obj)) {
+                result = true;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    module.exports = some;
+
+
diff --git a/node_modules/mout/object/unset.js b/node_modules/mout/object/unset.js
new file mode 100644
index 0000000..343bca0
--- /dev/null
+++ b/node_modules/mout/object/unset.js
@@ -0,0 +1,23 @@
+var has = require('./has');
+
+    /**
+     * Unset object property.
+     */
+    function unset(obj, prop){
+        if (has(obj, prop)) {
+            var parts = prop.split('.'),
+                last = parts.pop();
+            while (prop = parts.shift()) {
+                obj = obj[prop];
+            }
+            return (delete obj[last]);
+
+        } else {
+            // if property doesn't exist treat as deleted
+            return true;
+        }
+    }
+
+    module.exports = unset;
+
+
diff --git a/node_modules/mout/object/values.js b/node_modules/mout/object/values.js
new file mode 100644
index 0000000..265a693
--- /dev/null
+++ b/node_modules/mout/object/values.js
@@ -0,0 +1,16 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * Get object values
+     */
+    function values(obj) {
+        var vals = [];
+        forOwn(obj, function(val, key){
+            vals.push(val);
+        });
+        return vals;
+    }
+
+    module.exports = values;
+
+
diff --git a/node_modules/mout/package.json b/node_modules/mout/package.json
new file mode 100644
index 0000000..0738b97
--- /dev/null
+++ b/node_modules/mout/package.json
@@ -0,0 +1,145 @@
+{
+  "_from": "mout@^0.11.1",
+  "_id": "mout@0.11.1",
+  "_inBundle": false,
+  "_integrity": "sha1-ujYR318OWx/7/QEWa48C0fX6K5k=",
+  "_location": "/mout",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "range",
+    "registry": true,
+    "raw": "mout@^0.11.1",
+    "name": "mout",
+    "escapedName": "mout",
+    "rawSpec": "^0.11.1",
+    "saveSpec": null,
+    "fetchSpec": "^0.11.1"
+  },
+  "_requiredBy": [
+    "/openssl"
+  ],
+  "_resolved": "https://registry.npmjs.org/mout/-/mout-0.11.1.tgz",
+  "_shasum": "ba3611df5f0e5b1ffbfd01166b8f02d1f5fa2b99",
+  "_spec": "mout@^0.11.1",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge\\node_modules\\openssl",
+  "bugs": {
+    "url": "https://github.com/mout/mout/issues/"
+  },
+  "bundleDependencies": false,
+  "contributors": [
+    {
+      "name": "Adam Nowotny"
+    },
+    {
+      "name": "André Cruz",
+      "email": "amdfcruz@gmail.com"
+    },
+    {
+      "name": "Conrad Zimmerman",
+      "url": "http://www.conradz.com"
+    },
+    {
+      "name": "Friedemann Altrock",
+      "email": "frodenius@gmail.com"
+    },
+    {
+      "name": "Igor Almeida",
+      "email": "igor.p.almeida@gmail.com"
+    },
+    {
+      "name": "Jarrod Overson",
+      "url": "http://jarrodoverson.com"
+    },
+    {
+      "name": "Miller Medeiros",
+      "email": "contact@millermedeiros.com",
+      "url": "http://blog.millermedeiros.com"
+    },
+    {
+      "name": "Mathias Paumgarten",
+      "email": "mail@mathias-paumgarten.com"
+    },
+    {
+      "name": "Zach Shipley"
+    }
+  ],
+  "deprecated": false,
+  "description": "Modular Utilities",
+  "devDependencies": {
+    "commander": "~1.0.5",
+    "handlebars": "~1.0.6",
+    "istanbul": "~0.1.27",
+    "jasmine-node": "~1.14.5",
+    "jshint": "2.x",
+    "mdoc": "~0.3.2",
+    "nodefy": "*",
+    "regenerate": "~0.5.4",
+    "requirejs": "2.x",
+    "rimraf": "2.2.2",
+    "rocambole": "~0.2.3"
+  },
+  "directories": {
+    "doc": "./doc"
+  },
+  "homepage": "http://moutjs.com/",
+  "keywords": [
+    "utilities",
+    "functional",
+    "amd-utils",
+    "stdlib"
+  ],
+  "license": "MIT",
+  "main": "./index.js",
+  "name": "mout",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/mout/mout.git"
+  },
+  "scripts": {
+    "pretest": "node build pkg",
+    "test": "istanbul test tests/runner.js --hook-run-in-context"
+  },
+  "testling": {
+    "preprocess": "node build testling",
+    "browsers": {
+      "ie": [
+        7,
+        8,
+        9,
+        10
+      ],
+      "firefox": [
+        17,
+        "nightly"
+      ],
+      "chrome": [
+        23,
+        "canary"
+      ],
+      "opera": [
+        12,
+        "next"
+      ],
+      "safari": [
+        5.1,
+        6
+      ],
+      "iphone": [
+        6
+      ],
+      "ipad": [
+        6
+      ]
+    },
+    "scripts": [
+      "tests/lib/jasmine/jasmine.js",
+      "tests/lib/jasmine/jasmine.async.js",
+      "tests/lib/jasmine/jasmine-tap.js",
+      "tests/lib/requirejs/require.js",
+      "tests/testling/src.js",
+      "tests/testling/specs.js",
+      "tests/runner.js"
+    ]
+  },
+  "version": "0.11.1"
+}
diff --git a/node_modules/mout/queryString.js b/node_modules/mout/queryString.js
new file mode 100644
index 0000000..22685a7
--- /dev/null
+++ b/node_modules/mout/queryString.js
@@ -0,0 +1,15 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'contains' : require('./queryString/contains'),
+    'decode' : require('./queryString/decode'),
+    'encode' : require('./queryString/encode'),
+    'getParam' : require('./queryString/getParam'),
+    'getQuery' : require('./queryString/getQuery'),
+    'parse' : require('./queryString/parse'),
+    'setParam' : require('./queryString/setParam')
+};
+
+
diff --git a/node_modules/mout/queryString/contains.js b/node_modules/mout/queryString/contains.js
new file mode 100644
index 0000000..da678cf
--- /dev/null
+++ b/node_modules/mout/queryString/contains.js
@@ -0,0 +1,12 @@
+var getQuery = require('./getQuery');
+
+    /**
+     * Checks if query string contains parameter.
+     */
+    function contains(url, paramName) {
+        var regex = new RegExp('(\\?|&)'+ paramName +'=', 'g'); //matches `?param=` or `&param=`
+        return regex.test(getQuery(url));
+    }
+
+    module.exports = contains;
+
diff --git a/node_modules/mout/queryString/decode.js b/node_modules/mout/queryString/decode.js
new file mode 100644
index 0000000..c1b2cab
--- /dev/null
+++ b/node_modules/mout/queryString/decode.js
@@ -0,0 +1,36 @@
+var typecast = require('../string/typecast');
+var isArray = require('../lang/isArray');
+var hasOwn = require('../object/hasOwn');
+
+    /**
+     * Decode query string into an object of keys => vals.
+     */
+    function decode(queryStr, shouldTypecast) {
+        var queryArr = (queryStr || '').replace('?', '').split('&'),
+            reg = /([^=]+)=(.+)/,
+            i = -1,
+            obj = {},
+            equalIndex, cur, pValue, pName;
+
+        while ((cur = queryArr[++i])) {
+            equalIndex = cur.indexOf('=');
+            pName = cur.substring(0, equalIndex);
+            pValue = decodeURIComponent(cur.substring(equalIndex + 1));
+            if (shouldTypecast !== false) {
+                pValue = typecast(pValue);
+            }
+            if (hasOwn(obj, pName)){
+                if(isArray(obj[pName])){
+                    obj[pName].push(pValue);
+                } else {
+                    obj[pName] = [obj[pName], pValue];
+                }
+            } else {
+                obj[pName] = pValue;
+           }
+        }
+        return obj;
+    }
+
+    module.exports = decode;
+
diff --git a/node_modules/mout/queryString/encode.js b/node_modules/mout/queryString/encode.js
new file mode 100644
index 0000000..3a4fd0a
--- /dev/null
+++ b/node_modules/mout/queryString/encode.js
@@ -0,0 +1,27 @@
+var forOwn = require('../object/forOwn');
+var isArray = require('../lang/isArray');
+var forEach = require('../array/forEach');
+
+    /**
+     * Encode object into a query string.
+     */
+    function encode(obj){
+        var query = [],
+            arrValues, reg;
+        forOwn(obj, function (val, key) {
+            if (isArray(val)) {
+                arrValues = key + '=';
+                reg = new RegExp('&'+key+'+=$');
+                forEach(val, function (aValue) {
+                    arrValues += encodeURIComponent(aValue) + '&' + key + '=';
+                });
+                query.push(arrValues.replace(reg, ''));
+            } else {
+               query.push(key + '=' + encodeURIComponent(val));
+            }
+        });
+        return (query.length) ? '?' + query.join('&') : '';
+    }
+
+    module.exports = encode;
+
diff --git a/node_modules/mout/queryString/getParam.js b/node_modules/mout/queryString/getParam.js
new file mode 100644
index 0000000..f149c3e
--- /dev/null
+++ b/node_modules/mout/queryString/getParam.js
@@ -0,0 +1,15 @@
+var typecast = require('../string/typecast');
+var getQuery = require('./getQuery');
+
+    /**
+     * Get query parameter value.
+     */
+    function getParam(url, param, shouldTypecast){
+        var regexp = new RegExp('(\\?|&)'+ param + '=([^&]*)'), //matches `?param=value` or `&param=value`, value = $2
+            result = regexp.exec( getQuery(url) ),
+            val = (result && result[2])? result[2] : null;
+        return shouldTypecast === false? val : typecast(val);
+    }
+
+    module.exports = getParam;
+
diff --git a/node_modules/mout/queryString/getQuery.js b/node_modules/mout/queryString/getQuery.js
new file mode 100644
index 0000000..62140fa
--- /dev/null
+++ b/node_modules/mout/queryString/getQuery.js
@@ -0,0 +1,13 @@
+
+
+    /**
+     * Gets full query as string with all special chars decoded.
+     */
+    function getQuery(url) {
+        url = url.replace(/#.*/, ''); //removes hash (to avoid getting hash query)
+        var queryString = /\?[a-zA-Z0-9\=\&\%\$\-\_\.\+\!\*\'\(\)\,]+/.exec(url); //valid chars according to: http://www.ietf.org/rfc/rfc1738.txt
+        return (queryString)? decodeURIComponent(queryString[0].replace(/\+/g,' ')) : '';
+    }
+
+    module.exports = getQuery;
+
diff --git a/node_modules/mout/queryString/parse.js b/node_modules/mout/queryString/parse.js
new file mode 100644
index 0000000..532906c
--- /dev/null
+++ b/node_modules/mout/queryString/parse.js
@@ -0,0 +1,13 @@
+var decode = require('./decode');
+var getQuery = require('./getQuery');
+
+    /**
+     * Get query string, parses and decodes it.
+     */
+    function parse(url, shouldTypecast) {
+        return decode(getQuery(url), shouldTypecast);
+    }
+
+    module.exports = parse;
+
+
diff --git a/node_modules/mout/queryString/setParam.js b/node_modules/mout/queryString/setParam.js
new file mode 100644
index 0000000..052a9ba
--- /dev/null
+++ b/node_modules/mout/queryString/setParam.js
@@ -0,0 +1,28 @@
+
+
+    /**
+     * Set query string parameter value
+     */
+    function setParam(url, paramName, value){
+        url = url || '';
+
+        var re = new RegExp('(\\?|&)'+ paramName +'=[^&]*' );
+        var param = paramName +'='+ encodeURIComponent( value );
+
+        if ( re.test(url) ) {
+            return url.replace(re, '$1'+ param);
+        } else {
+            if (url.indexOf('?') === -1) {
+                url += '?';
+            }
+            if (url.indexOf('=') !== -1) {
+                url += '&';
+            }
+            return url + param;
+        }
+
+    }
+
+    module.exports = setParam;
+
+
diff --git a/node_modules/mout/random.js b/node_modules/mout/random.js
new file mode 100644
index 0000000..a924a10
--- /dev/null
+++ b/node_modules/mout/random.js
@@ -0,0 +1,18 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'choice' : require('./random/choice'),
+    'guid' : require('./random/guid'),
+    'rand' : require('./random/rand'),
+    'randBit' : require('./random/randBit'),
+    'randBool' : require('./random/randBool'),
+    'randHex' : require('./random/randHex'),
+    'randInt' : require('./random/randInt'),
+    'randSign' : require('./random/randSign'),
+    'randString' : require('./random/randString'),
+    'random' : require('./random/random')
+};
+
+
diff --git a/node_modules/mout/random/choice.js b/node_modules/mout/random/choice.js
new file mode 100644
index 0000000..51aa82a
--- /dev/null
+++ b/node_modules/mout/random/choice.js
@@ -0,0 +1,15 @@
+var randInt = require('./randInt');
+var isArray = require('../lang/isArray');
+
+    /**
+     * Returns a random element from the supplied arguments
+     * or from the array (if single argument is an array).
+     */
+    function choice(items) {
+        var target = (arguments.length === 1 && isArray(items))? items : arguments;
+        return target[ randInt(0, target.length - 1) ];
+    }
+
+    module.exports = choice;
+
+
diff --git a/node_modules/mout/random/guid.js b/node_modules/mout/random/guid.js
new file mode 100644
index 0000000..41f6edd
--- /dev/null
+++ b/node_modules/mout/random/guid.js
@@ -0,0 +1,24 @@
+var randHex = require('./randHex');
+var choice = require('./choice');
+
+  /**
+   * Returns pseudo-random guid (UUID v4)
+   * IMPORTANT: it's not totally "safe" since randHex/choice uses Math.random
+   * by default and sequences can be predicted in some cases. See the
+   * "random/random" documentation for more info about it and how to replace
+   * the default PRNG.
+   */
+  function guid() {
+    return (
+        randHex(8)+'-'+
+        randHex(4)+'-'+
+        // v4 UUID always contain "4" at this position to specify it was
+        // randomly generated
+        '4' + randHex(3) +'-'+
+        // v4 UUID always contain chars [a,b,8,9] at this position
+        choice(8, 9, 'a', 'b') + randHex(3)+'-'+
+        randHex(12)
+    );
+  }
+  module.exports = guid;
+
diff --git a/node_modules/mout/random/rand.js b/node_modules/mout/random/rand.js
new file mode 100644
index 0000000..782dec8
--- /dev/null
+++ b/node_modules/mout/random/rand.js
@@ -0,0 +1,15 @@
+var random = require('./random');
+var MIN_INT = require('../number/MIN_INT');
+var MAX_INT = require('../number/MAX_INT');
+
+    /**
+     * Returns random number inside range
+     */
+    function rand(min, max){
+        min = min == null? MIN_INT : min;
+        max = max == null? MAX_INT : max;
+        return min + (max - min) * random();
+    }
+
+    module.exports = rand;
+
diff --git a/node_modules/mout/random/randBit.js b/node_modules/mout/random/randBit.js
new file mode 100644
index 0000000..04f7aa5
--- /dev/null
+++ b/node_modules/mout/random/randBit.js
@@ -0,0 +1,11 @@
+var randBool = require('./randBool');
+
+    /**
+     * Returns random bit (0 or 1)
+     */
+    function randomBit() {
+        return randBool()? 1 : 0;
+    }
+
+    module.exports = randomBit;
+
diff --git a/node_modules/mout/random/randBool.js b/node_modules/mout/random/randBool.js
new file mode 100644
index 0000000..d3d35cb
--- /dev/null
+++ b/node_modules/mout/random/randBool.js
@@ -0,0 +1,12 @@
+var random = require('./random');
+
+    /**
+     * returns a random boolean value (true or false)
+     */
+    function randBool(){
+        return random() >= 0.5;
+    }
+
+    module.exports = randBool;
+
+
diff --git a/node_modules/mout/random/randHex.js b/node_modules/mout/random/randHex.js
new file mode 100644
index 0000000..d8d711c
--- /dev/null
+++ b/node_modules/mout/random/randHex.js
@@ -0,0 +1,19 @@
+var choice = require('./choice');
+
+    var _chars = '0123456789abcdef'.split('');
+
+    /**
+     * Returns a random hexadecimal string
+     */
+    function randHex(size){
+        size = size && size > 0? size : 6;
+        var str = '';
+        while (size--) {
+            str += choice(_chars);
+        }
+        return str;
+    }
+
+    module.exports = randHex;
+
+
diff --git a/node_modules/mout/random/randInt.js b/node_modules/mout/random/randInt.js
new file mode 100644
index 0000000..e237d96
--- /dev/null
+++ b/node_modules/mout/random/randInt.js
@@ -0,0 +1,18 @@
+var MIN_INT = require('../number/MIN_INT');
+var MAX_INT = require('../number/MAX_INT');
+var rand = require('./rand');
+
+    /**
+     * Gets random integer inside range or snap to min/max values.
+     */
+    function randInt(min, max){
+        min = min == null? MIN_INT : ~~min;
+        max = max == null? MAX_INT : ~~max;
+        // can't be max + 0.5 otherwise it will round up if `rand`
+        // returns `max` causing it to overflow range.
+        // -0.5 and + 0.49 are required to avoid bias caused by rounding
+        return Math.round( rand(min - 0.5, max + 0.499999999999) );
+    }
+
+    module.exports = randInt;
+
diff --git a/node_modules/mout/random/randSign.js b/node_modules/mout/random/randSign.js
new file mode 100644
index 0000000..75a1a51
--- /dev/null
+++ b/node_modules/mout/random/randSign.js
@@ -0,0 +1,11 @@
+var randBool = require('./randBool');
+
+    /**
+     * Returns random sign (-1 or 1)
+     */
+    function randomSign() {
+        return randBool()? 1 : -1;
+    }
+
+    module.exports = randomSign;
+
diff --git a/node_modules/mout/random/randString.js b/node_modules/mout/random/randString.js
new file mode 100644
index 0000000..e3c3597
--- /dev/null
+++ b/node_modules/mout/random/randString.js
@@ -0,0 +1,27 @@
+var isNumber = require('../lang/isNumber');
+var isString = require('../lang/isString');
+var randInt = require('./randInt');
+
+    var defaultDictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
+
+    function randomString(length, dictionary) {
+        if(!isNumber(length) || length <= 0) {
+          length = 8;
+        }
+
+        if(!isString(dictionary) || dictionary.length < 1) {
+          dictionary = defaultDictionary;
+        }
+
+        var result = '',
+            domain = dictionary.length - 1;
+
+        while(length--) {
+          result += dictionary[randInt(0, domain)];
+        }
+        
+        return result;
+    }
+
+    module.exports = randomString;
+
diff --git a/node_modules/mout/random/random.js b/node_modules/mout/random/random.js
new file mode 100644
index 0000000..670a3cc
--- /dev/null
+++ b/node_modules/mout/random/random.js
@@ -0,0 +1,18 @@
+
+
+    /**
+     * Just a wrapper to Math.random. No methods inside mout/random should call
+     * Math.random() directly so we can inject the pseudo-random number
+     * generator if needed (ie. in case we need a seeded random or a better
+     * algorithm than the native one)
+     */
+    function random(){
+        return random.get();
+    }
+
+    // we expose the method so it can be swapped if needed
+    random.get = Math.random;
+
+    module.exports = random;
+
+
diff --git a/node_modules/mout/src/array.js b/node_modules/mout/src/array.js
new file mode 100644
index 0000000..794dcec
--- /dev/null
+++ b/node_modules/mout/src/array.js
@@ -0,0 +1,55 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'append' : require('./array/append'),
+    'collect' : require('./array/collect'),
+    'combine' : require('./array/combine'),
+    'compact' : require('./array/compact'),
+    'contains' : require('./array/contains'),
+    'difference' : require('./array/difference'),
+    'equals' : require('./array/equals'),
+    'every' : require('./array/every'),
+    'filter' : require('./array/filter'),
+    'find' : require('./array/find'),
+    'findIndex' : require('./array/findIndex'),
+    'findLast' : require('./array/findLast'),
+    'findLastIndex' : require('./array/findLastIndex'),
+    'flatten' : require('./array/flatten'),
+    'forEach' : require('./array/forEach'),
+    'groupBy' : require('./array/groupBy'),
+    'indexOf' : require('./array/indexOf'),
+    'insert' : require('./array/insert'),
+    'intersection' : require('./array/intersection'),
+    'invoke' : require('./array/invoke'),
+    'join' : require('./array/join'),
+    'last' : require('./array/last'),
+    'lastIndexOf' : require('./array/lastIndexOf'),
+    'map' : require('./array/map'),
+    'max' : require('./array/max'),
+    'min' : require('./array/min'),
+    'pick' : require('./array/pick'),
+    'pluck' : require('./array/pluck'),
+    'range' : require('./array/range'),
+    'reduce' : require('./array/reduce'),
+    'reduceRight' : require('./array/reduceRight'),
+    'reject' : require('./array/reject'),
+    'remove' : require('./array/remove'),
+    'removeAll' : require('./array/removeAll'),
+    'reverse' : require('./array/reverse'),
+    'shuffle' : require('./array/shuffle'),
+    'slice' : require('./array/slice'),
+    'some' : require('./array/some'),
+    'sort' : require('./array/sort'),
+    'sortBy' : require('./array/sortBy'),
+    'split' : require('./array/split'),
+    'take' : require('./array/take'),
+    'toLookup' : require('./array/toLookup'),
+    'union' : require('./array/union'),
+    'unique' : require('./array/unique'),
+    'xor' : require('./array/xor'),
+    'zip' : require('./array/zip')
+};
+
+});
diff --git a/node_modules/mout/src/array/append.js b/node_modules/mout/src/array/append.js
new file mode 100644
index 0000000..549d875
--- /dev/null
+++ b/node_modules/mout/src/array/append.js
@@ -0,0 +1,21 @@
+define(function () {
+
+    /**
+     * Appends an array to the end of another.
+     * The first array will be modified.
+     */
+    function append(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var pad = arr1.length,
+            i = -1,
+            len = arr2.length;
+        while (++i < len) {
+            arr1[pad + i] = arr2[i];
+        }
+        return arr1;
+    }
+    return append;
+});
diff --git a/node_modules/mout/src/array/collect.js b/node_modules/mout/src/array/collect.js
new file mode 100644
index 0000000..8f60cda
--- /dev/null
+++ b/node_modules/mout/src/array/collect.js
@@ -0,0 +1,26 @@
+define(['./append', '../function/makeIterator_'], function (append, makeIterator) {
+
+    /**
+     * Maps the items in the array and concatenates the result arrays.
+     */
+    function collect(arr, callback, thisObj){
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            var value = callback(arr[i], i, arr);
+            if (value != null) {
+                append(results, value);
+            }
+        }
+
+        return results;
+    }
+
+    return collect;
+
+});
diff --git a/node_modules/mout/src/array/combine.js b/node_modules/mout/src/array/combine.js
new file mode 100644
index 0000000..22efb86
--- /dev/null
+++ b/node_modules/mout/src/array/combine.js
@@ -0,0 +1,22 @@
+define(['./indexOf'], function (indexOf) {
+
+    /**
+     * Combines an array with all the items of another.
+     * Does not allow duplicates and is case and type sensitive.
+     */
+    function combine(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var i = -1, len = arr2.length;
+        while (++i < len) {
+            if (indexOf(arr1, arr2[i]) === -1) {
+                arr1.push(arr2[i]);
+            }
+        }
+
+        return arr1;
+    }
+    return combine;
+});
diff --git a/node_modules/mout/src/array/compact.js b/node_modules/mout/src/array/compact.js
new file mode 100644
index 0000000..02a8109
--- /dev/null
+++ b/node_modules/mout/src/array/compact.js
@@ -0,0 +1,13 @@
+define(['./filter'], function (filter) {
+
+    /**
+     * Remove all null/undefined items from array.
+     */
+    function compact(arr) {
+        return filter(arr, function(val){
+            return (val != null);
+        });
+    }
+
+    return compact;
+});
diff --git a/node_modules/mout/src/array/contains.js b/node_modules/mout/src/array/contains.js
new file mode 100644
index 0000000..fca4f7c
--- /dev/null
+++ b/node_modules/mout/src/array/contains.js
@@ -0,0 +1,10 @@
+define(['./indexOf'], function (indexOf) {
+
+    /**
+     * If array contains values.
+     */
+    function contains(arr, val) {
+        return indexOf(arr, val) !== -1;
+    }
+    return contains;
+});
diff --git a/node_modules/mout/src/array/difference.js b/node_modules/mout/src/array/difference.js
new file mode 100644
index 0000000..0d52c25
--- /dev/null
+++ b/node_modules/mout/src/array/difference.js
@@ -0,0 +1,19 @@
+define(['./unique', './filter', './some', './contains', './slice'], function (unique, filter, some, contains, slice) {
+
+
+    /**
+     * Return a new Array with elements that aren't present in the other Arrays.
+     */
+    function difference(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return !some(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    return difference;
+
+});
diff --git a/node_modules/mout/src/array/equals.js b/node_modules/mout/src/array/equals.js
new file mode 100644
index 0000000..0e3e148
--- /dev/null
+++ b/node_modules/mout/src/array/equals.js
@@ -0,0 +1,28 @@
+define(['../lang/is', '../lang/isArray', './every'], function(is, isArray, every) {
+
+    /**
+     * Compares if both arrays have the same elements
+     */
+    function equals(a, b, callback){
+        callback = callback || is;
+
+        if (!isArray(a) || !isArray(b)) {
+            return callback(a, b);
+        }
+
+        if (a.length !== b.length) {
+            return false;
+        }
+
+        return every(a, makeCompare(callback), b);
+    }
+
+    function makeCompare(callback) {
+        return function(value, i) {
+            return i in this && callback(value, this[i]);
+        };
+    }
+
+    return equals;
+
+});
diff --git a/node_modules/mout/src/array/every.js b/node_modules/mout/src/array/every.js
new file mode 100644
index 0000000..78ba46d
--- /dev/null
+++ b/node_modules/mout/src/array/every.js
@@ -0,0 +1,27 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array every
+     */
+    function every(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (!callback(arr[i], i, arr) ) {
+                result = false;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    return every;
+});
diff --git a/node_modules/mout/src/array/filter.js b/node_modules/mout/src/array/filter.js
new file mode 100644
index 0000000..38add18
--- /dev/null
+++ b/node_modules/mout/src/array/filter.js
@@ -0,0 +1,26 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array filter
+     */
+    function filter(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    return filter;
+
+});
diff --git a/node_modules/mout/src/array/find.js b/node_modules/mout/src/array/find.js
new file mode 100644
index 0000000..3957dcd
--- /dev/null
+++ b/node_modules/mout/src/array/find.js
@@ -0,0 +1,13 @@
+define(['./findIndex'], function (findIndex) {
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(arr, iterator, thisObj){
+        var idx = findIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    return find;
+
+});
diff --git a/node_modules/mout/src/array/findIndex.js b/node_modules/mout/src/array/findIndex.js
new file mode 100644
index 0000000..59dfeeb
--- /dev/null
+++ b/node_modules/mout/src/array/findIndex.js
@@ -0,0 +1,23 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Returns the index of the first item that matches criteria
+     */
+    function findIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (iterator(arr[i], i, arr)) {
+                return i;
+            }
+        }
+
+        return -1;
+    }
+
+    return findIndex;
+});
diff --git a/node_modules/mout/src/array/findLast.js b/node_modules/mout/src/array/findLast.js
new file mode 100644
index 0000000..9308fa6
--- /dev/null
+++ b/node_modules/mout/src/array/findLast.js
@@ -0,0 +1,13 @@
+define(['./findLastIndex'], function (findLastIndex) {
+
+    /**
+     * Returns last item that matches criteria
+     */
+    function findLast(arr, iterator, thisObj){
+        var idx = findLastIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    return findLast;
+
+});
diff --git a/node_modules/mout/src/array/findLastIndex.js b/node_modules/mout/src/array/findLastIndex.js
new file mode 100644
index 0000000..45f266e
--- /dev/null
+++ b/node_modules/mout/src/array/findLastIndex.js
@@ -0,0 +1,24 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Returns the index of the last item that matches criteria
+     */
+    function findLastIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var n = arr.length;
+        while (--n >= 0) {
+            if (iterator(arr[n], n, arr)) {
+                return n;
+            }
+        }
+
+        return -1;
+    }
+
+    return findLastIndex;
+
+});
diff --git a/node_modules/mout/src/array/flatten.js b/node_modules/mout/src/array/flatten.js
new file mode 100644
index 0000000..3035b33
--- /dev/null
+++ b/node_modules/mout/src/array/flatten.js
@@ -0,0 +1,44 @@
+define(['../lang/isArray', './append'], function (isArray, append) {
+
+    /*
+     * Helper function to flatten to a destination array.
+     * Used to remove the need to create intermediate arrays while flattening.
+     */
+    function flattenTo(arr, result, level) {
+        if (level === 0) {
+            append(result, arr);
+            return result;
+        }
+
+        var value,
+            i = -1,
+            len = arr.length;
+        while (++i < len) {
+            value = arr[i];
+            if (isArray(value)) {
+                flattenTo(value, result, level - 1);
+            } else {
+                result.push(value);
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Recursively flattens an array.
+     * A new array containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(arr, level) {
+        if (arr == null) {
+            return [];
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(arr, [], level);
+    }
+
+    return flatten;
+
+});
+
diff --git a/node_modules/mout/src/array/forEach.js b/node_modules/mout/src/array/forEach.js
new file mode 100644
index 0000000..0e04586
--- /dev/null
+++ b/node_modules/mout/src/array/forEach.js
@@ -0,0 +1,23 @@
+define(function () {
+
+    /**
+     * Array forEach
+     */
+    function forEach(arr, callback, thisObj) {
+        if (arr == null) {
+            return;
+        }
+        var i = -1,
+            len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback.call(thisObj, arr[i], i, arr) === false ) {
+                break;
+            }
+        }
+    }
+
+    return forEach;
+
+});
diff --git a/node_modules/mout/src/array/groupBy.js b/node_modules/mout/src/array/groupBy.js
new file mode 100644
index 0000000..47906be
--- /dev/null
+++ b/node_modules/mout/src/array/groupBy.js
@@ -0,0 +1,32 @@
+define([
+    '../array/forEach',
+    '../function/identity',
+    '../function/makeIterator_'
+], function(forEach, identity, makeIterator) {
+
+    /**
+     * Bucket the array values.
+     */
+    function groupBy(arr, categorize, thisObj) {
+        if (categorize) {
+            categorize = makeIterator(categorize, thisObj);
+        } else {
+            // Default to identity function.
+            categorize = identity;
+        }
+
+        var buckets = {};
+        forEach(arr, function(element) {
+            var bucket = categorize(element);
+            if (!(bucket in buckets)) {
+                buckets[bucket] = [];
+            }
+
+            buckets[bucket].push(element);
+        });
+
+        return buckets;
+    }
+
+    return groupBy;
+});
diff --git a/node_modules/mout/src/array/indexOf.js b/node_modules/mout/src/array/indexOf.js
new file mode 100644
index 0000000..0e75f99
--- /dev/null
+++ b/node_modules/mout/src/array/indexOf.js
@@ -0,0 +1,28 @@
+define(function () {
+
+    /**
+     * Array.indexOf
+     */
+    function indexOf(arr, item, fromIndex) {
+        fromIndex = fromIndex || 0;
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length,
+            i = fromIndex < 0 ? len + fromIndex : fromIndex;
+        while (i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[i] === item) {
+                return i;
+            }
+
+            i++;
+        }
+
+        return -1;
+    }
+
+    return indexOf;
+});
diff --git a/node_modules/mout/src/array/insert.js b/node_modules/mout/src/array/insert.js
new file mode 100644
index 0000000..a3d7196
--- /dev/null
+++ b/node_modules/mout/src/array/insert.js
@@ -0,0 +1,14 @@
+define(['./difference', './slice'], function (difference, slice) {
+
+    /**
+     * Insert item into array if not already present.
+     */
+    function insert(arr, rest_items) {
+        var diff = difference(slice(arguments, 1), arr);
+        if (diff.length) {
+            Array.prototype.push.apply(arr, diff);
+        }
+        return arr.length;
+    }
+    return insert;
+});
diff --git a/node_modules/mout/src/array/intersection.js b/node_modules/mout/src/array/intersection.js
new file mode 100644
index 0000000..8d0baa4
--- /dev/null
+++ b/node_modules/mout/src/array/intersection.js
@@ -0,0 +1,20 @@
+define(['./unique', './filter', './every', './contains', './slice'], function (unique, filter, every, contains, slice) {
+
+
+    /**
+     * Return a new Array with elements common to all Arrays.
+     * - based on underscore.js implementation
+     */
+    function intersection(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return every(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    return intersection;
+
+});
diff --git a/node_modules/mout/src/array/invoke.js b/node_modules/mout/src/array/invoke.js
new file mode 100644
index 0000000..860d72a
--- /dev/null
+++ b/node_modules/mout/src/array/invoke.js
@@ -0,0 +1,23 @@
+define(['./slice'], function (slice) {
+
+    /**
+     * Call `methodName` on each item of the array passing custom arguments if
+     * needed.
+     */
+    function invoke(arr, methodName, var_args){
+        if (arr == null) {
+            return arr;
+        }
+
+        var args = slice(arguments, 2);
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            value[methodName].apply(value, args);
+        }
+
+        return arr;
+    }
+
+    return invoke;
+});
diff --git a/node_modules/mout/src/array/join.js b/node_modules/mout/src/array/join.js
new file mode 100644
index 0000000..2c618d2
--- /dev/null
+++ b/node_modules/mout/src/array/join.js
@@ -0,0 +1,17 @@
+define(['./filter'], function(filter) {
+
+    function isValidString(val) {
+        return (val != null && val !== '');
+    }
+
+    /**
+     * Joins strings with the specified separator inserted between each value.
+     * Null values and empty strings will be excluded.
+     */
+    function join(items, separator) {
+        separator = separator || '';
+        return filter(items, isValidString).join(separator);
+    }
+
+    return join;
+});
diff --git a/node_modules/mout/src/array/last.js b/node_modules/mout/src/array/last.js
new file mode 100644
index 0000000..2c85296
--- /dev/null
+++ b/node_modules/mout/src/array/last.js
@@ -0,0 +1,16 @@
+define(function () {
+
+    /**
+     * Returns last element of array.
+     */
+    function last(arr){
+        if (arr == null || arr.length < 1) {
+            return undefined;
+        }
+
+        return arr[arr.length - 1];
+    }
+
+    return last;
+
+});
diff --git a/node_modules/mout/src/array/lastIndexOf.js b/node_modules/mout/src/array/lastIndexOf.js
new file mode 100644
index 0000000..931235f
--- /dev/null
+++ b/node_modules/mout/src/array/lastIndexOf.js
@@ -0,0 +1,28 @@
+define(function () {
+
+    /**
+     * Array lastIndexOf
+     */
+    function lastIndexOf(arr, item, fromIndex) {
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length;
+        fromIndex = (fromIndex == null || fromIndex >= len)? len - 1 : fromIndex;
+        fromIndex = (fromIndex < 0)? len + fromIndex : fromIndex;
+
+        while (fromIndex >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[fromIndex] === item) {
+                return fromIndex;
+            }
+            fromIndex--;
+        }
+
+        return -1;
+    }
+
+    return lastIndexOf;
+});
diff --git a/node_modules/mout/src/array/map.js b/node_modules/mout/src/array/map.js
new file mode 100644
index 0000000..14377ab
--- /dev/null
+++ b/node_modules/mout/src/array/map.js
@@ -0,0 +1,22 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array map
+     */
+    function map(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null){
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            results[i] = callback(arr[i], i, arr);
+        }
+
+        return results;
+    }
+
+     return map;
+});
diff --git a/node_modules/mout/src/array/max.js b/node_modules/mout/src/array/max.js
new file mode 100644
index 0000000..d0628f0
--- /dev/null
+++ b/node_modules/mout/src/array/max.js
@@ -0,0 +1,34 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Return maximum value inside array
+     */
+    function max(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.max.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = -Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp > compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    return max;
+
+});
diff --git a/node_modules/mout/src/array/min.js b/node_modules/mout/src/array/min.js
new file mode 100644
index 0000000..07a0c71
--- /dev/null
+++ b/node_modules/mout/src/array/min.js
@@ -0,0 +1,34 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Return minimum value inside array
+     */
+    function min(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return -Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.min.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp < compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    return min;
+
+});
diff --git a/node_modules/mout/src/array/pick.js b/node_modules/mout/src/array/pick.js
new file mode 100644
index 0000000..dc5b222
--- /dev/null
+++ b/node_modules/mout/src/array/pick.js
@@ -0,0 +1,31 @@
+define(['../random/randInt'], function (randInt) {
+
+    /**
+     * Remove random item(s) from the Array and return it.
+     * Returns an Array of items if [nItems] is provided or a single item if
+     * it isn't specified.
+     */
+    function pick(arr, nItems){
+        if (nItems != null) {
+            var result = [];
+            if (nItems > 0 && arr && arr.length) {
+                nItems = nItems > arr.length? arr.length : nItems;
+                while (nItems--) {
+                    result.push( pickOne(arr) );
+                }
+            }
+            return result;
+        }
+        return (arr && arr.length)? pickOne(arr) : void(0);
+    }
+
+
+    function pickOne(arr){
+        var idx = randInt(0, arr.length - 1);
+        return arr.splice(idx, 1)[0];
+    }
+
+
+    return pick;
+
+});
diff --git a/node_modules/mout/src/array/pluck.js b/node_modules/mout/src/array/pluck.js
new file mode 100644
index 0000000..c908856
--- /dev/null
+++ b/node_modules/mout/src/array/pluck.js
@@ -0,0 +1,12 @@
+define(['./map'], function (map) {
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(arr, propName){
+        return map(arr, propName);
+    }
+
+    return pluck;
+
+});
diff --git a/node_modules/mout/src/array/range.js b/node_modules/mout/src/array/range.js
new file mode 100644
index 0000000..148ebf9
--- /dev/null
+++ b/node_modules/mout/src/array/range.js
@@ -0,0 +1,27 @@
+define(['../math/countSteps'], function (countSteps) {
+
+    /**
+     * Returns an Array of numbers inside range.
+     */
+    function range(start, stop, step) {
+        if (stop == null) {
+            stop = start;
+            start = 0;
+        }
+        step = step || 1;
+
+        var result = [],
+            nSteps = countSteps(stop - start, step),
+            i = start;
+
+        while (i <= stop) {
+            result.push(i);
+            i += step;
+        }
+
+        return result;
+    }
+
+    return range;
+
+});
diff --git a/node_modules/mout/src/array/reduce.js b/node_modules/mout/src/array/reduce.js
new file mode 100644
index 0000000..5f97ae8
--- /dev/null
+++ b/node_modules/mout/src/array/reduce.js
@@ -0,0 +1,33 @@
+define(function () {
+
+    /**
+     * Array reduce
+     */
+    function reduce(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2,
+            result = initVal;
+
+        if (arr == null || !arr.length) {
+            if (!hasInit) {
+                throw new Error('reduce of empty array with no initial value');
+            } else {
+                return initVal;
+            }
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (!hasInit) {
+                result = arr[i];
+                hasInit = true;
+            } else {
+                result = fn(result, arr[i], i, arr);
+            }
+        }
+
+        return result;
+    }
+
+    return reduce;
+});
diff --git a/node_modules/mout/src/array/reduceRight.js b/node_modules/mout/src/array/reduceRight.js
new file mode 100644
index 0000000..ddae0e7
--- /dev/null
+++ b/node_modules/mout/src/array/reduceRight.js
@@ -0,0 +1,34 @@
+define(function () {
+
+    /**
+     * Array reduceRight
+     */
+    function reduceRight(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2;
+
+        if (arr == null || !arr.length) {
+            if (hasInit) {
+                return initVal;
+            } else {
+                throw new Error('reduce of empty array with no initial value');
+            }
+        }
+
+        var i = arr.length, result = initVal, value;
+        while (--i >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            value = arr[i];
+            if (!hasInit) {
+                result = value;
+                hasInit = true;
+            } else {
+                result = fn(result, value, i, arr);
+            }
+        }
+        return result;
+    }
+
+    return reduceRight;
+});
diff --git a/node_modules/mout/src/array/reject.js b/node_modules/mout/src/array/reject.js
new file mode 100644
index 0000000..cad4038
--- /dev/null
+++ b/node_modules/mout/src/array/reject.js
@@ -0,0 +1,25 @@
+define(['../function/makeIterator_'], function(makeIterator) {
+
+    /**
+     * Array reject
+     */
+    function reject(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (!callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    return reject;
+});
diff --git a/node_modules/mout/src/array/remove.js b/node_modules/mout/src/array/remove.js
new file mode 100644
index 0000000..dec9134
--- /dev/null
+++ b/node_modules/mout/src/array/remove.js
@@ -0,0 +1,13 @@
+define(['./indexOf'], function(indexOf){
+
+    /**
+     * Remove a single item from the array.
+     * (it won't remove duplicates, just a single item)
+     */
+    function remove(arr, item){
+        var idx = indexOf(arr, item);
+        if (idx !== -1) arr.splice(idx, 1);
+    }
+
+    return remove;
+});
diff --git a/node_modules/mout/src/array/removeAll.js b/node_modules/mout/src/array/removeAll.js
new file mode 100644
index 0000000..e81022b
--- /dev/null
+++ b/node_modules/mout/src/array/removeAll.js
@@ -0,0 +1,15 @@
+define(['./indexOf'], function(indexOf){
+
+    /**
+     * Remove all instances of an item from array.
+     */
+    function removeAll(arr, item){
+        var idx = indexOf(arr, item);
+        while (idx !== -1) {
+            arr.splice(idx, 1);
+            idx = indexOf(arr, item, idx);
+        }
+    }
+
+    return removeAll;
+});
diff --git a/node_modules/mout/src/array/reverse.js b/node_modules/mout/src/array/reverse.js
new file mode 100644
index 0000000..b970427
--- /dev/null
+++ b/node_modules/mout/src/array/reverse.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a copy of the array in reversed order.
+     */
+    function reverse(array) {
+        var copy = array.slice();
+        copy.reverse();
+        return copy;
+    }
+
+    return reverse;
+
+});
diff --git a/node_modules/mout/src/array/shuffle.js b/node_modules/mout/src/array/shuffle.js
new file mode 100644
index 0000000..891d167
--- /dev/null
+++ b/node_modules/mout/src/array/shuffle.js
@@ -0,0 +1,28 @@
+define(['../random/randInt'], function (randInt) {
+
+    /**
+     * Shuffle array items.
+     */
+    function shuffle(arr) {
+        var results = [],
+            rnd;
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            if (!i) {
+                results[0] = arr[0];
+            } else {
+                rnd = randInt(0, i);
+                results[i] = results[rnd];
+                results[rnd] = arr[i];
+            }
+        }
+
+        return results;
+    }
+
+    return shuffle;
+});
diff --git a/node_modules/mout/src/array/slice.js b/node_modules/mout/src/array/slice.js
new file mode 100644
index 0000000..994caba
--- /dev/null
+++ b/node_modules/mout/src/array/slice.js
@@ -0,0 +1,35 @@
+define(function () {
+
+    /**
+     * Create slice of source array or array-like object
+     */
+    function slice(arr, start, end){
+        var len = arr.length;
+
+        if (start == null) {
+            start = 0;
+        } else if (start < 0) {
+            start = Math.max(len + start, 0);
+        } else {
+            start = Math.min(start, len);
+        }
+
+        if (end == null) {
+            end = len;
+        } else if (end < 0) {
+            end = Math.max(len + end, 0);
+        } else {
+            end = Math.min(end, len);
+        }
+
+        var result = [];
+        while (start < end) {
+            result.push(arr[start++]);
+        }
+
+        return result;
+    }
+
+    return slice;
+
+});
diff --git a/node_modules/mout/src/array/some.js b/node_modules/mout/src/array/some.js
new file mode 100644
index 0000000..e46a978
--- /dev/null
+++ b/node_modules/mout/src/array/some.js
@@ -0,0 +1,27 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array some
+     */
+    function some(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback(arr[i], i, arr) ) {
+                result = true;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    return some;
+});
diff --git a/node_modules/mout/src/array/sort.js b/node_modules/mout/src/array/sort.js
new file mode 100644
index 0000000..4c19404
--- /dev/null
+++ b/node_modules/mout/src/array/sort.js
@@ -0,0 +1,55 @@
+define(function () {
+
+    /**
+     * Merge sort (http://en.wikipedia.org/wiki/Merge_sort)
+     */
+    function mergeSort(arr, compareFn) {
+        if (arr == null) {
+            return [];
+        } else if (arr.length < 2) {
+            return arr;
+        }
+
+        if (compareFn == null) {
+            compareFn = defaultCompare;
+        }
+
+        var mid, left, right;
+
+        mid   = ~~(arr.length / 2);
+        left  = mergeSort( arr.slice(0, mid), compareFn );
+        right = mergeSort( arr.slice(mid, arr.length), compareFn );
+
+        return merge(left, right, compareFn);
+    }
+
+    function defaultCompare(a, b) {
+        return a < b ? -1 : (a > b? 1 : 0);
+    }
+
+    function merge(left, right, compareFn) {
+        var result = [];
+
+        while (left.length && right.length) {
+            if (compareFn(left[0], right[0]) <= 0) {
+                // if 0 it should preserve same order (stable)
+                result.push(left.shift());
+            } else {
+                result.push(right.shift());
+            }
+        }
+
+        if (left.length) {
+            result.push.apply(result, left);
+        }
+
+        if (right.length) {
+            result.push.apply(result, right);
+        }
+
+        return result;
+    }
+
+    return mergeSort;
+
+});
diff --git a/node_modules/mout/src/array/sortBy.js b/node_modules/mout/src/array/sortBy.js
new file mode 100644
index 0000000..2797194
--- /dev/null
+++ b/node_modules/mout/src/array/sortBy.js
@@ -0,0 +1,18 @@
+define(['./sort', '../function/makeIterator_'], function (sort, makeIterator) {
+
+    /*
+     * Sort array by the result of the callback
+     */
+    function sortBy(arr, callback, context){
+        callback = makeIterator(callback, context);
+
+        return sort(arr, function(a, b) {
+            a = callback(a);
+            b = callback(b);
+            return (a < b) ? -1 : ((a > b) ? 1 : 0);
+        });
+    }
+
+    return sortBy;
+
+});
diff --git a/node_modules/mout/src/array/split.js b/node_modules/mout/src/array/split.js
new file mode 100644
index 0000000..a17275e
--- /dev/null
+++ b/node_modules/mout/src/array/split.js
@@ -0,0 +1,35 @@
+define(function() {
+
+    /**
+     * Split array into a fixed number of segments.
+     */
+    function split(array, segments) {
+        segments = segments || 2;
+        var results = [];
+        if (array == null) {
+            return results;
+        }
+
+        var minLength = Math.floor(array.length / segments),
+            remainder = array.length % segments,
+            i = 0,
+            len = array.length,
+            segmentIndex = 0,
+            segmentLength;
+
+        while (i < len) {
+            segmentLength = minLength;
+            if (segmentIndex < remainder) {
+                segmentLength++;
+            }
+
+            results.push(array.slice(i, i + segmentLength));
+
+            segmentIndex++;
+            i += segmentLength;
+        }
+
+        return results;
+    }
+    return split;
+});
diff --git a/node_modules/mout/src/array/take.js b/node_modules/mout/src/array/take.js
new file mode 100644
index 0000000..74b8241
--- /dev/null
+++ b/node_modules/mout/src/array/take.js
@@ -0,0 +1,24 @@
+define(function () {
+
+    /**
+     * Iterates over a callback a set amount of times
+     * returning the results
+     */
+    function take(n, callback, thisObj){
+        var i = -1;
+        var arr = [];
+        if( !thisObj ){
+            while(++i < n){
+                arr[i] = callback(i, n);
+            }
+        } else {
+            while(++i < n){
+                arr[i] = callback.call(thisObj, i, n);
+            }
+        }
+        return arr;
+    }
+
+    return take;
+
+});
diff --git a/node_modules/mout/src/array/toLookup.js b/node_modules/mout/src/array/toLookup.js
new file mode 100644
index 0000000..aac8fd1
--- /dev/null
+++ b/node_modules/mout/src/array/toLookup.js
@@ -0,0 +1,28 @@
+define(['../lang/isFunction'], function (isFunction) {
+
+    /**
+     * Creates an object that holds a lookup for the objects in the array.
+     */
+    function toLookup(arr, key) {
+        var result = {};
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length, value;
+        if (isFunction(key)) {
+            while (++i < len) {
+                value = arr[i];
+                result[key(value)] = value;
+            }
+        } else {
+            while (++i < len) {
+                value = arr[i];
+                result[value[key]] = value;
+            }
+        }
+
+        return result;
+    }
+    return toLookup;
+});
diff --git a/node_modules/mout/src/array/union.js b/node_modules/mout/src/array/union.js
new file mode 100644
index 0000000..5f9922e
--- /dev/null
+++ b/node_modules/mout/src/array/union.js
@@ -0,0 +1,18 @@
+define(['./unique', './append'], function (unique, append) {
+
+    /**
+     * Concat multiple arrays and remove duplicates
+     */
+    function union(arrs) {
+        var results = [];
+        var i = -1, len = arguments.length;
+        while (++i < len) {
+            append(results, arguments[i]);
+        }
+
+        return unique(results);
+    }
+
+    return union;
+
+});
diff --git a/node_modules/mout/src/array/unique.js b/node_modules/mout/src/array/unique.js
new file mode 100644
index 0000000..c4a011a
--- /dev/null
+++ b/node_modules/mout/src/array/unique.js
@@ -0,0 +1,25 @@
+define(['./filter'], function(filter){
+
+    /**
+     * @return {array} Array of unique items
+     */
+    function unique(arr, compare){
+        compare = compare || isEqual;
+        return filter(arr, function(item, i, arr){
+            var n = arr.length;
+            while (++i < n) {
+                if ( compare(item, arr[i]) ) {
+                    return false;
+                }
+            }
+            return true;
+        });
+    }
+
+    function isEqual(a, b){
+        return a === b;
+    }
+
+    return unique;
+});
+
diff --git a/node_modules/mout/src/array/xor.js b/node_modules/mout/src/array/xor.js
new file mode 100644
index 0000000..7df89d9
--- /dev/null
+++ b/node_modules/mout/src/array/xor.js
@@ -0,0 +1,24 @@
+define(['./unique', './filter', './contains'], function (unique, filter, contains) {
+
+
+    /**
+     * Exclusive OR. Returns items that are present in a single array.
+     * - like ptyhon's `symmetric_difference`
+     */
+    function xor(arr1, arr2) {
+        arr1 = unique(arr1);
+        arr2 = unique(arr2);
+
+        var a1 = filter(arr1, function(item){
+                return !contains(arr2, item);
+            }),
+            a2 = filter(arr2, function(item){
+                return !contains(arr1, item);
+            });
+
+        return a1.concat(a2);
+    }
+
+    return xor;
+
+});
diff --git a/node_modules/mout/src/array/zip.js b/node_modules/mout/src/array/zip.js
new file mode 100644
index 0000000..bd0dbb8
--- /dev/null
+++ b/node_modules/mout/src/array/zip.js
@@ -0,0 +1,27 @@
+define(['./max', './map'], function (max, map) {
+
+    function getLength(arr) {
+        return arr == null ? 0 : arr.length;
+    }
+
+    /**
+     * Merges together the values of each of the arrays with the values at the
+     * corresponding position.
+     */
+    function zip(arr){
+        var len = arr ? max(map(arguments, getLength)) : 0,
+            results = [],
+            i = -1;
+        while (++i < len) {
+            // jshint loopfunc: true
+            results.push(map(arguments, function(item) {
+                return item == null ? undefined : item[i];
+            }));
+        }
+
+        return results;
+    }
+
+    return zip;
+
+});
diff --git a/node_modules/mout/src/collection.js b/node_modules/mout/src/collection.js
new file mode 100644
index 0000000..386e6da
--- /dev/null
+++ b/node_modules/mout/src/collection.js
@@ -0,0 +1,22 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'contains' : require('./collection/contains'),
+    'every' : require('./collection/every'),
+    'filter' : require('./collection/filter'),
+    'find' : require('./collection/find'),
+    'forEach' : require('./collection/forEach'),
+    'make_' : require('./collection/make_'),
+    'map' : require('./collection/map'),
+    'max' : require('./collection/max'),
+    'min' : require('./collection/min'),
+    'pluck' : require('./collection/pluck'),
+    'reduce' : require('./collection/reduce'),
+    'reject' : require('./collection/reject'),
+    'size' : require('./collection/size'),
+    'some' : require('./collection/some')
+};
+
+});
diff --git a/node_modules/mout/src/collection/contains.js b/node_modules/mout/src/collection/contains.js
new file mode 100644
index 0000000..192167e
--- /dev/null
+++ b/node_modules/mout/src/collection/contains.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/contains', '../object/contains'], function (make, arrContains, objContains) {
+
+    /**
+     */
+    return make(arrContains, objContains);
+
+});
diff --git a/node_modules/mout/src/collection/every.js b/node_modules/mout/src/collection/every.js
new file mode 100644
index 0000000..6317f50
--- /dev/null
+++ b/node_modules/mout/src/collection/every.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/every', '../object/every'], function (make, arrEvery, objEvery) {
+
+    /**
+     */
+    return make(arrEvery, objEvery);
+
+});
diff --git a/node_modules/mout/src/collection/filter.js b/node_modules/mout/src/collection/filter.js
new file mode 100644
index 0000000..4e7fadc
--- /dev/null
+++ b/node_modules/mout/src/collection/filter.js
@@ -0,0 +1,22 @@
+define(['./forEach', '../function/makeIterator_'], function (forEach, makeIterator) {
+
+    /**
+     * filter collection values, returns array.
+     */
+    function filter(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        var results = [];
+        if (!list) {
+            return results;
+        }
+        forEach(list, function(value, index, list) {
+            if (iterator(value, index, list)) {
+                results[results.length] = value;
+            }
+        });
+        return results;
+    }
+
+    return filter;
+
+});
diff --git a/node_modules/mout/src/collection/find.js b/node_modules/mout/src/collection/find.js
new file mode 100644
index 0000000..681f941
--- /dev/null
+++ b/node_modules/mout/src/collection/find.js
@@ -0,0 +1,8 @@
+define(['./make_', '../array/find', '../object/find'], function(make, arrFind, objFind) {
+
+    /**
+     * Find value that returns true on iterator check.
+     */
+    return make(arrFind, objFind);
+
+});
diff --git a/node_modules/mout/src/collection/forEach.js b/node_modules/mout/src/collection/forEach.js
new file mode 100644
index 0000000..3b39d3e
--- /dev/null
+++ b/node_modules/mout/src/collection/forEach.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/forEach', '../object/forOwn'], function (make, arrForEach, objForEach) {
+
+    /**
+     */
+    return make(arrForEach, objForEach);
+
+});
diff --git a/node_modules/mout/src/collection/make_.js b/node_modules/mout/src/collection/make_.js
new file mode 100644
index 0000000..290a651
--- /dev/null
+++ b/node_modules/mout/src/collection/make_.js
@@ -0,0 +1,19 @@
+define(['../array/slice'], function(slice){
+
+    /**
+     * internal method used to create other collection modules.
+     */
+    function makeCollectionMethod(arrMethod, objMethod, defaultReturn) {
+        return function(){
+            var args = slice(arguments);
+            if (args[0] == null) {
+                return defaultReturn;
+            }
+            // array-like is treated as array
+            return (typeof args[0].length === 'number')? arrMethod.apply(null, args) : objMethod.apply(null, args);
+        };
+    }
+
+    return makeCollectionMethod;
+
+});
diff --git a/node_modules/mout/src/collection/map.js b/node_modules/mout/src/collection/map.js
new file mode 100644
index 0000000..96e2498
--- /dev/null
+++ b/node_modules/mout/src/collection/map.js
@@ -0,0 +1,20 @@
+define(['../lang/isObject', '../object/values', '../array/map', '../function/makeIterator_'], function (isObject, values, arrMap, makeIterator) {
+
+    /**
+     * Map collection values, returns Array.
+     */
+    function map(list, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        // list.length to check array-like object, if not array-like
+        // we simply map all the object values
+        if( isObject(list) && list.length == null ){
+            list = values(list);
+        }
+        return arrMap(list, function (val, key, list) {
+            return callback(val, key, list);
+        });
+    }
+
+    return map;
+
+});
diff --git a/node_modules/mout/src/collection/max.js b/node_modules/mout/src/collection/max.js
new file mode 100644
index 0000000..de9a6da
--- /dev/null
+++ b/node_modules/mout/src/collection/max.js
@@ -0,0 +1,8 @@
+define(['./make_', '../array/max', '../object/max'], function (make, arrMax, objMax) {
+
+    /**
+     * Get maximum value inside collection
+     */
+    return make(arrMax, objMax);
+
+});
diff --git a/node_modules/mout/src/collection/min.js b/node_modules/mout/src/collection/min.js
new file mode 100644
index 0000000..f0c239a
--- /dev/null
+++ b/node_modules/mout/src/collection/min.js
@@ -0,0 +1,8 @@
+define(['./make_', '../array/min', '../object/min'], function (make, arrMin, objMin) {
+
+    /**
+     * Get minimum value inside collection.
+     */
+    return make(arrMin, objMin);
+
+});
diff --git a/node_modules/mout/src/collection/pluck.js b/node_modules/mout/src/collection/pluck.js
new file mode 100644
index 0000000..ef784a7
--- /dev/null
+++ b/node_modules/mout/src/collection/pluck.js
@@ -0,0 +1,14 @@
+define(['./map'], function (map) {
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(list, key) {
+        return map(list, function(value) {
+            return value[key];
+        });
+    }
+
+    return pluck;
+
+});
diff --git a/node_modules/mout/src/collection/reduce.js b/node_modules/mout/src/collection/reduce.js
new file mode 100644
index 0000000..bd05d43
--- /dev/null
+++ b/node_modules/mout/src/collection/reduce.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/reduce', '../object/reduce'], function (make, arrReduce, objReduce) {
+
+    /**
+     */
+    return make(arrReduce, objReduce);
+
+});
diff --git a/node_modules/mout/src/collection/reject.js b/node_modules/mout/src/collection/reject.js
new file mode 100644
index 0000000..581adfd
--- /dev/null
+++ b/node_modules/mout/src/collection/reject.js
@@ -0,0 +1,15 @@
+define(['./filter', '../function/makeIterator_'], function (filter, makeIterator) {
+
+    /**
+     * Inverse or collection/filter
+     */
+    function reject(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        return filter(list, function(value, index, list) {
+            return !iterator(value, index, list);
+        }, thisObj);
+    }
+
+    return reject;
+
+});
diff --git a/node_modules/mout/src/collection/size.js b/node_modules/mout/src/collection/size.js
new file mode 100644
index 0000000..4e5ab41
--- /dev/null
+++ b/node_modules/mout/src/collection/size.js
@@ -0,0 +1,18 @@
+define(['../lang/isArray', '../object/size'], function (isArray, objSize) {
+
+    /**
+     * Get collection size
+     */
+    function size(list) {
+        if (!list) {
+            return 0;
+        }
+        if (isArray(list)) {
+            return list.length;
+        }
+        return objSize(list);
+    }
+
+    return size;
+
+});
diff --git a/node_modules/mout/src/collection/some.js b/node_modules/mout/src/collection/some.js
new file mode 100644
index 0000000..c0aebee
--- /dev/null
+++ b/node_modules/mout/src/collection/some.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/some', '../object/some'], function (make, arrSome, objSome) {
+
+    /**
+     */
+    return make(arrSome, objSome);
+
+});
diff --git a/node_modules/mout/src/date.js b/node_modules/mout/src/date.js
new file mode 100644
index 0000000..b3038ee
--- /dev/null
+++ b/node_modules/mout/src/date.js
@@ -0,0 +1,22 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'dayOfTheYear' : require('./date/dayOfTheYear'),
+    'diff' : require('./date/diff'),
+    'i18n_' : require('./date/i18n_'),
+    'isLeapYear' : require('./date/isLeapYear'),
+    'isSame' : require('./date/isSame'),
+    'parseIso' : require('./date/parseIso'),
+    'quarter' : require('./date/quarter'),
+    'startOf' : require('./date/startOf'),
+    'strftime' : require('./date/strftime'),
+    'timezoneAbbr' : require('./date/timezoneAbbr'),
+    'timezoneOffset' : require('./date/timezoneOffset'),
+    'totalDaysInMonth' : require('./date/totalDaysInMonth'),
+    'totalDaysInYear' : require('./date/totalDaysInYear'),
+    'weekOfTheYear' : require('./date/weekOfTheYear')
+};
+
+});
diff --git a/node_modules/mout/src/date/dayOfTheYear.js b/node_modules/mout/src/date/dayOfTheYear.js
new file mode 100644
index 0000000..dc77ae1
--- /dev/null
+++ b/node_modules/mout/src/date/dayOfTheYear.js
@@ -0,0 +1,13 @@
+define(['../lang/isDate'], function (isDate) {
+
+    /**
+     * return the day of the year (1..366)
+     */
+    function dayOfTheYear(date){
+        return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -
+                Date.UTC(date.getFullYear(), 0, 1)) / 86400000 + 1;
+    }
+
+    return dayOfTheYear;
+
+});
diff --git a/node_modules/mout/src/date/diff.js b/node_modules/mout/src/date/diff.js
new file mode 100644
index 0000000..667165f
--- /dev/null
+++ b/node_modules/mout/src/date/diff.js
@@ -0,0 +1,128 @@
+define(['./totalDaysInMonth', './totalDaysInYear', '../time/convert'], function(totalDaysInMonth, totalDaysInYear, convert){
+
+    /**
+     * calculate the difference between dates (range)
+     */
+    function diff(start, end, unitName){
+        // sort the dates to make it easier to process (specially year/month)
+        if (start > end) {
+            var swap = start;
+            start = end;
+            end = swap;
+        }
+
+        var output;
+
+        if (unitName === 'month') {
+            output = getMonthsDiff(start, end);
+        } else if (unitName === 'year'){
+            output = getYearsDiff(start, end);
+        } else if (unitName != null) {
+            if (unitName === 'day') {
+                // ignore timezone difference because of daylight savings time
+                start = toUtc(start);
+                end = toUtc(end);
+            }
+            output = convert(end - start, 'ms', unitName);
+        } else {
+            output = end - start;
+        }
+
+        return output;
+    }
+
+
+    function toUtc(d){
+        // we ignore timezone differences on purpose because of daylight
+        // savings time, otherwise it would return fractional days/weeks even
+        // if a full day elapsed. eg:
+        // Wed Feb 12 2014 00:00:00 GMT-0200 (BRST)
+        // Sun Feb 16 2014 00:00:00 GMT-0300 (BRT)
+        // diff should be 4 days and not 4.041666666666667
+        return Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(),
+                        d.getHours(), d.getMinutes(), d.getSeconds(),
+                        d.getMilliseconds());
+    }
+
+
+    function getMonthsDiff(start, end){
+        return getElapsedMonths(start, end) +
+               getElapsedYears(start, end) * 12 +
+               getFractionalMonth(start, end);
+    }
+
+
+    function getYearsDiff(start, end){
+        var elapsedYears = getElapsedYears(start, end);
+        return elapsedYears + getFractionalYear(start, end, elapsedYears);
+    }
+
+
+    function getElapsedMonths(start, end){
+        var monthDiff = end.getMonth() - start.getMonth();
+        if (monthDiff < 0) {
+            monthDiff += 12;
+        }
+        // less than a full month
+        if (start.getDate() > end.getDate()) {
+            monthDiff -= 1;
+        }
+        return monthDiff;
+    }
+
+
+    function getElapsedYears(start, end){
+        var yearDiff = end.getFullYear() - start.getFullYear();
+        // less than a full year
+        if (start.getMonth() > end.getMonth()) {
+            yearDiff -= 1;
+        }
+        return yearDiff;
+    }
+
+
+    function getFractionalMonth(start, end){
+        var fractionalDiff = 0;
+        var startDay = start.getDate();
+        var endDay = end.getDate();
+
+        if (startDay !== endDay) {
+            var startTotalDays = totalDaysInMonth(start);
+            var endTotalDays = totalDaysInMonth(end);
+            var totalDays;
+            var daysElapsed;
+
+            if (startDay > endDay) {
+                // eg: Jan 29 - Feb 27 (29 days elapsed but not a full month)
+                var baseDay = startTotalDays - startDay;
+                daysElapsed = endDay + baseDay;
+                // total days should be relative to 1st day of next month if
+                // startDay > endTotalDays
+                totalDays = (startDay > endTotalDays)?
+                    endTotalDays + baseDay + 1 : startDay + baseDay;
+            } else {
+                // fractional is only based on endMonth eg: Jan 12 - Feb 18
+                // (6 fractional days, 28 days until next full month)
+                daysElapsed = endDay - startDay;
+                totalDays = endTotalDays;
+            }
+
+            fractionalDiff = daysElapsed / totalDays;
+        }
+
+        return fractionalDiff;
+    }
+
+
+    function getFractionalYear(start, end, elapsedYears){
+        var base = elapsedYears?
+            new Date(end.getFullYear(), start.getMonth(), start.getDate()) :
+            start;
+        var elapsedDays = diff(base, end, 'day');
+        return elapsedDays / totalDaysInYear(end);
+    }
+
+
+    return diff;
+
+});
diff --git a/node_modules/mout/src/date/i18n/de-DE.js b/node_modules/mout/src/date/i18n/de-DE.js
new file mode 100644
index 0000000..46f5c6a
--- /dev/null
+++ b/node_modules/mout/src/date/i18n/de-DE.js
@@ -0,0 +1,61 @@
+define(function(){
+    // de-DE (German)
+    return {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Januar",
+            "Februar",
+            "März",
+            "April",
+            "Mai",
+            "Juni",
+            "Juli",
+            "August",
+            "September",
+            "Oktober",
+            "November",
+            "Dezember"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Febr",
+            "März",
+            "Apr",
+            "Mai",
+            "Juni",
+            "Juli",
+            "Aug",
+            "Sept",
+            "Okt",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Sonntag",
+            "Montag",
+            "Dienstag",
+            "Mittwoch",
+            "Donnerstag",
+            "Freitag",
+            "Samstag"
+        ],
+
+        "days_abbr" : [
+            "So",
+            "Mo",
+            "Di",
+            "Mi",
+            "Do",
+            "Fr",
+            "Sa"
+        ]
+    };
+});
diff --git a/node_modules/mout/src/date/i18n/en-US.js b/node_modules/mout/src/date/i18n/en-US.js
new file mode 100644
index 0000000..5e640c2
--- /dev/null
+++ b/node_modules/mout/src/date/i18n/en-US.js
@@ -0,0 +1,61 @@
+define(function(){
+    // en-US (English, United States)
+    return {
+        "am" : "AM",
+        "pm" : "PM",
+
+        "x": "%m/%d/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %I:%M:%S %p %Z",
+
+        "months" : [
+            "January",
+            "February",
+            "March",
+            "April",
+            "May",
+            "June",
+            "July",
+            "August",
+            "September",
+            "October",
+            "November",
+            "December"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Feb",
+            "Mar",
+            "Apr",
+            "May",
+            "Jun",
+            "Jul",
+            "Aug",
+            "Sep",
+            "Oct",
+            "Nov",
+            "Dec"
+        ],
+
+        "days" : [
+            "Sunday",
+            "Monday",
+            "Tuesday",
+            "Wednesday",
+            "Thursday",
+            "Friday",
+            "Saturday"
+        ],
+
+        "days_abbr" : [
+            "Sun",
+            "Mon",
+            "Tue",
+            "Wed",
+            "Thu",
+            "Fri",
+            "Sat"
+        ]
+    };
+});
diff --git a/node_modules/mout/src/date/i18n/pt-BR.js b/node_modules/mout/src/date/i18n/pt-BR.js
new file mode 100644
index 0000000..47256dd
--- /dev/null
+++ b/node_modules/mout/src/date/i18n/pt-BR.js
@@ -0,0 +1,61 @@
+define(function(){
+    // pt-BR (Brazillian Portuguese)
+    return {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Janeiro",
+            "Fevereiro",
+            "Março",
+            "Abril",
+            "Maio",
+            "Junho",
+            "Julho",
+            "Agosto",
+            "Setembro",
+            "Outubro",
+            "Novembro",
+            "Dezembro"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Fev",
+            "Mar",
+            "Abr",
+            "Mai",
+            "Jun",
+            "Jul",
+            "Ago",
+            "Set",
+            "Out",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Domingo",
+            "Segunda",
+            "Terça",
+            "Quarta",
+            "Quinta",
+            "Sexta",
+            "Sábado"
+        ],
+
+        "days_abbr" : [
+            "Dom",
+            "Seg",
+            "Ter",
+            "Qua",
+            "Qui",
+            "Sex",
+            "Sáb"
+        ]
+    };
+});
diff --git a/node_modules/mout/src/date/i18n_.js b/node_modules/mout/src/date/i18n_.js
new file mode 100644
index 0000000..c04ce88
--- /dev/null
+++ b/node_modules/mout/src/date/i18n_.js
@@ -0,0 +1,13 @@
+define(['../object/mixIn', './i18n/en-US'], function(mixIn, enUS){
+
+    // we also use mixIn to make sure we don't affect the original locale
+    var activeLocale = mixIn({}, enUS, {
+        // we expose a "set" method to allow overriding the global locale
+        set : function(localeData){
+            mixIn(activeLocale, localeData);
+        }
+    });
+
+    return activeLocale;
+
+});
diff --git a/node_modules/mout/src/date/isLeapYear.js b/node_modules/mout/src/date/isLeapYear.js
new file mode 100644
index 0000000..e400b43
--- /dev/null
+++ b/node_modules/mout/src/date/isLeapYear.js
@@ -0,0 +1,15 @@
+define(['../lang/isDate'], function (isDate) {
+
+    /**
+     * checks if it's a leap year
+     */
+    function isLeapYear(fullYear){
+        if (isDate(fullYear)) {
+            fullYear = fullYear.getFullYear();
+        }
+        return fullYear % 400 === 0 || (fullYear % 100 !== 0 && fullYear % 4 === 0);
+    }
+
+    return isLeapYear;
+
+});
diff --git a/node_modules/mout/src/date/isSame.js b/node_modules/mout/src/date/isSame.js
new file mode 100644
index 0000000..f30531f
--- /dev/null
+++ b/node_modules/mout/src/date/isSame.js
@@ -0,0 +1,16 @@
+define(['./startOf'], function (startOf) {
+
+    /**
+     * Check if date is "same" with optional period
+     */
+    function isSame(date1, date2, period){
+        if (period) {
+            date1 = startOf(date1, period);
+            date2 = startOf(date2, period);
+        }
+        return Number(date1) === Number(date2);
+    }
+
+    return isSame;
+
+});
diff --git a/node_modules/mout/src/date/parseIso.js b/node_modules/mout/src/date/parseIso.js
new file mode 100644
index 0000000..b21c879
--- /dev/null
+++ b/node_modules/mout/src/date/parseIso.js
@@ -0,0 +1,146 @@
+define(['../array/some'], function (some) {
+
+    var datePatterns = [
+        /^([0-9]{4})$/,                        // YYYY
+        /^([0-9]{4})-([0-9]{2})$/,             // YYYY-MM (YYYYMM not allowed)
+        /^([0-9]{4})-?([0-9]{2})-?([0-9]{2})$/ // YYYY-MM-DD or YYYYMMDD
+    ];
+    var ORD_DATE = /^([0-9]{4})-?([0-9]{3})$/; // YYYY-DDD
+
+    var timePatterns = [
+        /^([0-9]{2}(?:\.[0-9]*)?)$/,                      // HH.hh
+        /^([0-9]{2}):?([0-9]{2}(?:\.[0-9]*)?)$/,          // HH:MM.mm
+        /^([0-9]{2}):?([0-9]{2}):?([0-9]{2}(\.[0-9]*)?)$/ // HH:MM:SS.ss
+    ];
+
+    var DATE_TIME = /^(.+)T(.+)$/;
+    var TIME_ZONE = /^(.+)([+\-])([0-9]{2}):?([0-9]{2})$/;
+
+    function matchAll(str, patterns) {
+        var match;
+        var found = some(patterns, function(pattern) {
+            return !!(match = pattern.exec(str));
+        });
+
+        return found ? match : null;
+    }
+
+    function getDate(year, month, day) {
+        var date = new Date(Date.UTC(year, month, day));
+
+        // Explicitly set year to avoid Date.UTC making dates < 100 relative to
+        // 1900
+        date.setUTCFullYear(year);
+
+        var valid =
+            date.getUTCFullYear() === year &&
+            date.getUTCMonth() === month &&
+            date.getUTCDate() === day;
+        return valid ? +date : NaN;
+    }
+
+    function parseOrdinalDate(str) {
+        var match = ORD_DATE.exec(str);
+        if (match ) {
+            var year = +match[1],
+                day = +match[2],
+                date = new Date(Date.UTC(year, 0, day));
+
+            if (date.getUTCFullYear() === year) {
+                return +date;
+            }
+        }
+
+        return NaN;
+    }
+
+    function parseDate(str) {
+        var match, year, month, day;
+
+        match = matchAll(str, datePatterns);
+        if (match === null) {
+            // Ordinal dates are verified differently.
+            return parseOrdinalDate(str);
+        }
+
+        year = (match[1] === void 0) ? 0 : +match[1];
+        month = (match[2] === void 0) ? 0 : +match[2] - 1;
+        day = (match[3] === void 0) ? 1 : +match[3];
+
+        return getDate(year, month, day);
+    }
+
+    function getTime(hr, min, sec) {
+        var valid =
+            (hr < 24 && hr >= 0 &&
+             min < 60 && min >= 0 &&
+             sec < 60 && min >= 0) ||
+            (hr === 24 && min === 0 && sec === 0);
+        if (!valid) {
+            return NaN;
+        }
+
+        return ((hr * 60 + min) * 60 + sec) * 1000;
+    }
+
+    function parseOffset(str) {
+        var match;
+        if (str.charAt(str.length - 1) === 'Z') {
+            str = str.substring(0, str.length - 1);
+        } else {
+            match = TIME_ZONE.exec(str);
+            if (match) {
+                var hours = +match[3],
+                    minutes = (match[4] === void 0) ? 0 : +match[4],
+                    offset = getTime(hours, minutes, 0);
+
+                if (match[2] === '-') {
+                    offset *= -1;
+                }
+
+                return { offset: offset, time: match[1] };
+            }
+        }
+
+        // No time zone specified, assume UTC
+        return { offset: 0, time: str };
+    }
+
+    function parseTime(str) {
+        var match;
+        var offset = parseOffset(str);
+
+        str = offset.time;
+        offset = offset.offset;
+        if (isNaN(offset)) {
+            return NaN;
+        }
+
+        match = matchAll(str, timePatterns);
+        if (match === null) {
+            return NaN;
+        }
+
+        var hours = (match[1] === void 0) ? 0 : +match[1],
+            minutes = (match[2] === void 0) ? 0 : +match[2],
+            seconds = (match[3] === void 0) ? 0 : +match[3];
+
+        return getTime(hours, minutes, seconds) - offset;
+    }
+
+    /**
+     * Parse an ISO8601 formatted date string, and return a Date object.
+     */
+    function parseISO8601(str){
+        var match = DATE_TIME.exec(str);
+        if (!match) {
+            // No time specified
+            return parseDate(str);
+        }
+
+        return parseDate(match[1]) + parseTime(match[2]);
+    }
+
+    return parseISO8601;
+
+});
diff --git a/node_modules/mout/src/date/quarter.js b/node_modules/mout/src/date/quarter.js
new file mode 100644
index 0000000..62b9206
--- /dev/null
+++ b/node_modules/mout/src/date/quarter.js
@@ -0,0 +1,16 @@
+define(function () {
+
+    /**
+     * gets date quarter
+     */
+    function quarter(date){
+        var month = date.getMonth();
+        if (month < 3) return 1;
+        if (month < 6) return 2;
+        if (month < 9) return 3;
+        return 4;
+    }
+
+    return quarter;
+
+});
diff --git a/node_modules/mout/src/date/startOf.js b/node_modules/mout/src/date/startOf.js
new file mode 100644
index 0000000..747f114
--- /dev/null
+++ b/node_modules/mout/src/date/startOf.js
@@ -0,0 +1,54 @@
+define(['../lang/clone'], function (clone) {
+
+    /**
+     * get a new Date object representing start of period
+     */
+    function startOf(date, period){
+        date = clone(date);
+
+        // intentionally removed "break" from switch since start of
+        // month/year/etc should also reset the following periods
+        switch (period) {
+            case 'year':
+                date.setMonth(0);
+            /* falls through */
+            case 'month':
+                date.setDate(1);
+            /* falls through */
+            case 'week':
+            case 'day':
+                date.setHours(0);
+            /* falls through */
+            case 'hour':
+                date.setMinutes(0);
+            /* falls through */
+            case 'minute':
+                date.setSeconds(0);
+            /* falls through */
+            case 'second':
+                date.setMilliseconds(0);
+                break;
+            default:
+                throw new Error('"'+ period +'" is not a valid period');
+        }
+
+        // week is the only case that should reset the weekDay and maybe even
+        // overflow to previous month
+        if (period === 'week') {
+            var weekDay = date.getDay();
+            var baseDate = date.getDate();
+            if (weekDay) {
+                if (weekDay >= baseDate) {
+                    //start of the week is on previous month
+                    date.setDate(0);
+                }
+                date.setDate(date.getDate() - date.getDay());
+            }
+        }
+
+        return date;
+    }
+
+    return startOf;
+
+});
diff --git a/node_modules/mout/src/date/strftime.js b/node_modules/mout/src/date/strftime.js
new file mode 100644
index 0000000..9c09c69
--- /dev/null
+++ b/node_modules/mout/src/date/strftime.js
@@ -0,0 +1,115 @@
+define(['../number/pad', '../string/lpad', './i18n_', './dayOfTheYear', './timezoneOffset', './timezoneAbbr', './weekOfTheYear'], function (pad, lpad, i18n, dayOfTheYear, timezoneOffset, timezoneAbbr, weekOfTheYear) {
+
+    var _combinations = {
+        'D': '%m/%d/%y',
+        'F': '%Y-%m-%d',
+        'r': '%I:%M:%S %p',
+        'R': '%H:%M',
+        'T': '%H:%M:%S',
+        'x': 'locale',
+        'X': 'locale',
+        'c': 'locale'
+    };
+
+
+    /**
+     * format date based on strftime format
+     */
+    function strftime(date, format, localeData){
+        localeData = localeData  || i18n;
+        var reToken = /%([a-z%])/gi;
+
+        function makeIterator(fn) {
+            return function(match, token){
+                return fn(date, token, localeData);
+            };
+        }
+
+        return format
+            .replace(reToken, makeIterator(expandCombinations))
+            .replace(reToken, makeIterator(convertToken));
+    }
+
+
+    function expandCombinations(date, token, l10n){
+        if (token in _combinations) {
+            var expanded = _combinations[token];
+            return expanded === 'locale'? l10n[token] : expanded;
+        } else {
+            return '%'+ token;
+        }
+    }
+
+
+    function convertToken(date, token, l10n){
+        switch (token){
+            case 'a':
+                return l10n.days_abbr[date.getDay()];
+            case 'A':
+                return l10n.days[date.getDay()];
+            case 'h':
+            case 'b':
+                return l10n.months_abbr[date.getMonth()];
+            case 'B':
+                return l10n.months[date.getMonth()];
+            case 'C':
+                return pad(Math.floor(date.getFullYear() / 100), 2);
+            case 'd':
+                return pad(date.getDate(), 2);
+            case 'e':
+                return pad(date.getDate(), 2, ' ');
+            case 'H':
+                return pad(date.getHours(), 2);
+            case 'I':
+                return pad(date.getHours() % 12, 2);
+            case 'j':
+                return pad(dayOfTheYear(date), 3);
+            case 'l':
+                return lpad(date.getHours() % 12, 2);
+            case 'L':
+                return pad(date.getMilliseconds(), 3);
+            case 'm':
+                return pad(date.getMonth() + 1, 2);
+            case 'M':
+                return pad(date.getMinutes(), 2);
+            case 'n':
+                return '\n';
+            case 'p':
+                return date.getHours() >= 12? l10n.pm : l10n.am;
+            case 'P':
+                return convertToken(date, 'p', l10n).toLowerCase();
+            case 's':
+                return date.getTime() / 1000;
+            case 'S':
+                return pad(date.getSeconds(), 2);
+            case 't':
+                return '\t';
+            case 'u':
+                var day = date.getDay();
+                return day === 0? 7 : day;
+            case 'U':
+                return pad(weekOfTheYear(date), 2);
+            case 'w':
+                return date.getDay();
+            case 'W':
+                return pad(weekOfTheYear(date, 1), 2);
+            case 'y':
+                return pad(date.getFullYear() % 100, 2);
+            case 'Y':
+                return pad(date.getFullYear(), 4);
+            case 'z':
+                return timezoneOffset(date);
+            case 'Z':
+                return timezoneAbbr(date);
+            case '%':
+                return '%';
+            default:
+                // keep unrecognized tokens
+                return '%'+ token;
+        }
+    }
+
+
+    return strftime;
+
+});
diff --git a/node_modules/mout/src/date/timezoneAbbr.js b/node_modules/mout/src/date/timezoneAbbr.js
new file mode 100644
index 0000000..225a685
--- /dev/null
+++ b/node_modules/mout/src/date/timezoneAbbr.js
@@ -0,0 +1,17 @@
+define(['./timezoneOffset'], function(timezoneOffset) {
+
+    /**
+     * Abbreviated time zone name or similar information.
+     */
+    function timezoneAbbr(date){
+        // Date.toString gives different results depending on the
+        // browser/system so we fallback to timezone offset
+        // chrome: 'Mon Apr 08 2013 09:02:04 GMT-0300 (BRT)'
+        // IE: 'Mon Apr 8 09:02:04 UTC-0300 2013'
+        var tz = /\(([A-Z]{3,4})\)/.exec(date.toString());
+        return tz? tz[1] : timezoneOffset(date);
+    }
+
+    return timezoneAbbr;
+
+});
diff --git a/node_modules/mout/src/date/timezoneOffset.js b/node_modules/mout/src/date/timezoneOffset.js
new file mode 100644
index 0000000..ca06705
--- /dev/null
+++ b/node_modules/mout/src/date/timezoneOffset.js
@@ -0,0 +1,16 @@
+define(['../number/pad'], function (pad) {
+
+    /**
+     * time zone as hour and minute offset from UTC (e.g. +0900)
+     */
+    function timezoneOffset(date){
+        var offset = date.getTimezoneOffset();
+        var abs = Math.abs(offset);
+        var h = pad(Math.floor(abs / 60), 2);
+        var m = pad(abs % 60, 2);
+        return (offset > 0? '-' : '+') + h + m;
+    }
+
+    return timezoneOffset;
+
+});
diff --git a/node_modules/mout/src/date/totalDaysInMonth.js b/node_modules/mout/src/date/totalDaysInMonth.js
new file mode 100644
index 0000000..9aaafd7
--- /dev/null
+++ b/node_modules/mout/src/date/totalDaysInMonth.js
@@ -0,0 +1,22 @@
+define(['../lang/isDate', './isLeapYear'], function (isDate, isLeapYear) {
+
+    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+
+    /**
+     * returns the total amount of days in the month (considering leap years)
+     */
+    function totalDaysInMonth(fullYear, monthIndex){
+        if (isDate(fullYear)) {
+            monthIndex = fullYear.getMonth();
+        }
+
+        if (monthIndex === 1 && isLeapYear(fullYear)) {
+            return 29;
+        } else {
+            return DAYS_IN_MONTH[monthIndex];
+        }
+    }
+
+    return totalDaysInMonth;
+
+});
diff --git a/node_modules/mout/src/date/totalDaysInYear.js b/node_modules/mout/src/date/totalDaysInYear.js
new file mode 100644
index 0000000..e9036b4
--- /dev/null
+++ b/node_modules/mout/src/date/totalDaysInYear.js
@@ -0,0 +1,13 @@
+define(['./isLeapYear'], function (isLeapYear) {
+
+    /**
+     * return the amount of days in the year following the gregorian calendar
+     * and leap years
+     */
+    function totalDaysInYear(fullYear){
+        return isLeapYear(fullYear)? 366 : 365;
+    }
+
+    return totalDaysInYear;
+
+});
diff --git a/node_modules/mout/src/date/weekOfTheYear.js b/node_modules/mout/src/date/weekOfTheYear.js
new file mode 100644
index 0000000..8dabc45
--- /dev/null
+++ b/node_modules/mout/src/date/weekOfTheYear.js
@@ -0,0 +1,16 @@
+define(['./dayOfTheYear'], function (dayOfTheYear) {
+
+    /**
+     * Return the week of the year based on given firstDayOfWeek
+     */
+    function weekOfTheYear(date, firstDayOfWeek){
+        firstDayOfWeek = firstDayOfWeek == null? 0 : firstDayOfWeek;
+        var doy = dayOfTheYear(date);
+        var dow = (7 + date.getDay() - firstDayOfWeek) % 7;
+        var relativeWeekDay = 6 - firstDayOfWeek - dow;
+        return Math.floor((doy + relativeWeekDay) / 7);
+    }
+
+    return weekOfTheYear;
+
+});
diff --git a/node_modules/mout/src/function.js b/node_modules/mout/src/function.js
new file mode 100644
index 0000000..077a924
--- /dev/null
+++ b/node_modules/mout/src/function.js
@@ -0,0 +1,23 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'awaitDelay' : require('./function/awaitDelay'),
+    'bind' : require('./function/bind'),
+    'compose' : require('./function/compose'),
+    'constant' : require('./function/constant'),
+    'debounce' : require('./function/debounce'),
+    'func' : require('./function/func'),
+    'identity' : require('./function/identity'),
+    'makeIterator_' : require('./function/makeIterator_'),
+    'partial' : require('./function/partial'),
+    'prop' : require('./function/prop'),
+    'series' : require('./function/series'),
+    'throttle' : require('./function/throttle'),
+    'timeout' : require('./function/timeout'),
+    'times' : require('./function/times'),
+    'wrap' : require('./function/wrap')
+};
+
+});
diff --git a/node_modules/mout/src/function/awaitDelay.js b/node_modules/mout/src/function/awaitDelay.js
new file mode 100644
index 0000000..88bea6e
--- /dev/null
+++ b/node_modules/mout/src/function/awaitDelay.js
@@ -0,0 +1,20 @@
+define(['../time/now', './timeout', '../array/append'], function (now, timeout, append) {
+
+    /**
+     * Ensure a minimum delay for callbacks
+     */
+    function awaitDelay( callback, delay ){
+        var baseTime = now() + delay;
+        return function() {
+            // ensure all browsers will execute it asynchronously (avoid hard
+            // to catch errors) not using "0" because of old browsers and also
+            // since new browsers increase the value to be at least "4"
+            // http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout
+            var ms = Math.max(baseTime - now(), 4);
+            return timeout.apply(this, append([callback, ms, this], arguments));
+        };
+    }
+
+    return awaitDelay;
+
+});
diff --git a/node_modules/mout/src/function/bind.js b/node_modules/mout/src/function/bind.js
new file mode 100644
index 0000000..787c298
--- /dev/null
+++ b/node_modules/mout/src/function/bind.js
@@ -0,0 +1,19 @@
+define(['../array/slice'], function(slice){
+
+    /**
+     * Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
+     * @param {Function} fn  Function.
+     * @param {object} context   Execution context.
+     * @param {rest} args    Arguments (0...n arguments).
+     * @return {Function} Wrapped Function.
+     */
+    function bind(fn, context, args){
+        var argsArr = slice(arguments, 2); //curried args
+        return function(){
+            return fn.apply(context, argsArr.concat(slice(arguments)));
+        };
+    }
+
+    return bind;
+});
+
diff --git a/node_modules/mout/src/function/compose.js b/node_modules/mout/src/function/compose.js
new file mode 100644
index 0000000..d8b228f
--- /dev/null
+++ b/node_modules/mout/src/function/compose.js
@@ -0,0 +1,23 @@
+define(function () {
+
+    /**
+     * Returns a function that composes multiple functions, passing results to
+     * each other.
+     */
+    function compose() {
+        var fns = arguments;
+        return function(arg){
+            // only cares about the first argument since the chain can only
+            // deal with a single return value anyway. It should start from
+            // the last fn.
+            var n = fns.length;
+            while (n--) {
+                arg = fns[n].call(this, arg);
+            }
+            return arg;
+         };
+     }
+
+     return compose;
+
+});
diff --git a/node_modules/mout/src/function/constant.js b/node_modules/mout/src/function/constant.js
new file mode 100644
index 0000000..addd412
--- /dev/null
+++ b/node_modules/mout/src/function/constant.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a new function that will return the value
+     */
+    function constant(value){
+        return function() {
+            return value;
+        };
+    }
+
+    return constant;
+
+});
diff --git a/node_modules/mout/src/function/debounce.js b/node_modules/mout/src/function/debounce.js
new file mode 100644
index 0000000..8c5fd47
--- /dev/null
+++ b/node_modules/mout/src/function/debounce.js
@@ -0,0 +1,32 @@
+define(function () {
+
+    /**
+     * Debounce callback execution
+     */
+    function debounce(fn, threshold, isAsap){
+        var timeout, result;
+        function debounced(){
+            var args = arguments, context = this;
+            function delayed(){
+                if (! isAsap) {
+                    result = fn.apply(context, args);
+                }
+                timeout = null;
+            }
+            if (timeout) {
+                clearTimeout(timeout);
+            } else if (isAsap) {
+                result = fn.apply(context, args);
+            }
+            timeout = setTimeout(delayed, threshold);
+            return result;
+        }
+        debounced.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return debounced;
+    }
+
+    return debounce;
+
+});
diff --git a/node_modules/mout/src/function/func.js b/node_modules/mout/src/function/func.js
new file mode 100644
index 0000000..b920e00
--- /dev/null
+++ b/node_modules/mout/src/function/func.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a function that call a method on the passed object
+     */
+    function func(name){
+        return function(obj){
+            return obj[name]();
+        };
+    }
+
+    return func;
+
+});
diff --git a/node_modules/mout/src/function/identity.js b/node_modules/mout/src/function/identity.js
new file mode 100644
index 0000000..59f7182
--- /dev/null
+++ b/node_modules/mout/src/function/identity.js
@@ -0,0 +1,12 @@
+define(function () {
+
+    /**
+     * Returns the first argument provided to it.
+     */
+    function identity(val){
+        return val;
+    }
+
+    return identity;
+
+});
diff --git a/node_modules/mout/src/function/makeIterator_.js b/node_modules/mout/src/function/makeIterator_.js
new file mode 100644
index 0000000..771ea19
--- /dev/null
+++ b/node_modules/mout/src/function/makeIterator_.js
@@ -0,0 +1,32 @@
+define(['./identity', './prop', '../object/deepMatches'], function(identity, prop, deepMatches) {
+
+    /**
+     * Converts argument into a valid iterator.
+     * Used internally on most array/object/collection methods that receives a
+     * callback/iterator providing a shortcut syntax.
+     */
+    function makeIterator(src, thisObj){
+        if (src == null) {
+            return identity;
+        }
+        switch(typeof src) {
+            case 'function':
+                // function is the first to improve perf (most common case)
+                // also avoid using `Function#call` if not needed, which boosts
+                // perf a lot in some cases
+                return (typeof thisObj !== 'undefined')? function(val, i, arr){
+                    return src.call(thisObj, val, i, arr);
+                } : src;
+            case 'object':
+                return function(val){
+                    return deepMatches(val, src);
+                };
+            case 'string':
+            case 'number':
+                return prop(src);
+        }
+    }
+
+    return makeIterator;
+
+});
diff --git a/node_modules/mout/src/function/partial.js b/node_modules/mout/src/function/partial.js
new file mode 100644
index 0000000..7a6a494
--- /dev/null
+++ b/node_modules/mout/src/function/partial.js
@@ -0,0 +1,23 @@
+define(['../array/slice'], function (slice) {
+
+    /**
+     * Creates a partially applied function.
+     */
+    function partial(f) {
+        var as = slice(arguments, 1);
+        return function() {
+            var args = as.concat(slice(arguments));
+            for (var i = args.length; i--;) {
+                if (args[i] === partial._) {
+                    args[i] = args.splice(-1)[0];
+                }
+            }
+            return f.apply(this, args);
+        };
+    }
+
+    partial._ = {};
+
+    return partial;
+
+});
diff --git a/node_modules/mout/src/function/prop.js b/node_modules/mout/src/function/prop.js
new file mode 100644
index 0000000..c9df78c
--- /dev/null
+++ b/node_modules/mout/src/function/prop.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a function that gets a property of the passed object
+     */
+    function prop(name){
+        return function(obj){
+            return obj[name];
+        };
+    }
+
+    return prop;
+
+});
diff --git a/node_modules/mout/src/function/series.js b/node_modules/mout/src/function/series.js
new file mode 100644
index 0000000..c8856a2
--- /dev/null
+++ b/node_modules/mout/src/function/series.js
@@ -0,0 +1,22 @@
+define(function () {
+
+    /**
+     * Returns a function that will execute a list of functions in sequence
+     * passing the same arguments to each one. (useful for batch processing
+     * items during a forEach loop)
+     */
+    function series(){
+        var fns = arguments;
+        return function(){
+            var i = 0,
+                n = fns.length;
+            while (i < n) {
+                fns[i].apply(this, arguments);
+                i += 1;
+            }
+        };
+    }
+
+    return series;
+
+});
diff --git a/node_modules/mout/src/function/throttle.js b/node_modules/mout/src/function/throttle.js
new file mode 100644
index 0000000..9fb47b2
--- /dev/null
+++ b/node_modules/mout/src/function/throttle.js
@@ -0,0 +1,33 @@
+define(['../time/now'], function (now) {
+
+    /**
+     */
+    function throttle(fn, delay){
+        var context, timeout, result, args,
+            diff, prevCall = 0;
+        function delayed(){
+            prevCall = now();
+            timeout = null;
+            result = fn.apply(context, args);
+        }
+        function throttled(){
+            context = this;
+            args = arguments;
+            diff = delay - (now() - prevCall);
+            if (diff <= 0) {
+                clearTimeout(timeout);
+                delayed();
+            } else if (! timeout) {
+                timeout = setTimeout(delayed, diff);
+            }
+            return result;
+        }
+        throttled.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return throttled;
+    }
+
+    return throttle;
+
+});
diff --git a/node_modules/mout/src/function/timeout.js b/node_modules/mout/src/function/timeout.js
new file mode 100644
index 0000000..61b832c
--- /dev/null
+++ b/node_modules/mout/src/function/timeout.js
@@ -0,0 +1,17 @@
+define(['../array/slice'], function (slice) {
+
+    /**
+     * Delays the call of a function within a given context.
+     */
+    function timeout(fn, millis, context){
+
+        var args = slice(arguments, 3);
+
+        return setTimeout(function() {
+            fn.apply(context, args);
+        }, millis);
+    }
+
+    return timeout;
+
+});
diff --git a/node_modules/mout/src/function/times.js b/node_modules/mout/src/function/times.js
new file mode 100644
index 0000000..ec10cae
--- /dev/null
+++ b/node_modules/mout/src/function/times.js
@@ -0,0 +1,17 @@
+define(function () {
+
+    /**
+     * Iterates over a callback a set amount of times
+     */
+    function times(n, callback, thisObj){
+        var i = -1;
+        while (++i < n) {
+            if ( callback.call(thisObj, i) === false ) {
+                break;
+            }
+        }
+    }
+
+    return times;
+
+});
diff --git a/node_modules/mout/src/function/wrap.js b/node_modules/mout/src/function/wrap.js
new file mode 100644
index 0000000..b2f54dd
--- /dev/null
+++ b/node_modules/mout/src/function/wrap.js
@@ -0,0 +1,14 @@
+define(['./partial'], function (partial) {
+
+    /**
+     * Returns the first function passed as an argument to the second,
+     * allowing you to adjust arguments, run code before and after, and
+     * conditionally execute the original function.
+     */
+    function wrap(fn, wrapper){
+        return partial(wrapper, fn);
+    }
+
+    return wrap;
+
+});
diff --git a/node_modules/mout/src/index.js b/node_modules/mout/src/index.js
new file mode 100644
index 0000000..40cd88e
--- /dev/null
+++ b/node_modules/mout/src/index.js
@@ -0,0 +1,25 @@
+/**@license
+ * mout v0.11.1 | http://moutjs.com | MIT license
+ */
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'VERSION' : '0.11.1',
+    'array' : require('./array'),
+    'collection' : require('./collection'),
+    'date' : require('./date'),
+    'function' : require('./function'),
+    'lang' : require('./lang'),
+    'math' : require('./math'),
+    'number' : require('./number'),
+    'object' : require('./object'),
+    'queryString' : require('./queryString'),
+    'random' : require('./random'),
+    'string' : require('./string'),
+    'time' : require('./time'),
+    'fn' : require('./function')
+};
+
+});
diff --git a/node_modules/mout/src/lang.js b/node_modules/mout/src/lang.js
new file mode 100644
index 0000000..df713a5
--- /dev/null
+++ b/node_modules/mout/src/lang.js
@@ -0,0 +1,40 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'GLOBAL' : require('./lang/GLOBAL'),
+    'clone' : require('./lang/clone'),
+    'createObject' : require('./lang/createObject'),
+    'ctorApply' : require('./lang/ctorApply'),
+    'deepClone' : require('./lang/deepClone'),
+    'deepEquals' : require('./lang/deepEquals'),
+    'defaults' : require('./lang/defaults'),
+    'inheritPrototype' : require('./lang/inheritPrototype'),
+    'is' : require('./lang/is'),
+    'isArguments' : require('./lang/isArguments'),
+    'isArray' : require('./lang/isArray'),
+    'isBoolean' : require('./lang/isBoolean'),
+    'isDate' : require('./lang/isDate'),
+    'isEmpty' : require('./lang/isEmpty'),
+    'isFinite' : require('./lang/isFinite'),
+    'isFunction' : require('./lang/isFunction'),
+    'isInteger' : require('./lang/isInteger'),
+    'isKind' : require('./lang/isKind'),
+    'isNaN' : require('./lang/isNaN'),
+    'isNull' : require('./lang/isNull'),
+    'isNumber' : require('./lang/isNumber'),
+    'isObject' : require('./lang/isObject'),
+    'isPlainObject' : require('./lang/isPlainObject'),
+    'isPrimitive' : require('./lang/isPrimitive'),
+    'isRegExp' : require('./lang/isRegExp'),
+    'isString' : require('./lang/isString'),
+    'isUndefined' : require('./lang/isUndefined'),
+    'isnt' : require('./lang/isnt'),
+    'kindOf' : require('./lang/kindOf'),
+    'toArray' : require('./lang/toArray'),
+    'toNumber' : require('./lang/toNumber'),
+    'toString' : require('./lang/toString')
+};
+
+});
diff --git a/node_modules/mout/src/lang/GLOBAL.js b/node_modules/mout/src/lang/GLOBAL.js
new file mode 100644
index 0000000..dcd4a42
--- /dev/null
+++ b/node_modules/mout/src/lang/GLOBAL.js
@@ -0,0 +1,7 @@
+define(function () {
+
+    // Reference to the global context (works on ES3 and ES5-strict mode)
+    //jshint -W061, -W064
+    return Function('return this')();
+
+});
diff --git a/node_modules/mout/src/lang/clone.js b/node_modules/mout/src/lang/clone.js
new file mode 100644
index 0000000..d3429fd
--- /dev/null
+++ b/node_modules/mout/src/lang/clone.js
@@ -0,0 +1,47 @@
+define(['./kindOf', './isPlainObject', '../object/mixIn'], function (kindOf, isPlainObject, mixIn) {
+
+    /**
+     * Clone native types.
+     */
+    function clone(val){
+        switch (kindOf(val)) {
+            case 'Object':
+                return cloneObject(val);
+            case 'Array':
+                return cloneArray(val);
+            case 'RegExp':
+                return cloneRegExp(val);
+            case 'Date':
+                return cloneDate(val);
+            default:
+                return val;
+        }
+    }
+
+    function cloneObject(source) {
+        if (isPlainObject(source)) {
+            return mixIn({}, source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneRegExp(r) {
+        var flags = '';
+        flags += r.multiline ? 'm' : '';
+        flags += r.global ? 'g' : '';
+        flags += r.ignoreCase ? 'i' : '';
+        return new RegExp(r.source, flags);
+    }
+
+    function cloneDate(date) {
+        return new Date(+date);
+    }
+
+    function cloneArray(arr) {
+        return arr.slice();
+    }
+
+    return clone;
+
+});
diff --git a/node_modules/mout/src/lang/createObject.js b/node_modules/mout/src/lang/createObject.js
new file mode 100644
index 0000000..f766150
--- /dev/null
+++ b/node_modules/mout/src/lang/createObject.js
@@ -0,0 +1,18 @@
+define(['../object/mixIn'], function(mixIn){
+
+    /**
+     * Create Object using prototypal inheritance and setting custom properties.
+     * - Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.
+     * @param {object} parent    Parent Object.
+     * @param {object} [props] Object properties.
+     * @return {object} Created object.
+     */
+    function createObject(parent, props){
+        function F(){}
+        F.prototype = parent;
+        return mixIn(new F(), props);
+
+    }
+    return createObject;
+});
+
diff --git a/node_modules/mout/src/lang/ctorApply.js b/node_modules/mout/src/lang/ctorApply.js
new file mode 100644
index 0000000..a9ac1c5
--- /dev/null
+++ b/node_modules/mout/src/lang/ctorApply.js
@@ -0,0 +1,17 @@
+define(function () {
+
+    function F(){}
+
+    /**
+     * Do fn.apply on a constructor.
+     */
+    function ctorApply(ctor, args) {
+        F.prototype = ctor.prototype;
+        var instance = new F();
+        ctor.apply(instance, args);
+        return instance;
+    }
+
+    return ctorApply;
+
+});
diff --git a/node_modules/mout/src/lang/deepClone.js b/node_modules/mout/src/lang/deepClone.js
new file mode 100644
index 0000000..d45c10a
--- /dev/null
+++ b/node_modules/mout/src/lang/deepClone.js
@@ -0,0 +1,45 @@
+define(['./clone', '../object/forOwn', './kindOf', './isPlainObject'], function (clone, forOwn, kindOf, isPlainObject) {
+
+    /**
+     * Recursively clone native types.
+     */
+    function deepClone(val, instanceClone) {
+        switch ( kindOf(val) ) {
+            case 'Object':
+                return cloneObject(val, instanceClone);
+            case 'Array':
+                return cloneArray(val, instanceClone);
+            default:
+                return clone(val);
+        }
+    }
+
+    function cloneObject(source, instanceClone) {
+        if (isPlainObject(source)) {
+            var out = {};
+            forOwn(source, function(val, key) {
+                this[key] = deepClone(val, instanceClone);
+            }, out);
+            return out;
+        } else if (instanceClone) {
+            return instanceClone(source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneArray(arr, instanceClone) {
+        var out = [],
+            i = -1,
+            n = arr.length,
+            val;
+        while (++i < n) {
+            out[i] = deepClone(arr[i], instanceClone);
+        }
+        return out;
+    }
+
+    return deepClone;
+
+});
+
diff --git a/node_modules/mout/src/lang/deepEquals.js b/node_modules/mout/src/lang/deepEquals.js
new file mode 100644
index 0000000..f4eda1a
--- /dev/null
+++ b/node_modules/mout/src/lang/deepEquals.js
@@ -0,0 +1,26 @@
+define(['./is', './isObject', './isArray', '../object/equals', '../array/equals'], function (is, isObject, isArray, objEquals, arrEquals) {
+
+    /**
+     * Recursively checks for same properties and values.
+     */
+    function deepEquals(a, b, callback){
+        callback = callback || is;
+
+        var bothObjects = isObject(a) && isObject(b);
+        var bothArrays = !bothObjects && isArray(a) && isArray(b);
+
+        if (!bothObjects && !bothArrays) {
+            return callback(a, b);
+        }
+
+        function compare(a, b){
+            return deepEquals(a, b, callback);
+        }
+
+        var method = bothObjects ? objEquals : arrEquals;
+        return method(a, b, compare);
+    }
+
+    return deepEquals;
+
+});
diff --git a/node_modules/mout/src/lang/defaults.js b/node_modules/mout/src/lang/defaults.js
new file mode 100644
index 0000000..5156b1b
--- /dev/null
+++ b/node_modules/mout/src/lang/defaults.js
@@ -0,0 +1,16 @@
+define(['./toArray', '../array/find'], function (toArray, find) {
+
+    /**
+     * Return first non void argument
+     */
+    function defaults(var_args){
+        return find(toArray(arguments), nonVoid);
+    }
+
+    function nonVoid(val){
+        return val != null;
+    }
+
+    return defaults;
+
+});
diff --git a/node_modules/mout/src/lang/inheritPrototype.js b/node_modules/mout/src/lang/inheritPrototype.js
new file mode 100644
index 0000000..64c9178
--- /dev/null
+++ b/node_modules/mout/src/lang/inheritPrototype.js
@@ -0,0 +1,18 @@
+define(['./createObject'], function(createObject){
+
+    /**
+    * Inherit prototype from another Object.
+    * - inspired by Nicholas Zackas <http://nczonline.net> Solution
+    * @param {object} child Child object
+    * @param {object} parent    Parent Object
+    */
+    function inheritPrototype(child, parent){
+        var p = createObject(parent.prototype);
+        p.constructor = child;
+        child.prototype = p;
+        child.super_ = parent;
+        return p;
+    }
+
+    return inheritPrototype;
+});
diff --git a/node_modules/mout/src/lang/is.js b/node_modules/mout/src/lang/is.js
new file mode 100644
index 0000000..261a207
--- /dev/null
+++ b/node_modules/mout/src/lang/is.js
@@ -0,0 +1,23 @@
+define(function () {
+
+    /**
+     * Check if both arguments are egal.
+     */
+    function is(x, y){
+        // implementation borrowed from harmony:egal spec
+        if (x === y) {
+          // 0 === -0, but they are not identical
+          return x !== 0 || 1 / x === 1 / y;
+        }
+
+        // NaN !== NaN, but they are identical.
+        // NaNs are the only non-reflexive value, i.e., if x !== x,
+        // then x is a NaN.
+        // isNaN is broken: it converts its argument to number, so
+        // isNaN("foo") => true
+        return x !== x && y !== y;
+    }
+
+    return is;
+
+});
diff --git a/node_modules/mout/src/lang/isArguments.js b/node_modules/mout/src/lang/isArguments.js
new file mode 100644
index 0000000..f889ee8
--- /dev/null
+++ b/node_modules/mout/src/lang/isArguments.js
@@ -0,0 +1,15 @@
+define(['./isKind'], function (isKind) {
+
+    /**
+     */
+    var isArgs = isKind(arguments, 'Arguments')?
+            function(val){
+                return isKind(val, 'Arguments');
+            } :
+            function(val){
+                // Arguments is an Object on IE7
+                return !!(val && Object.prototype.hasOwnProperty.call(val, 'callee'));
+            };
+
+    return isArgs;
+});
diff --git a/node_modules/mout/src/lang/isArray.js b/node_modules/mout/src/lang/isArray.js
new file mode 100644
index 0000000..886e2aa
--- /dev/null
+++ b/node_modules/mout/src/lang/isArray.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    var isArray = Array.isArray || function (val) {
+        return isKind(val, 'Array');
+    };
+    return isArray;
+});
diff --git a/node_modules/mout/src/lang/isBoolean.js b/node_modules/mout/src/lang/isBoolean.js
new file mode 100644
index 0000000..1ca27a6
--- /dev/null
+++ b/node_modules/mout/src/lang/isBoolean.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isBoolean(val) {
+        return isKind(val, 'Boolean');
+    }
+    return isBoolean;
+});
diff --git a/node_modules/mout/src/lang/isDate.js b/node_modules/mout/src/lang/isDate.js
new file mode 100644
index 0000000..2708d67
--- /dev/null
+++ b/node_modules/mout/src/lang/isDate.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isDate(val) {
+        return isKind(val, 'Date');
+    }
+    return isDate;
+});
diff --git a/node_modules/mout/src/lang/isEmpty.js b/node_modules/mout/src/lang/isEmpty.js
new file mode 100644
index 0000000..8b67750
--- /dev/null
+++ b/node_modules/mout/src/lang/isEmpty.js
@@ -0,0 +1,23 @@
+define(['../object/forOwn', './isArray'], function (forOwn, isArray) {
+
+    function isEmpty(val){
+        if (val == null) {
+            // typeof null == 'object' so we check it first
+            return true;
+        } else if ( typeof val === 'string' || isArray(val) ) {
+            return !val.length;
+        } else if ( typeof val === 'object' ) {
+            var result = true;
+            forOwn(val, function(){
+                result = false;
+                return false; // break loop
+            });
+            return result;
+        } else {
+            return true;
+        }
+    }
+
+    return isEmpty;
+
+});
diff --git a/node_modules/mout/src/lang/isFinite.js b/node_modules/mout/src/lang/isFinite.js
new file mode 100644
index 0000000..05c29ac
--- /dev/null
+++ b/node_modules/mout/src/lang/isFinite.js
@@ -0,0 +1,19 @@
+define(['./isNumber', './GLOBAL'], function (isNumber, GLOBAL) {
+
+    /**
+     * Check if value is finite
+     */
+    function isFinite(val){
+        var is = false;
+        if (typeof val === 'string' && val !== '') {
+            is = GLOBAL.isFinite( parseFloat(val) );
+        } else if (isNumber(val)){
+            // need to use isNumber because of Number constructor
+            is = GLOBAL.isFinite( val );
+        }
+        return is;
+    }
+
+    return isFinite;
+
+});
diff --git a/node_modules/mout/src/lang/isFunction.js b/node_modules/mout/src/lang/isFunction.js
new file mode 100644
index 0000000..ff5df7f
--- /dev/null
+++ b/node_modules/mout/src/lang/isFunction.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isFunction(val) {
+        return isKind(val, 'Function');
+    }
+    return isFunction;
+});
diff --git a/node_modules/mout/src/lang/isInteger.js b/node_modules/mout/src/lang/isInteger.js
new file mode 100644
index 0000000..1931f51
--- /dev/null
+++ b/node_modules/mout/src/lang/isInteger.js
@@ -0,0 +1,12 @@
+define(['./isNumber'], function (isNumber) {
+
+    /**
+     * Check if value is an integer
+     */
+    function isInteger(val){
+        return isNumber(val) && (val % 1 === 0);
+    }
+
+    return isInteger;
+
+});
diff --git a/node_modules/mout/src/lang/isKind.js b/node_modules/mout/src/lang/isKind.js
new file mode 100644
index 0000000..6937a12
--- /dev/null
+++ b/node_modules/mout/src/lang/isKind.js
@@ -0,0 +1,9 @@
+define(['./kindOf'], function (kindOf) {
+    /**
+     * Check if value is from a specific "kind".
+     */
+    function isKind(val, kind){
+        return kindOf(val) === kind;
+    }
+    return isKind;
+});
diff --git a/node_modules/mout/src/lang/isNaN.js b/node_modules/mout/src/lang/isNaN.js
new file mode 100644
index 0000000..2219404
--- /dev/null
+++ b/node_modules/mout/src/lang/isNaN.js
@@ -0,0 +1,15 @@
+define(['./isNumber', '../number/isNaN'], function (isNumber, $isNaN) {
+
+    /**
+     * Check if value is NaN for realz
+     */
+    function isNaN(val){
+        // based on the fact that NaN !== NaN
+        // need to check if it's a number to avoid conflicts with host objects
+        // also need to coerce ToNumber to avoid edge case `new Number(NaN)`
+        return !isNumber(val) || $isNaN(Number(val));
+    }
+
+    return isNaN;
+
+});
diff --git a/node_modules/mout/src/lang/isNull.js b/node_modules/mout/src/lang/isNull.js
new file mode 100644
index 0000000..506e05e
--- /dev/null
+++ b/node_modules/mout/src/lang/isNull.js
@@ -0,0 +1,9 @@
+define(function () {
+    /**
+     */
+    function isNull(val){
+        return val === null;
+    }
+    return isNull;
+});
+
diff --git a/node_modules/mout/src/lang/isNumber.js b/node_modules/mout/src/lang/isNumber.js
new file mode 100644
index 0000000..9a832c5
--- /dev/null
+++ b/node_modules/mout/src/lang/isNumber.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isNumber(val) {
+        return isKind(val, 'Number');
+    }
+    return isNumber;
+});
diff --git a/node_modules/mout/src/lang/isObject.js b/node_modules/mout/src/lang/isObject.js
new file mode 100644
index 0000000..0befb06
--- /dev/null
+++ b/node_modules/mout/src/lang/isObject.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isObject(val) {
+        return isKind(val, 'Object');
+    }
+    return isObject;
+});
diff --git a/node_modules/mout/src/lang/isPlainObject.js b/node_modules/mout/src/lang/isPlainObject.js
new file mode 100644
index 0000000..406a279
--- /dev/null
+++ b/node_modules/mout/src/lang/isPlainObject.js
@@ -0,0 +1,13 @@
+define(function () {
+
+    /**
+     * Checks if the value is created by the `Object` constructor.
+     */
+    function isPlainObject(value) {
+        return (!!value && typeof value === 'object' &&
+            value.constructor === Object);
+    }
+
+    return isPlainObject;
+
+});
diff --git a/node_modules/mout/src/lang/isPrimitive.js b/node_modules/mout/src/lang/isPrimitive.js
new file mode 100644
index 0000000..c4035ea
--- /dev/null
+++ b/node_modules/mout/src/lang/isPrimitive.js
@@ -0,0 +1,21 @@
+define(function() {
+
+    /**
+     * Checks if the object is a primitive
+     */
+    function isPrimitive(value) {
+        // Using switch fallthrough because it's simple to read and is
+        // generally fast: http://jsperf.com/testing-value-is-primitive/5
+        switch (typeof value) {
+            case "string":
+            case "number":
+            case "boolean":
+                return true;
+        }
+
+        return value == null;
+    }
+
+    return isPrimitive;
+
+});
diff --git a/node_modules/mout/src/lang/isRegExp.js b/node_modules/mout/src/lang/isRegExp.js
new file mode 100644
index 0000000..d78a03d
--- /dev/null
+++ b/node_modules/mout/src/lang/isRegExp.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isRegExp(val) {
+        return isKind(val, 'RegExp');
+    }
+    return isRegExp;
+});
diff --git a/node_modules/mout/src/lang/isString.js b/node_modules/mout/src/lang/isString.js
new file mode 100644
index 0000000..8a42fe0
--- /dev/null
+++ b/node_modules/mout/src/lang/isString.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isString(val) {
+        return isKind(val, 'String');
+    }
+    return isString;
+});
diff --git a/node_modules/mout/src/lang/isUndefined.js b/node_modules/mout/src/lang/isUndefined.js
new file mode 100644
index 0000000..c57b28e
--- /dev/null
+++ b/node_modules/mout/src/lang/isUndefined.js
@@ -0,0 +1,10 @@
+define(function () {
+    var UNDEF;
+
+    /**
+     */
+    function isUndef(val){
+        return val === UNDEF;
+    }
+    return isUndef;
+});
diff --git a/node_modules/mout/src/lang/isnt.js b/node_modules/mout/src/lang/isnt.js
new file mode 100644
index 0000000..d433622
--- /dev/null
+++ b/node_modules/mout/src/lang/isnt.js
@@ -0,0 +1,12 @@
+define(['./is'], function (is) {
+
+    /**
+     * Check if both values are not identical/egal
+     */
+    function isnt(x, y){
+        return !is(x, y);
+    }
+
+    return isnt;
+
+});
diff --git a/node_modules/mout/src/lang/kindOf.js b/node_modules/mout/src/lang/kindOf.js
new file mode 100644
index 0000000..97d21d1
--- /dev/null
+++ b/node_modules/mout/src/lang/kindOf.js
@@ -0,0 +1,20 @@
+define(function () {
+
+    var _rKind = /^\[object (.*)\]$/,
+        _toString = Object.prototype.toString,
+        UNDEF;
+
+    /**
+     * Gets the "kind" of value. (e.g. "String", "Number", etc)
+     */
+    function kindOf(val) {
+        if (val === null) {
+            return 'Null';
+        } else if (val === UNDEF) {
+            return 'Undefined';
+        } else {
+            return _rKind.exec( _toString.call(val) )[1];
+        }
+    }
+    return kindOf;
+});
diff --git a/node_modules/mout/src/lang/toArray.js b/node_modules/mout/src/lang/toArray.js
new file mode 100644
index 0000000..ad04d07
--- /dev/null
+++ b/node_modules/mout/src/lang/toArray.js
@@ -0,0 +1,29 @@
+define(['./kindOf', './GLOBAL'], function (kindOf, GLOBAL) {
+
+    /**
+     * Convert array-like object into array
+     */
+    function toArray(val){
+        var ret = [],
+            kind = kindOf(val),
+            n;
+
+        if (val != null) {
+            if ( val.length == null || kind === 'String' || kind === 'Function' || kind === 'RegExp' || val === GLOBAL ) {
+                //string, regexp, function have .length but user probably just want
+                //to wrap value into an array..
+                ret[ret.length] = val;
+            } else {
+                //window returns true on isObject in IE7 and may have length
+                //property. `typeof NodeList` returns `function` on Safari so
+                //we can't use it (#58)
+                n = val.length;
+                while (n--) {
+                    ret[n] = val[n];
+                }
+            }
+        }
+        return ret;
+    }
+    return toArray;
+});
diff --git a/node_modules/mout/src/lang/toNumber.js b/node_modules/mout/src/lang/toNumber.js
new file mode 100644
index 0000000..3976738
--- /dev/null
+++ b/node_modules/mout/src/lang/toNumber.js
@@ -0,0 +1,20 @@
+define(['./isArray'], function (isArray) {
+
+    /**
+     * covert value into number if numeric
+     */
+    function toNumber(val){
+        // numberic values should come first because of -0
+        if (typeof val === 'number') return val;
+        // we want all falsy values (besides -0) to return zero to avoid
+        // headaches
+        if (!val) return 0;
+        if (typeof val === 'string') return parseFloat(val);
+        // arrays are edge cases. `Number([4]) === 4`
+        if (isArray(val)) return NaN;
+        return Number(val);
+    }
+
+    return toNumber;
+
+});
diff --git a/node_modules/mout/src/lang/toString.js b/node_modules/mout/src/lang/toString.js
new file mode 100644
index 0000000..c28b89a
--- /dev/null
+++ b/node_modules/mout/src/lang/toString.js
@@ -0,0 +1,13 @@
+define(function () {
+
+    /**
+     * Typecast a value to a String, using an empty string value for null or
+     * undefined.
+     */
+    function toString(val){
+        return val == null ? '' : val.toString();
+    }
+
+    return toString;
+
+});
diff --git a/node_modules/mout/src/math.js b/node_modules/mout/src/math.js
new file mode 100644
index 0000000..e2ba870
--- /dev/null
+++ b/node_modules/mout/src/math.js
@@ -0,0 +1,19 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'ceil' : require('./math/ceil'),
+    'clamp' : require('./math/clamp'),
+    'countSteps' : require('./math/countSteps'),
+    'floor' : require('./math/floor'),
+    'inRange' : require('./math/inRange'),
+    'isNear' : require('./math/isNear'),
+    'lerp' : require('./math/lerp'),
+    'loop' : require('./math/loop'),
+    'map' : require('./math/map'),
+    'norm' : require('./math/norm'),
+    'round' : require('./math/round')
+};
+
+});
diff --git a/node_modules/mout/src/math/ceil.js b/node_modules/mout/src/math/ceil.js
new file mode 100644
index 0000000..d73b058
--- /dev/null
+++ b/node_modules/mout/src/math/ceil.js
@@ -0,0 +1,11 @@
+define(function(){
+    /**
+     * Round value up with a custom radix.
+     */
+    function ceil(val, step){
+        step = Math.abs(step || 1);
+        return Math.ceil(val / step) * step;
+    }
+
+    return ceil;
+});
diff --git a/node_modules/mout/src/math/clamp.js b/node_modules/mout/src/math/clamp.js
new file mode 100644
index 0000000..fb5a148
--- /dev/null
+++ b/node_modules/mout/src/math/clamp.js
@@ -0,0 +1,9 @@
+define(function(){
+    /**
+     * Clamps value inside range.
+     */
+    function clamp(val, min, max){
+        return val < min? min : (val > max? max : val);
+    }
+    return clamp;
+});
diff --git a/node_modules/mout/src/math/countSteps.js b/node_modules/mout/src/math/countSteps.js
new file mode 100644
index 0000000..0ecb32f
--- /dev/null
+++ b/node_modules/mout/src/math/countSteps.js
@@ -0,0 +1,16 @@
+define(function(){
+    /**
+    * Count number of full steps.
+    */
+    function countSteps(val, step, overflow){
+        val = Math.floor(val / step);
+
+        if (overflow) {
+            return val % overflow;
+        }
+
+        return val;
+    }
+
+    return countSteps;
+});
diff --git a/node_modules/mout/src/math/floor.js b/node_modules/mout/src/math/floor.js
new file mode 100644
index 0000000..8a4456b
--- /dev/null
+++ b/node_modules/mout/src/math/floor.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+    * Floor value to full steps.
+    */
+    function floor(val, step){
+        step = Math.abs(step || 1);
+        return Math.floor(val / step) * step;
+    }
+    return floor;
+});
diff --git a/node_modules/mout/src/math/inRange.js b/node_modules/mout/src/math/inRange.js
new file mode 100644
index 0000000..0c89053
--- /dev/null
+++ b/node_modules/mout/src/math/inRange.js
@@ -0,0 +1,11 @@
+define(function(){
+    /**
+    * Checks if value is inside the range.
+    */
+    function inRange(val, min, max, threshold){
+        threshold = threshold || 0;
+        return (val + threshold >= min && val - threshold <= max);
+    }
+
+    return inRange;
+});
diff --git a/node_modules/mout/src/math/isNear.js b/node_modules/mout/src/math/isNear.js
new file mode 100644
index 0000000..b308a0b
--- /dev/null
+++ b/node_modules/mout/src/math/isNear.js
@@ -0,0 +1,9 @@
+define(function(){
+    /**
+    * Check if value is close to target.
+    */
+    function isNear(val, target, threshold){
+        return (Math.abs(val - target) <= threshold);
+    }
+    return isNear;
+});
diff --git a/node_modules/mout/src/math/lerp.js b/node_modules/mout/src/math/lerp.js
new file mode 100644
index 0000000..26b99d0
--- /dev/null
+++ b/node_modules/mout/src/math/lerp.js
@@ -0,0 +1,11 @@
+define(function(){
+    /**
+    * Linear interpolation.
+    * IMPORTANT:will return `Infinity` if numbers overflow Number.MAX_VALUE
+    */
+    function lerp(ratio, start, end){
+        return start + (end - start) * ratio;
+    }
+
+    return lerp;
+});
diff --git a/node_modules/mout/src/math/loop.js b/node_modules/mout/src/math/loop.js
new file mode 100644
index 0000000..c735ecf
--- /dev/null
+++ b/node_modules/mout/src/math/loop.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+    * Loops value inside range.
+    */
+    function loop(val, min, max){
+        return val < min? max : (val > max? min : val);
+    }
+
+    return loop;
+});
diff --git a/node_modules/mout/src/math/map.js b/node_modules/mout/src/math/map.js
new file mode 100644
index 0000000..bf7dc5d
--- /dev/null
+++ b/node_modules/mout/src/math/map.js
@@ -0,0 +1,10 @@
+define(['./lerp', './norm'], function(lerp, norm){
+    /**
+    * Maps a number from one scale to another.
+    * @example map(3, 0, 4, -1, 1) -> 0.5
+    */
+    function map(val, min1, max1, min2, max2){
+        return lerp( norm(val, min1, max1), min2, max2 );
+    }
+    return map;
+});
diff --git a/node_modules/mout/src/math/norm.js b/node_modules/mout/src/math/norm.js
new file mode 100644
index 0000000..724d4f5
--- /dev/null
+++ b/node_modules/mout/src/math/norm.js
@@ -0,0 +1,13 @@
+define(function(){
+    /**
+    * Gets normalized ratio of value inside range.
+    */
+    function norm(val, min, max){
+        if (val < min || val > max) {
+            throw new RangeError('value (' + val + ') must be between ' + min + ' and ' + max);
+        }
+
+        return val === max ? 1 : (val - min) / (max - min);
+    }
+    return norm;
+});
diff --git a/node_modules/mout/src/math/round.js b/node_modules/mout/src/math/round.js
new file mode 100644
index 0000000..b43e4ac
--- /dev/null
+++ b/node_modules/mout/src/math/round.js
@@ -0,0 +1,12 @@
+define(function () {
+    /**
+     * Round number to a specific radix
+     */
+    function round(value, radix){
+        radix = radix || 1; // default round 1
+        return Math.round(value / radix) * radix;
+    }
+
+    return round;
+
+});
diff --git a/node_modules/mout/src/number.js b/node_modules/mout/src/number.js
new file mode 100644
index 0000000..ffdb2cd
--- /dev/null
+++ b/node_modules/mout/src/number.js
@@ -0,0 +1,25 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'MAX_INT' : require('./number/MAX_INT'),
+    'MAX_SAFE_INTEGER' : require('./number/MAX_SAFE_INTEGER'),
+    'MAX_UINT' : require('./number/MAX_UINT'),
+    'MIN_INT' : require('./number/MIN_INT'),
+    'abbreviate' : require('./number/abbreviate'),
+    'currencyFormat' : require('./number/currencyFormat'),
+    'enforcePrecision' : require('./number/enforcePrecision'),
+    'isNaN' : require('./number/isNaN'),
+    'nth' : require('./number/nth'),
+    'ordinal' : require('./number/ordinal'),
+    'pad' : require('./number/pad'),
+    'rol' : require('./number/rol'),
+    'ror' : require('./number/ror'),
+    'sign' : require('./number/sign'),
+    'toInt' : require('./number/toInt'),
+    'toUInt' : require('./number/toUInt'),
+    'toUInt31' : require('./number/toUInt31')
+};
+
+});
diff --git a/node_modules/mout/src/number/MAX_INT.js b/node_modules/mout/src/number/MAX_INT.js
new file mode 100644
index 0000000..23a6e1a
--- /dev/null
+++ b/node_modules/mout/src/number/MAX_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit signed integer value. (2^31 - 1)
+ */
+define(function(){
+    return 2147483647;
+});
diff --git a/node_modules/mout/src/number/MAX_SAFE_INTEGER.js b/node_modules/mout/src/number/MAX_SAFE_INTEGER.js
new file mode 100644
index 0000000..ecdc62e
--- /dev/null
+++ b/node_modules/mout/src/number/MAX_SAFE_INTEGER.js
@@ -0,0 +1,7 @@
+define(function () {
+
+    // maximum safe integer (Math.pow(2, 53) - 1)
+    // see: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer
+    return 9007199254740991;
+
+});
diff --git a/node_modules/mout/src/number/MAX_UINT.js b/node_modules/mout/src/number/MAX_UINT.js
new file mode 100644
index 0000000..a035096
--- /dev/null
+++ b/node_modules/mout/src/number/MAX_UINT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit unsigned integet value (2^32 - 1)
+ */
+define(function(){
+    return 4294967295;
+});
diff --git a/node_modules/mout/src/number/MIN_INT.js b/node_modules/mout/src/number/MIN_INT.js
new file mode 100644
index 0000000..9b3e978
--- /dev/null
+++ b/node_modules/mout/src/number/MIN_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Minimum 32-bit signed integer value (-2^31).
+ */
+define(function(){
+    return -2147483648;
+});
diff --git a/node_modules/mout/src/number/abbreviate.js b/node_modules/mout/src/number/abbreviate.js
new file mode 100644
index 0000000..7e7405a
--- /dev/null
+++ b/node_modules/mout/src/number/abbreviate.js
@@ -0,0 +1,35 @@
+define(['./enforcePrecision'], function (enforcePrecision) {
+
+    var _defaultDict = {
+        thousand : 'K',
+        million : 'M',
+        billion : 'B'
+    };
+
+    /**
+     * Abbreviate number if bigger than 1000. (eg: 2.5K, 17.5M, 3.4B, ...)
+     */
+    function abbreviateNumber(val, nDecimals, dict){
+        nDecimals = nDecimals != null? nDecimals : 1;
+        dict = dict || _defaultDict;
+        val = enforcePrecision(val, nDecimals);
+
+        var str, mod;
+
+        if (val < 1000000) {
+            mod = enforcePrecision(val / 1000, nDecimals);
+            // might overflow to next scale during rounding
+            str = mod < 1000? mod + dict.thousand : 1 + dict.million;
+        } else if (val < 1000000000) {
+            mod = enforcePrecision(val / 1000000, nDecimals);
+            str = mod < 1000? mod + dict.million : 1 + dict.billion;
+        } else {
+            str = enforcePrecision(val / 1000000000, nDecimals) + dict.billion;
+        }
+
+        return str;
+    }
+
+    return abbreviateNumber;
+
+});
diff --git a/node_modules/mout/src/number/currencyFormat.js b/node_modules/mout/src/number/currencyFormat.js
new file mode 100644
index 0000000..1e5fecb
--- /dev/null
+++ b/node_modules/mout/src/number/currencyFormat.js
@@ -0,0 +1,27 @@
+define(['../lang/toNumber'], function (toNumber) {
+
+    /**
+     * Converts number into currency format
+     */
+    function currencyFormat(val, nDecimalDigits, decimalSeparator, thousandsSeparator) {
+        val = toNumber(val);
+        nDecimalDigits = nDecimalDigits == null? 2 : nDecimalDigits;
+        decimalSeparator = decimalSeparator == null? '.' : decimalSeparator;
+        thousandsSeparator = thousandsSeparator == null? ',' : thousandsSeparator;
+
+        //can't use enforce precision since it returns a number and we are
+        //doing a RegExp over the string
+        var fixed = val.toFixed(nDecimalDigits),
+            //separate begin [$1], middle [$2] and decimal digits [$4]
+            parts = new RegExp('^(-?\\d{1,3})((?:\\d{3})+)(\\.(\\d{'+ nDecimalDigits +'}))?$').exec( fixed );
+
+        if(parts){ //val >= 1000 || val <= -1000
+            return parts[1] + parts[2].replace(/\d{3}/g, thousandsSeparator + '$&') + (parts[4] ? decimalSeparator + parts[4] : '');
+        }else{
+            return fixed.replace('.', decimalSeparator);
+        }
+    }
+
+    return currencyFormat;
+
+});
diff --git a/node_modules/mout/src/number/enforcePrecision.js b/node_modules/mout/src/number/enforcePrecision.js
new file mode 100644
index 0000000..1e65e50
--- /dev/null
+++ b/node_modules/mout/src/number/enforcePrecision.js
@@ -0,0 +1,12 @@
+define(['../lang/toNumber'], function(toNumber){
+    /**
+     * Enforce a specific amount of decimal digits and also fix floating
+     * point rounding issues.
+     */
+    function enforcePrecision(val, nDecimalDigits){
+        val = toNumber(val);
+        var pow = Math.pow(10, nDecimalDigits);
+        return +(Math.round(val * pow) / pow).toFixed(nDecimalDigits);
+    }
+    return enforcePrecision;
+});
diff --git a/node_modules/mout/src/number/isNaN.js b/node_modules/mout/src/number/isNaN.js
new file mode 100644
index 0000000..3f1ebb6
--- /dev/null
+++ b/node_modules/mout/src/number/isNaN.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * ES6 Number.isNaN
+     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
+     */
+    function isNaN(val){
+        // jshint eqeqeq:false
+        return typeof val === 'number' && val != val;
+    }
+
+    return isNaN;
+
+});
diff --git a/node_modules/mout/src/number/nth.js b/node_modules/mout/src/number/nth.js
new file mode 100644
index 0000000..e991e2b
--- /dev/null
+++ b/node_modules/mout/src/number/nth.js
@@ -0,0 +1,25 @@
+define(function () {
+
+    /**
+     * Returns "nth" of number (1 = "st", 2 = "nd", 3 = "rd", 4..10 = "th", ...)
+     */
+    function nth(i) {
+        var t = (i % 100);
+        if (t >= 10 && t <= 20) {
+            return 'th';
+        }
+        switch(i % 10) {
+            case 1:
+                return 'st';
+            case 2:
+                return 'nd';
+            case 3:
+                return 'rd';
+            default:
+                return 'th';
+        }
+    }
+
+    return nth;
+
+});
diff --git a/node_modules/mout/src/number/ordinal.js b/node_modules/mout/src/number/ordinal.js
new file mode 100644
index 0000000..17927fc
--- /dev/null
+++ b/node_modules/mout/src/number/ordinal.js
@@ -0,0 +1,13 @@
+define(['./toInt', './nth'], function (toInt, nth) {
+
+    /**
+     * converts number into ordinal form (1st, 2nd, 3rd, 4th, ...)
+     */
+    function ordinal(n){
+       n = toInt(n);
+       return n + nth(n);
+    }
+
+    return ordinal;
+
+});
diff --git a/node_modules/mout/src/number/pad.js b/node_modules/mout/src/number/pad.js
new file mode 100644
index 0000000..194a3df
--- /dev/null
+++ b/node_modules/mout/src/number/pad.js
@@ -0,0 +1,13 @@
+define(['../string/lpad', '../lang/toNumber'], function(lpad, toNumber){
+
+    /**
+     * Add padding zeros if n.length < minLength.
+     */
+    function pad(n, minLength, char){
+        n = toNumber(n);
+        return lpad(''+ n, minLength, char || '0');
+    }
+
+    return pad;
+
+});
diff --git a/node_modules/mout/src/number/rol.js b/node_modules/mout/src/number/rol.js
new file mode 100644
index 0000000..a148f44
--- /dev/null
+++ b/node_modules/mout/src/number/rol.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+     * Bitwise circular shift left
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function rol(val, shift){
+        return (val << shift) | (val >> (32 - shift));
+    }
+    return rol;
+});
diff --git a/node_modules/mout/src/number/ror.js b/node_modules/mout/src/number/ror.js
new file mode 100644
index 0000000..b5c66f9
--- /dev/null
+++ b/node_modules/mout/src/number/ror.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+     * Bitwise circular shift right
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function ror(val, shift){
+        return (val >> shift) | (val << (32 - shift));
+    }
+    return ror;
+});
diff --git a/node_modules/mout/src/number/sign.js b/node_modules/mout/src/number/sign.js
new file mode 100644
index 0000000..b387c95
--- /dev/null
+++ b/node_modules/mout/src/number/sign.js
@@ -0,0 +1,15 @@
+define(['../lang/toNumber'], function (toNumber) {
+
+    /**
+     * Get sign of the value.
+     */
+    function sign(val) {
+        var num = toNumber(val);
+        if (num === 0) return num; // +0 and +0 === 0
+        if (isNaN(num)) return num; // NaN
+        return num < 0? -1 : 1;
+    }
+
+    return sign;
+
+});
diff --git a/node_modules/mout/src/number/toInt.js b/node_modules/mout/src/number/toInt.js
new file mode 100644
index 0000000..5ea59e5
--- /dev/null
+++ b/node_modules/mout/src/number/toInt.js
@@ -0,0 +1,17 @@
+define(function(){
+
+    /**
+     * "Convert" value into an 32-bit integer.
+     * Works like `Math.floor` if val > 0 and `Math.ceil` if val < 0.
+     * IMPORTANT: val will wrap at 2^31 and -2^31.
+     * Perf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7
+     */
+    function toInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return ~~val;
+    }
+
+    return toInt;
+
+});
diff --git a/node_modules/mout/src/number/toUInt.js b/node_modules/mout/src/number/toUInt.js
new file mode 100644
index 0000000..36bbdad
--- /dev/null
+++ b/node_modules/mout/src/number/toUInt.js
@@ -0,0 +1,15 @@
+define(function () {
+
+    /**
+     * "Convert" value into a 32-bit unsigned integer.
+     * IMPORTANT: Value will wrap at 2^32.
+     */
+    function toUInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return val >>> 0;
+    }
+
+    return toUInt;
+
+});
diff --git a/node_modules/mout/src/number/toUInt31.js b/node_modules/mout/src/number/toUInt31.js
new file mode 100644
index 0000000..c1c4aff
--- /dev/null
+++ b/node_modules/mout/src/number/toUInt31.js
@@ -0,0 +1,15 @@
+define(['./MAX_INT'], function(MAX_INT){
+
+    /**
+     * "Convert" value into an 31-bit unsigned integer (since 1 bit is used for sign).
+     * IMPORTANT: value wil wrap at 2^31, if negative will return 0.
+     */
+    function toUInt31(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return (val <= 0)? 0 : (val > MAX_INT? ~~(val % (MAX_INT + 1)) : ~~val);
+    }
+
+    return toUInt31;
+
+});
diff --git a/node_modules/mout/src/object.js b/node_modules/mout/src/object.js
new file mode 100644
index 0000000..93cb49e
--- /dev/null
+++ b/node_modules/mout/src/object.js
@@ -0,0 +1,44 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'bindAll' : require('./object/bindAll'),
+    'contains' : require('./object/contains'),
+    'deepFillIn' : require('./object/deepFillIn'),
+    'deepMatches' : require('./object/deepMatches'),
+    'deepMixIn' : require('./object/deepMixIn'),
+    'equals' : require('./object/equals'),
+    'every' : require('./object/every'),
+    'fillIn' : require('./object/fillIn'),
+    'filter' : require('./object/filter'),
+    'find' : require('./object/find'),
+    'flatten' : require('./object/flatten'),
+    'forIn' : require('./object/forIn'),
+    'forOwn' : require('./object/forOwn'),
+    'functions' : require('./object/functions'),
+    'get' : require('./object/get'),
+    'has' : require('./object/has'),
+    'hasOwn' : require('./object/hasOwn'),
+    'keys' : require('./object/keys'),
+    'map' : require('./object/map'),
+    'matches' : require('./object/matches'),
+    'max' : require('./object/max'),
+    'merge' : require('./object/merge'),
+    'min' : require('./object/min'),
+    'mixIn' : require('./object/mixIn'),
+    'namespace' : require('./object/namespace'),
+    'omit' : require('./object/omit'),
+    'pick' : require('./object/pick'),
+    'pluck' : require('./object/pluck'),
+    'reduce' : require('./object/reduce'),
+    'reject' : require('./object/reject'),
+    'result' : require('./object/result'),
+    'set' : require('./object/set'),
+    'size' : require('./object/size'),
+    'some' : require('./object/some'),
+    'unset' : require('./object/unset'),
+    'values' : require('./object/values')
+};
+
+});
diff --git a/node_modules/mout/src/object/bindAll.js b/node_modules/mout/src/object/bindAll.js
new file mode 100644
index 0000000..76576d6
--- /dev/null
+++ b/node_modules/mout/src/object/bindAll.js
@@ -0,0 +1,16 @@
+define(['./functions', '../function/bind', '../array/forEach', '../array/slice'], function (functions, bind, forEach, slice) {
+
+    /**
+     * Binds methods of the object to be run in it's own context.
+     */
+    function bindAll(obj, rest_methodNames){
+        var keys = arguments.length > 1?
+                    slice(arguments, 1) : functions(obj);
+        forEach(keys, function(key){
+            obj[key] = bind(obj[key], obj);
+        });
+    }
+
+    return bindAll;
+
+});
diff --git a/node_modules/mout/src/object/contains.js b/node_modules/mout/src/object/contains.js
new file mode 100644
index 0000000..297e898
--- /dev/null
+++ b/node_modules/mout/src/object/contains.js
@@ -0,0 +1,13 @@
+define(['./some'], function (some) {
+
+    /**
+     * Check if object contains value
+     */
+    function contains(obj, needle) {
+        return some(obj, function(val) {
+            return (val === needle);
+        });
+    }
+    return contains;
+
+});
diff --git a/node_modules/mout/src/object/deepFillIn.js b/node_modules/mout/src/object/deepFillIn.js
new file mode 100644
index 0000000..ee69c3d
--- /dev/null
+++ b/node_modules/mout/src/object/deepFillIn.js
@@ -0,0 +1,32 @@
+define(['./forOwn', '../lang/isPlainObject'], function (forOwn, isPlainObject) {
+
+    /**
+     * Deeply copy missing properties in the target from the defaults.
+     */
+    function deepFillIn(target, defaults){
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n) {
+            obj = arguments[i];
+            if (obj) {
+                // jshint loopfunc: true
+                forOwn(obj, function(newValue, key) {
+                    var curValue = target[key];
+                    if (curValue == null) {
+                        target[key] = newValue;
+                    } else if (isPlainObject(curValue) &&
+                               isPlainObject(newValue)) {
+                        deepFillIn(curValue, newValue);
+                    }
+                });
+            }
+        }
+
+        return target;
+    }
+
+    return deepFillIn;
+
+});
diff --git a/node_modules/mout/src/object/deepMatches.js b/node_modules/mout/src/object/deepMatches.js
new file mode 100644
index 0000000..2eae629
--- /dev/null
+++ b/node_modules/mout/src/object/deepMatches.js
@@ -0,0 +1,54 @@
+define(['./forOwn', '../lang/isArray'], function(forOwn, isArray) {
+
+    function containsMatch(array, pattern) {
+        var i = -1, length = array.length;
+        while (++i < length) {
+            if (deepMatches(array[i], pattern)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    function matchArray(target, pattern) {
+        var i = -1, patternLength = pattern.length;
+        while (++i < patternLength) {
+            if (!containsMatch(target, pattern[i])) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    function matchObject(target, pattern) {
+        var result = true;
+        forOwn(pattern, function(val, key) {
+            if (!deepMatches(target[key], val)) {
+                // Return false to break out of forOwn early
+                return (result = false);
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively check if the objects match.
+     */
+    function deepMatches(target, pattern){
+        if (target && typeof target === 'object') {
+            if (isArray(target) && isArray(pattern)) {
+                return matchArray(target, pattern);
+            } else {
+                return matchObject(target, pattern);
+            }
+        } else {
+            return target === pattern;
+        }
+    }
+
+    return deepMatches;
+
+});
diff --git a/node_modules/mout/src/object/deepMixIn.js b/node_modules/mout/src/object/deepMixIn.js
new file mode 100644
index 0000000..1b4178e
--- /dev/null
+++ b/node_modules/mout/src/object/deepMixIn.js
@@ -0,0 +1,33 @@
+define(['./forOwn', '../lang/isPlainObject'], function (forOwn, isPlainObject) {
+
+    /**
+     * Mixes objects into the target object, recursively mixing existing child
+     * objects.
+     */
+    function deepMixIn(target, objects) {
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n){
+            obj = arguments[i];
+            if (obj) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+
+        return target;
+    }
+
+    function copyProp(val, key) {
+        var existing = this[key];
+        if (isPlainObject(val) && isPlainObject(existing)) {
+            deepMixIn(existing, val);
+        } else {
+            this[key] = val;
+        }
+    }
+
+    return deepMixIn;
+
+});
diff --git a/node_modules/mout/src/object/equals.js b/node_modules/mout/src/object/equals.js
new file mode 100644
index 0000000..aeb8740
--- /dev/null
+++ b/node_modules/mout/src/object/equals.js
@@ -0,0 +1,30 @@
+define(['./hasOwn', './every', '../lang/isObject', '../lang/is'], function(hasOwn, every, isObject, is) {
+
+    // Makes a function to compare the object values from the specified compare
+    // operation callback.
+    function makeCompare(callback) {
+        return function(value, key) {
+            return hasOwn(this, key) && callback(value, this[key]);
+        };
+    }
+
+    function checkProperties(value, key) {
+        return hasOwn(this, key);
+    }
+
+    /**
+     * Checks if two objects have the same keys and values.
+     */
+    function equals(a, b, callback) {
+        callback = callback || is;
+
+        if (!isObject(a) || !isObject(b)) {
+            return callback(a, b);
+        }
+
+        return (every(a, makeCompare(callback), b) &&
+                every(b, checkProperties, a));
+    }
+
+    return equals;
+});
diff --git a/node_modules/mout/src/object/every.js b/node_modules/mout/src/object/every.js
new file mode 100644
index 0000000..52983a5
--- /dev/null
+++ b/node_modules/mout/src/object/every.js
@@ -0,0 +1,22 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Object every
+     */
+    function every(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        forOwn(obj, function(val, key) {
+            // we consider any falsy values as "false" on purpose so shorthand
+            // syntax can be used to check property existence
+            if (!callback(val, key, obj)) {
+                result = false;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    return every;
+
+});
diff --git a/node_modules/mout/src/object/fillIn.js b/node_modules/mout/src/object/fillIn.js
new file mode 100644
index 0000000..363beab
--- /dev/null
+++ b/node_modules/mout/src/object/fillIn.js
@@ -0,0 +1,19 @@
+define(['../array/forEach', '../array/slice', './forOwn'], function (forEach, slice, forOwn) {
+
+    /**
+     * Copy missing properties in the obj from the defaults.
+     */
+    function fillIn(obj, var_defaults){
+        forEach(slice(arguments, 1), function(base){
+            forOwn(base, function(val, key){
+                if (obj[key] == null) {
+                    obj[key] = val;
+                }
+            });
+        });
+        return obj;
+    }
+
+    return fillIn;
+
+});
diff --git a/node_modules/mout/src/object/filter.js b/node_modules/mout/src/object/filter.js
new file mode 100644
index 0000000..f213b91
--- /dev/null
+++ b/node_modules/mout/src/object/filter.js
@@ -0,0 +1,19 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Creates a new object with all the properties where the callback returns
+     * true.
+     */
+    function filterValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                output[key] = value;
+            }
+        });
+
+        return output;
+    }
+    return filterValues;
+});
diff --git a/node_modules/mout/src/object/find.js b/node_modules/mout/src/object/find.js
new file mode 100644
index 0000000..47e6b09
--- /dev/null
+++ b/node_modules/mout/src/object/find.js
@@ -0,0 +1,20 @@
+define(['./some', '../function/makeIterator_'], function(some, makeIterator) {
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result;
+        some(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                result = value;
+                return true; //break
+            }
+        });
+        return result;
+    }
+
+    return find;
+
+});
diff --git a/node_modules/mout/src/object/flatten.js b/node_modules/mout/src/object/flatten.js
new file mode 100644
index 0000000..4fe07af
--- /dev/null
+++ b/node_modules/mout/src/object/flatten.js
@@ -0,0 +1,37 @@
+define(['./forOwn', '../lang/isPlainObject'], function (forOwn, isPlainObject) {
+
+    /*
+     * Helper function to flatten to a destination object.
+     * Used to remove the need to create intermediate objects while flattening.
+     */
+    function flattenTo(obj, result, prefix, level) {
+        forOwn(obj, function (value, key) {
+            var nestedPrefix = prefix ? prefix + '.' + key : key;
+
+            if (level !== 0 && isPlainObject(value)) {
+                flattenTo(value, result, nestedPrefix, level - 1);
+            } else {
+                result[nestedPrefix] = value;
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively flattens an object.
+     * A new object containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(obj, level) {
+        if (obj == null) {
+            return {};
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(obj, {}, '', level);
+    }
+
+    return flatten;
+
+});
diff --git a/node_modules/mout/src/object/forIn.js b/node_modules/mout/src/object/forIn.js
new file mode 100644
index 0000000..90f2706
--- /dev/null
+++ b/node_modules/mout/src/object/forIn.js
@@ -0,0 +1,76 @@
+define(['./hasOwn'], function (hasOwn) {
+
+    var _hasDontEnumBug,
+        _dontEnums;
+
+    function checkDontEnum(){
+        _dontEnums = [
+                'toString',
+                'toLocaleString',
+                'valueOf',
+                'hasOwnProperty',
+                'isPrototypeOf',
+                'propertyIsEnumerable',
+                'constructor'
+            ];
+
+        _hasDontEnumBug = true;
+
+        for (var key in {'toString': null}) {
+            _hasDontEnumBug = false;
+        }
+    }
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forIn(obj, fn, thisObj){
+        var key, i = 0;
+        // no need to check if argument is a real object that way we can use
+        // it for arrays, functions, date, etc.
+
+        //post-pone check till needed
+        if (_hasDontEnumBug == null) checkDontEnum();
+
+        for (key in obj) {
+            if (exec(fn, obj, key, thisObj) === false) {
+                break;
+            }
+        }
+
+
+        if (_hasDontEnumBug) {
+            var ctor = obj.constructor,
+                isProto = !!ctor && obj === ctor.prototype;
+
+            while (key = _dontEnums[i++]) {
+                // For constructor, if it is a prototype object the constructor
+                // is always non-enumerable unless defined otherwise (and
+                // enumerated above).  For non-prototype objects, it will have
+                // to be defined on this object, since it cannot be defined on
+                // any prototype objects.
+                //
+                // For other [[DontEnum]] properties, check if the value is
+                // different than Object prototype value.
+                if (
+                    (key !== 'constructor' ||
+                        (!isProto && hasOwn(obj, key))) &&
+                    obj[key] !== Object.prototype[key]
+                ) {
+                    if (exec(fn, obj, key, thisObj) === false) {
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+    function exec(fn, obj, key, thisObj){
+        return fn.call(thisObj, obj[key], key, obj);
+    }
+
+    return forIn;
+
+});
diff --git a/node_modules/mout/src/object/forOwn.js b/node_modules/mout/src/object/forOwn.js
new file mode 100644
index 0000000..b40cbaf
--- /dev/null
+++ b/node_modules/mout/src/object/forOwn.js
@@ -0,0 +1,18 @@
+define(['./hasOwn', './forIn'], function (hasOwn, forIn) {
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forOwn(obj, fn, thisObj){
+        forIn(obj, function(val, key){
+            if (hasOwn(obj, key)) {
+                return fn.call(thisObj, obj[key], key, obj);
+            }
+        });
+    }
+
+    return forOwn;
+
+});
diff --git a/node_modules/mout/src/object/functions.js b/node_modules/mout/src/object/functions.js
new file mode 100644
index 0000000..60fee3d
--- /dev/null
+++ b/node_modules/mout/src/object/functions.js
@@ -0,0 +1,18 @@
+define(['./forIn'], function (forIn) {
+
+    /**
+     * return a list of all enumerable properties that have function values
+     */
+    function functions(obj){
+        var keys = [];
+        forIn(obj, function(val, key){
+            if (typeof val === 'function'){
+                keys.push(key);
+            }
+        });
+        return keys.sort();
+    }
+
+    return functions;
+
+});
diff --git a/node_modules/mout/src/object/get.js b/node_modules/mout/src/object/get.js
new file mode 100644
index 0000000..464c7bc
--- /dev/null
+++ b/node_modules/mout/src/object/get.js
@@ -0,0 +1,20 @@
+define(['../lang/isPrimitive'], function (isPrimitive) {
+
+    /**
+     * get "nested" object property
+     */
+    function get(obj, prop){
+        var parts = prop.split('.'),
+            last = parts.pop();
+
+        while (prop = parts.shift()) {
+            obj = obj[prop];
+            if (obj == null) return;
+        }
+
+        return obj[last];
+    }
+
+    return get;
+
+});
diff --git a/node_modules/mout/src/object/has.js b/node_modules/mout/src/object/has.js
new file mode 100644
index 0000000..cc29817
--- /dev/null
+++ b/node_modules/mout/src/object/has.js
@@ -0,0 +1,15 @@
+define(['./get'], function (get) {
+
+    var UNDEF;
+
+    /**
+     * Check if object has nested property.
+     */
+    function has(obj, prop){
+        return get(obj, prop) !== UNDEF;
+    }
+
+    return has;
+
+});
+
diff --git a/node_modules/mout/src/object/hasOwn.js b/node_modules/mout/src/object/hasOwn.js
new file mode 100644
index 0000000..5c53bcf
--- /dev/null
+++ b/node_modules/mout/src/object/hasOwn.js
@@ -0,0 +1,12 @@
+define(function () {
+
+    /**
+     * Safer Object.hasOwnProperty
+     */
+     function hasOwn(obj, prop){
+         return Object.prototype.hasOwnProperty.call(obj, prop);
+     }
+
+     return hasOwn;
+
+});
diff --git a/node_modules/mout/src/object/keys.js b/node_modules/mout/src/object/keys.js
new file mode 100644
index 0000000..ed7c4f9
--- /dev/null
+++ b/node_modules/mout/src/object/keys.js
@@ -0,0 +1,16 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * Get object keys
+     */
+     var keys = Object.keys || function (obj) {
+            var keys = [];
+            forOwn(obj, function(val, key){
+                keys.push(key);
+            });
+            return keys;
+        };
+
+    return keys;
+
+});
diff --git a/node_modules/mout/src/object/map.js b/node_modules/mout/src/object/map.js
new file mode 100644
index 0000000..2958f6b
--- /dev/null
+++ b/node_modules/mout/src/object/map.js
@@ -0,0 +1,17 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Creates a new object where all the values are the result of calling
+     * `callback`.
+     */
+    function mapValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(val, key, obj) {
+            output[key] = callback(val, key, obj);
+        });
+
+        return output;
+    }
+    return mapValues;
+});
diff --git a/node_modules/mout/src/object/matches.js b/node_modules/mout/src/object/matches.js
new file mode 100644
index 0000000..73ff427
--- /dev/null
+++ b/node_modules/mout/src/object/matches.js
@@ -0,0 +1,20 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * checks if a object contains all given properties/values
+     */
+    function matches(target, props){
+        // can't use "object/every" because of circular dependency
+        var result = true;
+        forOwn(props, function(val, key){
+            if (target[key] !== val) {
+                // break loop at first difference
+                return (result = false);
+            }
+        });
+        return result;
+    }
+
+    return matches;
+
+});
diff --git a/node_modules/mout/src/object/max.js b/node_modules/mout/src/object/max.js
new file mode 100644
index 0000000..ef311dc
--- /dev/null
+++ b/node_modules/mout/src/object/max.js
@@ -0,0 +1,11 @@
+define(['../array/max', './values'], function(arrMax, values) {
+
+    /**
+     * Returns maximum value inside object.
+     */
+    function max(obj, compareFn) {
+        return arrMax(values(obj), compareFn);
+    }
+
+    return max;
+});
diff --git a/node_modules/mout/src/object/merge.js b/node_modules/mout/src/object/merge.js
new file mode 100644
index 0000000..d7cfede
--- /dev/null
+++ b/node_modules/mout/src/object/merge.js
@@ -0,0 +1,38 @@
+define(['./hasOwn', '../lang/deepClone', '../lang/isObject'], function (hasOwn, deepClone, isObject) {
+
+    /**
+     * Deep merge objects.
+     */
+    function merge() {
+        var i = 1,
+            key, val, obj, target;
+
+        // make sure we don't modify source element and it's properties
+        // objects are passed by reference
+        target = deepClone( arguments[0] );
+
+        while (obj = arguments[i++]) {
+            for (key in obj) {
+                if ( ! hasOwn(obj, key) ) {
+                    continue;
+                }
+
+                val = obj[key];
+
+                if ( isObject(val) && isObject(target[key]) ){
+                    // inception, deep merge objects
+                    target[key] = merge(target[key], val);
+                } else {
+                    // make sure arrays, regexp, date, objects are cloned
+                    target[key] = deepClone(val);
+                }
+
+            }
+        }
+
+        return target;
+    }
+
+    return merge;
+
+});
diff --git a/node_modules/mout/src/object/min.js b/node_modules/mout/src/object/min.js
new file mode 100644
index 0000000..9fb4c1a
--- /dev/null
+++ b/node_modules/mout/src/object/min.js
@@ -0,0 +1,11 @@
+define(['../array/min', './values'], function(arrMin, values) {
+
+    /**
+     * Returns minimum value inside object.
+     */
+    function min(obj, iterator) {
+        return arrMin(values(obj), iterator);
+    }
+
+    return min;
+});
diff --git a/node_modules/mout/src/object/mixIn.js b/node_modules/mout/src/object/mixIn.js
new file mode 100644
index 0000000..6210b7e
--- /dev/null
+++ b/node_modules/mout/src/object/mixIn.js
@@ -0,0 +1,28 @@
+define(['./forOwn'], function(forOwn){
+
+    /**
+    * Combine properties from all the objects into first one.
+    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
+    * @param {object} target    Target Object
+    * @param {...object} objects    Objects to be combined (0...n objects).
+    * @return {object} Target Object.
+    */
+    function mixIn(target, objects){
+        var i = 0,
+            n = arguments.length,
+            obj;
+        while(++i < n){
+            obj = arguments[i];
+            if (obj != null) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+        return target;
+    }
+
+    function copyProp(val, key){
+        this[key] = val;
+    }
+
+    return mixIn;
+});
diff --git a/node_modules/mout/src/object/namespace.js b/node_modules/mout/src/object/namespace.js
new file mode 100644
index 0000000..7ed65db
--- /dev/null
+++ b/node_modules/mout/src/object/namespace.js
@@ -0,0 +1,19 @@
+define(['../array/forEach'], function (forEach) {
+
+    /**
+     * Create nested object if non-existent
+     */
+    function namespace(obj, path){
+        if (!path) return obj;
+        forEach(path.split('.'), function(key){
+            if (!obj[key]) {
+                obj[key] = {};
+            }
+            obj = obj[key];
+        });
+        return obj;
+    }
+
+    return namespace;
+
+});
diff --git a/node_modules/mout/src/object/omit.js b/node_modules/mout/src/object/omit.js
new file mode 100644
index 0000000..829cc58
--- /dev/null
+++ b/node_modules/mout/src/object/omit.js
@@ -0,0 +1,20 @@
+define(['../array/slice', '../array/contains'], function(slice, contains){
+
+    /**
+     * Return a copy of the object, filtered to only contain properties except the blacklisted keys.
+     */
+    function omit(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {};
+
+        for (var property in obj) {
+            if (obj.hasOwnProperty(property) && !contains(keys, property)) {
+                out[property] = obj[property];
+            }
+        }
+        return out;
+    }
+
+    return omit;
+
+});
diff --git a/node_modules/mout/src/object/pick.js b/node_modules/mout/src/object/pick.js
new file mode 100644
index 0000000..9d5e351
--- /dev/null
+++ b/node_modules/mout/src/object/pick.js
@@ -0,0 +1,18 @@
+define(['../array/slice'], function(slice){
+
+    /**
+     * Return a copy of the object, filtered to only have values for the whitelisted keys.
+     */
+    function pick(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {},
+            i = 0, key;
+        while (key = keys[i++]) {
+            out[key] = obj[key];
+        }
+        return out;
+    }
+
+    return pick;
+
+});
diff --git a/node_modules/mout/src/object/pluck.js b/node_modules/mout/src/object/pluck.js
new file mode 100644
index 0000000..d47744b
--- /dev/null
+++ b/node_modules/mout/src/object/pluck.js
@@ -0,0 +1,12 @@
+define(['./map', '../function/prop'], function (map, prop) {
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(obj, propName){
+        return map(obj, prop(propName));
+    }
+
+    return pluck;
+
+});
diff --git a/node_modules/mout/src/object/reduce.js b/node_modules/mout/src/object/reduce.js
new file mode 100644
index 0000000..d3a5778
--- /dev/null
+++ b/node_modules/mout/src/object/reduce.js
@@ -0,0 +1,28 @@
+define(['./forOwn', './size'], function(forOwn, size) {
+
+    /**
+     * Object reduce
+     */
+    function reduce(obj, callback, memo, thisObj) {
+        var initial = arguments.length > 2;
+
+        if (!size(obj) && !initial) {
+            throw new Error('reduce of empty object with no initial value');
+        }
+
+        forOwn(obj, function(value, key, list) {
+            if (!initial) {
+                memo = value;
+                initial = true;
+            }
+            else {
+                memo = callback.call(thisObj, memo, value, key, list);
+            }
+        });
+
+        return memo;
+    }
+
+    return reduce;
+
+});
diff --git a/node_modules/mout/src/object/reject.js b/node_modules/mout/src/object/reject.js
new file mode 100644
index 0000000..8429642
--- /dev/null
+++ b/node_modules/mout/src/object/reject.js
@@ -0,0 +1,15 @@
+define(['./filter', '../function/makeIterator_'], function (filter, makeIterator) {
+
+    /**
+     * Object reject
+     */
+    function reject(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        return filter(obj, function(value, index, obj) {
+            return !callback(value, index, obj);
+        }, thisObj);
+    }
+
+    return reject;
+
+});
diff --git a/node_modules/mout/src/object/result.js b/node_modules/mout/src/object/result.js
new file mode 100644
index 0000000..133572d
--- /dev/null
+++ b/node_modules/mout/src/object/result.js
@@ -0,0 +1,14 @@
+define(['../lang/isFunction'], function (isFunction) {
+
+    function result(obj, prop) {
+        var property = obj[prop];
+
+        if(property === undefined) {
+            return;
+        }
+
+        return isFunction(property) ? property.call(obj) : property;
+    }
+
+    return result;
+});
diff --git a/node_modules/mout/src/object/set.js b/node_modules/mout/src/object/set.js
new file mode 100644
index 0000000..b8fa25a
--- /dev/null
+++ b/node_modules/mout/src/object/set.js
@@ -0,0 +1,17 @@
+define(['./namespace'], function (namespace) {
+
+    /**
+     * set "nested" object property
+     */
+    function set(obj, prop, val){
+        var parts = (/^(.+)\.(.+)$/).exec(prop);
+        if (parts){
+            namespace(obj, parts[1])[parts[2]] = val;
+        } else {
+            obj[prop] = val;
+        }
+    }
+
+    return set;
+
+});
diff --git a/node_modules/mout/src/object/size.js b/node_modules/mout/src/object/size.js
new file mode 100644
index 0000000..c6e377c
--- /dev/null
+++ b/node_modules/mout/src/object/size.js
@@ -0,0 +1,16 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * Get object size
+     */
+    function size(obj) {
+        var count = 0;
+        forOwn(obj, function(){
+            count++;
+        });
+        return count;
+    }
+
+    return size;
+
+});
diff --git a/node_modules/mout/src/object/some.js b/node_modules/mout/src/object/some.js
new file mode 100644
index 0000000..1bd6fda
--- /dev/null
+++ b/node_modules/mout/src/object/some.js
@@ -0,0 +1,20 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Object some
+     */
+    function some(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        forOwn(obj, function(val, key) {
+            if (callback(val, key, obj)) {
+                result = true;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    return some;
+
+});
diff --git a/node_modules/mout/src/object/unset.js b/node_modules/mout/src/object/unset.js
new file mode 100644
index 0000000..787fc19
--- /dev/null
+++ b/node_modules/mout/src/object/unset.js
@@ -0,0 +1,23 @@
+define(['./has'], function (has) {
+
+    /**
+     * Unset object property.
+     */
+    function unset(obj, prop){
+        if (has(obj, prop)) {
+            var parts = prop.split('.'),
+                last = parts.pop();
+            while (prop = parts.shift()) {
+                obj = obj[prop];
+            }
+            return (delete obj[last]);
+
+        } else {
+            // if property doesn't exist treat as deleted
+            return true;
+        }
+    }
+
+    return unset;
+
+});
diff --git a/node_modules/mout/src/object/values.js b/node_modules/mout/src/object/values.js
new file mode 100644
index 0000000..b311fd0
--- /dev/null
+++ b/node_modules/mout/src/object/values.js
@@ -0,0 +1,16 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * Get object values
+     */
+    function values(obj) {
+        var vals = [];
+        forOwn(obj, function(val, key){
+            vals.push(val);
+        });
+        return vals;
+    }
+
+    return values;
+
+});
diff --git a/node_modules/mout/src/queryString.js b/node_modules/mout/src/queryString.js
new file mode 100644
index 0000000..4434612
--- /dev/null
+++ b/node_modules/mout/src/queryString.js
@@ -0,0 +1,15 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'contains' : require('./queryString/contains'),
+    'decode' : require('./queryString/decode'),
+    'encode' : require('./queryString/encode'),
+    'getParam' : require('./queryString/getParam'),
+    'getQuery' : require('./queryString/getQuery'),
+    'parse' : require('./queryString/parse'),
+    'setParam' : require('./queryString/setParam')
+};
+
+});
diff --git a/node_modules/mout/src/queryString/contains.js b/node_modules/mout/src/queryString/contains.js
new file mode 100644
index 0000000..a6d11cc
--- /dev/null
+++ b/node_modules/mout/src/queryString/contains.js
@@ -0,0 +1,12 @@
+define(['./getQuery'], function (getQuery) {
+
+    /**
+     * Checks if query string contains parameter.
+     */
+    function contains(url, paramName) {
+        var regex = new RegExp('(\\?|&)'+ paramName +'=', 'g'); //matches `?param=` or `&param=`
+        return regex.test(getQuery(url));
+    }
+
+    return contains;
+});
diff --git a/node_modules/mout/src/queryString/decode.js b/node_modules/mout/src/queryString/decode.js
new file mode 100644
index 0000000..a37c123
--- /dev/null
+++ b/node_modules/mout/src/queryString/decode.js
@@ -0,0 +1,34 @@
+define(['../string/typecast', '../lang/isArray', '../object/hasOwn'], function (typecast, isArray, hasOwn) {
+
+    /**
+     * Decode query string into an object of keys => vals.
+     */
+    function decode(queryStr, shouldTypecast) {
+        var queryArr = (queryStr || '').replace('?', '').split('&'),
+            reg = /([^=]+)=(.+)/,
+            i = -1,
+            obj = {},
+            equalIndex, cur, pValue, pName;
+
+        while ((cur = queryArr[++i])) {
+            equalIndex = cur.indexOf('=');
+            pName = cur.substring(0, equalIndex);
+            pValue = decodeURIComponent(cur.substring(equalIndex + 1));
+            if (shouldTypecast !== false) {
+                pValue = typecast(pValue);
+            }
+            if (hasOwn(obj, pName)){
+                if(isArray(obj[pName])){
+                    obj[pName].push(pValue);
+                } else {
+                    obj[pName] = [obj[pName], pValue];
+                }
+            } else {
+                obj[pName] = pValue;
+           }
+        }
+        return obj;
+    }
+
+    return decode;
+});
diff --git a/node_modules/mout/src/queryString/encode.js b/node_modules/mout/src/queryString/encode.js
new file mode 100644
index 0000000..c249287
--- /dev/null
+++ b/node_modules/mout/src/queryString/encode.js
@@ -0,0 +1,25 @@
+define(['../object/forOwn','../lang/isArray','../array/forEach'], function (forOwn,isArray,forEach) {
+
+    /**
+     * Encode object into a query string.
+     */
+    function encode(obj){
+        var query = [],
+            arrValues, reg;
+        forOwn(obj, function (val, key) {
+            if (isArray(val)) {
+                arrValues = key + '=';
+                reg = new RegExp('&'+key+'+=$');
+                forEach(val, function (aValue) {
+                    arrValues += encodeURIComponent(aValue) + '&' + key + '=';
+                });
+                query.push(arrValues.replace(reg, ''));
+            } else {
+               query.push(key + '=' + encodeURIComponent(val));
+            }
+        });
+        return (query.length) ? '?' + query.join('&') : '';
+    }
+
+    return encode;
+});
diff --git a/node_modules/mout/src/queryString/getParam.js b/node_modules/mout/src/queryString/getParam.js
new file mode 100644
index 0000000..d981372
--- /dev/null
+++ b/node_modules/mout/src/queryString/getParam.js
@@ -0,0 +1,14 @@
+define(['../string/typecast', './getQuery'], function (typecast, getQuery) {
+
+    /**
+     * Get query parameter value.
+     */
+    function getParam(url, param, shouldTypecast){
+        var regexp = new RegExp('(\\?|&)'+ param + '=([^&]*)'), //matches `?param=value` or `&param=value`, value = $2
+            result = regexp.exec( getQuery(url) ),
+            val = (result && result[2])? result[2] : null;
+        return shouldTypecast === false? val : typecast(val);
+    }
+
+    return getParam;
+});
diff --git a/node_modules/mout/src/queryString/getQuery.js b/node_modules/mout/src/queryString/getQuery.js
new file mode 100644
index 0000000..e8d70ff
--- /dev/null
+++ b/node_modules/mout/src/queryString/getQuery.js
@@ -0,0 +1,13 @@
+define(function () {
+
+    /**
+     * Gets full query as string with all special chars decoded.
+     */
+    function getQuery(url) {
+        url = url.replace(/#.*/, ''); //removes hash (to avoid getting hash query)
+        var queryString = /\?[a-zA-Z0-9\=\&\%\$\-\_\.\+\!\*\'\(\)\,]+/.exec(url); //valid chars according to: http://www.ietf.org/rfc/rfc1738.txt
+        return (queryString)? decodeURIComponent(queryString[0].replace(/\+/g,' ')) : '';
+    }
+
+    return getQuery;
+});
diff --git a/node_modules/mout/src/queryString/parse.js b/node_modules/mout/src/queryString/parse.js
new file mode 100644
index 0000000..ac153e3
--- /dev/null
+++ b/node_modules/mout/src/queryString/parse.js
@@ -0,0 +1,12 @@
+define(['./decode', './getQuery'], function (decode, getQuery) {
+
+    /**
+     * Get query string, parses and decodes it.
+     */
+    function parse(url, shouldTypecast) {
+        return decode(getQuery(url), shouldTypecast);
+    }
+
+    return parse;
+});
+
diff --git a/node_modules/mout/src/queryString/setParam.js b/node_modules/mout/src/queryString/setParam.js
new file mode 100644
index 0000000..97081aa
--- /dev/null
+++ b/node_modules/mout/src/queryString/setParam.js
@@ -0,0 +1,28 @@
+define(function () {
+
+    /**
+     * Set query string parameter value
+     */
+    function setParam(url, paramName, value){
+        url = url || '';
+
+        var re = new RegExp('(\\?|&)'+ paramName +'=[^&]*' );
+        var param = paramName +'='+ encodeURIComponent( value );
+
+        if ( re.test(url) ) {
+            return url.replace(re, '$1'+ param);
+        } else {
+            if (url.indexOf('?') === -1) {
+                url += '?';
+            }
+            if (url.indexOf('=') !== -1) {
+                url += '&';
+            }
+            return url + param;
+        }
+
+    }
+
+    return setParam;
+
+});
diff --git a/node_modules/mout/src/random.js b/node_modules/mout/src/random.js
new file mode 100644
index 0000000..b47f203
--- /dev/null
+++ b/node_modules/mout/src/random.js
@@ -0,0 +1,18 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'choice' : require('./random/choice'),
+    'guid' : require('./random/guid'),
+    'rand' : require('./random/rand'),
+    'randBit' : require('./random/randBit'),
+    'randBool' : require('./random/randBool'),
+    'randHex' : require('./random/randHex'),
+    'randInt' : require('./random/randInt'),
+    'randSign' : require('./random/randSign'),
+    'randString' : require('./random/randString'),
+    'random' : require('./random/random')
+};
+
+});
diff --git a/node_modules/mout/src/random/choice.js b/node_modules/mout/src/random/choice.js
new file mode 100644
index 0000000..0d0c38d
--- /dev/null
+++ b/node_modules/mout/src/random/choice.js
@@ -0,0 +1,14 @@
+define(['./randInt', '../lang/isArray'], function (randInt, isArray) {
+
+    /**
+     * Returns a random element from the supplied arguments
+     * or from the array (if single argument is an array).
+     */
+    function choice(items) {
+        var target = (arguments.length === 1 && isArray(items))? items : arguments;
+        return target[ randInt(0, target.length - 1) ];
+    }
+
+    return choice;
+
+});
diff --git a/node_modules/mout/src/random/guid.js b/node_modules/mout/src/random/guid.js
new file mode 100644
index 0000000..82f3a2d
--- /dev/null
+++ b/node_modules/mout/src/random/guid.js
@@ -0,0 +1,23 @@
+define(['./randHex', './choice'], function (randHex, choice) {
+
+  /**
+   * Returns pseudo-random guid (UUID v4)
+   * IMPORTANT: it's not totally "safe" since randHex/choice uses Math.random
+   * by default and sequences can be predicted in some cases. See the
+   * "random/random" documentation for more info about it and how to replace
+   * the default PRNG.
+   */
+  function guid() {
+    return (
+        randHex(8)+'-'+
+        randHex(4)+'-'+
+        // v4 UUID always contain "4" at this position to specify it was
+        // randomly generated
+        '4' + randHex(3) +'-'+
+        // v4 UUID always contain chars [a,b,8,9] at this position
+        choice(8, 9, 'a', 'b') + randHex(3)+'-'+
+        randHex(12)
+    );
+  }
+  return guid;
+});
diff --git a/node_modules/mout/src/random/rand.js b/node_modules/mout/src/random/rand.js
new file mode 100644
index 0000000..b8c231d
--- /dev/null
+++ b/node_modules/mout/src/random/rand.js
@@ -0,0 +1,13 @@
+define(['./random', '../number/MIN_INT', '../number/MAX_INT'], function(random, MIN_INT, MAX_INT){
+
+    /**
+     * Returns random number inside range
+     */
+    function rand(min, max){
+        min = min == null? MIN_INT : min;
+        max = max == null? MAX_INT : max;
+        return min + (max - min) * random();
+    }
+
+    return rand;
+});
diff --git a/node_modules/mout/src/random/randBit.js b/node_modules/mout/src/random/randBit.js
new file mode 100644
index 0000000..398fa2c
--- /dev/null
+++ b/node_modules/mout/src/random/randBit.js
@@ -0,0 +1,11 @@
+define(['./randBool'], function (randBool) {
+
+    /**
+     * Returns random bit (0 or 1)
+     */
+    function randomBit() {
+        return randBool()? 1 : 0;
+    }
+
+    return randomBit;
+});
diff --git a/node_modules/mout/src/random/randBool.js b/node_modules/mout/src/random/randBool.js
new file mode 100644
index 0000000..8d9be0b
--- /dev/null
+++ b/node_modules/mout/src/random/randBool.js
@@ -0,0 +1,12 @@
+define(['./random'], function (random) {
+
+    /**
+     * returns a random boolean value (true or false)
+     */
+    function randBool(){
+        return random() >= 0.5;
+    }
+
+    return randBool;
+
+});
diff --git a/node_modules/mout/src/random/randHex.js b/node_modules/mout/src/random/randHex.js
new file mode 100644
index 0000000..6e9bf1c
--- /dev/null
+++ b/node_modules/mout/src/random/randHex.js
@@ -0,0 +1,19 @@
+define(['./choice'], function (choice) {
+
+    var _chars = '0123456789abcdef'.split('');
+
+    /**
+     * Returns a random hexadecimal string
+     */
+    function randHex(size){
+        size = size && size > 0? size : 6;
+        var str = '';
+        while (size--) {
+            str += choice(_chars);
+        }
+        return str;
+    }
+
+    return randHex;
+
+});
diff --git a/node_modules/mout/src/random/randInt.js b/node_modules/mout/src/random/randInt.js
new file mode 100644
index 0000000..1750e9d
--- /dev/null
+++ b/node_modules/mout/src/random/randInt.js
@@ -0,0 +1,16 @@
+define(['../number/MIN_INT', '../number/MAX_INT', './rand'], function(MIN_INT, MAX_INT, rand){
+
+    /**
+     * Gets random integer inside range or snap to min/max values.
+     */
+    function randInt(min, max){
+        min = min == null? MIN_INT : ~~min;
+        max = max == null? MAX_INT : ~~max;
+        // can't be max + 0.5 otherwise it will round up if `rand`
+        // returns `max` causing it to overflow range.
+        // -0.5 and + 0.49 are required to avoid bias caused by rounding
+        return Math.round( rand(min - 0.5, max + 0.499999999999) );
+    }
+
+    return randInt;
+});
diff --git a/node_modules/mout/src/random/randSign.js b/node_modules/mout/src/random/randSign.js
new file mode 100644
index 0000000..1171b40
--- /dev/null
+++ b/node_modules/mout/src/random/randSign.js
@@ -0,0 +1,11 @@
+define(['./randBool'], function (randBool) {
+
+    /**
+     * Returns random sign (-1 or 1)
+     */
+    function randomSign() {
+        return randBool()? 1 : -1;
+    }
+
+    return randomSign;
+});
diff --git a/node_modules/mout/src/random/randString.js b/node_modules/mout/src/random/randString.js
new file mode 100644
index 0000000..d309d08
--- /dev/null
+++ b/node_modules/mout/src/random/randString.js
@@ -0,0 +1,29 @@
+define([
+  '../lang/isNumber',
+  '../lang/isString',
+  './randInt'
+], function (isNumber, isString, randInt) {
+
+    var defaultDictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
+
+    function randomString(length, dictionary) {
+        if(!isNumber(length) || length <= 0) {
+          length = 8;
+        }
+
+        if(!isString(dictionary) || dictionary.length < 1) {
+          dictionary = defaultDictionary;
+        }
+
+        var result = '',
+            domain = dictionary.length - 1;
+
+        while(length--) {
+          result += dictionary[randInt(0, domain)];
+        }
+        
+        return result;
+    }
+
+    return randomString;
+});
diff --git a/node_modules/mout/src/random/random.js b/node_modules/mout/src/random/random.js
new file mode 100644
index 0000000..4270822
--- /dev/null
+++ b/node_modules/mout/src/random/random.js
@@ -0,0 +1,18 @@
+define(function () {
+
+    /**
+     * Just a wrapper to Math.random. No methods inside mout/random should call
+     * Math.random() directly so we can inject the pseudo-random number
+     * generator if needed (ie. in case we need a seeded random or a better
+     * algorithm than the native one)
+     */
+    function random(){
+        return random.get();
+    }
+
+    // we expose the method so it can be swapped if needed
+    random.get = Math.random;
+
+    return random;
+
+});
diff --git a/node_modules/mout/src/string.js b/node_modules/mout/src/string.js
new file mode 100644
index 0000000..a157e4c
--- /dev/null
+++ b/node_modules/mout/src/string.js
@@ -0,0 +1,46 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'WHITE_SPACES' : require('./string/WHITE_SPACES'),
+    'camelCase' : require('./string/camelCase'),
+    'contains' : require('./string/contains'),
+    'crop' : require('./string/crop'),
+    'endsWith' : require('./string/endsWith'),
+    'escapeHtml' : require('./string/escapeHtml'),
+    'escapeRegExp' : require('./string/escapeRegExp'),
+    'escapeUnicode' : require('./string/escapeUnicode'),
+    'hyphenate' : require('./string/hyphenate'),
+    'insert' : require('./string/insert'),
+    'interpolate' : require('./string/interpolate'),
+    'lowerCase' : require('./string/lowerCase'),
+    'lpad' : require('./string/lpad'),
+    'ltrim' : require('./string/ltrim'),
+    'makePath' : require('./string/makePath'),
+    'normalizeLineBreaks' : require('./string/normalizeLineBreaks'),
+    'pascalCase' : require('./string/pascalCase'),
+    'properCase' : require('./string/properCase'),
+    'removeNonASCII' : require('./string/removeNonASCII'),
+    'removeNonWord' : require('./string/removeNonWord'),
+    'repeat' : require('./string/repeat'),
+    'replace' : require('./string/replace'),
+    'replaceAccents' : require('./string/replaceAccents'),
+    'rpad' : require('./string/rpad'),
+    'rtrim' : require('./string/rtrim'),
+    'sentenceCase' : require('./string/sentenceCase'),
+    'slugify' : require('./string/slugify'),
+    'startsWith' : require('./string/startsWith'),
+    'stripHtmlTags' : require('./string/stripHtmlTags'),
+    'trim' : require('./string/trim'),
+    'truncate' : require('./string/truncate'),
+    'typecast' : require('./string/typecast'),
+    'unCamelCase' : require('./string/unCamelCase'),
+    'underscore' : require('./string/underscore'),
+    'unescapeHtml' : require('./string/unescapeHtml'),
+    'unescapeUnicode' : require('./string/unescapeUnicode'),
+    'unhyphenate' : require('./string/unhyphenate'),
+    'upperCase' : require('./string/upperCase')
+};
+
+});
diff --git a/node_modules/mout/src/string/WHITE_SPACES.js b/node_modules/mout/src/string/WHITE_SPACES.js
new file mode 100644
index 0000000..e830d86
--- /dev/null
+++ b/node_modules/mout/src/string/WHITE_SPACES.js
@@ -0,0 +1,12 @@
+define(function() {
+    /**
+     * Contains all Unicode white-spaces. Taken from
+     * http://en.wikipedia.org/wiki/Whitespace_character.
+     */
+    return [
+        ' ', '\n', '\r', '\t', '\f', '\v', '\u00A0', '\u1680', '\u180E',
+        '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006',
+        '\u2007', '\u2008', '\u2009', '\u200A', '\u2028', '\u2029', '\u202F',
+        '\u205F', '\u3000'
+    ];
+});
diff --git a/node_modules/mout/src/string/camelCase.js b/node_modules/mout/src/string/camelCase.js
new file mode 100644
index 0000000..02e6c04
--- /dev/null
+++ b/node_modules/mout/src/string/camelCase.js
@@ -0,0 +1,16 @@
+define(['../lang/toString', './replaceAccents', './removeNonWord', './upperCase', './lowerCase'], function(toString, replaceAccents, removeNonWord, upperCase, lowerCase){
+    /**
+    * Convert string to camelCase text.
+    */
+    function camelCase(str){
+        str = toString(str);
+        str = replaceAccents(str);
+        str = removeNonWord(str)
+            .replace(/[\-_]/g, ' ') //convert all hyphens and underscores to spaces
+            .replace(/\s[a-z]/g, upperCase) //convert first char of each word to UPPERCASE
+            .replace(/\s+/g, '') //remove spaces
+            .replace(/^[A-Z]/g, lowerCase); //convert first char to lowercase
+        return str;
+    }
+    return camelCase;
+});
diff --git a/node_modules/mout/src/string/contains.js b/node_modules/mout/src/string/contains.js
new file mode 100644
index 0000000..825b5a5
--- /dev/null
+++ b/node_modules/mout/src/string/contains.js
@@ -0,0 +1,14 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Searches for a given substring
+     */
+    function contains(str, substring, fromIndex){
+        str = toString(str);
+        substring = toString(substring);
+        return str.indexOf(substring, fromIndex) !== -1;
+    }
+
+    return contains;
+
+});
diff --git a/node_modules/mout/src/string/crop.js b/node_modules/mout/src/string/crop.js
new file mode 100644
index 0000000..3c073f0
--- /dev/null
+++ b/node_modules/mout/src/string/crop.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './truncate'], function (toString, truncate) {
+    /**
+     * Truncate string at full words.
+     */
+     function crop(str, maxChars, append) {
+         str = toString(str);
+         return truncate(str, maxChars, append, true);
+     }
+
+     return crop;
+});
diff --git a/node_modules/mout/src/string/endsWith.js b/node_modules/mout/src/string/endsWith.js
new file mode 100644
index 0000000..31a73f2
--- /dev/null
+++ b/node_modules/mout/src/string/endsWith.js
@@ -0,0 +1,13 @@
+define(['../lang/toString'], function(toString) {
+    /**
+     * Checks if string ends with specified suffix.
+     */
+    function endsWith(str, suffix) {
+        str = toString(str);
+        suffix = toString(suffix);
+
+        return str.indexOf(suffix, str.length - suffix.length) !== -1;
+    }
+
+    return endsWith;
+});
diff --git a/node_modules/mout/src/string/escapeHtml.js b/node_modules/mout/src/string/escapeHtml.js
new file mode 100644
index 0000000..de34b61
--- /dev/null
+++ b/node_modules/mout/src/string/escapeHtml.js
@@ -0,0 +1,18 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Escapes a string for insertion into HTML.
+     */
+    function escapeHtml(str){
+        str = toString(str)
+            .replace(/&/g, '&amp;')
+            .replace(/</g, '&lt;')
+            .replace(/>/g, '&gt;')
+            .replace(/'/g, '&#39;')
+            .replace(/"/g, '&quot;');
+        return str;
+    }
+
+    return escapeHtml;
+
+});
diff --git a/node_modules/mout/src/string/escapeRegExp.js b/node_modules/mout/src/string/escapeRegExp.js
new file mode 100644
index 0000000..862655b
--- /dev/null
+++ b/node_modules/mout/src/string/escapeRegExp.js
@@ -0,0 +1,12 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Escape RegExp string chars.
+     */
+    function escapeRegExp(str) {
+        return toString(str).replace(/\W/g,'\\$&');
+    }
+
+    return escapeRegExp;
+
+});
diff --git a/node_modules/mout/src/string/escapeUnicode.js b/node_modules/mout/src/string/escapeUnicode.js
new file mode 100644
index 0000000..bd5e8c4
--- /dev/null
+++ b/node_modules/mout/src/string/escapeUnicode.js
@@ -0,0 +1,21 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Escape string into unicode sequences
+     */
+    function escapeUnicode(str, shouldEscapePrintable){
+        str = toString(str);
+        return str.replace(/[\s\S]/g, function(ch){
+            // skip printable ASCII chars if we should not escape them
+            if (!shouldEscapePrintable && (/[\x20-\x7E]/).test(ch)) {
+                return ch;
+            }
+            // we use "000" and slice(-4) for brevity, need to pad zeros,
+            // unicode escape always have 4 chars after "\u"
+            return '\\u'+ ('000'+ ch.charCodeAt(0).toString(16)).slice(-4);
+        });
+    }
+
+    return escapeUnicode;
+
+});
diff --git a/node_modules/mout/src/string/hyphenate.js b/node_modules/mout/src/string/hyphenate.js
new file mode 100644
index 0000000..679c405
--- /dev/null
+++ b/node_modules/mout/src/string/hyphenate.js
@@ -0,0 +1,12 @@
+define(['../lang/toString', './slugify', './unCamelCase'], function(toString, slugify, unCamelCase){
+    /**
+     * Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function hyphenate(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "-");
+    }
+
+    return hyphenate;
+});
diff --git a/node_modules/mout/src/string/insert.js b/node_modules/mout/src/string/insert.js
new file mode 100644
index 0000000..79c45be
--- /dev/null
+++ b/node_modules/mout/src/string/insert.js
@@ -0,0 +1,20 @@
+define(['../math/clamp', '../lang/toString'], function (clamp, toString) {
+
+    /**
+     * Inserts a string at a given index.
+     */
+    function insert(string, index, partial){
+        string = toString(string);
+
+        if (index < 0) {
+            index = string.length + index;
+        }
+
+        index = clamp(index, 0, string.length);
+
+        return string.substr(0, index) + partial + string.substr(index);
+    }
+
+    return insert;
+
+});
diff --git a/node_modules/mout/src/string/interpolate.js b/node_modules/mout/src/string/interpolate.js
new file mode 100644
index 0000000..b5e7f4b
--- /dev/null
+++ b/node_modules/mout/src/string/interpolate.js
@@ -0,0 +1,21 @@
+define([
+    '../lang/toString',
+    '../object/get'
+], function(toString, get) {
+
+    var stache = /\{\{([^\}]+)\}\}/g; //mustache-like
+
+    /**
+     * String interpolation
+     */
+    function interpolate(template, replacements, syntax){
+        template = toString(template);
+        var replaceFn = function(match, prop){
+            return toString( get(replacements, prop) );
+        };
+        return template.replace(syntax || stache, replaceFn);
+    }
+
+    return interpolate;
+
+});
diff --git a/node_modules/mout/src/string/lowerCase.js b/node_modules/mout/src/string/lowerCase.js
new file mode 100644
index 0000000..b045d69
--- /dev/null
+++ b/node_modules/mout/src/string/lowerCase.js
@@ -0,0 +1,11 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * "Safer" String.toLowerCase()
+     */
+    function lowerCase(str){
+        str = toString(str);
+        return str.toLowerCase();
+    }
+
+    return lowerCase;
+});
diff --git a/node_modules/mout/src/string/lpad.js b/node_modules/mout/src/string/lpad.js
new file mode 100644
index 0000000..134b415
--- /dev/null
+++ b/node_modules/mout/src/string/lpad.js
@@ -0,0 +1,16 @@
+define(['../lang/toString', './repeat'], function(toString, repeat) {
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function lpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+
+        return (str.length < minLen) ?
+            repeat(ch, minLen - str.length) + str : str;
+    }
+
+    return lpad;
+
+});
diff --git a/node_modules/mout/src/string/ltrim.js b/node_modules/mout/src/string/ltrim.js
new file mode 100644
index 0000000..477df95
--- /dev/null
+++ b/node_modules/mout/src/string/ltrim.js
@@ -0,0 +1,33 @@
+define(['../lang/toString', './WHITE_SPACES'], function(toString, WHITE_SPACES){
+    /**
+     * Remove chars from beginning of string.
+     */
+    function ltrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var start = 0,
+            len = str.length,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && start < len) {
+            found = false;
+            i = -1;
+            c = str.charAt(start);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    start++;
+                    break;
+                }
+            }
+        }
+
+        return (start >= len) ? '' : str.substr(start, len);
+    }
+
+    return ltrim;
+});
diff --git a/node_modules/mout/src/string/makePath.js b/node_modules/mout/src/string/makePath.js
new file mode 100644
index 0000000..3a6869e
--- /dev/null
+++ b/node_modules/mout/src/string/makePath.js
@@ -0,0 +1,14 @@
+define(['../array/join', '../array/slice'], function(join, slice){
+
+    /**
+     * Group arguments as path segments, if any of the args is `null` or an
+     * empty string it will be ignored from resulting path.
+     */
+    function makePath(var_args){
+        var result = join(slice(arguments), '/');
+        // need to disconsider duplicate '/' after protocol (eg: 'http://')
+        return result.replace(/([^:\/]|^)\/{2,}/g, '$1/');
+    }
+
+    return makePath;
+});
diff --git a/node_modules/mout/src/string/normalizeLineBreaks.js b/node_modules/mout/src/string/normalizeLineBreaks.js
new file mode 100644
index 0000000..44e4194
--- /dev/null
+++ b/node_modules/mout/src/string/normalizeLineBreaks.js
@@ -0,0 +1,18 @@
+define(['../lang/toString'], function (toString) {
+
+    /**
+     * Convert line-breaks from DOS/MAC to a single standard (UNIX by default)
+     */
+    function normalizeLineBreaks(str, lineEnd) {
+        str = toString(str);
+        lineEnd = lineEnd || '\n';
+
+        return str
+            .replace(/\r\n/g, lineEnd) // DOS
+            .replace(/\r/g, lineEnd)   // Mac
+            .replace(/\n/g, lineEnd);  // Unix
+    }
+
+    return normalizeLineBreaks;
+
+});
diff --git a/node_modules/mout/src/string/pascalCase.js b/node_modules/mout/src/string/pascalCase.js
new file mode 100644
index 0000000..ead9ead
--- /dev/null
+++ b/node_modules/mout/src/string/pascalCase.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './camelCase', './upperCase'], function(toString, camelCase, upperCase){
+    /**
+     * camelCase + UPPERCASE first char
+     */
+    function pascalCase(str){
+        str = toString(str);
+        return camelCase(str).replace(/^[a-z]/, upperCase);
+    }
+
+    return pascalCase;
+});
diff --git a/node_modules/mout/src/string/properCase.js b/node_modules/mout/src/string/properCase.js
new file mode 100644
index 0000000..2987b50
--- /dev/null
+++ b/node_modules/mout/src/string/properCase.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './lowerCase', './upperCase'], function(toString, lowerCase, upperCase){
+    /**
+     * UPPERCASE first char of each word.
+     */
+    function properCase(str){
+        str = toString(str);
+        return lowerCase(str).replace(/^\w|\s\w/g, upperCase);
+    }
+
+    return properCase;
+});
diff --git a/node_modules/mout/src/string/removeNonASCII.js b/node_modules/mout/src/string/removeNonASCII.js
new file mode 100644
index 0000000..4905869
--- /dev/null
+++ b/node_modules/mout/src/string/removeNonASCII.js
@@ -0,0 +1,14 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * Remove non-printable ASCII chars
+     */
+    function removeNonASCII(str){
+        str = toString(str);
+
+        // Matches non-printable ASCII chars -
+        // http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
+        return str.replace(/[^\x20-\x7E]/g, '');
+    }
+
+    return removeNonASCII;
+});
diff --git a/node_modules/mout/src/string/removeNonWord.js b/node_modules/mout/src/string/removeNonWord.js
new file mode 100644
index 0000000..fb737d7
--- /dev/null
+++ b/node_modules/mout/src/string/removeNonWord.js
@@ -0,0 +1,14 @@
+define(['../lang/toString'], function(toString){
+    // This pattern is generated by the _build/pattern-removeNonWord.js script
+    var PATTERN = /[^\x20\x2D0-9A-Z\x5Fa-z\xC0-\xD6\xD8-\xF6\xF8-\xFF]/g;
+
+    /**
+     * Remove non-word chars.
+     */
+    function removeNonWord(str){
+        str = toString(str);
+        return str.replace(PATTERN, '');
+    }
+
+    return removeNonWord;
+});
diff --git a/node_modules/mout/src/string/repeat.js b/node_modules/mout/src/string/repeat.js
new file mode 100644
index 0000000..0a25d83
--- /dev/null
+++ b/node_modules/mout/src/string/repeat.js
@@ -0,0 +1,25 @@
+define(['../lang/toString', '../number/toInt'], function(toString, toInt){
+
+    /**
+     * Repeat string n times
+     */
+     function repeat(str, n){
+         var result = '';
+         str = toString(str);
+         n = toInt(n);
+        if (n < 1) {
+            return '';
+        }
+        while (n > 0) {
+            if (n % 2) {
+                result += str;
+            }
+            n = Math.floor(n / 2);
+            str += str;
+        }
+        return result;
+     }
+
+     return repeat;
+
+});
diff --git a/node_modules/mout/src/string/replace.js b/node_modules/mout/src/string/replace.js
new file mode 100644
index 0000000..8b762fd
--- /dev/null
+++ b/node_modules/mout/src/string/replace.js
@@ -0,0 +1,32 @@
+define(['../lang/toString', '../lang/toArray'], function (toString, toArray) {
+
+    /**
+     * Replace string(s) with the replacement(s) in the source.
+     */
+    function replace(str, search, replacements) {
+        str = toString(str);
+        search = toArray(search);
+        replacements = toArray(replacements);
+
+        var searchLength = search.length,
+            replacementsLength = replacements.length;
+
+        if (replacementsLength !== 1 && searchLength !== replacementsLength) {
+            throw new Error('Unequal number of searches and replacements');
+        }
+
+        var i = -1;
+        while (++i < searchLength) {
+            // Use the first replacement for all searches if only one
+            // replacement is provided
+            str = str.replace(
+                search[i],
+                replacements[(replacementsLength === 1) ? 0 : i]);
+        }
+
+        return str;
+    }
+
+    return replace;
+
+});
diff --git a/node_modules/mout/src/string/replaceAccents.js b/node_modules/mout/src/string/replaceAccents.js
new file mode 100644
index 0000000..3a63f55
--- /dev/null
+++ b/node_modules/mout/src/string/replaceAccents.js
@@ -0,0 +1,36 @@
+define(['../lang/toString'], function(toString){
+    /**
+    * Replaces all accented chars with regular ones
+    */
+    function replaceAccents(str){
+        str = toString(str);
+
+        // verifies if the String has accents and replace them
+        if (str.search(/[\xC0-\xFF]/g) > -1) {
+            str = str
+                    .replace(/[\xC0-\xC5]/g, "A")
+                    .replace(/[\xC6]/g, "AE")
+                    .replace(/[\xC7]/g, "C")
+                    .replace(/[\xC8-\xCB]/g, "E")
+                    .replace(/[\xCC-\xCF]/g, "I")
+                    .replace(/[\xD0]/g, "D")
+                    .replace(/[\xD1]/g, "N")
+                    .replace(/[\xD2-\xD6\xD8]/g, "O")
+                    .replace(/[\xD9-\xDC]/g, "U")
+                    .replace(/[\xDD]/g, "Y")
+                    .replace(/[\xDE]/g, "P")
+                    .replace(/[\xE0-\xE5]/g, "a")
+                    .replace(/[\xE6]/g, "ae")
+                    .replace(/[\xE7]/g, "c")
+                    .replace(/[\xE8-\xEB]/g, "e")
+                    .replace(/[\xEC-\xEF]/g, "i")
+                    .replace(/[\xF1]/g, "n")
+                    .replace(/[\xF2-\xF6\xF8]/g, "o")
+                    .replace(/[\xF9-\xFC]/g, "u")
+                    .replace(/[\xFE]/g, "p")
+                    .replace(/[\xFD\xFF]/g, "y");
+        }
+        return str;
+    }
+    return replaceAccents;
+});
diff --git a/node_modules/mout/src/string/rpad.js b/node_modules/mout/src/string/rpad.js
new file mode 100644
index 0000000..2efd9c8
--- /dev/null
+++ b/node_modules/mout/src/string/rpad.js
@@ -0,0 +1,14 @@
+define(['../lang/toString', './repeat'], function (toString, repeat) {
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function rpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+        return (str.length < minLen)? str + repeat(ch, minLen - str.length) : str;
+    }
+
+    return rpad;
+
+});
diff --git a/node_modules/mout/src/string/rtrim.js b/node_modules/mout/src/string/rtrim.js
new file mode 100644
index 0000000..a4cc282
--- /dev/null
+++ b/node_modules/mout/src/string/rtrim.js
@@ -0,0 +1,32 @@
+define(['../lang/toString', './WHITE_SPACES'], function(toString, WHITE_SPACES){
+    /**
+     * Remove chars from end of string.
+     */
+    function rtrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var end = str.length - 1,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && end >= 0) {
+            found = false;
+            i = -1;
+            c = str.charAt(end);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    end--;
+                    break;
+                }
+            }
+        }
+
+        return (end >= 0) ? str.substring(0, end + 1) : '';
+    }
+
+    return rtrim;
+});
diff --git a/node_modules/mout/src/string/sentenceCase.js b/node_modules/mout/src/string/sentenceCase.js
new file mode 100644
index 0000000..cfe45af
--- /dev/null
+++ b/node_modules/mout/src/string/sentenceCase.js
@@ -0,0 +1,13 @@
+define(['../lang/toString', './lowerCase', './upperCase'], function(toString, lowerCase, upperCase){
+    /**
+     * UPPERCASE first char of each sentence and lowercase other chars.
+     */
+    function sentenceCase(str){
+        str = toString(str);
+
+        // Replace first char of each sentence (new line or after '.\s+') to
+        // UPPERCASE
+        return lowerCase(str).replace(/(^\w)|\.\s+(\w)/gm, upperCase);
+    }
+    return sentenceCase;
+});
diff --git a/node_modules/mout/src/string/slugify.js b/node_modules/mout/src/string/slugify.js
new file mode 100644
index 0000000..c6d68c7
--- /dev/null
+++ b/node_modules/mout/src/string/slugify.js
@@ -0,0 +1,21 @@
+define(['../lang/toString', './replaceAccents', './removeNonWord', './trim'], function(toString, replaceAccents, removeNonWord, trim){
+    /**
+     * Convert to lower case, remove accents, remove non-word chars and
+     * replace spaces with the specified delimeter.
+     * Does not split camelCase text.
+     */
+    function slugify(str, delimeter){
+        str = toString(str);
+
+        if (delimeter == null) {
+            delimeter = "-";
+        }
+        str = replaceAccents(str);
+        str = removeNonWord(str);
+        str = trim(str) //should come after removeNonWord
+                .replace(/ +/g, delimeter) //replace spaces with delimeter
+                .toLowerCase();
+        return str;
+    }
+    return slugify;
+});
diff --git a/node_modules/mout/src/string/startsWith.js b/node_modules/mout/src/string/startsWith.js
new file mode 100644
index 0000000..88ae545
--- /dev/null
+++ b/node_modules/mout/src/string/startsWith.js
@@ -0,0 +1,13 @@
+define(['../lang/toString'], function (toString) {
+    /**
+     * Checks if string starts with specified prefix.
+     */
+    function startsWith(str, prefix) {
+        str = toString(str);
+        prefix = toString(prefix);
+
+        return str.indexOf(prefix) === 0;
+    }
+
+    return startsWith;
+});
diff --git a/node_modules/mout/src/string/stripHtmlTags.js b/node_modules/mout/src/string/stripHtmlTags.js
new file mode 100644
index 0000000..e8da956
--- /dev/null
+++ b/node_modules/mout/src/string/stripHtmlTags.js
@@ -0,0 +1,11 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * Remove HTML tags from string.
+     */
+    function stripHtmlTags(str){
+        str = toString(str);
+
+        return str.replace(/<[^>]*>/g, '');
+    }
+    return stripHtmlTags;
+});
diff --git a/node_modules/mout/src/string/trim.js b/node_modules/mout/src/string/trim.js
new file mode 100644
index 0000000..5552604
--- /dev/null
+++ b/node_modules/mout/src/string/trim.js
@@ -0,0 +1,12 @@
+define(['../lang/toString', './WHITE_SPACES', './ltrim', './rtrim'], function(toString, WHITE_SPACES, ltrim, rtrim){
+    /**
+     * Remove white-spaces from beginning and end of string.
+     */
+    function trim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+        return ltrim(rtrim(str, chars), chars);
+    }
+
+    return trim;
+});
diff --git a/node_modules/mout/src/string/truncate.js b/node_modules/mout/src/string/truncate.js
new file mode 100644
index 0000000..34000d9
--- /dev/null
+++ b/node_modules/mout/src/string/truncate.js
@@ -0,0 +1,20 @@
+define(['../lang/toString', './trim'], function(toString, trim){
+    /**
+     * Limit number of chars.
+     */
+    function truncate(str, maxChars, append, onlyFullWords){
+        str = toString(str);
+        append = append || '...';
+        maxChars = onlyFullWords? maxChars + 1 : maxChars;
+
+        str = trim(str);
+        if(str.length <= maxChars){
+            return str;
+        }
+        str = str.substr(0, maxChars - append.length);
+        //crop at last space or remove trailing whitespace
+        str = onlyFullWords? str.substr(0, str.lastIndexOf(' ')) : trim(str);
+        return str + append;
+    }
+    return truncate;
+});
diff --git a/node_modules/mout/src/string/typecast.js b/node_modules/mout/src/string/typecast.js
new file mode 100644
index 0000000..a7c8315
--- /dev/null
+++ b/node_modules/mout/src/string/typecast.js
@@ -0,0 +1,29 @@
+define(function () {
+
+    var UNDEF;
+
+    /**
+     * Parses string and convert it into a native value.
+     */
+    function typecast(val) {
+        var r;
+        if ( val === null || val === 'null' ) {
+            r = null;
+        } else if ( val === 'true' ) {
+            r = true;
+        } else if ( val === 'false' ) {
+            r = false;
+        } else if ( val === UNDEF || val === 'undefined' ) {
+            r = UNDEF;
+        } else if ( val === '' || isNaN(val) ) {
+            //isNaN('') returns false
+            r = val;
+        } else {
+            //parseFloat(null || '') returns NaN
+            r = parseFloat(val);
+        }
+        return r;
+    }
+
+    return typecast;
+});
diff --git a/node_modules/mout/src/string/unCamelCase.js b/node_modules/mout/src/string/unCamelCase.js
new file mode 100644
index 0000000..eeef39b
--- /dev/null
+++ b/node_modules/mout/src/string/unCamelCase.js
@@ -0,0 +1,23 @@
+define(['../lang/toString'], function(toString){
+
+    var CAMEL_CASE_BORDER = /([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g;
+
+    /**
+     * Add space between camelCase text.
+     */
+    function unCamelCase(str, delimiter){
+        if (delimiter == null) {
+            delimiter = ' ';
+        }
+
+        function join(str, c1, c2) {
+            return c1 + delimiter + c2;
+        }
+
+        str = toString(str);
+        str = str.replace(CAMEL_CASE_BORDER, join);
+        str = str.toLowerCase(); //add space between camelCase text
+        return str;
+    }
+    return unCamelCase;
+});
diff --git a/node_modules/mout/src/string/underscore.js b/node_modules/mout/src/string/underscore.js
new file mode 100644
index 0000000..75dd464
--- /dev/null
+++ b/node_modules/mout/src/string/underscore.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './slugify', './unCamelCase'], function(toString, slugify, unCamelCase){
+    /**
+     * Replaces spaces with underscores, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function underscore(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "_");
+    }
+    return underscore;
+});
diff --git a/node_modules/mout/src/string/unescapeHtml.js b/node_modules/mout/src/string/unescapeHtml.js
new file mode 100644
index 0000000..ca89042
--- /dev/null
+++ b/node_modules/mout/src/string/unescapeHtml.js
@@ -0,0 +1,18 @@
+define(['../lang/toString'], function (toString) {
+
+    /**
+     * Unescapes HTML special chars
+     */
+    function unescapeHtml(str){
+        str = toString(str)
+            .replace(/&amp;/g , '&')
+            .replace(/&lt;/g  , '<')
+            .replace(/&gt;/g  , '>')
+            .replace(/&#0*39;/g , "'")
+            .replace(/&quot;/g, '"');
+        return str;
+    }
+
+    return unescapeHtml;
+
+});
diff --git a/node_modules/mout/src/string/unescapeUnicode.js b/node_modules/mout/src/string/unescapeUnicode.js
new file mode 100644
index 0000000..d4a7ba1
--- /dev/null
+++ b/node_modules/mout/src/string/unescapeUnicode.js
@@ -0,0 +1,16 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Unescape unicode char sequences
+     */
+    function unescapeUnicode(str){
+        str = toString(str);
+        return str.replace(/\\u[0-9a-f]{4}/g, function(ch){
+            var code = parseInt(ch.slice(2), 16);
+            return String.fromCharCode(code);
+        });
+    }
+
+    return unescapeUnicode;
+
+});
diff --git a/node_modules/mout/src/string/unhyphenate.js b/node_modules/mout/src/string/unhyphenate.js
new file mode 100644
index 0000000..6ac2fa4
--- /dev/null
+++ b/node_modules/mout/src/string/unhyphenate.js
@@ -0,0 +1,10 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * Replaces hyphens with spaces. (only hyphens between word chars)
+     */
+    function unhyphenate(str){
+        str = toString(str);
+        return str.replace(/(\w)(-)(\w)/g, '$1 $3');
+    }
+    return unhyphenate;
+});
diff --git a/node_modules/mout/src/string/upperCase.js b/node_modules/mout/src/string/upperCase.js
new file mode 100644
index 0000000..8b2073e
--- /dev/null
+++ b/node_modules/mout/src/string/upperCase.js
@@ -0,0 +1,10 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * "Safer" String.toUpperCase()
+     */
+    function upperCase(str){
+        str = toString(str);
+        return str.toUpperCase();
+    }
+    return upperCase;
+});
diff --git a/node_modules/mout/src/time.js b/node_modules/mout/src/time.js
new file mode 100644
index 0000000..67c9068
--- /dev/null
+++ b/node_modules/mout/src/time.js
@@ -0,0 +1,12 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'convert' : require('./time/convert'),
+    'now' : require('./time/now'),
+    'parseMs' : require('./time/parseMs'),
+    'toTimeString' : require('./time/toTimeString')
+};
+
+});
diff --git a/node_modules/mout/src/time/convert.js b/node_modules/mout/src/time/convert.js
new file mode 100644
index 0000000..2de0cf2
--- /dev/null
+++ b/node_modules/mout/src/time/convert.js
@@ -0,0 +1,41 @@
+define(function () {
+
+    /**
+     * convert time into another unit
+     */
+    function convert(val, sourceUnitName, destinationUnitName){
+        destinationUnitName = destinationUnitName || 'ms';
+        return (val * getUnit(sourceUnitName)) / getUnit(destinationUnitName);
+    }
+
+
+    //TODO: maybe extract to a separate module
+    function getUnit(unitName){
+        switch(unitName){
+            case 'ms':
+            case 'millisecond':
+                return 1;
+            case 's':
+            case 'second':
+                 return 1000;
+            case 'm':
+            case 'minute':
+                 return 60000;
+            case 'h':
+            case 'hour':
+                 return 3600000;
+            case 'd':
+            case 'day':
+                 return 86400000;
+            case 'w':
+            case 'week':
+                 return 604800000;
+            default:
+                throw new Error('"'+ unitName + '" is not a valid unit');
+        }
+    }
+
+
+    return convert;
+
+});
diff --git a/node_modules/mout/src/time/now.js b/node_modules/mout/src/time/now.js
new file mode 100644
index 0000000..4b2d03c
--- /dev/null
+++ b/node_modules/mout/src/time/now.js
@@ -0,0 +1,18 @@
+define(function () {
+
+    /**
+     * Get current time in miliseconds
+     */
+    function now(){
+        // yes, we defer the work to another function to allow mocking it
+        // during the tests
+        return now.get();
+    }
+
+    now.get = (typeof Date.now === 'function')? Date.now : function(){
+        return +(new Date());
+    };
+
+    return now;
+
+});
diff --git a/node_modules/mout/src/time/parseMs.js b/node_modules/mout/src/time/parseMs.js
new file mode 100644
index 0000000..964929a
--- /dev/null
+++ b/node_modules/mout/src/time/parseMs.js
@@ -0,0 +1,17 @@
+define(['../math/countSteps'], function(countSteps){
+
+    /**
+     * Parse timestamp into an object.
+     */
+    function parseMs(ms){
+        return {
+            milliseconds : countSteps(ms, 1, 1000),
+            seconds      : countSteps(ms, 1000, 60),
+            minutes      : countSteps(ms, 60000, 60),
+            hours        : countSteps(ms, 3600000, 24),
+            days         : countSteps(ms, 86400000)
+        };
+    }
+
+    return parseMs;
+});
diff --git a/node_modules/mout/src/time/toTimeString.js b/node_modules/mout/src/time/toTimeString.js
new file mode 100644
index 0000000..edf1821
--- /dev/null
+++ b/node_modules/mout/src/time/toTimeString.js
@@ -0,0 +1,23 @@
+define(['../math/countSteps', '../number/pad'], function(countSteps, pad){
+
+    var HOUR = 3600000,
+        MINUTE = 60000,
+        SECOND = 1000;
+
+    /**
+     * Format timestamp into a time string.
+     */
+    function toTimeString(ms){
+        var h = ms < HOUR   ? 0 : countSteps(ms, HOUR),
+            m = ms < MINUTE ? 0 : countSteps(ms, MINUTE, 60),
+            s = ms < SECOND ? 0 : countSteps(ms, SECOND, 60),
+            str = '';
+
+        str += h? h + ':' : '';
+        str += pad(m, 2) + ':';
+        str += pad(s, 2);
+
+        return str;
+    }
+    return toTimeString;
+});
diff --git a/node_modules/mout/string.js b/node_modules/mout/string.js
new file mode 100644
index 0000000..6115811
--- /dev/null
+++ b/node_modules/mout/string.js
@@ -0,0 +1,46 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'WHITE_SPACES' : require('./string/WHITE_SPACES'),
+    'camelCase' : require('./string/camelCase'),
+    'contains' : require('./string/contains'),
+    'crop' : require('./string/crop'),
+    'endsWith' : require('./string/endsWith'),
+    'escapeHtml' : require('./string/escapeHtml'),
+    'escapeRegExp' : require('./string/escapeRegExp'),
+    'escapeUnicode' : require('./string/escapeUnicode'),
+    'hyphenate' : require('./string/hyphenate'),
+    'insert' : require('./string/insert'),
+    'interpolate' : require('./string/interpolate'),
+    'lowerCase' : require('./string/lowerCase'),
+    'lpad' : require('./string/lpad'),
+    'ltrim' : require('./string/ltrim'),
+    'makePath' : require('./string/makePath'),
+    'normalizeLineBreaks' : require('./string/normalizeLineBreaks'),
+    'pascalCase' : require('./string/pascalCase'),
+    'properCase' : require('./string/properCase'),
+    'removeNonASCII' : require('./string/removeNonASCII'),
+    'removeNonWord' : require('./string/removeNonWord'),
+    'repeat' : require('./string/repeat'),
+    'replace' : require('./string/replace'),
+    'replaceAccents' : require('./string/replaceAccents'),
+    'rpad' : require('./string/rpad'),
+    'rtrim' : require('./string/rtrim'),
+    'sentenceCase' : require('./string/sentenceCase'),
+    'slugify' : require('./string/slugify'),
+    'startsWith' : require('./string/startsWith'),
+    'stripHtmlTags' : require('./string/stripHtmlTags'),
+    'trim' : require('./string/trim'),
+    'truncate' : require('./string/truncate'),
+    'typecast' : require('./string/typecast'),
+    'unCamelCase' : require('./string/unCamelCase'),
+    'underscore' : require('./string/underscore'),
+    'unescapeHtml' : require('./string/unescapeHtml'),
+    'unescapeUnicode' : require('./string/unescapeUnicode'),
+    'unhyphenate' : require('./string/unhyphenate'),
+    'upperCase' : require('./string/upperCase')
+};
+
+
diff --git a/node_modules/mout/string/WHITE_SPACES.js b/node_modules/mout/string/WHITE_SPACES.js
new file mode 100644
index 0000000..03e0125
--- /dev/null
+++ b/node_modules/mout/string/WHITE_SPACES.js
@@ -0,0 +1,12 @@
+
+    /**
+     * Contains all Unicode white-spaces. Taken from
+     * http://en.wikipedia.org/wiki/Whitespace_character.
+     */
+    module.exports = [
+        ' ', '\n', '\r', '\t', '\f', '\v', '\u00A0', '\u1680', '\u180E',
+        '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006',
+        '\u2007', '\u2008', '\u2009', '\u200A', '\u2028', '\u2029', '\u202F',
+        '\u205F', '\u3000'
+    ];
+
diff --git a/node_modules/mout/string/camelCase.js b/node_modules/mout/string/camelCase.js
new file mode 100644
index 0000000..aadb69a
--- /dev/null
+++ b/node_modules/mout/string/camelCase.js
@@ -0,0 +1,20 @@
+var toString = require('../lang/toString');
+var replaceAccents = require('./replaceAccents');
+var removeNonWord = require('./removeNonWord');
+var upperCase = require('./upperCase');
+var lowerCase = require('./lowerCase');
+    /**
+    * Convert string to camelCase text.
+    */
+    function camelCase(str){
+        str = toString(str);
+        str = replaceAccents(str);
+        str = removeNonWord(str)
+            .replace(/[\-_]/g, ' ') //convert all hyphens and underscores to spaces
+            .replace(/\s[a-z]/g, upperCase) //convert first char of each word to UPPERCASE
+            .replace(/\s+/g, '') //remove spaces
+            .replace(/^[A-Z]/g, lowerCase); //convert first char to lowercase
+        return str;
+    }
+    module.exports = camelCase;
+
diff --git a/node_modules/mout/string/contains.js b/node_modules/mout/string/contains.js
new file mode 100644
index 0000000..cb22cae
--- /dev/null
+++ b/node_modules/mout/string/contains.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Searches for a given substring
+     */
+    function contains(str, substring, fromIndex){
+        str = toString(str);
+        substring = toString(substring);
+        return str.indexOf(substring, fromIndex) !== -1;
+    }
+
+    module.exports = contains;
+
+
diff --git a/node_modules/mout/string/crop.js b/node_modules/mout/string/crop.js
new file mode 100644
index 0000000..53b93b4
--- /dev/null
+++ b/node_modules/mout/string/crop.js
@@ -0,0 +1,12 @@
+var toString = require('../lang/toString');
+var truncate = require('./truncate');
+    /**
+     * Truncate string at full words.
+     */
+     function crop(str, maxChars, append) {
+         str = toString(str);
+         return truncate(str, maxChars, append, true);
+     }
+
+     module.exports = crop;
+
diff --git a/node_modules/mout/string/endsWith.js b/node_modules/mout/string/endsWith.js
new file mode 100644
index 0000000..d504e9d
--- /dev/null
+++ b/node_modules/mout/string/endsWith.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+    /**
+     * Checks if string ends with specified suffix.
+     */
+    function endsWith(str, suffix) {
+        str = toString(str);
+        suffix = toString(suffix);
+
+        return str.indexOf(suffix, str.length - suffix.length) !== -1;
+    }
+
+    module.exports = endsWith;
+
diff --git a/node_modules/mout/string/escapeHtml.js b/node_modules/mout/string/escapeHtml.js
new file mode 100644
index 0000000..e67c4b2
--- /dev/null
+++ b/node_modules/mout/string/escapeHtml.js
@@ -0,0 +1,18 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Escapes a string for insertion into HTML.
+     */
+    function escapeHtml(str){
+        str = toString(str)
+            .replace(/&/g, '&amp;')
+            .replace(/</g, '&lt;')
+            .replace(/>/g, '&gt;')
+            .replace(/'/g, '&#39;')
+            .replace(/"/g, '&quot;');
+        return str;
+    }
+
+    module.exports = escapeHtml;
+
+
diff --git a/node_modules/mout/string/escapeRegExp.js b/node_modules/mout/string/escapeRegExp.js
new file mode 100644
index 0000000..02d743c
--- /dev/null
+++ b/node_modules/mout/string/escapeRegExp.js
@@ -0,0 +1,12 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Escape RegExp string chars.
+     */
+    function escapeRegExp(str) {
+        return toString(str).replace(/\W/g,'\\$&');
+    }
+
+    module.exports = escapeRegExp;
+
+
diff --git a/node_modules/mout/string/escapeUnicode.js b/node_modules/mout/string/escapeUnicode.js
new file mode 100644
index 0000000..ec649ad
--- /dev/null
+++ b/node_modules/mout/string/escapeUnicode.js
@@ -0,0 +1,21 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Escape string into unicode sequences
+     */
+    function escapeUnicode(str, shouldEscapePrintable){
+        str = toString(str);
+        return str.replace(/[\s\S]/g, function(ch){
+            // skip printable ASCII chars if we should not escape them
+            if (!shouldEscapePrintable && (/[\x20-\x7E]/).test(ch)) {
+                return ch;
+            }
+            // we use "000" and slice(-4) for brevity, need to pad zeros,
+            // unicode escape always have 4 chars after "\u"
+            return '\\u'+ ('000'+ ch.charCodeAt(0).toString(16)).slice(-4);
+        });
+    }
+
+    module.exports = escapeUnicode;
+
+
diff --git a/node_modules/mout/string/hyphenate.js b/node_modules/mout/string/hyphenate.js
new file mode 100644
index 0000000..95e3243
--- /dev/null
+++ b/node_modules/mout/string/hyphenate.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+var slugify = require('./slugify');
+var unCamelCase = require('./unCamelCase');
+    /**
+     * Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function hyphenate(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "-");
+    }
+
+    module.exports = hyphenate;
+
diff --git a/node_modules/mout/string/insert.js b/node_modules/mout/string/insert.js
new file mode 100644
index 0000000..8f042c6
--- /dev/null
+++ b/node_modules/mout/string/insert.js
@@ -0,0 +1,21 @@
+var clamp = require('../math/clamp');
+var toString = require('../lang/toString');
+
+    /**
+     * Inserts a string at a given index.
+     */
+    function insert(string, index, partial){
+        string = toString(string);
+
+        if (index < 0) {
+            index = string.length + index;
+        }
+
+        index = clamp(index, 0, string.length);
+
+        return string.substr(0, index) + partial + string.substr(index);
+    }
+
+    module.exports = insert;
+
+
diff --git a/node_modules/mout/string/interpolate.js b/node_modules/mout/string/interpolate.js
new file mode 100644
index 0000000..efbbf7d
--- /dev/null
+++ b/node_modules/mout/string/interpolate.js
@@ -0,0 +1,19 @@
+var toString = require('../lang/toString');
+var get = require('../object/get');
+
+    var stache = /\{\{([^\}]+)\}\}/g; //mustache-like
+
+    /**
+     * String interpolation
+     */
+    function interpolate(template, replacements, syntax){
+        template = toString(template);
+        var replaceFn = function(match, prop){
+            return toString( get(replacements, prop) );
+        };
+        return template.replace(syntax || stache, replaceFn);
+    }
+
+    module.exports = interpolate;
+
+
diff --git a/node_modules/mout/string/lowerCase.js b/node_modules/mout/string/lowerCase.js
new file mode 100644
index 0000000..30bb7ad
--- /dev/null
+++ b/node_modules/mout/string/lowerCase.js
@@ -0,0 +1,11 @@
+var toString = require('../lang/toString');
+    /**
+     * "Safer" String.toLowerCase()
+     */
+    function lowerCase(str){
+        str = toString(str);
+        return str.toLowerCase();
+    }
+
+    module.exports = lowerCase;
+
diff --git a/node_modules/mout/string/lpad.js b/node_modules/mout/string/lpad.js
new file mode 100644
index 0000000..63641d3
--- /dev/null
+++ b/node_modules/mout/string/lpad.js
@@ -0,0 +1,17 @@
+var toString = require('../lang/toString');
+var repeat = require('./repeat');
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function lpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+
+        return (str.length < minLen) ?
+            repeat(ch, minLen - str.length) + str : str;
+    }
+
+    module.exports = lpad;
+
+
diff --git a/node_modules/mout/string/ltrim.js b/node_modules/mout/string/ltrim.js
new file mode 100644
index 0000000..23d7b33
--- /dev/null
+++ b/node_modules/mout/string/ltrim.js
@@ -0,0 +1,34 @@
+var toString = require('../lang/toString');
+var WHITE_SPACES = require('./WHITE_SPACES');
+    /**
+     * Remove chars from beginning of string.
+     */
+    function ltrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var start = 0,
+            len = str.length,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && start < len) {
+            found = false;
+            i = -1;
+            c = str.charAt(start);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    start++;
+                    break;
+                }
+            }
+        }
+
+        return (start >= len) ? '' : str.substr(start, len);
+    }
+
+    module.exports = ltrim;
+
diff --git a/node_modules/mout/string/makePath.js b/node_modules/mout/string/makePath.js
new file mode 100644
index 0000000..c337cec
--- /dev/null
+++ b/node_modules/mout/string/makePath.js
@@ -0,0 +1,15 @@
+var join = require('../array/join');
+var slice = require('../array/slice');
+
+    /**
+     * Group arguments as path segments, if any of the args is `null` or an
+     * empty string it will be ignored from resulting path.
+     */
+    function makePath(var_args){
+        var result = join(slice(arguments), '/');
+        // need to disconsider duplicate '/' after protocol (eg: 'http://')
+        return result.replace(/([^:\/]|^)\/{2,}/g, '$1/');
+    }
+
+    module.exports = makePath;
+
diff --git a/node_modules/mout/string/normalizeLineBreaks.js b/node_modules/mout/string/normalizeLineBreaks.js
new file mode 100644
index 0000000..8a8dccf
--- /dev/null
+++ b/node_modules/mout/string/normalizeLineBreaks.js
@@ -0,0 +1,18 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Convert line-breaks from DOS/MAC to a single standard (UNIX by default)
+     */
+    function normalizeLineBreaks(str, lineEnd) {
+        str = toString(str);
+        lineEnd = lineEnd || '\n';
+
+        return str
+            .replace(/\r\n/g, lineEnd) // DOS
+            .replace(/\r/g, lineEnd)   // Mac
+            .replace(/\n/g, lineEnd);  // Unix
+    }
+
+    module.exports = normalizeLineBreaks;
+
+
diff --git a/node_modules/mout/string/pascalCase.js b/node_modules/mout/string/pascalCase.js
new file mode 100644
index 0000000..fd19035
--- /dev/null
+++ b/node_modules/mout/string/pascalCase.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+var camelCase = require('./camelCase');
+var upperCase = require('./upperCase');
+    /**
+     * camelCase + UPPERCASE first char
+     */
+    function pascalCase(str){
+        str = toString(str);
+        return camelCase(str).replace(/^[a-z]/, upperCase);
+    }
+
+    module.exports = pascalCase;
+
diff --git a/node_modules/mout/string/properCase.js b/node_modules/mout/string/properCase.js
new file mode 100644
index 0000000..61636be
--- /dev/null
+++ b/node_modules/mout/string/properCase.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+var lowerCase = require('./lowerCase');
+var upperCase = require('./upperCase');
+    /**
+     * UPPERCASE first char of each word.
+     */
+    function properCase(str){
+        str = toString(str);
+        return lowerCase(str).replace(/^\w|\s\w/g, upperCase);
+    }
+
+    module.exports = properCase;
+
diff --git a/node_modules/mout/string/removeNonASCII.js b/node_modules/mout/string/removeNonASCII.js
new file mode 100644
index 0000000..fb46381
--- /dev/null
+++ b/node_modules/mout/string/removeNonASCII.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+    /**
+     * Remove non-printable ASCII chars
+     */
+    function removeNonASCII(str){
+        str = toString(str);
+
+        // Matches non-printable ASCII chars -
+        // http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
+        return str.replace(/[^\x20-\x7E]/g, '');
+    }
+
+    module.exports = removeNonASCII;
+
diff --git a/node_modules/mout/string/removeNonWord.js b/node_modules/mout/string/removeNonWord.js
new file mode 100644
index 0000000..ffb05a9
--- /dev/null
+++ b/node_modules/mout/string/removeNonWord.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+    // This pattern is generated by the _build/pattern-removeNonWord.js script
+    var PATTERN = /[^\x20\x2D0-9A-Z\x5Fa-z\xC0-\xD6\xD8-\xF6\xF8-\xFF]/g;
+
+    /**
+     * Remove non-word chars.
+     */
+    function removeNonWord(str){
+        str = toString(str);
+        return str.replace(PATTERN, '');
+    }
+
+    module.exports = removeNonWord;
+
diff --git a/node_modules/mout/string/repeat.js b/node_modules/mout/string/repeat.js
new file mode 100644
index 0000000..df0dc1e
--- /dev/null
+++ b/node_modules/mout/string/repeat.js
@@ -0,0 +1,26 @@
+var toString = require('../lang/toString');
+var toInt = require('../number/toInt');
+
+    /**
+     * Repeat string n times
+     */
+     function repeat(str, n){
+         var result = '';
+         str = toString(str);
+         n = toInt(n);
+        if (n < 1) {
+            return '';
+        }
+        while (n > 0) {
+            if (n % 2) {
+                result += str;
+            }
+            n = Math.floor(n / 2);
+            str += str;
+        }
+        return result;
+     }
+
+     module.exports = repeat;
+
+
diff --git a/node_modules/mout/string/replace.js b/node_modules/mout/string/replace.js
new file mode 100644
index 0000000..14433fc
--- /dev/null
+++ b/node_modules/mout/string/replace.js
@@ -0,0 +1,33 @@
+var toString = require('../lang/toString');
+var toArray = require('../lang/toArray');
+
+    /**
+     * Replace string(s) with the replacement(s) in the source.
+     */
+    function replace(str, search, replacements) {
+        str = toString(str);
+        search = toArray(search);
+        replacements = toArray(replacements);
+
+        var searchLength = search.length,
+            replacementsLength = replacements.length;
+
+        if (replacementsLength !== 1 && searchLength !== replacementsLength) {
+            throw new Error('Unequal number of searches and replacements');
+        }
+
+        var i = -1;
+        while (++i < searchLength) {
+            // Use the first replacement for all searches if only one
+            // replacement is provided
+            str = str.replace(
+                search[i],
+                replacements[(replacementsLength === 1) ? 0 : i]);
+        }
+
+        return str;
+    }
+
+    module.exports = replace;
+
+
diff --git a/node_modules/mout/string/replaceAccents.js b/node_modules/mout/string/replaceAccents.js
new file mode 100644
index 0000000..bb22126
--- /dev/null
+++ b/node_modules/mout/string/replaceAccents.js
@@ -0,0 +1,36 @@
+var toString = require('../lang/toString');
+    /**
+    * Replaces all accented chars with regular ones
+    */
+    function replaceAccents(str){
+        str = toString(str);
+
+        // verifies if the String has accents and replace them
+        if (str.search(/[\xC0-\xFF]/g) > -1) {
+            str = str
+                    .replace(/[\xC0-\xC5]/g, "A")
+                    .replace(/[\xC6]/g, "AE")
+                    .replace(/[\xC7]/g, "C")
+                    .replace(/[\xC8-\xCB]/g, "E")
+                    .replace(/[\xCC-\xCF]/g, "I")
+                    .replace(/[\xD0]/g, "D")
+                    .replace(/[\xD1]/g, "N")
+                    .replace(/[\xD2-\xD6\xD8]/g, "O")
+                    .replace(/[\xD9-\xDC]/g, "U")
+                    .replace(/[\xDD]/g, "Y")
+                    .replace(/[\xDE]/g, "P")
+                    .replace(/[\xE0-\xE5]/g, "a")
+                    .replace(/[\xE6]/g, "ae")
+                    .replace(/[\xE7]/g, "c")
+                    .replace(/[\xE8-\xEB]/g, "e")
+                    .replace(/[\xEC-\xEF]/g, "i")
+                    .replace(/[\xF1]/g, "n")
+                    .replace(/[\xF2-\xF6\xF8]/g, "o")
+                    .replace(/[\xF9-\xFC]/g, "u")
+                    .replace(/[\xFE]/g, "p")
+                    .replace(/[\xFD\xFF]/g, "y");
+        }
+        return str;
+    }
+    module.exports = replaceAccents;
+
diff --git a/node_modules/mout/string/rpad.js b/node_modules/mout/string/rpad.js
new file mode 100644
index 0000000..99f6378
--- /dev/null
+++ b/node_modules/mout/string/rpad.js
@@ -0,0 +1,15 @@
+var toString = require('../lang/toString');
+var repeat = require('./repeat');
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function rpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+        return (str.length < minLen)? str + repeat(ch, minLen - str.length) : str;
+    }
+
+    module.exports = rpad;
+
+
diff --git a/node_modules/mout/string/rtrim.js b/node_modules/mout/string/rtrim.js
new file mode 100644
index 0000000..66ba80e
--- /dev/null
+++ b/node_modules/mout/string/rtrim.js
@@ -0,0 +1,33 @@
+var toString = require('../lang/toString');
+var WHITE_SPACES = require('./WHITE_SPACES');
+    /**
+     * Remove chars from end of string.
+     */
+    function rtrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var end = str.length - 1,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && end >= 0) {
+            found = false;
+            i = -1;
+            c = str.charAt(end);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    end--;
+                    break;
+                }
+            }
+        }
+
+        return (end >= 0) ? str.substring(0, end + 1) : '';
+    }
+
+    module.exports = rtrim;
+
diff --git a/node_modules/mout/string/sentenceCase.js b/node_modules/mout/string/sentenceCase.js
new file mode 100644
index 0000000..354104c
--- /dev/null
+++ b/node_modules/mout/string/sentenceCase.js
@@ -0,0 +1,15 @@
+var toString = require('../lang/toString');
+var lowerCase = require('./lowerCase');
+var upperCase = require('./upperCase');
+    /**
+     * UPPERCASE first char of each sentence and lowercase other chars.
+     */
+    function sentenceCase(str){
+        str = toString(str);
+
+        // Replace first char of each sentence (new line or after '.\s+') to
+        // UPPERCASE
+        return lowerCase(str).replace(/(^\w)|\.\s+(\w)/gm, upperCase);
+    }
+    module.exports = sentenceCase;
+
diff --git a/node_modules/mout/string/slugify.js b/node_modules/mout/string/slugify.js
new file mode 100644
index 0000000..142f0d9
--- /dev/null
+++ b/node_modules/mout/string/slugify.js
@@ -0,0 +1,24 @@
+var toString = require('../lang/toString');
+var replaceAccents = require('./replaceAccents');
+var removeNonWord = require('./removeNonWord');
+var trim = require('./trim');
+    /**
+     * Convert to lower case, remove accents, remove non-word chars and
+     * replace spaces with the specified delimeter.
+     * Does not split camelCase text.
+     */
+    function slugify(str, delimeter){
+        str = toString(str);
+
+        if (delimeter == null) {
+            delimeter = "-";
+        }
+        str = replaceAccents(str);
+        str = removeNonWord(str);
+        str = trim(str) //should come after removeNonWord
+                .replace(/ +/g, delimeter) //replace spaces with delimeter
+                .toLowerCase();
+        return str;
+    }
+    module.exports = slugify;
+
diff --git a/node_modules/mout/string/startsWith.js b/node_modules/mout/string/startsWith.js
new file mode 100644
index 0000000..bce2bd2
--- /dev/null
+++ b/node_modules/mout/string/startsWith.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+    /**
+     * Checks if string starts with specified prefix.
+     */
+    function startsWith(str, prefix) {
+        str = toString(str);
+        prefix = toString(prefix);
+
+        return str.indexOf(prefix) === 0;
+    }
+
+    module.exports = startsWith;
+
diff --git a/node_modules/mout/string/stripHtmlTags.js b/node_modules/mout/string/stripHtmlTags.js
new file mode 100644
index 0000000..01d17b0
--- /dev/null
+++ b/node_modules/mout/string/stripHtmlTags.js
@@ -0,0 +1,11 @@
+var toString = require('../lang/toString');
+    /**
+     * Remove HTML tags from string.
+     */
+    function stripHtmlTags(str){
+        str = toString(str);
+
+        return str.replace(/<[^>]*>/g, '');
+    }
+    module.exports = stripHtmlTags;
+
diff --git a/node_modules/mout/string/trim.js b/node_modules/mout/string/trim.js
new file mode 100644
index 0000000..9652b0c
--- /dev/null
+++ b/node_modules/mout/string/trim.js
@@ -0,0 +1,15 @@
+var toString = require('../lang/toString');
+var WHITE_SPACES = require('./WHITE_SPACES');
+var ltrim = require('./ltrim');
+var rtrim = require('./rtrim');
+    /**
+     * Remove white-spaces from beginning and end of string.
+     */
+    function trim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+        return ltrim(rtrim(str, chars), chars);
+    }
+
+    module.exports = trim;
+
diff --git a/node_modules/mout/string/truncate.js b/node_modules/mout/string/truncate.js
new file mode 100644
index 0000000..a98d6c7
--- /dev/null
+++ b/node_modules/mout/string/truncate.js
@@ -0,0 +1,21 @@
+var toString = require('../lang/toString');
+var trim = require('./trim');
+    /**
+     * Limit number of chars.
+     */
+    function truncate(str, maxChars, append, onlyFullWords){
+        str = toString(str);
+        append = append || '...';
+        maxChars = onlyFullWords? maxChars + 1 : maxChars;
+
+        str = trim(str);
+        if(str.length <= maxChars){
+            return str;
+        }
+        str = str.substr(0, maxChars - append.length);
+        //crop at last space or remove trailing whitespace
+        str = onlyFullWords? str.substr(0, str.lastIndexOf(' ')) : trim(str);
+        return str + append;
+    }
+    module.exports = truncate;
+
diff --git a/node_modules/mout/string/typecast.js b/node_modules/mout/string/typecast.js
new file mode 100644
index 0000000..c1386a4
--- /dev/null
+++ b/node_modules/mout/string/typecast.js
@@ -0,0 +1,29 @@
+
+
+    var UNDEF;
+
+    /**
+     * Parses string and convert it into a native value.
+     */
+    function typecast(val) {
+        var r;
+        if ( val === null || val === 'null' ) {
+            r = null;
+        } else if ( val === 'true' ) {
+            r = true;
+        } else if ( val === 'false' ) {
+            r = false;
+        } else if ( val === UNDEF || val === 'undefined' ) {
+            r = UNDEF;
+        } else if ( val === '' || isNaN(val) ) {
+            //isNaN('') returns false
+            r = val;
+        } else {
+            //parseFloat(null || '') returns NaN
+            r = parseFloat(val);
+        }
+        return r;
+    }
+
+    module.exports = typecast;
+
diff --git a/node_modules/mout/string/unCamelCase.js b/node_modules/mout/string/unCamelCase.js
new file mode 100644
index 0000000..4968f37
--- /dev/null
+++ b/node_modules/mout/string/unCamelCase.js
@@ -0,0 +1,23 @@
+var toString = require('../lang/toString');
+
+    var CAMEL_CASE_BORDER = /([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g;
+
+    /**
+     * Add space between camelCase text.
+     */
+    function unCamelCase(str, delimiter){
+        if (delimiter == null) {
+            delimiter = ' ';
+        }
+
+        function join(str, c1, c2) {
+            return c1 + delimiter + c2;
+        }
+
+        str = toString(str);
+        str = str.replace(CAMEL_CASE_BORDER, join);
+        str = str.toLowerCase(); //add space between camelCase text
+        return str;
+    }
+    module.exports = unCamelCase;
+
diff --git a/node_modules/mout/string/underscore.js b/node_modules/mout/string/underscore.js
new file mode 100644
index 0000000..ebd6e2b
--- /dev/null
+++ b/node_modules/mout/string/underscore.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+var slugify = require('./slugify');
+var unCamelCase = require('./unCamelCase');
+    /**
+     * Replaces spaces with underscores, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function underscore(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "_");
+    }
+    module.exports = underscore;
+
diff --git a/node_modules/mout/string/unescapeHtml.js b/node_modules/mout/string/unescapeHtml.js
new file mode 100644
index 0000000..ad1987d
--- /dev/null
+++ b/node_modules/mout/string/unescapeHtml.js
@@ -0,0 +1,18 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Unescapes HTML special chars
+     */
+    function unescapeHtml(str){
+        str = toString(str)
+            .replace(/&amp;/g , '&')
+            .replace(/&lt;/g  , '<')
+            .replace(/&gt;/g  , '>')
+            .replace(/&#0*39;/g , "'")
+            .replace(/&quot;/g, '"');
+        return str;
+    }
+
+    module.exports = unescapeHtml;
+
+
diff --git a/node_modules/mout/string/unescapeUnicode.js b/node_modules/mout/string/unescapeUnicode.js
new file mode 100644
index 0000000..0b7fb73
--- /dev/null
+++ b/node_modules/mout/string/unescapeUnicode.js
@@ -0,0 +1,16 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Unescape unicode char sequences
+     */
+    function unescapeUnicode(str){
+        str = toString(str);
+        return str.replace(/\\u[0-9a-f]{4}/g, function(ch){
+            var code = parseInt(ch.slice(2), 16);
+            return String.fromCharCode(code);
+        });
+    }
+
+    module.exports = unescapeUnicode;
+
+
diff --git a/node_modules/mout/string/unhyphenate.js b/node_modules/mout/string/unhyphenate.js
new file mode 100644
index 0000000..311dfa1
--- /dev/null
+++ b/node_modules/mout/string/unhyphenate.js
@@ -0,0 +1,10 @@
+var toString = require('../lang/toString');
+    /**
+     * Replaces hyphens with spaces. (only hyphens between word chars)
+     */
+    function unhyphenate(str){
+        str = toString(str);
+        return str.replace(/(\w)(-)(\w)/g, '$1 $3');
+    }
+    module.exports = unhyphenate;
+
diff --git a/node_modules/mout/string/upperCase.js b/node_modules/mout/string/upperCase.js
new file mode 100644
index 0000000..6c92552
--- /dev/null
+++ b/node_modules/mout/string/upperCase.js
@@ -0,0 +1,10 @@
+var toString = require('../lang/toString');
+    /**
+     * "Safer" String.toUpperCase()
+     */
+    function upperCase(str){
+        str = toString(str);
+        return str.toUpperCase();
+    }
+    module.exports = upperCase;
+
diff --git a/node_modules/mout/time.js b/node_modules/mout/time.js
new file mode 100644
index 0000000..9f53329
--- /dev/null
+++ b/node_modules/mout/time.js
@@ -0,0 +1,12 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'convert' : require('./time/convert'),
+    'now' : require('./time/now'),
+    'parseMs' : require('./time/parseMs'),
+    'toTimeString' : require('./time/toTimeString')
+};
+
+
diff --git a/node_modules/mout/time/convert.js b/node_modules/mout/time/convert.js
new file mode 100644
index 0000000..852a0f0
--- /dev/null
+++ b/node_modules/mout/time/convert.js
@@ -0,0 +1,41 @@
+
+
+    /**
+     * convert time into another unit
+     */
+    function convert(val, sourceUnitName, destinationUnitName){
+        destinationUnitName = destinationUnitName || 'ms';
+        return (val * getUnit(sourceUnitName)) / getUnit(destinationUnitName);
+    }
+
+
+    //TODO: maybe extract to a separate module
+    function getUnit(unitName){
+        switch(unitName){
+            case 'ms':
+            case 'millisecond':
+                return 1;
+            case 's':
+            case 'second':
+                 return 1000;
+            case 'm':
+            case 'minute':
+                 return 60000;
+            case 'h':
+            case 'hour':
+                 return 3600000;
+            case 'd':
+            case 'day':
+                 return 86400000;
+            case 'w':
+            case 'week':
+                 return 604800000;
+            default:
+                throw new Error('"'+ unitName + '" is not a valid unit');
+        }
+    }
+
+
+    module.exports = convert;
+
+
diff --git a/node_modules/mout/time/now.js b/node_modules/mout/time/now.js
new file mode 100644
index 0000000..0cedb18
--- /dev/null
+++ b/node_modules/mout/time/now.js
@@ -0,0 +1,18 @@
+
+
+    /**
+     * Get current time in miliseconds
+     */
+    function now(){
+        // yes, we defer the work to another function to allow mocking it
+        // during the tests
+        return now.get();
+    }
+
+    now.get = (typeof Date.now === 'function')? Date.now : function(){
+        return +(new Date());
+    };
+
+    module.exports = now;
+
+
diff --git a/node_modules/mout/time/parseMs.js b/node_modules/mout/time/parseMs.js
new file mode 100644
index 0000000..6d99797
--- /dev/null
+++ b/node_modules/mout/time/parseMs.js
@@ -0,0 +1,17 @@
+var countSteps = require('../math/countSteps');
+
+    /**
+     * Parse timestamp into an object.
+     */
+    function parseMs(ms){
+        return {
+            milliseconds : countSteps(ms, 1, 1000),
+            seconds      : countSteps(ms, 1000, 60),
+            minutes      : countSteps(ms, 60000, 60),
+            hours        : countSteps(ms, 3600000, 24),
+            days         : countSteps(ms, 86400000)
+        };
+    }
+
+    module.exports = parseMs;
+
diff --git a/node_modules/mout/time/toTimeString.js b/node_modules/mout/time/toTimeString.js
new file mode 100644
index 0000000..101d69f
--- /dev/null
+++ b/node_modules/mout/time/toTimeString.js
@@ -0,0 +1,24 @@
+var countSteps = require('../math/countSteps');
+var pad = require('../number/pad');
+
+    var HOUR = 3600000,
+        MINUTE = 60000,
+        SECOND = 1000;
+
+    /**
+     * Format timestamp into a time string.
+     */
+    function toTimeString(ms){
+        var h = ms < HOUR   ? 0 : countSteps(ms, HOUR),
+            m = ms < MINUTE ? 0 : countSteps(ms, MINUTE, 60),
+            s = ms < SECOND ? 0 : countSteps(ms, SECOND, 60),
+            str = '';
+
+        str += h? h + ':' : '';
+        str += pad(m, 2) + ':';
+        str += pad(s, 2);
+
+        return str;
+    }
+    module.exports = toTimeString;
+
diff --git a/node_modules/nyks/.travis.yml b/node_modules/nyks/.travis.yml
new file mode 100644
index 0000000..1581e95
--- /dev/null
+++ b/node_modules/nyks/.travis.yml
@@ -0,0 +1,5 @@
+language: node_js
+node_js:
+  - 4
+after_script:
+  - npm run coveralls
\ No newline at end of file
diff --git a/node_modules/nyks/README.md b/node_modules/nyks/README.md
new file mode 100644
index 0000000..23bad7c
--- /dev/null
+++ b/node_modules/nyks/README.md
@@ -0,0 +1,119 @@
+# Motivation
+
+nyks provide a set of complentary modules nodejs basic api.
+
+Module are exported in a standard common JS module format and written in pure ES5 strict format. (no transpilation required nor used), just use browserify if you need nyks module in a browser environnement (no fancy / smart context detection from me, juste plain module).
+
+
+Module complete moutjs spirit with (mostly) nodejs specifics patterns.
+
+
+
+
+# Natives
+
+## child_process
+* require('nyks/child_process/exec')(cmd, options, callback);
+child_process.exec equivalent with sane API for arguments.
+
+* require('nyks/child_process/passthru')(cmd, args, callback);
+Like exec, but with stdout & stderr bound to current process IO streams.
+
+
+## path
+* require('nyks/path/which'(bin)
+Search for a binary in env PATH
+
+* require('nyks/path/extend')( path[,path2, ..]);
+Extend system PATH with new directories
+
+## process
+* require('nyks/process/parseArgs')([process.argv.splice(2)])
+Command line args parser, aligned on yks patterns
+
+* require('nyks/process/splitArgs')("some string 'with escaped' content")
+Split a string into whitespace separated chunks
+
+## stream
+* require('nyks/stream/fromBuffer')(buffer)
+Return a readable stream from a buffer
+
+
+## fs
+* require('nyks/fs/deleteFolderRecursive')(path);
+Recursive folder deletion
+
+* require('nyks/fs/md5File')(file_path, callback)
+* require('nyks/fs/md5FileSync')(file_path)
+Return md5 checksum of a file
+
+* require('nyks/fs/filesizeSync')(path);
+* require('nyks/fs/filemtimeSync')(path);
+* require('nyks/fs/isFileSync')(path)
+* require('nyks/fs/isDirectorySync')(path)
+
+* require('nyks/fs/tmppath')(ext)
+Return a unique file path in OS temp dir
+
+* require('nyks/fs/getFolderSize')(path)
+Return a folder Size
+
+
+
+
+# Crypto
+## Utils
+* require('nyks/crypto/pemme')(str, armor)
+Create a PEM encoded armor around a desired string (chunk size 65)
+
+* require('nyks/crypto/md5') (body)
+Return the base md5 bash
+
+* require('nyks/crypto/openssh2pem')(body)
+Return the PEM version of an openssh public key (yeah !)
+
+
+# Natives
+## Object
+* require('nyks/object/combine')(keys, values)
+Creates an object by using one array for keys and another for its values
+* require('nyks/object/mask')({"foo":"bar"}, mask, glue )
+Format a dictionnary to a mask sprintf(mask,  k, v)
+
+
+## Buffer
+* require('nyks/buffer/indexOf')(byte)
+Binary search of byte
+Return -1 if not found
+
+## String
+
+* require('nyks/string/chunk')(basestr, chunksize)
+Split a string into chunk of specified size.
+
+* require('nyks/string/replaces')(dict)
+Replace key => value in current string
+
+* require('nyks/string/rreplaces')(dict)
+Recursive (iterative) replaces
+
+
+* require('nyks/string/stripEnd')(str)
+Return trimmed string of "str" if present (else, leave untouched)
+
+* require('nyks/string/rot13')()
+Rot13 of current string
+
+
+## Workflow/async
+* require('nyks/async/dict')(["foo", "bar", function(item, chain){
+    chain(null, 22);
+  }, function(err, results){
+      results//{ "foo" : 22, "bar" : 22}
+  })
+
+
+# Notes
+
+[![Build Status](https://travis-ci.org/131/nyks.svg?branch=master)](https://travis-ci.org/131/nyks)
+[![Coverage Status](https://coveralls.io/repos/github/131/nyks/badge.svg?branch=master)](https://coveralls.io/github/131/nyks?branch=master)
diff --git a/node_modules/nyks/array/pickIn.js b/node_modules/nyks/array/pickIn.js
new file mode 100644
index 0000000..0ce7efd
--- /dev/null
+++ b/node_modules/nyks/array/pickIn.js
@@ -0,0 +1,6 @@
+"use strict";
+
+module.exports = function(value, values){
+  var i = values.indexOf(value);
+  return values[i !== -1 ? i : 0];
+};
\ No newline at end of file
diff --git a/node_modules/nyks/array/reindex.js b/node_modules/nyks/array/reindex.js
new file mode 100644
index 0000000..9ef517b
--- /dev/null
+++ b/node_modules/nyks/array/reindex.js
@@ -0,0 +1,9 @@
+"use strict";
+
+module.exports = function(that, index){
+  let out = {};
+  that.forEach(function(v) {
+    out[v[index]] = v;
+  });
+  return out;
+};
\ No newline at end of file
diff --git a/node_modules/nyks/array/sum.js b/node_modules/nyks/array/sum.js
new file mode 100644
index 0000000..fbfff2e
--- /dev/null
+++ b/node_modules/nyks/array/sum.js
@@ -0,0 +1,5 @@
+"use strict";
+
+module.exports = function(values){
+  return values.reduce(function(a, b){return a+b;});
+};
\ No newline at end of file
diff --git a/node_modules/nyks/async/dict.js b/node_modules/nyks/async/dict.js
new file mode 100644
index 0000000..6f130d5
--- /dev/null
+++ b/node_modules/nyks/async/dict.js
@@ -0,0 +1,7 @@
+"use strict";
+
+var dictLimit = require('./dictLimit');
+
+module.exports = function(keys, iterator, chain){
+  dictLimit(keys, 1, iterator, chain);
+}
diff --git a/node_modules/nyks/async/dictLimit.js b/node_modules/nyks/async/dictLimit.js
new file mode 100644
index 0000000..8c06ab5
--- /dev/null
+++ b/node_modules/nyks/async/dictLimit.js
@@ -0,0 +1,16 @@
+"use strict";
+var mapLimit = require('async/mapLimit');
+
+
+module.exports = function(keys, tasks, iterator, chain){
+  var out = {}, errs = [];
+  mapLimit(keys, tasks, function(item, chain) {
+    iterator(item, function(err, result) {
+      out[item] = err ? null : result;
+      if(err) errs.push(err);
+      chain();
+    });
+  }, function(){
+    chain(errs.length ? errs : null, out);
+  });
+}
diff --git a/node_modules/nyks/async/dispatcher.js b/node_modules/nyks/async/dispatcher.js
new file mode 100644
index 0000000..775256f
--- /dev/null
+++ b/node_modules/nyks/async/dispatcher.js
@@ -0,0 +1,33 @@
+"use strict";
+
+module.exports = function(workers_props){
+
+  var workers = [];
+  workers_props.forEach(function(prop) {
+    workers.push({idle:true, prop});
+  });
+
+  return {
+    length : workers.length,
+
+    pick : function(){
+      for(var i = 0;i<workers.length; i++) {
+        if(workers[i].idle) {
+          workers[i].idle = false;
+          return workers[i].prop;
+        }
+      }
+      throw "No available worker found, did you set concurrency properly";
+    },
+
+    free : function(worker){
+      for(var i = 0;i<workers.length; i++) {
+        if(workers[i].prop === worker && workers[i].idle === false) {
+          workers[i].idle = true;
+          return;
+        }
+      }
+      throw "Could not set worker free";
+    }
+  };
+}
diff --git a/node_modules/nyks/async/throttle.js b/node_modules/nyks/async/throttle.js
new file mode 100644
index 0000000..52326ba
--- /dev/null
+++ b/node_modules/nyks/async/throttle.js
@@ -0,0 +1,17 @@
+"use strict";
+
+const queue = require('async/queue');
+
+
+module.exports = function(worker, limit) {
+  let q = queue(worker, limit);
+
+  return function(/*payload, chain*/) {
+    var args = [].slice.apply(arguments),
+        chain = args.pop(),
+        payload = args.shift();
+    q.push(payload, chain);
+  };
+
+}
+
diff --git a/node_modules/nyks/buffer/fromASCII.js b/node_modules/nyks/buffer/fromASCII.js
new file mode 100644
index 0000000..fbcea62
--- /dev/null
+++ b/node_modules/nyks/buffer/fromASCII.js
@@ -0,0 +1,7 @@
+"use strict";
+
+module.exports = function(str){
+  var ret = new Array(str.length), len = str.length;
+  while(len--) ret[len] = str.charCodeAt(len);
+  return ret;
+}
\ No newline at end of file
diff --git a/node_modules/nyks/buffer/fromInt.js b/node_modules/nyks/buffer/fromInt.js
new file mode 100644
index 0000000..28c3283
--- /dev/null
+++ b/node_modules/nyks/buffer/fromInt.js
@@ -0,0 +1,12 @@
+"use strict";
+
+function int2buff(value, length) {
+  var  i = length || 4, out = new Array(i);
+  while(i--) {
+    out[i] = value%0x100;
+    value >>= 8;
+  }
+  return new Buffer(out);
+}
+
+module.exports = int2buff;
diff --git a/node_modules/nyks/buffer/indexOf.js b/node_modules/nyks/buffer/indexOf.js
new file mode 100644
index 0000000..f171106
--- /dev/null
+++ b/node_modules/nyks/buffer/indexOf.js
@@ -0,0 +1,38 @@
+"use strict";
+
+var indexOfc = function(buf, chr, offset, stop) {
+  for (var i = offset||0; i < stop ; i++)
+   if(buf[i] ==chr) return i;
+  return -1;
+}
+
+
+
+module.exports = function(buf, search, offset, stop) {
+  stop   = Math.min(stop || buf.length, buf.length);
+
+  if(typeof search == "string")
+    search = new Buffer(search);
+  else if(typeof search == "number")
+    return indexOfc(buf, search, offset, stop);
+
+  offset = offset ||0;
+
+  var m = 0;
+  var s = -1;
+
+
+  for(var i=offset; i< stop; ++i) {
+    if(buf[i] == search[m]) {
+      if(s == -1) s = i;
+      ++m;
+      if(m == search.length)
+        return s;
+    } else {
+      s = -1;
+      m = 0;
+    }
+  }
+
+  return -1;
+}
diff --git a/node_modules/nyks/buffer/readUInt.js b/node_modules/nyks/buffer/readUInt.js
new file mode 100644
index 0000000..cb693f9
--- /dev/null
+++ b/node_modules/nyks/buffer/readUInt.js
@@ -0,0 +1,28 @@
+"use strict";
+
+var pow2 = [];
+for (var i = 0; i < 32; i++)
+  pow2[i] = Math.pow(2, i);
+
+
+
+function unsigned(buffer, offset, length) {
+
+  var result = 0, blen = buffer.length * 8, offset = offset || 0;
+
+  if(offset < 0)
+    offset = blen + offset;
+
+  if(length === undefined)
+    length = blen - offset;
+
+  if(!length)
+    return 0;
+
+  for(var i=0, j = offset + length - 1; i<length;i++, j--)
+    result += buffer[j >>3] & pow2[7-j%8] ? pow2[i] : 0;
+
+  return result;
+}
+
+module.exports = unsigned;
diff --git a/node_modules/nyks/buffer/writeBits.js b/node_modules/nyks/buffer/writeBits.js
new file mode 100644
index 0000000..c5730ce
--- /dev/null
+++ b/node_modules/nyks/buffer/writeBits.js
@@ -0,0 +1,29 @@
+"use strict";
+
+var pow2  = [1, 2, 4, 8, 16, 32, 64, 128, 256];
+var dmod = [128, 192, 224, 240, 248, 252, 254, 255]; //revert modulo
+var neg  = [127, 191, 223, 239, 247, 251, 253, 254]; //xor
+
+
+function writeBits(target, source, bitoffset, sourcebitLength){
+  if(sourcebitLength === undefined)
+    sourcebitLength = source.length << 3;
+
+  if(!sourcebitLength)
+    return 0;
+
+  var soucebitStart = sourcebitLength < 0 ? (source.length<<3) + sourcebitLength : 0,
+      sourcebitLength  = Math.min(Math.abs(sourcebitLength), (target.length <<3) - bitoffset),
+      sourceBitEnd  = soucebitStart +  sourcebitLength - 1;
+
+
+  for(var v, i = soucebitStart, j=bitoffset; i<= sourceBitEnd; i++, j++)
+    if(source[i>>3] & pow2[7-i%8])
+      target[j>>3]    |= pow2[7-j%8];
+    else target[j>>3] &= neg[j%8];
+
+  return sourcebitLength;
+}
+
+
+module.exports = writeBits;
\ No newline at end of file
diff --git a/node_modules/nyks/child_process/exec.js b/node_modules/nyks/child_process/exec.js
new file mode 100644
index 0000000..9f920af
--- /dev/null
+++ b/node_modules/nyks/child_process/exec.js
@@ -0,0 +1,31 @@
+"use strict";
+
+var cp = require('child_process');
+
+
+  //callback(err, exit, lastline);
+module.exports = function(cmd, options, chain){
+    if(Array.isArray(options))
+      options = { args : options} ;
+    options = options || {};
+
+  var ps   = cp.spawn(cmd, options.args || [], options),
+      _stdout = "", _stderr = "";
+
+  ps.on('error', function(err){
+    ps.removeAllListeners('close');
+    ps.on('close', function(exit) {
+      return chain(err);
+    });
+  });
+
+  ps.stdout.on("data", function(data){ _stdout += data; });
+  ps.stderr.on("data", function(data){ _stderr += data; });
+
+  ps.on('close', function(exit) {
+    return chain(exit, _stdout, _stderr);
+  });
+
+  return ps;
+}
+
diff --git a/node_modules/nyks/child_process/passthru.js b/node_modules/nyks/child_process/passthru.js
new file mode 100644
index 0000000..3f49a5e
--- /dev/null
+++ b/node_modules/nyks/child_process/passthru.js
@@ -0,0 +1,29 @@
+"use strict";
+
+var cp = require('child_process');
+
+  //callback(err, exit, lastline);
+module.exports = function(cmd, options, chain){
+  if(Array.isArray(options))
+    options = { args : options} ;
+
+  options = options || {};
+  options.stdio = ['inherit', 'inherit', 'inherit'];
+
+  var ps   = cp.spawn(cmd, options.args || [], options);
+
+  ps.on('error', function(err){
+    ps.removeAllListeners('close');
+    ps.on('close', function(exit) {
+      return chain(err, exit);
+    });
+  });
+
+  ps.on('close', function(exit) {
+    var err = null;
+    if(exit !== 0)
+      err = "Bad exit code " + exit;
+    return chain(err, exit);
+  });
+}
+
diff --git a/node_modules/nyks/child_process/wait.js b/node_modules/nyks/child_process/wait.js
new file mode 100644
index 0000000..9d30de2
--- /dev/null
+++ b/node_modules/nyks/child_process/wait.js
@@ -0,0 +1,17 @@
+"use strict";
+
+//wait for a process to end properly
+
+module.exports = function(child){
+
+  return new Promise(function(accept, reject){
+    child.once("error", reject);
+
+    child.once("close", function(result){
+      if(result !== 0)
+        return reject("Invalid process exit code");
+      accept();
+    });
+  });
+
+}
\ No newline at end of file
diff --git a/node_modules/nyks/cli/box.js b/node_modules/nyks/cli/box.js
new file mode 100644
index 0000000..1aa1de2
--- /dev/null
+++ b/node_modules/nyks/cli/box.js
@@ -0,0 +1,69 @@
+"use strict";
+
+var sprintf  = require('../string/format');
+var repeat   = require('mout/string/repeat');
+var truncate = require('nyks/string/truncate');
+
+var LF = "\n";
+var COLS       = 76;
+var STR_PAD_LEFT  = "left";
+var STR_PAD_RIGHT = "right";
+var STR_PAD_BOTH  = "both";
+
+
+
+var pad = function(str, pad, mode, mask, pad_len){
+  if(!pad_len) pad_len = COLS;
+  if(!mask)    mask    = '%s';
+  if(!pad)     pad     = '─';
+  if(!mode)    mode    = STR_PAD_BOTH;
+
+  pad_len -= sprintf(mask, str).length;
+
+  var left = (mode == STR_PAD_BOTH ) ? Math.floor(pad_len/2) : 0;
+
+  return sprintf(mask,
+      repeat(pad, Math.max(left, 0)) + str + repeat(pad, Math.max(pad_len - left, 0)));
+}
+
+var output = function(line){
+  process.stderr.write(line);
+}
+
+
+var box = function(/*[title, msg]*/){
+  var args = [].slice.call(arguments);
+  if(!args.length)
+    return;
+
+  var dotrim = true, pad_len = COLS;
+
+  for(var msg, a=1 ; a < args.length ; a+=2) {
+    msg = args[a];
+    if(typeof msg !== "string")
+        msg = JSON.stringify(msg, null, 2);
+    
+    msg = msg.trim().replace("	", "    ").split(/\r?\n/);//use 4 tab indent
+
+    msg.forEach(function(tmp_line, i) {
+      if(dotrim)
+        msg[i] = truncate(tmp_line,  COLS);
+      //msg[i] = preg_replace('#&[^;]*?#m','…',);
+      pad_len = Math.max(pad_len, msg[i].length + 2); //2 chars enclosure
+    })
+    args[a] = msg;
+  }
+
+
+  for(var a=0; a < args.length; a+=2) {
+    output( pad(" "+args[a]+" ", "═", STR_PAD_BOTH, a ? "╠%s╣":"╔%s╗", pad_len) + LF );
+    args[a+1].forEach(function(line) {
+      output( pad(line, " ", STR_PAD_RIGHT, "║%s║", pad_len) + LF);
+    });
+  }
+  output( pad('', "═", STR_PAD_BOTH, "╚%s╝", pad_len) + LF );
+}
+
+
+
+module.exports = box;
diff --git a/node_modules/nyks/collection/reindex.js b/node_modules/nyks/collection/reindex.js
new file mode 100644
index 0000000..6e3ade8
--- /dev/null
+++ b/node_modules/nyks/collection/reindex.js
@@ -0,0 +1,16 @@
+"use strict";
+
+var forIn = require('mout/object/forIn');
+
+module.exports = function(that, key, column){
+
+  let out = {};
+  let iteratee = Array.isArray(that)
+        ? Array.prototype.forEach.bind(that)
+        : forIn.bind(null, that);
+  iteratee(function(v, k){
+    out[v[key]] = column == undefined ? v : v[column];
+  });
+
+  return out;
+}
\ No newline at end of file
diff --git a/node_modules/nyks/color/Int2RGBA.js b/node_modules/nyks/color/Int2RGBA.js
new file mode 100644
index 0000000..d622194
--- /dev/null
+++ b/node_modules/nyks/color/Int2RGBA.js
@@ -0,0 +1,12 @@
+"use strict";
+
+  //what did you expect..
+module.exports = function(i) {
+
+  return {
+    r : (i>>24)&0xFF,
+    g : (i>>16)&0xFF,
+    b : (i>>8) &0xFF,
+    a : i      &0xFF,
+  };
+};
\ No newline at end of file
diff --git a/node_modules/nyks/color/RGB2HTML.js b/node_modules/nyks/color/RGB2HTML.js
new file mode 100644
index 0000000..4b155d2
--- /dev/null
+++ b/node_modules/nyks/color/RGB2HTML.js
@@ -0,0 +1,12 @@
+"use strict";
+
+
+module.exports = function(a) {
+  if(Array.isArray(a))
+    a = {r:a[0],g:a[1],b:a[2]};
+
+  return  "#" 
+           + ("00" + a.r.toString(16)).substr(-2)
+           + ("00" + a.g.toString(16)).substr(-2)
+           + ("00" + a.b.toString(16)).substr(-2)
+}
\ No newline at end of file
diff --git a/node_modules/nyks/color/RGBA2Int.js b/node_modules/nyks/color/RGBA2Int.js
new file mode 100644
index 0000000..a861f6b
--- /dev/null
+++ b/node_modules/nyks/color/RGBA2Int.js
@@ -0,0 +1,12 @@
+"use strict";
+
+
+module.exports = function(a){
+  if(Array.isArray(a))
+    a = {r:a[0],g:a[1],b:a[2],a:a[3]};
+
+  return   (a.r&0xFF)<<24
+          | (a.g&0xFF)<<16
+          | (a.b&0xFF)<<8
+          | (a.a&0xFF);
+}
\ No newline at end of file
diff --git a/node_modules/nyks/crypto/md5.js b/node_modules/nyks/crypto/md5.js
new file mode 100644
index 0000000..666f144
--- /dev/null
+++ b/node_modules/nyks/crypto/md5.js
@@ -0,0 +1,7 @@
+"use strict";
+
+var crypto = require('crypto');
+
+module.exports = function(str){
+  return crypto.createHash('md5').update(str).digest('hex');
+}
diff --git a/node_modules/nyks/crypto/openssh2pem.js b/node_modules/nyks/crypto/openssh2pem.js
new file mode 100644
index 0000000..d41eb49
--- /dev/null
+++ b/node_modules/nyks/crypto/openssh2pem.js
@@ -0,0 +1,61 @@
+"use strict";
+
+var ASN_LONG_LEN  = 0x80, SSH_RSA = 'ssh-rsa';
+
+function ASN_len(s) {
+    var len = s.length;
+    if (len < ASN_LONG_LEN)
+        return new Buffer([len]);
+
+    var data = len.toString(16);
+    if(data.length & 1)
+      data = "0" + data;
+    data = new Buffer(data, 'hex');
+    return Buffer.concat([new Buffer([data.length | ASN_LONG_LEN]), data]);;
+}
+var unpack = function(mode, data, start){
+  if(mode != "L")
+      throw "Unsupported mode";
+  var slice = data.slice(start, 4);
+  var out = (slice[0] << 24) + (slice[1] << 16) + (slice[2] << 8) + slice[3];
+  return [out];
+}
+
+var asnf = function(type, body){
+  return Buffer.concat([new Buffer([type]), ASN_len(body), body]);
+}
+
+
+module.exports = function(openssh_data) {
+    if(openssh_data.substr(0, SSH_RSA.length) == SSH_RSA)
+      openssh_data = openssh_data.substr(SSH_RSA.length);
+
+    var data = new Buffer(openssh_data, 'base64');
+
+    var alg_len = unpack('L', data, 0)[0];
+
+    var i = 4;
+    var alg     = data.slice(i, i += alg_len).toString('ascii');
+    if (alg !== 'ssh-rsa')
+        throw "Not rsa";
+
+    var e_len = unpack('L', data.slice(i, i += 4))[0];
+    var e = data.slice(i, i += e_len);
+
+    var n_len = unpack('L', data.slice(i, i += 4))[0];
+    var n = data.slice(i, i += n_len);
+
+    var algid = new Buffer('06092a864886f70d0101010500', 'hex');
+
+    algid = asnf(0x30, algid); // wrap it into sequence
+    data  = asnf(0x02, n);     // numbers
+
+    data = Buffer.concat([data, asnf(0x02, e)]);
+    data = asnf(0x30, data);    // wrap it into sequence
+    data = Buffer.concat([new Buffer([0]),  data]);  // don't know why, but needed
+    data = asnf(0x03, data);                  // wrap it into bitstring
+    data = Buffer.concat([algid, data]);      // prepend algid
+    data = asnf(0x30, data);                  // wrap it into sequence
+
+    return data.toString('base64');
+}
diff --git a/node_modules/nyks/crypto/pemme.js b/node_modules/nyks/crypto/pemme.js
new file mode 100644
index 0000000..7f6158b
--- /dev/null
+++ b/node_modules/nyks/crypto/pemme.js
@@ -0,0 +1,12 @@
+"use strict";
+
+var str_chunk = require('../string/chunk');
+
+module.exports = function(str, armor){
+  if(Buffer.isBuffer(str))
+      str = str.toString('base64');
+
+  str = [].concat(["-----BEGIN "+armor+"-----"], str_chunk(str, 64), ["-----END "+armor+"-----"]);
+  str = str.join("\n");
+  return str;
+}
\ No newline at end of file
diff --git a/node_modules/nyks/date/getSeason.js b/node_modules/nyks/date/getSeason.js
new file mode 100644
index 0000000..edbb046
--- /dev/null
+++ b/node_modules/nyks/date/getSeason.js
@@ -0,0 +1,19 @@
+"use strict";
+
+var dayOfTheYear = require('mout/date/dayOfTheYear');
+
+module.exports = function(date){
+  var i = dayOfTheYear(date);
+  var s = "winter";
+
+  if(i < 356) // dec   21
+    s = "autumn";
+  if(i < 265) // sept  21
+    s = "summer";
+  if(i < 173) // june  21 
+    s = "spring";
+  if(i < 81)  // march 21 
+    s = "winter";
+
+  return s;
+}
diff --git a/node_modules/nyks/date/strftime.js b/node_modules/nyks/date/strftime.js
new file mode 100644
index 0000000..eee894d
--- /dev/null
+++ b/node_modules/nyks/date/strftime.js
@@ -0,0 +1,27 @@
+"use strict";
+
+var getSeason = require('./getSeason');
+var strftime  = require('mout/date/strftime');
+var startOf   = require('mout/date/startOf');
+
+module.exports = function(date, format) {
+  format = strftime.apply(null, arguments);
+  var reToken = /%([a-z%])/gi;
+
+  function convertToken(date, token, l10n){
+      switch (token){
+          case 'E':
+              return getSeason(date);
+          case 'v' : 
+              return startOf(date, 'week');
+          case '%':
+              return '%';
+          default:
+              // keep unrecognized tokens
+              return '%'+ token;
+      }
+  }
+
+  return format
+        .replace(reToken, function(match, token){ return convertToken(date, token); });
+}
\ No newline at end of file
diff --git a/node_modules/nyks/fs/JSON.js b/node_modules/nyks/fs/JSON.js
new file mode 100644
index 0000000..c3e1d6e
--- /dev/null
+++ b/node_modules/nyks/fs/JSON.js
@@ -0,0 +1,8 @@
+"use strict";
+
+var fs = require('fs');
+
+
+module.exports = function(file_path){
+  return JSON.parse(fs.readFileSync(file_path));
+}
\ No newline at end of file
diff --git a/node_modules/nyks/fs/copyFile.js b/node_modules/nyks/fs/copyFile.js
new file mode 100644
index 0000000..2e1c04f
--- /dev/null
+++ b/node_modules/nyks/fs/copyFile.js
@@ -0,0 +1,19 @@
+"use strict";
+
+var fs   = require('fs');
+var once = require('../function/once');
+
+module.exports = function copyFile(source, target, chain) {
+  chain = once(chain);
+
+  var rd = fs.createReadStream(source);
+  rd.once("error", chain);
+
+  var wr = fs.createWriteStream(target);
+  wr.once("error", chain);
+  wr.once("close", chain);
+
+  rd.pipe(wr);
+};
+
+
diff --git a/node_modules/nyks/fs/deleteFolderRecursive.js b/node_modules/nyks/fs/deleteFolderRecursive.js
new file mode 100644
index 0000000..a4535c6
--- /dev/null
+++ b/node_modules/nyks/fs/deleteFolderRecursive.js
@@ -0,0 +1,22 @@
+"use strict";
+
+var fs = require('fs');
+var isDirectorySync = require('./isDirectorySync');
+
+var self =  module.exports = function(file_path) {
+    var files = [];
+    if( fs.existsSync(file_path) ) {
+        files = fs.readdirSync(file_path);
+        files.forEach(function(file,index){
+            var curfile_path = file_path + "/" + file;
+            if(isDirectorySync(curfile_path)) { // recurse
+                self(curfile_path);
+            } else { // delete file
+                fs.unlinkSync(curfile_path);
+            }
+        });
+        fs.rmdirSync(file_path);
+    }
+};
+
+
diff --git a/node_modules/nyks/fs/filemtimeSync.js b/node_modules/nyks/fs/filemtimeSync.js
new file mode 100644
index 0000000..2e0fce4
--- /dev/null
+++ b/node_modules/nyks/fs/filemtimeSync.js
@@ -0,0 +1,8 @@
+"use strict";
+
+var fs = require('fs');
+
+module.exports = function(file_path){
+  return fs.statSync(file_path)["mtime"];
+}
+
diff --git a/node_modules/nyks/fs/filesizeSync.js b/node_modules/nyks/fs/filesizeSync.js
new file mode 100644
index 0000000..0480451
--- /dev/null
+++ b/node_modules/nyks/fs/filesizeSync.js
@@ -0,0 +1,7 @@
+"use strict";
+
+var fs = require('fs');
+
+module.exports = function(file_path){
+  return fs.statSync(file_path)["size"];
+}
\ No newline at end of file
diff --git a/node_modules/nyks/fs/getFolderSize.js b/node_modules/nyks/fs/getFolderSize.js
new file mode 100644
index 0000000..7f0b95e
--- /dev/null
+++ b/node_modules/nyks/fs/getFolderSize.js
@@ -0,0 +1,10 @@
+var readFolderRecursive = require("./walkFolderStatsRecursive");
+
+module.exports = function(dir_path, callback){
+  var size = 0 ;
+  readFolderRecursive(dir_path, function(fileStat){
+    size += fileStat.size;
+  }, function(){
+    callback(null, size);
+  })
+}
diff --git a/node_modules/nyks/fs/isDirectorySync.js b/node_modules/nyks/fs/isDirectorySync.js
new file mode 100644
index 0000000..c423c41
--- /dev/null
+++ b/node_modules/nyks/fs/isDirectorySync.js
@@ -0,0 +1,7 @@
+"use strict";
+
+var fs = require('fs');
+
+module.exports = function(file_path){
+ return fs.existsSync(file_path) && fs.statSync(file_path).isDirectory();
+}
diff --git a/node_modules/nyks/fs/isFileSync.js b/node_modules/nyks/fs/isFileSync.js
new file mode 100644
index 0000000..ebc52a5
--- /dev/null
+++ b/node_modules/nyks/fs/isFileSync.js
@@ -0,0 +1,7 @@
+"use strict";
+
+var fs = require('fs');
+
+module.exports = function(file_path){
+ return fs.existsSync(file_path) && fs.statSync(file_path).isFile();
+}
diff --git a/node_modules/nyks/fs/md5File.js b/node_modules/nyks/fs/md5File.js
new file mode 100644
index 0000000..34601c7
--- /dev/null
+++ b/node_modules/nyks/fs/md5File.js
@@ -0,0 +1,14 @@
+"use strict";
+
+var fs = require('fs'),
+  crypto = require('crypto');
+
+
+module.exports = function (file_path, callback){
+  var shasum = crypto.createHash('md5');
+  var s = fs.ReadStream(file_path);
+  s.on('data', shasum.update.bind(shasum));
+  s.on('end', function() {
+    callback(null, shasum.digest('hex'));
+  });
+}
diff --git a/node_modules/nyks/fs/md5FileSync.js b/node_modules/nyks/fs/md5FileSync.js
new file mode 100644
index 0000000..24f71df
--- /dev/null
+++ b/node_modules/nyks/fs/md5FileSync.js
@@ -0,0 +1,11 @@
+"use strict";
+
+var fs = require('fs'),
+  crypto = require('crypto');
+
+
+module.exports = function(file_path){
+  var md5 = crypto.createHash('md5');
+  md5.update(fs.readFileSync(file_path));
+  return md5.digest('hex');
+}
diff --git a/node_modules/nyks/fs/mkdirpSync.js b/node_modules/nyks/fs/mkdirpSync.js
new file mode 100644
index 0000000..71f6760
--- /dev/null
+++ b/node_modules/nyks/fs/mkdirpSync.js
@@ -0,0 +1,13 @@
+"use strict";
+
+var fs   = require('fs');
+var path = require('path');
+
+var mkdirpsync = module.exports = function(file_path){
+  if( fs.existsSync(file_path) ) 
+    return file_path;
+
+  mkdirpsync(path.dirname(file_path));
+  fs.mkdirSync(file_path);
+  return file_path;
+}
\ No newline at end of file
diff --git a/node_modules/nyks/fs/readFileJSONSync.js b/node_modules/nyks/fs/readFileJSONSync.js
new file mode 100644
index 0000000..c3e1d6e
--- /dev/null
+++ b/node_modules/nyks/fs/readFileJSONSync.js
@@ -0,0 +1,8 @@
+"use strict";
+
+var fs = require('fs');
+
+
+module.exports = function(file_path){
+  return JSON.parse(fs.readFileSync(file_path));
+}
\ No newline at end of file
diff --git a/node_modules/nyks/fs/sha1File.js b/node_modules/nyks/fs/sha1File.js
new file mode 100644
index 0000000..d84a7bc
--- /dev/null
+++ b/node_modules/nyks/fs/sha1File.js
@@ -0,0 +1,14 @@
+"use strict";
+
+var fs = require('fs'),
+  crypto = require('crypto');
+
+
+module.exports = function (file_path, callback){
+  var shasum = crypto.createHash('sha1');
+  var s = fs.ReadStream(file_path);
+  s.on('data', shasum.update.bind(shasum));
+  s.on('end', function() {
+    callback(null, shasum.digest('hex'));
+  });
+}
diff --git a/node_modules/nyks/fs/tmppath.js b/node_modules/nyks/fs/tmppath.js
new file mode 100644
index 0000000..1b8f5ca
--- /dev/null
+++ b/node_modules/nyks/fs/tmppath.js
@@ -0,0 +1,51 @@
+"use strict";
+
+var fs   = require('fs');
+var path = require('path');
+var os   = require('os');
+var crypto = require('crypto');
+
+var exitListenerAttached = false;
+var filesToDelete = [];
+
+function deleteOnExit(file_path) {
+
+  if (!exitListenerAttached) {
+    process.on('exit', cleanupFilesSync);
+    process.on('fsgc', cleanupFilesSync); //force cleanup
+      //makes sure exit is called event on sigint \o/
+    process.on('SIGINT', process.exit);
+    exitListenerAttached = true;
+  }
+
+  filesToDelete.push(file_path);
+}
+
+
+function cleanupFilesSync() {
+  var toDelete;
+  while ((toDelete = filesToDelete.shift()) !== undefined) {
+    if(fs.existsSync(toDelete))
+      fs.unlinkSync(toDelete);
+  }
+}
+
+  
+
+
+var tmppath = module.exports = function(ext, trash, len){
+  ext = ext || "tmp"; len = len || 8;
+  if(trash === undefined) trash = true;
+
+
+  var body = crypto.randomBytes(len).toString('base64').replace(/\//g, '+').substr(0, len);
+  var fname = ext + "-" + body + "." + ext;
+  var file_path = path.join(os.tmpdir(), fname);
+
+  var fullpath = fs.existsSync(file_path) ? tmppath(ext, trash, len + 1) : file_path;
+  if(trash)
+    deleteOnExit(fullpath);
+
+  return fullpath;
+}
+
diff --git a/node_modules/nyks/fs/walkFolderStatsRecursive.js b/node_modules/nyks/fs/walkFolderStatsRecursive.js
new file mode 100644
index 0000000..80c3733
--- /dev/null
+++ b/node_modules/nyks/fs/walkFolderStatsRecursive.js
@@ -0,0 +1,63 @@
+"use strict";
+var fs      = require('fs');
+var path    = require('path');
+var queue   = require('async/queue');
+var forEach = require('mout/array/forEach');
+var debounce= require('mout/function/debounce');
+var diff    = require('mout/date/diff')
+
+
+var readStatRecursive = function(dir, done, cb) {
+  var results = [];
+  fs.readdir(dir, function(err, list) {
+    /* istanbul ignore if  */
+    if (err)
+      return done(err);
+
+    var i = 0;
+    (function next() {
+      var file = list[i++];
+      if (!file) return done(null, results);
+      file = path.join(dir, file);
+      fs.stat(file, function(err, stat) {
+        if (stat && stat.isDirectory()) {
+          readStatRecursive(file, function(err, res) {
+            results = results.concat(res);
+            next();
+          }, cb);
+        } else {
+          results.push(file);
+          stat.file_path = file;
+          cb(err, stat)
+          next();
+        }
+      });
+    })();
+  });
+};
+
+
+
+
+module.exports = function(dir_path, taskcb, endcb){
+  var q = queue(function(stat, cb){
+      if(stat)
+        taskcb(stat);
+      cb();
+  }, 10);
+
+  var done = false ;
+  readStatRecursive(dir_path ,
+   function(err){
+     done = true ;
+     q.push(null);
+   },
+   function(err , stats){
+    q.push(stats)
+  })
+
+  q.drain = function(){
+    if(done)
+      endcb();
+  }
+}
diff --git a/node_modules/nyks/function/detach.js b/node_modules/nyks/function/detach.js
new file mode 100644
index 0000000..e922608
--- /dev/null
+++ b/node_modules/nyks/function/detach.js
@@ -0,0 +1,24 @@
+"use strict";
+
+/* istanbul ignore else */
+if(typeof process === 'object')
+  module.exports = function(fn, bind) {
+    return function() {
+      var args = arguments;
+      process.nextTick(function(){
+        if(fn)
+          return fn.apply(bind, args);
+      })
+    };
+  };
+else
+  module.exports = function(fn, bind) {
+    return  function() {
+      var args = arguments;
+      setTimeout(function(){
+        if(fn)
+          return fn.apply(bind, args);
+      }, 0);
+    };
+  };
+
diff --git a/node_modules/nyks/function/once.js b/node_modules/nyks/function/once.js
new file mode 100644
index 0000000..25ceeb4
--- /dev/null
+++ b/node_modules/nyks/function/once.js
@@ -0,0 +1,11 @@
+"use strict";
+
+module.exports = function(fn) {
+  var f = function () {
+    if (f.called) return f.value
+    f.called = true
+    return f.value = fn.apply(this, arguments)
+  }
+  f.called = false
+  return f
+}
diff --git a/node_modules/nyks/function/promisify.js b/node_modules/nyks/function/promisify.js
new file mode 100644
index 0000000..67a5899
--- /dev/null
+++ b/node_modules/nyks/function/promisify.js
@@ -0,0 +1,22 @@
+"use strict";
+
+/**
+ * Convert a node style fn to a promise
+ */
+
+module.exports = function(fn, ctx) {
+  if(ctx === undefined)
+      ctx = this;
+  return function() {
+    var args = [].slice.apply(arguments);
+
+    return new Promise(function (resolve, reject) {
+      args.push(function (err, res) {
+        if (err) return reject(err);
+        resolve(res);
+      });
+      fn.apply(ctx, args);
+    });
+
+  }
+}
\ No newline at end of file
diff --git a/node_modules/nyks/function/sleep.js b/node_modules/nyks/function/sleep.js
new file mode 100644
index 0000000..5acc2e2
--- /dev/null
+++ b/node_modules/nyks/function/sleep.js
@@ -0,0 +1,7 @@
+"use strict";
+
+module.exports = function sleep(timeout) {
+  return new Promise(function(resolve) {
+    setTimeout(resolve, timeout);
+  });
+};
\ No newline at end of file
diff --git a/node_modules/nyks/function/thunk.js b/node_modules/nyks/function/thunk.js
new file mode 100644
index 0000000..d10739f
--- /dev/null
+++ b/node_modules/nyks/function/thunk.js
@@ -0,0 +1,9 @@
+"use strict";
+
+module.exports  = function(resolve, reject){
+  return function(err, data) { 
+    if(err)
+      return reject(err);
+    return resolve(data);
+  };
+}
\ No newline at end of file
diff --git a/node_modules/nyks/function/unary.js b/node_modules/nyks/function/unary.js
new file mode 100644
index 0000000..d16cc31
--- /dev/null
+++ b/node_modules/nyks/function/unary.js
@@ -0,0 +1,11 @@
+"use strict";
+
+/** 
+* return call with only one param
+*/
+
+module.exports = function(cb){
+  return function(arg){
+    return cb(arg);
+  }
+}
diff --git a/node_modules/nyks/http/get.js b/node_modules/nyks/http/get.js
new file mode 100644
index 0000000..636fe39
--- /dev/null
+++ b/node_modules/nyks/http/get.js
@@ -0,0 +1,14 @@
+"use strict";
+
+var http      = require('http');
+var https     = require('https');
+var url       = require('url');
+
+var startsWith = require('mout/string/startsWith');
+
+var get = module.exports = function(requrl, chain) {
+  if(typeof requrl == "string")
+      requrl = url.parse(requrl);
+  return requrl.protocol ==  "https:" ? https.get.apply(this, arguments) : http.get.apply(this, arguments);
+}
+
diff --git a/node_modules/nyks/http/getContents.js b/node_modules/nyks/http/getContents.js
new file mode 100644
index 0000000..9f5809d
--- /dev/null
+++ b/node_modules/nyks/http/getContents.js
@@ -0,0 +1,26 @@
+"use strict";
+
+var once = require('../function/once');
+var get  = require('./get');
+
+module.exports = function(source, chain){
+  var body = "";
+  chain = once(chain);
+
+  var req = get(source, function(resp) {
+     if(resp.statusCode != 200)
+        return chain("Bad status code");
+
+    resp.on("error", chain);
+    resp.on("data", function(data){
+       body += data;
+    });
+
+    resp.on("end" , function() {
+      chain(null, body);
+    });
+
+  });
+
+  req.on("error" , chain);
+};
diff --git a/node_modules/nyks/http/header/cookie.js b/node_modules/nyks/http/header/cookie.js
new file mode 100644
index 0000000..2dfdf76
--- /dev/null
+++ b/node_modules/nyks/http/header/cookie.js
@@ -0,0 +1,5 @@
+"use strict";
+
+  var name = Object.keys(cookie)[0];
+  jar [name] = {value : cookie[name], extras : cookie };
+  delete cookie[name];
diff --git a/node_modules/nyks/http/header/parse.js b/node_modules/nyks/http/header/parse.js
new file mode 100644
index 0000000..b208aa7
--- /dev/null
+++ b/node_modules/nyks/http/header/parse.js
@@ -0,0 +1,31 @@
+"use strict";
+
+var split = new RegExp("(.+?)(?:=\\s*(?:\"([^\"]*)\"|'([^']*)'|(.*?)))?\s*(;|$)", "g");
+var forOwn = require('mout/object/forOwn');
+
+
+var parse = function(str){
+  var res, out = {};
+  while(res =  split.exec(str))
+    out[res[1]] = res[2] || res[3] || res[4] || null;
+
+  return out;
+};
+
+
+parse.parse_cookie = function(str){
+  var raw = parse(str);
+
+  var name = Object.keys(raw)[0];
+
+
+  var cookie = {value : raw[name], name : name, extras : {}};
+  delete raw[name];
+  forOwn(raw, function(v, k) { cookie.extras[k.toLowerCase()] = v; });
+
+  return cookie;
+};
+
+
+
+module.exports = parse;
\ No newline at end of file
diff --git a/node_modules/nyks/http/request.js b/node_modules/nyks/http/request.js
new file mode 100644
index 0000000..ae9742d
--- /dev/null
+++ b/node_modules/nyks/http/request.js
@@ -0,0 +1,85 @@
+"use strict";
+var https = require('https');
+var http  = require('http');
+var url  = require('url');
+var qs   = require('querystring');
+
+var merge      = require('mout/object/merge');
+var encode     = require('mout/queryString/encode');
+var trim       = require('mout/string/trim');
+var contains   = require('mout/array/contains');
+var startsWith = require('mout/string/startsWith');
+
+var mask       = require('nyks/object/mask');
+var pluck      = require('mout/object/pluck');
+
+var request = function(/*target, [data,], chain */ ){
+
+  var args  = [].slice.apply(arguments),
+      chain  = args.pop(),
+      target = args.shift(),
+      data   = args.shift() || null;
+
+  var query = typeof target == "string" ? url.parse(target) : target;
+
+  if(!query.method)
+      query.method =  data ? 'POST' : 'GET';
+
+  //Cookie:X-APPLE-WEB-KB-ASPCOB8QBWQ1JVMLAKEOFWELBME="v=1:t=AQAAAABWzO-1XtFLiXxOmZG3SlR66fcav3ExgY4~";
+  if(!query.headers)
+    query.headers = {};
+
+  if(query.jar) {
+    var cookie = query.headers.cookie || "";
+    cookie += ";" + mask(pluck(query.jar, "value"), '%s="%s"', "; ");
+    query.headers.cookie = cookie;
+  }
+
+  if(data && typeof data != "string")
+    data = query.json ? JSON.stringify(data) : trim(encode(data), "?");
+
+
+
+  if(query.qs) {
+    var i = query.path.indexOf('?'), params = {};
+    if(i !== -1) {
+      params = qs.parse(query.path.substr(i+1));
+      query.path = substr(i);
+    }
+
+    query.qs = merge(params, query.qs);
+    query.path += "?" + qs.stringify(query.qs);
+  }
+
+  if(data) merge(query, {
+      'content-length' : Buffer.byteLength(data),
+  });
+
+
+  var transport = query.protocol == 'https:' ? https : http;
+
+
+  var req = transport.request(query, function(res){
+    var shouldBuffer = query.json || startsWith(res.headers["content-type"], "application/json");
+
+    if(!shouldBuffer)
+      return chain(null, res);
+
+    var out = [];
+    res.on("data", function(buf){ out.push(buf); });
+    res.on("end", function(){
+      var response = Buffer.concat(out);
+
+      if(startsWith(res.headers["content-type"], "application/json"))
+        response = JSON.parse(response);
+
+      chain(null, response, res);
+    });
+  });
+  if(data)
+    req.write(data);
+  req.end();
+};
+
+
+module.exports = request;
\ No newline at end of file
diff --git a/node_modules/nyks/index.js b/node_modules/nyks/index.js
new file mode 100644
index 0000000..8b46fbb
--- /dev/null
+++ b/node_modules/nyks/index.js
@@ -0,0 +1,3 @@
+'use strict';
+
+module.exports = {};
diff --git a/node_modules/nyks/lang/toBool.js b/node_modules/nyks/lang/toBool.js
new file mode 100644
index 0000000..89a91cf
--- /dev/null
+++ b/node_modules/nyks/lang/toBool.js
@@ -0,0 +1,10 @@
+"use strict";
+var kindOf = require('mout/lang/kindOf');
+
+
+module.exports = function(str) {
+  if(kindOf(str) == "String")
+    return str && str != "false" && str != "no" && str != "n" && str != "f" && str != "0";
+  return !!str;
+}
+
diff --git a/node_modules/nyks/math/log10.js b/node_modules/nyks/math/log10.js
new file mode 100644
index 0000000..e40ea91
--- /dev/null
+++ b/node_modules/nyks/math/log10.js
@@ -0,0 +1,6 @@
+"use strict";
+
+module.exports = Math.log10 || function(x) {
+  return Math.log(x) / Math.LN10;
+};
+
diff --git a/node_modules/nyks/math/log2.js b/node_modules/nyks/math/log2.js
new file mode 100644
index 0000000..e40ea91
--- /dev/null
+++ b/node_modules/nyks/math/log2.js
@@ -0,0 +1,6 @@
+"use strict";
+
+module.exports = Math.log10 || function(x) {
+  return Math.log(x) / Math.LN10;
+};
+
diff --git a/node_modules/nyks/node_modules/mout/.editorconfig b/node_modules/nyks/node_modules/mout/.editorconfig
new file mode 100644
index 0000000..faaf0d3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/.editorconfig
@@ -0,0 +1,20 @@
+; EditorConfig is awesome: http://EditorConfig.org
+
+; top-most EditorConfig file
+root = true
+
+; base rules
+[*]
+end_of_line = lf
+insert_final_newline = false
+indent_style = space
+indent_size = 4
+charset = utf-8
+trim_trailing_whitespace = true
+
+; The default indent on package.json is 2 spaces, better to keep it so we can
+; use `npm install --save` and other features that rewrites the package.json
+; file automatically
+[{bower,package}.json]
+indent_style = space
+indent_size = 2
diff --git a/node_modules/nyks/node_modules/mout/.jshintrc b/node_modules/nyks/node_modules/mout/.jshintrc
new file mode 100644
index 0000000..bbdb29c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/.jshintrc
@@ -0,0 +1,69 @@
+{
+    // Settings
+    "passfail"      : false, // Stop on first error.
+    "maxerr"        : 50,    // Maximum error before stopping.
+
+
+    // Predefined globals whom JSHint will ignore.
+    "browser"       : true,  // Standard browser globals e.g. `window`, `document`.
+    "couch"         : false,
+    "dojo"          : false,
+    "jquery"        : true,
+    "mootools"      : false,
+    "node"          : false,
+    "prototypejs"   : false,
+    "rhino"         : false,
+    "wsh"           : false,
+
+    // Custom globals.
+    "predef"        : [
+        "define",
+        "require"
+    ],
+
+
+    // Development.
+    "debug"         : false, // Allow debugger statements e.g. browser breakpoints.
+    "devel"         : false, // Allow developments statements e.g. `console.log();`.
+
+
+    // EcmaScript 5.
+    "es5"           : false, // Allow EcmaScript 5 syntax.
+    "globalstrict"  : false, // Allow global "use strict" (also enables 'strict').
+    "strict"        : false, // Require `use strict` pragma  in every file.
+
+
+    // The Good Parts.
+    "asi"           : false, // Tolerate Automatic Semicolon Insertion (no semicolons).
+    "bitwise"       : false, // Prohibit bitwise operators (&, |, ^, etc.).
+    "boss"          : true,  // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
+    "curly"         : false, // Require {} for every new block or scope.
+    "eqeqeq"        : true,  // Require triple equals i.e. `===`.
+    "eqnull"        : true,  // Tolerate use of `== null`.
+    "evil"          : false, // Tolerate use of `eval`.
+    "expr"          : false, // Tolerate `ExpressionStatement` as Programs.
+    "forin"         : false, // Tolerate `for in` loops without `hasOwnPrototype`.
+    "immed"         : true,  // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
+    "latedef"       : false, // Prohibit variable use before definition.
+    "laxbreak"      : false, // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
+    "loopfunc"      : false, // Allow functions to be defined within loops.
+    "noarg"         : true,  // Prohibit use of `arguments.caller` and `arguments.callee`.
+    "regexdash"     : true,  // Tolerate unescaped last dash i.e. `[-...]`.
+    "regexp"        : false, // Prohibit `.` and `[^...]` in regular expressions.
+    "scripturl"     : false, // Tolerate script-targeted URLs.
+    "shadow"        : false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
+    "supernew"      : false, // Tolerate `new function () { ... };` and `new Object;`.
+    "undef"         : false, // Require all non-global variables be declared before they are used.
+
+
+    // Personal styling prefrences.
+    "newcap"        : true,  // Require capitalization of all constructor functions e.g. `new F()`.
+    "noempty"       : true,  // Prohipit use of empty blocks.
+    "nomen"         : false, // Prohibit use of initial or trailing underbars in names.
+    "nonew"         : true,  // Prohibit use of constructors for side-effects.
+    "onevar"        : false, // Allow only one `var` statement per function.
+    "plusplus"      : false, // Prohibit use of `++` & `--`.
+    "sub"           : false, // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
+    "trailing"      : true,  // Prohibit trailing whitespaces.
+    "white"         : false  // Check against strict whitespace and indentation rules.
+}
diff --git a/node_modules/nyks/node_modules/mout/.travis.yml b/node_modules/nyks/node_modules/mout/.travis.yml
new file mode 100644
index 0000000..2ea0044
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/.travis.yml
@@ -0,0 +1,18 @@
+ language: node_js
+ node_js:
+   - "iojs"
+   - "0.10"
+   - "0.12"
+ script:
+   - "npm test --coverage"
+   - "jshint src"
+ notifications:
+  irc:
+    channels:
+      - "irc.freenode.org#moutjs"
+    on_success: change
+    on_failure: always
+    use_notice: true
+    skip_join: true
+ git:
+   depth: 10
diff --git a/node_modules/nyks/node_modules/mout/CHANGELOG.md b/node_modules/nyks/node_modules/mout/CHANGELOG.md
new file mode 100644
index 0000000..e6d1609
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/CHANGELOG.md
@@ -0,0 +1,207 @@
+mout changelog
+==============
+
+v1.1.0 (2017/10/04)
+--------------------
+ - update dependencies
+ - optimize `function/bind`
+ - optimize `lang/kindOf`
+
+v0.12.0 (2016/03/03)
+--------------------
+ - add `array/indicesOf`
+ - add `function/memoize`
+ - add `array/reverse`
+ - add `math/overflow`
+ - fix `query/getQuery`
+ - fix `object/deepMatches`
+ - optimize `function/partial`
+ - updates license
+
+
+v0.11.0 (2014/11/17)
+--------------------
+
+ - add `array/take`;
+ - remove unused variable from `date/totalDaysInMonth`;
+ - fix case insensitive RegExp cloning on `lang/clone`;
+
+
+v0.10.0 (2014/09/02)
+--------------------
+
+ - add `array/equals`;
+ - add `array/groupBy`;
+ - add `array/last`;
+ - add `function/wrap`;
+ - add `lang/GLOBAL`;
+ - add `lang/isPrimitive`;
+ - add `number/MAX_SAFE_INTEGER`;
+ - add `object/omit`;
+ - add `object/result`;
+ - add `object/result`;
+ - add `random/randString`;
+ - change `lang/isEmpty` behavior to return `true` for any value that isn't
+   a collection.
+ - fix `array/findLastIndex` to stop at zero index;
+ - improve `function/partial` to accept placeholders;
+ - improve `math.norm` behavior for values outside the range and for cases
+   where `val === min === max`;
+ - improve `object/get` behavior to return properties from any value that is
+   not `null` or `undefined`;
+ - move `object/deepEquals` to `lang/deepEquals` (improving the behavior);
+
+
+v0.9.1 (2014/04/08)
+-------------------
+
+ - fix `array/slice` behavior when start and end are higher than length.
+
+
+v0.9.0 (2014/02/04)
+-------------------
+
+ - add `date/quarter`;
+ - add `function/constant`;
+ - add `random/randBool`;
+ - add un-padded 12-hour (`%l`) to `date/strftime`;
+ - fix `array/slice` on IE < 9 by using a custom implementation.
+ - fix `object/forIn` iteration for IE < 9 constructor property;
+ - improve `lang/inheritPrototype` by returning the `prototype`;
+ - improve `string/removeNonWord` to cover more chars;
+ - improve `string/repeat` performance;
+ - improve `string/unescapeHtml` by accepting leading zeros for `&#39`;
+
+
+v0.8.0 (2013/11/22)
+-------------------
+
+ - add `array/findLast`.
+ - add `array/findLastIndex`.
+ - add `array/slice` and use it internally.
+ - add `array/sortBy`
+ - add `function/awaitDelay`.
+ - add `function/identity`
+ - add `number/isNaN`.
+ - add `number/nth`.
+ - add `number/ordinal`.
+ - allows nested replacement patterns in `string/interpolate`.
+ - change `function/makeIterator_` behavior (uses `identity` by default).
+ - simplify `string/escapeRegExp`.
+ - support custom equality on `array/compare`.
+
+
+v0.7.1 (2013/09/18)
+-------------------
+
+ - fix `null` value handling in object/get.
+
+
+v0.7.0 (2013/09/05)
+-------------------
+
+ - add bower ignores.
+ - add german translation for date localization.
+ - alias `function` package as `fn` since "function" is a reserved keyword.
+ - allow second argument on `array/pick`.
+ - improve `string/makePath` to not remove "//" after protocol.
+ - make sure methods inside `number` package works with mixed types.
+ - support arrays on `queryString/encode`.
+ - support multiple values for same property on `queryString/decode`.
+ - add `cancel()` method to `throttled/debounced` functions.
+ - add `function/times`.
+ - add `lang/toNumber`.
+ - add `string/insert`.
+ - add `super_` to constructor on `lang/inheritPrototype`.
+
+
+v0.6.0 (2013/05/22)
+-------------------
+
+ - add optional delimeter to `string/unCamelCase`
+ - allow custom char on `number/pad`
+ - allow underscore characters in `string/removeNonWord`
+ - accept `level` on `array/flatten` instead of a flag
+ - convert underscores to camelCase in `string/camelCase`
+ - remove `create()` from number/currencyFormat
+ - add `date/dayOfTheYear`
+ - add `date/diff`
+ - add `date/isSame`
+ - add `date/startOf`
+ - add `date/strftime`
+ - add `date/timezoneAbbr`
+ - add `date/timezoneOffset`
+ - add `date/totalDaysInYear`
+ - add `date/weekOfTheYear`
+ - add `function/timeout`
+ - add `object/bindAll`
+ - add `object/functions`
+ - add `time/convert`
+
+
+v0.5.0 (2013/04/04)
+-------------------
+
+ - add `array/collect`
+ - add `callback` parameter to `object/equals` and `object/deepEquals` to allow
+   custom compare operations.
+ - normalize behavior in `array/*` methods to treat `null` values as empty
+   arrays when reading from array
+ - add `date/parseIso`
+ - add `date/isLeapYear`
+ - add `date/totalDaysInMonth`
+ - add `object/deepMatches`
+ - change `function/makeIterator_` to use `deepMatches` (affects nearly all
+   iteration methods)
+ - add `thisObj` parameter to `array/min` and `array/max`
+
+
+v0.4.0 (2013/02/26)
+-------------------
+
+ - add `object/equals`
+ - add `object/deepEquals`
+ - add `object/matches`.
+ - add `lang/is` and `lang/isnt`.
+ - add `lang/isInteger`.
+ - add `array/findIndex`.
+ - add shorthand syntax to `array/*`, `object/*` and `collection/*` methods.
+ - improve `number/sign` behavior when value is NaN or +0 or -0.
+ - improve `lang/isNaN` to actually check if value *is not a number* without
+   coercing value; so `[]`, `""`, `null` and `"12"` are considered NaN (#39).
+ - improve `string/contains` to match ES6 behavior (add fromIndex argument).
+
+
+v0.3.0 (2013/02/01)
+-------------------
+
+ - add `lang/clone`.
+ - add `lang/toString`.
+ - add `string/replace`.
+ - add `string/WHITE_SPACES`
+ - rename `function/curry` to `function/partial`.
+ - allow custom chars in `string/trim`, `ltrim`, and `rtrim`.
+ - convert values to strings in the `string/*` functions.
+
+
+v0.2.0 (2013/01/13)
+-------------------
+
+ - fix bug in `math/ceil` for negative radixes.
+ - change `object/deepFillIn` and `object/deepMixIn` to recurse only if both
+   existing and new values are plain objects. Will not recurse into arrays
+   or objects not created by the Object constructor.
+ - add `lang/isPlainObject` to check if a file is a valid object and is created
+   by the Object constructor
+ - change `lang/clone` behavior when dealing with custom types (avoid cloning
+   it by default) and add second argument to allow custom behavior if needed.
+ - rename `lang/clone` to `lang/deepClone`.
+ - add VERSION property to index.js
+ - simplify `math/floor`, `math/round`, `math/ceil` and `math/countSteps`.
+
+
+v0.1.0 (2013/01/09)
+-------------------
+
+- Rename project from "amd-utils" to "mout"
+
diff --git a/node_modules/nyks/node_modules/mout/CONTRIBUTING.md b/node_modules/nyks/node_modules/mout/CONTRIBUTING.md
new file mode 100644
index 0000000..65d9add
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/CONTRIBUTING.md
@@ -0,0 +1,61 @@
+# Contributing
+
+Fork the repo at https://github.com/mout/mout
+
+ > "Write clearly, don't be too clever" - The Elements of Programming Style
+
+Avoid unnamed functions and follow the other modules structure. By only using named functions it will be easier to extract the code from the AMD module if needed and it will also give better error messages, JavaScript minifiers like [Google Closure Compiler](http://code.google.com/closure/compiler/) and [UglifyJS](https://github.com/mishoo/UglifyJS) will make sure code is as small/optimized as possible.
+
+ > "Make it clear before you make it faster." - The Elements of Programming Style
+
+Be sure to always create tests for each proposed module. Features will only be merged if they contain proper tests and documentation.
+
+ > "Good code is its own best documentation." - Steve McConnell
+
+We should do a code review before merging to make sure names makes sense and implementation is as good as possible.
+
+Try to split your pull requests into logical groups, the smaller the easier to be reviewed/merged.
+
+
+
+## Tests & Code Coverage ##
+
+Tests can be found inside the `tests` folder, to execute them in the browser open the `tests/runner.html`. The same tests also work on node.js by running `npm test`.
+
+We should have tests for all methods and ensure we have a high code coverage through our continuous integration server ([travis](https://travis-ci.org/mout/mout)). When you ask for a pull request Travis will automatically run the tests on node.js and check the code coverage as well.
+
+We run `node build pkg` automatically before any `npm test`, so specs and packages should always be in sync. (will avoid human mistakes)
+
+To check code coverage run `npm test --coverage`, it will generate the reports inside the `coverage` folder and also log the results. Please note that node.js doesn't execute all code branches since we have some conditionals that are only met on old JavaScript engines (eg. IE 7-8), so we will never have 100% code coverage (but should be close to it).
+
+
+
+## Build Script ##
+
+The [build script](https://github.com/mout/mout/wiki/Build-Script) can be extremely helpful and can avoid human mistakes, use it.
+
+
+
+## Admins / Pull Requests ##
+
+Even if you are an admin (have commit rights) please do pull requests when adding new features or changing current behavior, that way we can review the work and discuss. Feel free to push changes that doesn't affect behavior without asking for a pull request (readme, changelog, build script, typos, refactoring, ...).
+
+
+
+## Large changes ##
+
+If you are proposing some major change, please create an issue to discuss it first. (maybe it's outside the scope of the project)
+
+
+
+## Questions / IRC / Wiki / Issue Tracker ##
+
+When in doubt ask someone on IRC to help you ([#moutjs on irc.freenode.net](http://webchat.freenode.net/?channels=moutjs)) or create a [new issue](http://github.com/mout/mout/issues).
+
+The [project wiki](https://github.com/mout/mout/wiki) can also be a good resource of information.
+
+
+---
+
+Check the [contributors list at github](https://github.com/mout/mout/contributors).
+
diff --git a/node_modules/nyks/node_modules/mout/LICENSE.md b/node_modules/nyks/node_modules/mout/LICENSE.md
new file mode 100644
index 0000000..e9ccc2b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/LICENSE.md
@@ -0,0 +1,21 @@
+# The MIT License (MIT)
+## Copyright (c) 2012, 2013 moutjs team and contributors (http://moutjs.com)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+of the Software, and to permit persons to whom the Software is furnished to do
+so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+
diff --git a/node_modules/nyks/node_modules/mout/README.md b/node_modules/nyks/node_modules/mout/README.md
new file mode 100644
index 0000000..06b853d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/README.md
@@ -0,0 +1,65 @@
+![mout](http://moutjs.com/logo.png "Modular JavaScript Utilties")
+
+http://moutjs.com/
+
+[![Build Status](https://travis-ci.org/mout/mout.svg?branch=master)](https://travis-ci.org/mout/mout)
+[![Downloads](https://img.shields.io/npm/dm/mout.svg)](https://www.npmjs.com/package/mout)
+[![Version](https://img.shields.io/npm/v/mout.svg)](https://www.npmjs.com/package/mout)
+
+All code is library agnostic and consist mostly of helper methods that aren't
+directly related with the DOM, the purpose of this library isn't to replace
+Dojo, jQuery, YUI, Mootools, etc, but to provide modular solutions for common
+problems that aren't solved by most of them. Consider it as a crossbrowser
+JavaScript standard library.
+
+
+
+## Main goals ##
+
+ - increase code reuse;
+ - be clear (code should be clean/readable);
+ - be easy to debug;
+ - be easy to maintain;
+ - follow best practices;
+ - follow standards when possible;
+ - **don't convert JavaScript into another language!**
+ - be compatible with other frameworks;
+ - be modular;
+ - have unit tests for all modules;
+ - work on multiple environments (IE7+, modern browsers, node.js);
+
+
+
+## What shouldn't be here ##
+
+ - UI components;
+ - CSS selector engine;
+ - Event system - pub/sub;
+ - Template engine;
+ - Anything that isn't generic enough to be on a standard library;
+ - Anything that could be a separate library and/or isn't a modular utility...
+
+
+
+## API Documentation ##
+
+Online documentation can be found at http://moutjs.com/ or inside the
+`doc` folder.
+
+
+
+## FAQ / Wiki / IRC ##
+
+For more info about project structure, design decisions, tips, how to
+contribute, build system, etc, please check the [project
+wiki](https://github.com/mout/mout/wiki).
+
+We also have an IRC channel [#moutjs on
+irc.freenode.net](http://webchat.freenode.net/?channels=moutjs)
+
+
+
+## License ##
+
+Released under the [MIT License](http://www.opensource.org/licenses/mit-license.php).
+
diff --git a/node_modules/nyks/node_modules/mout/array.js b/node_modules/nyks/node_modules/mout/array.js
new file mode 100644
index 0000000..695eef8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array.js
@@ -0,0 +1,56 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'append' : require('./array/append'),
+    'collect' : require('./array/collect'),
+    'combine' : require('./array/combine'),
+    'compact' : require('./array/compact'),
+    'contains' : require('./array/contains'),
+    'difference' : require('./array/difference'),
+    'equals' : require('./array/equals'),
+    'every' : require('./array/every'),
+    'filter' : require('./array/filter'),
+    'find' : require('./array/find'),
+    'findIndex' : require('./array/findIndex'),
+    'findLast' : require('./array/findLast'),
+    'findLastIndex' : require('./array/findLastIndex'),
+    'flatten' : require('./array/flatten'),
+    'forEach' : require('./array/forEach'),
+    'groupBy' : require('./array/groupBy'),
+    'indexOf' : require('./array/indexOf'),
+    'indicesOf' : require('./array/indicesOf'),
+    'insert' : require('./array/insert'),
+    'intersection' : require('./array/intersection'),
+    'invoke' : require('./array/invoke'),
+    'join' : require('./array/join'),
+    'last' : require('./array/last'),
+    'lastIndexOf' : require('./array/lastIndexOf'),
+    'map' : require('./array/map'),
+    'max' : require('./array/max'),
+    'min' : require('./array/min'),
+    'pick' : require('./array/pick'),
+    'pluck' : require('./array/pluck'),
+    'range' : require('./array/range'),
+    'reduce' : require('./array/reduce'),
+    'reduceRight' : require('./array/reduceRight'),
+    'reject' : require('./array/reject'),
+    'remove' : require('./array/remove'),
+    'removeAll' : require('./array/removeAll'),
+    'reverse' : require('./array/reverse'),
+    'shuffle' : require('./array/shuffle'),
+    'slice' : require('./array/slice'),
+    'some' : require('./array/some'),
+    'sort' : require('./array/sort'),
+    'sortBy' : require('./array/sortBy'),
+    'split' : require('./array/split'),
+    'take' : require('./array/take'),
+    'toLookup' : require('./array/toLookup'),
+    'union' : require('./array/union'),
+    'unique' : require('./array/unique'),
+    'xor' : require('./array/xor'),
+    'zip' : require('./array/zip')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/append.js b/node_modules/nyks/node_modules/mout/array/append.js
new file mode 100644
index 0000000..bf74037
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/append.js
@@ -0,0 +1,21 @@
+
+
+    /**
+     * Appends an array to the end of another.
+     * The first array will be modified.
+     */
+    function append(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var pad = arr1.length,
+            i = -1,
+            len = arr2.length;
+        while (++i < len) {
+            arr1[pad + i] = arr2[i];
+        }
+        return arr1;
+    }
+    module.exports = append;
+
diff --git a/node_modules/nyks/node_modules/mout/array/collect.js b/node_modules/nyks/node_modules/mout/array/collect.js
new file mode 100644
index 0000000..5863749
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/collect.js
@@ -0,0 +1,27 @@
+var append = require('./append');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Maps the items in the array and concatenates the result arrays.
+     */
+    function collect(arr, callback, thisObj){
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            var value = callback(arr[i], i, arr);
+            if (value != null) {
+                append(results, value);
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = collect;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/combine.js b/node_modules/nyks/node_modules/mout/array/combine.js
new file mode 100644
index 0000000..d66e621
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/combine.js
@@ -0,0 +1,22 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * Combines an array with all the items of another.
+     * Does not allow duplicates and is case and type sensitive.
+     */
+    function combine(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var i = -1, len = arr2.length;
+        while (++i < len) {
+            if (indexOf(arr1, arr2[i]) === -1) {
+                arr1.push(arr2[i]);
+            }
+        }
+
+        return arr1;
+    }
+    module.exports = combine;
+
diff --git a/node_modules/nyks/node_modules/mout/array/compact.js b/node_modules/nyks/node_modules/mout/array/compact.js
new file mode 100644
index 0000000..74c176e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/compact.js
@@ -0,0 +1,13 @@
+var filter = require('./filter');
+
+    /**
+     * Remove all null/undefined items from array.
+     */
+    function compact(arr) {
+        return filter(arr, function(val){
+            return (val != null);
+        });
+    }
+
+    module.exports = compact;
+
diff --git a/node_modules/nyks/node_modules/mout/array/contains.js b/node_modules/nyks/node_modules/mout/array/contains.js
new file mode 100644
index 0000000..92bb6ad
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/contains.js
@@ -0,0 +1,10 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * If array contains values.
+     */
+    function contains(arr, val) {
+        return indexOf(arr, val) !== -1;
+    }
+    module.exports = contains;
+
diff --git a/node_modules/nyks/node_modules/mout/array/difference.js b/node_modules/nyks/node_modules/mout/array/difference.js
new file mode 100644
index 0000000..ca57524
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/difference.js
@@ -0,0 +1,23 @@
+var unique = require('./unique');
+var filter = require('./filter');
+var some = require('./some');
+var contains = require('./contains');
+var slice = require('./slice');
+
+
+    /**
+     * Return a new Array with elements that aren't present in the other Arrays.
+     */
+    function difference(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return !some(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    module.exports = difference;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/equals.js b/node_modules/nyks/node_modules/mout/array/equals.js
new file mode 100644
index 0000000..1a20430
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/equals.js
@@ -0,0 +1,30 @@
+var is = require('../lang/is');
+var isArray = require('../lang/isArray');
+var every = require('./every');
+
+    /**
+     * Compares if both arrays have the same elements
+     */
+    function equals(a, b, callback){
+        callback = callback || is;
+
+        if (!isArray(a) || !isArray(b)) {
+            return callback(a, b);
+        }
+
+        if (a.length !== b.length) {
+            return false;
+        }
+
+        return every(a, makeCompare(callback), b);
+    }
+
+    function makeCompare(callback) {
+        return function(value, i) {
+            return i in this && callback(value, this[i]);
+        };
+    }
+
+    module.exports = equals;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/every.js b/node_modules/nyks/node_modules/mout/array/every.js
new file mode 100644
index 0000000..ac59883
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/every.js
@@ -0,0 +1,27 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array every
+     */
+    function every(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (!callback(arr[i], i, arr) ) {
+                result = false;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    module.exports = every;
+
diff --git a/node_modules/nyks/node_modules/mout/array/filter.js b/node_modules/nyks/node_modules/mout/array/filter.js
new file mode 100644
index 0000000..f0e7419
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/filter.js
@@ -0,0 +1,26 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array filter
+     */
+    function filter(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = filter;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/find.js b/node_modules/nyks/node_modules/mout/array/find.js
new file mode 100644
index 0000000..b4a7313
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/find.js
@@ -0,0 +1,13 @@
+var findIndex = require('./findIndex');
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(arr, iterator, thisObj){
+        var idx = findIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    module.exports = find;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/findIndex.js b/node_modules/nyks/node_modules/mout/array/findIndex.js
new file mode 100644
index 0000000..53f22a5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/findIndex.js
@@ -0,0 +1,23 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Returns the index of the first item that matches criteria
+     */
+    function findIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (iterator(arr[i], i, arr)) {
+                return i;
+            }
+        }
+
+        return -1;
+    }
+
+    module.exports = findIndex;
+
diff --git a/node_modules/nyks/node_modules/mout/array/findLast.js b/node_modules/nyks/node_modules/mout/array/findLast.js
new file mode 100644
index 0000000..84ba4bf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/findLast.js
@@ -0,0 +1,13 @@
+var findLastIndex = require('./findLastIndex');
+
+    /**
+     * Returns last item that matches criteria
+     */
+    function findLast(arr, iterator, thisObj){
+        var idx = findLastIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    module.exports = findLast;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/findLastIndex.js b/node_modules/nyks/node_modules/mout/array/findLastIndex.js
new file mode 100644
index 0000000..b8330f2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/findLastIndex.js
@@ -0,0 +1,24 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Returns the index of the last item that matches criteria
+     */
+    function findLastIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var n = arr.length;
+        while (--n >= 0) {
+            if (iterator(arr[n], n, arr)) {
+                return n;
+            }
+        }
+
+        return -1;
+    }
+
+    module.exports = findLastIndex;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/flatten.js b/node_modules/nyks/node_modules/mout/array/flatten.js
new file mode 100644
index 0000000..3aad385
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/flatten.js
@@ -0,0 +1,45 @@
+var isArray = require('../lang/isArray');
+var append = require('./append');
+
+    /*
+     * Helper function to flatten to a destination array.
+     * Used to remove the need to create intermediate arrays while flattening.
+     */
+    function flattenTo(arr, result, level) {
+        if (level === 0) {
+            append(result, arr);
+            return result;
+        }
+
+        var value,
+            i = -1,
+            len = arr.length;
+        while (++i < len) {
+            value = arr[i];
+            if (isArray(value)) {
+                flattenTo(value, result, level - 1);
+            } else {
+                result.push(value);
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Recursively flattens an array.
+     * A new array containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(arr, level) {
+        if (arr == null) {
+            return [];
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(arr, [], level);
+    }
+
+    module.exports = flatten;
+
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/forEach.js b/node_modules/nyks/node_modules/mout/array/forEach.js
new file mode 100644
index 0000000..268e506
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/forEach.js
@@ -0,0 +1,23 @@
+
+
+    /**
+     * Array forEach
+     */
+    function forEach(arr, callback, thisObj) {
+        if (arr == null) {
+            return;
+        }
+        var i = -1,
+            len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback.call(thisObj, arr[i], i, arr) === false ) {
+                break;
+            }
+        }
+    }
+
+    module.exports = forEach;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/groupBy.js b/node_modules/nyks/node_modules/mout/array/groupBy.js
new file mode 100644
index 0000000..af6f434
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/groupBy.js
@@ -0,0 +1,30 @@
+var forEach = require('../array/forEach');
+var identity = require('../function/identity');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Bucket the array values.
+     */
+    function groupBy(arr, categorize, thisObj) {
+        if (categorize) {
+            categorize = makeIterator(categorize, thisObj);
+        } else {
+            // Default to identity function.
+            categorize = identity;
+        }
+
+        var buckets = {};
+        forEach(arr, function(element) {
+            var bucket = categorize(element);
+            if (!(bucket in buckets)) {
+                buckets[bucket] = [];
+            }
+
+            buckets[bucket].push(element);
+        });
+
+        return buckets;
+    }
+
+    module.exports = groupBy;
+
diff --git a/node_modules/nyks/node_modules/mout/array/indexOf.js b/node_modules/nyks/node_modules/mout/array/indexOf.js
new file mode 100644
index 0000000..6a9ac83
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/indexOf.js
@@ -0,0 +1,28 @@
+
+
+    /**
+     * Array.indexOf
+     */
+    function indexOf(arr, item, fromIndex) {
+        fromIndex = fromIndex || 0;
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length,
+            i = fromIndex < 0 ? len + fromIndex : fromIndex;
+        while (i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[i] === item) {
+                return i;
+            }
+
+            i++;
+        }
+
+        return -1;
+    }
+
+    module.exports = indexOf;
+
diff --git a/node_modules/nyks/node_modules/mout/array/indicesOf.js b/node_modules/nyks/node_modules/mout/array/indicesOf.js
new file mode 100644
index 0000000..46d656e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/indicesOf.js
@@ -0,0 +1,28 @@
+
+
+    /**
+     * Array indicesOf
+     */
+    function indicesOf(arr, item, fromIndex) {
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        fromIndex = typeof fromIndex === 'number' ? fromIndex : 0;
+
+        var length = arr.length;
+        var cursor = fromIndex >= 0 ? fromIndex : length + fromIndex;
+
+        while (cursor < length) {
+            if (arr[cursor] === item) {
+                results.push(cursor);
+            }
+            cursor++;
+        }
+
+        return results;
+    }
+
+    module.exports = indicesOf;
+
diff --git a/node_modules/nyks/node_modules/mout/array/insert.js b/node_modules/nyks/node_modules/mout/array/insert.js
new file mode 100644
index 0000000..20bd442
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/insert.js
@@ -0,0 +1,15 @@
+var difference = require('./difference');
+var slice = require('./slice');
+
+    /**
+     * Insert item into array if not already present.
+     */
+    function insert(arr, rest_items) {
+        var diff = difference(slice(arguments, 1), arr);
+        if (diff.length) {
+            Array.prototype.push.apply(arr, diff);
+        }
+        return arr.length;
+    }
+    module.exports = insert;
+
diff --git a/node_modules/nyks/node_modules/mout/array/intersection.js b/node_modules/nyks/node_modules/mout/array/intersection.js
new file mode 100644
index 0000000..34957ab
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/intersection.js
@@ -0,0 +1,24 @@
+var unique = require('./unique');
+var filter = require('./filter');
+var every = require('./every');
+var contains = require('./contains');
+var slice = require('./slice');
+
+
+    /**
+     * Return a new Array with elements common to all Arrays.
+     * - based on underscore.js implementation
+     */
+    function intersection(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return every(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    module.exports = intersection;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/invoke.js b/node_modules/nyks/node_modules/mout/array/invoke.js
new file mode 100644
index 0000000..32ec584
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/invoke.js
@@ -0,0 +1,23 @@
+var slice = require('./slice');
+
+    /**
+     * Call `methodName` on each item of the array passing custom arguments if
+     * needed.
+     */
+    function invoke(arr, methodName, var_args){
+        if (arr == null) {
+            return arr;
+        }
+
+        var args = slice(arguments, 2);
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            value[methodName].apply(value, args);
+        }
+
+        return arr;
+    }
+
+    module.exports = invoke;
+
diff --git a/node_modules/nyks/node_modules/mout/array/join.js b/node_modules/nyks/node_modules/mout/array/join.js
new file mode 100644
index 0000000..71d8bd2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/join.js
@@ -0,0 +1,17 @@
+var filter = require('./filter');
+
+    function isValidString(val) {
+        return (val != null && val !== '');
+    }
+
+    /**
+     * Joins strings with the specified separator inserted between each value.
+     * Null values and empty strings will be excluded.
+     */
+    function join(items, separator) {
+        separator = separator || '';
+        return filter(items, isValidString).join(separator);
+    }
+
+    module.exports = join;
+
diff --git a/node_modules/nyks/node_modules/mout/array/last.js b/node_modules/nyks/node_modules/mout/array/last.js
new file mode 100644
index 0000000..d80ab2b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/last.js
@@ -0,0 +1,16 @@
+
+
+    /**
+     * Returns last element of array.
+     */
+    function last(arr){
+        if (arr == null || arr.length < 1) {
+            return undefined;
+        }
+
+        return arr[arr.length - 1];
+    }
+
+    module.exports = last;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/lastIndexOf.js b/node_modules/nyks/node_modules/mout/array/lastIndexOf.js
new file mode 100644
index 0000000..ee44a25
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/lastIndexOf.js
@@ -0,0 +1,28 @@
+
+
+    /**
+     * Array lastIndexOf
+     */
+    function lastIndexOf(arr, item, fromIndex) {
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length;
+        fromIndex = (fromIndex == null || fromIndex >= len)? len - 1 : fromIndex;
+        fromIndex = (fromIndex < 0)? len + fromIndex : fromIndex;
+
+        while (fromIndex >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[fromIndex] === item) {
+                return fromIndex;
+            }
+            fromIndex--;
+        }
+
+        return -1;
+    }
+
+    module.exports = lastIndexOf;
+
diff --git a/node_modules/nyks/node_modules/mout/array/map.js b/node_modules/nyks/node_modules/mout/array/map.js
new file mode 100644
index 0000000..7b7fb33
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/map.js
@@ -0,0 +1,22 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array map
+     */
+    function map(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null){
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            results[i] = callback(arr[i], i, arr);
+        }
+
+        return results;
+    }
+
+     module.exports = map;
+
diff --git a/node_modules/nyks/node_modules/mout/array/max.js b/node_modules/nyks/node_modules/mout/array/max.js
new file mode 100644
index 0000000..0b8f259
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/max.js
@@ -0,0 +1,34 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Return maximum value inside array
+     */
+    function max(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.max.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = -Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp > compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    module.exports = max;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/min.js b/node_modules/nyks/node_modules/mout/array/min.js
new file mode 100644
index 0000000..ed6cc6a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/min.js
@@ -0,0 +1,34 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Return minimum value inside array
+     */
+    function min(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return -Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.min.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp < compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    module.exports = min;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/pick.js b/node_modules/nyks/node_modules/mout/array/pick.js
new file mode 100644
index 0000000..6408678
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/pick.js
@@ -0,0 +1,31 @@
+var randInt = require('../random/randInt');
+
+    /**
+     * Remove random item(s) from the Array and return it.
+     * Returns an Array of items if [nItems] is provided or a single item if
+     * it isn't specified.
+     */
+    function pick(arr, nItems){
+        if (nItems != null) {
+            var result = [];
+            if (nItems > 0 && arr && arr.length) {
+                nItems = nItems > arr.length? arr.length : nItems;
+                while (nItems--) {
+                    result.push( pickOne(arr) );
+                }
+            }
+            return result;
+        }
+        return (arr && arr.length)? pickOne(arr) : void(0);
+    }
+
+
+    function pickOne(arr){
+        var idx = randInt(0, arr.length - 1);
+        return arr.splice(idx, 1)[0];
+    }
+
+
+    module.exports = pick;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/pluck.js b/node_modules/nyks/node_modules/mout/array/pluck.js
new file mode 100644
index 0000000..fef4043
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/pluck.js
@@ -0,0 +1,12 @@
+var map = require('./map');
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(arr, propName){
+        return map(arr, propName);
+    }
+
+    module.exports = pluck;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/range.js b/node_modules/nyks/node_modules/mout/array/range.js
new file mode 100644
index 0000000..31d3c77
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/range.js
@@ -0,0 +1,27 @@
+var countSteps = require('../math/countSteps');
+
+    /**
+     * Returns an Array of numbers inside range.
+     */
+    function range(start, stop, step) {
+        if (stop == null) {
+            stop = start;
+            start = 0;
+        }
+        step = step || 1;
+
+        var result = [],
+            nSteps = countSteps(stop - start, step),
+            i = start;
+
+        while (i <= stop) {
+            result.push(i);
+            i += step;
+        }
+
+        return result;
+    }
+
+    module.exports = range;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/reduce.js b/node_modules/nyks/node_modules/mout/array/reduce.js
new file mode 100644
index 0000000..827f428
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/reduce.js
@@ -0,0 +1,33 @@
+
+
+    /**
+     * Array reduce
+     */
+    function reduce(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2,
+            result = initVal;
+
+        if (arr == null || !arr.length) {
+            if (!hasInit) {
+                throw new Error('reduce of empty array with no initial value');
+            } else {
+                return initVal;
+            }
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (!hasInit) {
+                result = arr[i];
+                hasInit = true;
+            } else {
+                result = fn(result, arr[i], i, arr);
+            }
+        }
+
+        return result;
+    }
+
+    module.exports = reduce;
+
diff --git a/node_modules/nyks/node_modules/mout/array/reduceRight.js b/node_modules/nyks/node_modules/mout/array/reduceRight.js
new file mode 100644
index 0000000..e36fd4a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/reduceRight.js
@@ -0,0 +1,34 @@
+
+
+    /**
+     * Array reduceRight
+     */
+    function reduceRight(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2;
+
+        if (arr == null || !arr.length) {
+            if (hasInit) {
+                return initVal;
+            } else {
+                throw new Error('reduce of empty array with no initial value');
+            }
+        }
+
+        var i = arr.length, result = initVal, value;
+        while (--i >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            value = arr[i];
+            if (!hasInit) {
+                result = value;
+                hasInit = true;
+            } else {
+                result = fn(result, value, i, arr);
+            }
+        }
+        return result;
+    }
+
+    module.exports = reduceRight;
+
diff --git a/node_modules/nyks/node_modules/mout/array/reject.js b/node_modules/nyks/node_modules/mout/array/reject.js
new file mode 100644
index 0000000..0cfc8b1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/reject.js
@@ -0,0 +1,25 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array reject
+     */
+    function reject(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (!callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = reject;
+
diff --git a/node_modules/nyks/node_modules/mout/array/remove.js b/node_modules/nyks/node_modules/mout/array/remove.js
new file mode 100644
index 0000000..aa6517d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/remove.js
@@ -0,0 +1,13 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * Remove a single item from the array.
+     * (it won't remove duplicates, just a single item)
+     */
+    function remove(arr, item){
+        var idx = indexOf(arr, item);
+        if (idx !== -1) arr.splice(idx, 1);
+    }
+
+    module.exports = remove;
+
diff --git a/node_modules/nyks/node_modules/mout/array/removeAll.js b/node_modules/nyks/node_modules/mout/array/removeAll.js
new file mode 100644
index 0000000..d5f7f3b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/removeAll.js
@@ -0,0 +1,15 @@
+var indexOf = require('./indexOf');
+
+    /**
+     * Remove all instances of an item from array.
+     */
+    function removeAll(arr, item){
+        var idx = indexOf(arr, item);
+        while (idx !== -1) {
+            arr.splice(idx, 1);
+            idx = indexOf(arr, item, idx);
+        }
+    }
+
+    module.exports = removeAll;
+
diff --git a/node_modules/nyks/node_modules/mout/array/reverse.js b/node_modules/nyks/node_modules/mout/array/reverse.js
new file mode 100644
index 0000000..a35cc1a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/reverse.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a copy of the array in reversed order.
+     */
+    function reverse(array) {
+        var copy = array.slice();
+        copy.reverse();
+        return copy;
+    }
+
+    module.exports = reverse;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/shuffle.js b/node_modules/nyks/node_modules/mout/array/shuffle.js
new file mode 100644
index 0000000..9cd1fb5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/shuffle.js
@@ -0,0 +1,28 @@
+var randInt = require('../random/randInt');
+
+    /**
+     * Shuffle array items.
+     */
+    function shuffle(arr) {
+        var results = [],
+            rnd;
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (!i) {
+                results[0] = arr[0];
+            } else {
+                rnd = randInt(0, i);
+                results[i] = results[rnd];
+                results[rnd] = arr[i];
+            }
+        }
+
+        return results;
+    }
+
+    module.exports = shuffle;
+
diff --git a/node_modules/nyks/node_modules/mout/array/slice.js b/node_modules/nyks/node_modules/mout/array/slice.js
new file mode 100644
index 0000000..0a4d5cf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/slice.js
@@ -0,0 +1,35 @@
+
+
+    /**
+     * Create slice of source array or array-like object
+     */
+    function slice(arr, start, end){
+        var len = arr.length;
+
+        if (start == null) {
+            start = 0;
+        } else if (start < 0) {
+            start = Math.max(len + start, 0);
+        } else {
+            start = Math.min(start, len);
+        }
+
+        if (end == null) {
+            end = len;
+        } else if (end < 0) {
+            end = Math.max(len + end, 0);
+        } else {
+            end = Math.min(end, len);
+        }
+
+        var result = [];
+        while (start < end) {
+            result.push(arr[start++]);
+        }
+
+        return result;
+    }
+
+    module.exports = slice;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/some.js b/node_modules/nyks/node_modules/mout/array/some.js
new file mode 100644
index 0000000..8d17772
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/some.js
@@ -0,0 +1,27 @@
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Array some
+     */
+    function some(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback(arr[i], i, arr) ) {
+                result = true;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    module.exports = some;
+
diff --git a/node_modules/nyks/node_modules/mout/array/sort.js b/node_modules/nyks/node_modules/mout/array/sort.js
new file mode 100644
index 0000000..7807339
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/sort.js
@@ -0,0 +1,55 @@
+
+
+    /**
+     * Merge sort (http://en.wikipedia.org/wiki/Merge_sort)
+     */
+    function mergeSort(arr, compareFn) {
+        if (arr == null) {
+            return [];
+        } else if (arr.length < 2) {
+            return arr;
+        }
+
+        if (compareFn == null) {
+            compareFn = defaultCompare;
+        }
+
+        var mid, left, right;
+
+        mid   = ~~(arr.length / 2);
+        left  = mergeSort( arr.slice(0, mid), compareFn );
+        right = mergeSort( arr.slice(mid, arr.length), compareFn );
+
+        return merge(left, right, compareFn);
+    }
+
+    function defaultCompare(a, b) {
+        return a < b ? -1 : (a > b? 1 : 0);
+    }
+
+    function merge(left, right, compareFn) {
+        var result = [];
+
+        while (left.length && right.length) {
+            if (compareFn(left[0], right[0]) <= 0) {
+                // if 0 it should preserve same order (stable)
+                result.push(left.shift());
+            } else {
+                result.push(right.shift());
+            }
+        }
+
+        if (left.length) {
+            result.push.apply(result, left);
+        }
+
+        if (right.length) {
+            result.push.apply(result, right);
+        }
+
+        return result;
+    }
+
+    module.exports = mergeSort;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/sortBy.js b/node_modules/nyks/node_modules/mout/array/sortBy.js
new file mode 100644
index 0000000..b84544c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/sortBy.js
@@ -0,0 +1,19 @@
+var sort = require('./sort');
+var makeIterator = require('../function/makeIterator_');
+
+    /*
+     * Sort array by the result of the callback
+     */
+    function sortBy(arr, callback, context){
+        callback = makeIterator(callback, context);
+
+        return sort(arr, function(a, b) {
+            a = callback(a);
+            b = callback(b);
+            return (a < b) ? -1 : ((a > b) ? 1 : 0);
+        });
+    }
+
+    module.exports = sortBy;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/split.js b/node_modules/nyks/node_modules/mout/array/split.js
new file mode 100644
index 0000000..4f3ba50
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/split.js
@@ -0,0 +1,35 @@
+
+
+    /**
+     * Split array into a fixed number of segments.
+     */
+    function split(array, segments) {
+        segments = segments || 2;
+        var results = [];
+        if (array == null) {
+            return results;
+        }
+
+        var minLength = Math.floor(array.length / segments),
+            remainder = array.length % segments,
+            i = 0,
+            len = array.length,
+            segmentIndex = 0,
+            segmentLength;
+
+        while (i < len) {
+            segmentLength = minLength;
+            if (segmentIndex < remainder) {
+                segmentLength++;
+            }
+
+            results.push(array.slice(i, i + segmentLength));
+
+            segmentIndex++;
+            i += segmentLength;
+        }
+
+        return results;
+    }
+    module.exports = split;
+
diff --git a/node_modules/nyks/node_modules/mout/array/take.js b/node_modules/nyks/node_modules/mout/array/take.js
new file mode 100644
index 0000000..bd8eb07
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/take.js
@@ -0,0 +1,24 @@
+
+
+    /**
+     * Iterates over a callback a set amount of times
+     * returning the results
+     */
+    function take(n, callback, thisObj){
+        var i = -1;
+        var arr = [];
+        if( !thisObj ){
+            while(++i < n){
+                arr[i] = callback(i, n);
+            }
+        } else {
+            while(++i < n){
+                arr[i] = callback.call(thisObj, i, n);
+            }
+        }
+        return arr;
+    }
+
+    module.exports = take;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/toLookup.js b/node_modules/nyks/node_modules/mout/array/toLookup.js
new file mode 100644
index 0000000..ce4c55d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/toLookup.js
@@ -0,0 +1,28 @@
+var isFunction = require('../lang/isFunction');
+
+    /**
+     * Creates an object that holds a lookup for the objects in the array.
+     */
+    function toLookup(arr, key) {
+        var result = {};
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length, value;
+        if (isFunction(key)) {
+            while (++i < len) {
+                value = arr[i];
+                result[key(value)] = value;
+            }
+        } else {
+            while (++i < len) {
+                value = arr[i];
+                result[value[key]] = value;
+            }
+        }
+
+        return result;
+    }
+    module.exports = toLookup;
+
diff --git a/node_modules/nyks/node_modules/mout/array/union.js b/node_modules/nyks/node_modules/mout/array/union.js
new file mode 100644
index 0000000..f1334a9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/union.js
@@ -0,0 +1,19 @@
+var unique = require('./unique');
+var append = require('./append');
+
+    /**
+     * Concat multiple arrays and remove duplicates
+     */
+    function union(arrs) {
+        var results = [];
+        var i = -1, len = arguments.length;
+        while (++i < len) {
+            append(results, arguments[i]);
+        }
+
+        return unique(results);
+    }
+
+    module.exports = union;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/unique.js b/node_modules/nyks/node_modules/mout/array/unique.js
new file mode 100644
index 0000000..5db2510
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/unique.js
@@ -0,0 +1,25 @@
+var filter = require('./filter');
+
+    /**
+     * @return {array} Array of unique items
+     */
+    function unique(arr, compare){
+        compare = compare || isEqual;
+        return filter(arr, function(item, i, arr){
+            var n = arr.length;
+            while (++i < n) {
+                if ( compare(item, arr[i]) ) {
+                    return false;
+                }
+            }
+            return true;
+        });
+    }
+
+    function isEqual(a, b){
+        return a === b;
+    }
+
+    module.exports = unique;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/xor.js b/node_modules/nyks/node_modules/mout/array/xor.js
new file mode 100644
index 0000000..c125a99
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/xor.js
@@ -0,0 +1,26 @@
+var unique = require('./unique');
+var filter = require('./filter');
+var contains = require('./contains');
+
+
+    /**
+     * Exclusive OR. Returns items that are present in a single array.
+     * - like ptyhon's `symmetric_difference`
+     */
+    function xor(arr1, arr2) {
+        arr1 = unique(arr1);
+        arr2 = unique(arr2);
+
+        var a1 = filter(arr1, function(item){
+                return !contains(arr2, item);
+            }),
+            a2 = filter(arr2, function(item){
+                return !contains(arr1, item);
+            });
+
+        return a1.concat(a2);
+    }
+
+    module.exports = xor;
+
+
diff --git a/node_modules/nyks/node_modules/mout/array/zip.js b/node_modules/nyks/node_modules/mout/array/zip.js
new file mode 100644
index 0000000..8bce9c0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/array/zip.js
@@ -0,0 +1,28 @@
+var max = require('./max');
+var map = require('./map');
+
+    function getLength(arr) {
+        return arr == null ? 0 : arr.length;
+    }
+
+    /**
+     * Merges together the values of each of the arrays with the values at the
+     * corresponding position.
+     */
+    function zip(arr){
+        var len = arr ? max(map(arguments, getLength)) : 0,
+            results = [],
+            i = -1;
+        while (++i < len) {
+            // jshint loopfunc: true
+            results.push(map(arguments, function(item) {
+                return item == null ? undefined : item[i];
+            }));
+        }
+
+        return results;
+    }
+
+    module.exports = zip;
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection.js b/node_modules/nyks/node_modules/mout/collection.js
new file mode 100644
index 0000000..d5cf6ca
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection.js
@@ -0,0 +1,22 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'contains' : require('./collection/contains'),
+    'every' : require('./collection/every'),
+    'filter' : require('./collection/filter'),
+    'find' : require('./collection/find'),
+    'forEach' : require('./collection/forEach'),
+    'make_' : require('./collection/make_'),
+    'map' : require('./collection/map'),
+    'max' : require('./collection/max'),
+    'min' : require('./collection/min'),
+    'pluck' : require('./collection/pluck'),
+    'reduce' : require('./collection/reduce'),
+    'reject' : require('./collection/reject'),
+    'size' : require('./collection/size'),
+    'some' : require('./collection/some')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/contains.js b/node_modules/nyks/node_modules/mout/collection/contains.js
new file mode 100644
index 0000000..a73f994
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/contains.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrContains = require('../array/contains');
+var objContains = require('../object/contains');
+
+    /**
+     */
+    module.exports = make(arrContains, objContains);
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/every.js b/node_modules/nyks/node_modules/mout/collection/every.js
new file mode 100644
index 0000000..300e03c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/every.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrEvery = require('../array/every');
+var objEvery = require('../object/every');
+
+    /**
+     */
+    module.exports = make(arrEvery, objEvery);
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/filter.js b/node_modules/nyks/node_modules/mout/collection/filter.js
new file mode 100644
index 0000000..3875700
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/filter.js
@@ -0,0 +1,23 @@
+var forEach = require('./forEach');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * filter collection values, returns array.
+     */
+    function filter(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        var results = [];
+        if (!list) {
+            return results;
+        }
+        forEach(list, function(value, index, list) {
+            if (iterator(value, index, list)) {
+                results[results.length] = value;
+            }
+        });
+        return results;
+    }
+
+    module.exports = filter;
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/find.js b/node_modules/nyks/node_modules/mout/collection/find.js
new file mode 100644
index 0000000..14317e6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/find.js
@@ -0,0 +1,10 @@
+var make = require('./make_');
+var arrFind = require('../array/find');
+var objFind = require('../object/find');
+
+    /**
+     * Find value that returns true on iterator check.
+     */
+    module.exports = make(arrFind, objFind);
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/forEach.js b/node_modules/nyks/node_modules/mout/collection/forEach.js
new file mode 100644
index 0000000..6e28dcb
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/forEach.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrForEach = require('../array/forEach');
+var objForEach = require('../object/forOwn');
+
+    /**
+     */
+    module.exports = make(arrForEach, objForEach);
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/make_.js b/node_modules/nyks/node_modules/mout/collection/make_.js
new file mode 100644
index 0000000..4fb8a81
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/make_.js
@@ -0,0 +1,19 @@
+var slice = require('../array/slice');
+
+    /**
+     * internal method used to create other collection modules.
+     */
+    function makeCollectionMethod(arrMethod, objMethod, defaultReturn) {
+        return function(){
+            var args = slice(arguments);
+            if (args[0] == null) {
+                return defaultReturn;
+            }
+            // array-like is treated as array
+            return (typeof args[0].length === 'number')? arrMethod.apply(null, args) : objMethod.apply(null, args);
+        };
+    }
+
+    module.exports = makeCollectionMethod;
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/map.js b/node_modules/nyks/node_modules/mout/collection/map.js
new file mode 100644
index 0000000..fc157f5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/map.js
@@ -0,0 +1,23 @@
+var isObject = require('../lang/isObject');
+var values = require('../object/values');
+var arrMap = require('../array/map');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Map collection values, returns Array.
+     */
+    function map(list, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        // list.length to check array-like object, if not array-like
+        // we simply map all the object values
+        if( isObject(list) && list.length == null ){
+            list = values(list);
+        }
+        return arrMap(list, function (val, key, list) {
+            return callback(val, key, list);
+        });
+    }
+
+    module.exports = map;
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/max.js b/node_modules/nyks/node_modules/mout/collection/max.js
new file mode 100644
index 0000000..a8490e7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/max.js
@@ -0,0 +1,10 @@
+var make = require('./make_');
+var arrMax = require('../array/max');
+var objMax = require('../object/max');
+
+    /**
+     * Get maximum value inside collection
+     */
+    module.exports = make(arrMax, objMax);
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/min.js b/node_modules/nyks/node_modules/mout/collection/min.js
new file mode 100644
index 0000000..51d9f14
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/min.js
@@ -0,0 +1,10 @@
+var make = require('./make_');
+var arrMin = require('../array/min');
+var objMin = require('../object/min');
+
+    /**
+     * Get minimum value inside collection.
+     */
+    module.exports = make(arrMin, objMin);
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/pluck.js b/node_modules/nyks/node_modules/mout/collection/pluck.js
new file mode 100644
index 0000000..9b28377
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/pluck.js
@@ -0,0 +1,14 @@
+var map = require('./map');
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(list, key) {
+        return map(list, function(value) {
+            return value[key];
+        });
+    }
+
+    module.exports = pluck;
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/reduce.js b/node_modules/nyks/node_modules/mout/collection/reduce.js
new file mode 100644
index 0000000..4c07573
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/reduce.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrReduce = require('../array/reduce');
+var objReduce = require('../object/reduce');
+
+    /**
+     */
+    module.exports = make(arrReduce, objReduce);
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/reject.js b/node_modules/nyks/node_modules/mout/collection/reject.js
new file mode 100644
index 0000000..2a92e3b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/reject.js
@@ -0,0 +1,16 @@
+var filter = require('./filter');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Inverse or collection/filter
+     */
+    function reject(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        return filter(list, function(value, index, list) {
+            return !iterator(value, index, list);
+        }, thisObj);
+    }
+
+    module.exports = reject;
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/size.js b/node_modules/nyks/node_modules/mout/collection/size.js
new file mode 100644
index 0000000..244e33e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/size.js
@@ -0,0 +1,19 @@
+var isArray = require('../lang/isArray');
+var objSize = require('../object/size');
+
+    /**
+     * Get collection size
+     */
+    function size(list) {
+        if (!list) {
+            return 0;
+        }
+        if (isArray(list)) {
+            return list.length;
+        }
+        return objSize(list);
+    }
+
+    module.exports = size;
+
+
diff --git a/node_modules/nyks/node_modules/mout/collection/some.js b/node_modules/nyks/node_modules/mout/collection/some.js
new file mode 100644
index 0000000..48fd252
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/collection/some.js
@@ -0,0 +1,9 @@
+var make = require('./make_');
+var arrSome = require('../array/some');
+var objSome = require('../object/some');
+
+    /**
+     */
+    module.exports = make(arrSome, objSome);
+
+
diff --git a/node_modules/nyks/node_modules/mout/date.js b/node_modules/nyks/node_modules/mout/date.js
new file mode 100644
index 0000000..9c2efe9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date.js
@@ -0,0 +1,22 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'dayOfTheYear' : require('./date/dayOfTheYear'),
+    'diff' : require('./date/diff'),
+    'i18n_' : require('./date/i18n_'),
+    'isLeapYear' : require('./date/isLeapYear'),
+    'isSame' : require('./date/isSame'),
+    'parseIso' : require('./date/parseIso'),
+    'quarter' : require('./date/quarter'),
+    'startOf' : require('./date/startOf'),
+    'strftime' : require('./date/strftime'),
+    'timezoneAbbr' : require('./date/timezoneAbbr'),
+    'timezoneOffset' : require('./date/timezoneOffset'),
+    'totalDaysInMonth' : require('./date/totalDaysInMonth'),
+    'totalDaysInYear' : require('./date/totalDaysInYear'),
+    'weekOfTheYear' : require('./date/weekOfTheYear')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/dayOfTheYear.js b/node_modules/nyks/node_modules/mout/date/dayOfTheYear.js
new file mode 100644
index 0000000..85905c5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/dayOfTheYear.js
@@ -0,0 +1,13 @@
+var isDate = require('../lang/isDate');
+
+    /**
+     * return the day of the year (1..366)
+     */
+    function dayOfTheYear(date){
+        return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -
+                Date.UTC(date.getFullYear(), 0, 1)) / 86400000 + 1;
+    }
+
+    module.exports = dayOfTheYear;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/diff.js b/node_modules/nyks/node_modules/mout/date/diff.js
new file mode 100644
index 0000000..1131cdc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/diff.js
@@ -0,0 +1,130 @@
+var totalDaysInMonth = require('./totalDaysInMonth');
+var totalDaysInYear = require('./totalDaysInYear');
+var convert = require('../time/convert');
+
+    /**
+     * calculate the difference between dates (range)
+     */
+    function diff(start, end, unitName){
+        // sort the dates to make it easier to process (specially year/month)
+        if (start > end) {
+            var swap = start;
+            start = end;
+            end = swap;
+        }
+
+        var output;
+
+        if (unitName === 'month') {
+            output = getMonthsDiff(start, end);
+        } else if (unitName === 'year'){
+            output = getYearsDiff(start, end);
+        } else if (unitName != null) {
+            if (unitName === 'day') {
+                // ignore timezone difference because of daylight savings time
+                start = toUtc(start);
+                end = toUtc(end);
+            }
+            output = convert(end - start, 'ms', unitName);
+        } else {
+            output = end - start;
+        }
+
+        return output;
+    }
+
+
+    function toUtc(d){
+        // we ignore timezone differences on purpose because of daylight
+        // savings time, otherwise it would return fractional days/weeks even
+        // if a full day elapsed. eg:
+        // Wed Feb 12 2014 00:00:00 GMT-0200 (BRST)
+        // Sun Feb 16 2014 00:00:00 GMT-0300 (BRT)
+        // diff should be 4 days and not 4.041666666666667
+        return Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(),
+                        d.getHours(), d.getMinutes(), d.getSeconds(),
+                        d.getMilliseconds());
+    }
+
+
+    function getMonthsDiff(start, end){
+        return getElapsedMonths(start, end) +
+               getElapsedYears(start, end) * 12 +
+               getFractionalMonth(start, end);
+    }
+
+
+    function getYearsDiff(start, end){
+        var elapsedYears = getElapsedYears(start, end);
+        return elapsedYears + getFractionalYear(start, end, elapsedYears);
+    }
+
+
+    function getElapsedMonths(start, end){
+        var monthDiff = end.getMonth() - start.getMonth();
+        if (monthDiff < 0) {
+            monthDiff += 12;
+        }
+        // less than a full month
+        if (start.getDate() > end.getDate()) {
+            monthDiff -= 1;
+        }
+        return monthDiff;
+    }
+
+
+    function getElapsedYears(start, end){
+        var yearDiff = end.getFullYear() - start.getFullYear();
+        // less than a full year
+        if (start.getMonth() > end.getMonth()) {
+            yearDiff -= 1;
+        }
+        return yearDiff;
+    }
+
+
+    function getFractionalMonth(start, end){
+        var fractionalDiff = 0;
+        var startDay = start.getDate();
+        var endDay = end.getDate();
+
+        if (startDay !== endDay) {
+            var startTotalDays = totalDaysInMonth(start);
+            var endTotalDays = totalDaysInMonth(end);
+            var totalDays;
+            var daysElapsed;
+
+            if (startDay > endDay) {
+                // eg: Jan 29 - Feb 27 (29 days elapsed but not a full month)
+                var baseDay = startTotalDays - startDay;
+                daysElapsed = endDay + baseDay;
+                // total days should be relative to 1st day of next month if
+                // startDay > endTotalDays
+                totalDays = (startDay > endTotalDays)?
+                    endTotalDays + baseDay + 1 : startDay + baseDay;
+            } else {
+                // fractional is only based on endMonth eg: Jan 12 - Feb 18
+                // (6 fractional days, 28 days until next full month)
+                daysElapsed = endDay - startDay;
+                totalDays = endTotalDays;
+            }
+
+            fractionalDiff = daysElapsed / totalDays;
+        }
+
+        return fractionalDiff;
+    }
+
+
+    function getFractionalYear(start, end, elapsedYears){
+        var base = elapsedYears?
+            new Date(end.getFullYear(), start.getMonth(), start.getDate()) :
+            start;
+        var elapsedDays = diff(base, end, 'day');
+        return elapsedDays / totalDaysInYear(end);
+    }
+
+
+    module.exports = diff;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/i18n/de-DE.js b/node_modules/nyks/node_modules/mout/date/i18n/de-DE.js
new file mode 100644
index 0000000..b3ab620
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/i18n/de-DE.js
@@ -0,0 +1,61 @@
+
+    // de-DE (German)
+    module.exports = {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Januar",
+            "Februar",
+            "März",
+            "April",
+            "Mai",
+            "Juni",
+            "Juli",
+            "August",
+            "September",
+            "Oktober",
+            "November",
+            "Dezember"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Febr",
+            "März",
+            "Apr",
+            "Mai",
+            "Juni",
+            "Juli",
+            "Aug",
+            "Sept",
+            "Okt",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Sonntag",
+            "Montag",
+            "Dienstag",
+            "Mittwoch",
+            "Donnerstag",
+            "Freitag",
+            "Samstag"
+        ],
+
+        "days_abbr" : [
+            "So",
+            "Mo",
+            "Di",
+            "Mi",
+            "Do",
+            "Fr",
+            "Sa"
+        ]
+    };
+
diff --git a/node_modules/nyks/node_modules/mout/date/i18n/en-US.js b/node_modules/nyks/node_modules/mout/date/i18n/en-US.js
new file mode 100644
index 0000000..f9526ce
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/i18n/en-US.js
@@ -0,0 +1,61 @@
+
+    // en-US (English, United States)
+    module.exports = {
+        "am" : "AM",
+        "pm" : "PM",
+
+        "x": "%m/%d/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %I:%M:%S %p %Z",
+
+        "months" : [
+            "January",
+            "February",
+            "March",
+            "April",
+            "May",
+            "June",
+            "July",
+            "August",
+            "September",
+            "October",
+            "November",
+            "December"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Feb",
+            "Mar",
+            "Apr",
+            "May",
+            "Jun",
+            "Jul",
+            "Aug",
+            "Sep",
+            "Oct",
+            "Nov",
+            "Dec"
+        ],
+
+        "days" : [
+            "Sunday",
+            "Monday",
+            "Tuesday",
+            "Wednesday",
+            "Thursday",
+            "Friday",
+            "Saturday"
+        ],
+
+        "days_abbr" : [
+            "Sun",
+            "Mon",
+            "Tue",
+            "Wed",
+            "Thu",
+            "Fri",
+            "Sat"
+        ]
+    };
+
diff --git a/node_modules/nyks/node_modules/mout/date/i18n/pt-BR.js b/node_modules/nyks/node_modules/mout/date/i18n/pt-BR.js
new file mode 100644
index 0000000..71ebadb
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/i18n/pt-BR.js
@@ -0,0 +1,61 @@
+
+    // pt-BR (Brazillian Portuguese)
+    module.exports = {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Janeiro",
+            "Fevereiro",
+            "Março",
+            "Abril",
+            "Maio",
+            "Junho",
+            "Julho",
+            "Agosto",
+            "Setembro",
+            "Outubro",
+            "Novembro",
+            "Dezembro"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Fev",
+            "Mar",
+            "Abr",
+            "Mai",
+            "Jun",
+            "Jul",
+            "Ago",
+            "Set",
+            "Out",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Domingo",
+            "Segunda",
+            "Terça",
+            "Quarta",
+            "Quinta",
+            "Sexta",
+            "Sábado"
+        ],
+
+        "days_abbr" : [
+            "Dom",
+            "Seg",
+            "Ter",
+            "Qua",
+            "Qui",
+            "Sex",
+            "Sáb"
+        ]
+    };
+
diff --git a/node_modules/nyks/node_modules/mout/date/i18n/ru.js b/node_modules/nyks/node_modules/mout/date/i18n/ru.js
new file mode 100644
index 0000000..6c1a6ca
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/i18n/ru.js
@@ -0,0 +1,61 @@
+
+    // ru (Russian)
+    module.exports = {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d.%m.%Y",
+        "X": "%H:%M:%S",
+        "c": "%a, %e %b %Y г., %H:%M",
+
+        "months" : [
+            "Январь",
+            "Февраль",
+            "Март",
+            "Апрель",
+            "Май",
+            "Июнь",
+            "Июль",
+            "Август",
+            "Сентябрь",
+            "Октябрь",
+            "Ноябрь",
+            "Декабрь"
+        ],
+
+        "months_abbr" : [
+            "Янв.",
+            "Февр.",
+            "Март",
+            "Апр.",
+            "Май",
+            "Июнь",
+            "Июль",
+            "Авг.",
+            "Сент.",
+            "Окт.",
+            "Нояб.",
+            "Дек."
+        ],
+
+        "days" : [
+            "Воскресенье",
+            "Понедельник",
+            "Вторник",
+            "Среда",
+            "Четверг",
+            "Пятница",
+            "Суббота"
+        ],
+
+        "days_abbr" : [
+            "Вс",
+            "Пн",
+            "Вт",
+            "Ср",
+            "Чт",
+            "Пт",
+            "Сб"
+        ]
+    };
+
diff --git a/node_modules/nyks/node_modules/mout/date/i18n_.js b/node_modules/nyks/node_modules/mout/date/i18n_.js
new file mode 100644
index 0000000..723fc10
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/i18n_.js
@@ -0,0 +1,14 @@
+var mixIn = require('../object/mixIn');
+var enUS = require('./i18n/en-US');
+
+    // we also use mixIn to make sure we don't affect the original locale
+    var activeLocale = mixIn({}, enUS, {
+        // we expose a "set" method to allow overriding the global locale
+        set : function(localeData){
+            mixIn(activeLocale, localeData);
+        }
+    });
+
+    module.exports = activeLocale;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/isLeapYear.js b/node_modules/nyks/node_modules/mout/date/isLeapYear.js
new file mode 100644
index 0000000..4212870
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/isLeapYear.js
@@ -0,0 +1,15 @@
+var isDate = require('../lang/isDate');
+
+    /**
+     * checks if it's a leap year
+     */
+    function isLeapYear(fullYear){
+        if (isDate(fullYear)) {
+            fullYear = fullYear.getFullYear();
+        }
+        return fullYear % 400 === 0 || (fullYear % 100 !== 0 && fullYear % 4 === 0);
+    }
+
+    module.exports = isLeapYear;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/isSame.js b/node_modules/nyks/node_modules/mout/date/isSame.js
new file mode 100644
index 0000000..4097d29
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/isSame.js
@@ -0,0 +1,16 @@
+var startOf = require('./startOf');
+
+    /**
+     * Check if date is "same" with optional period
+     */
+    function isSame(date1, date2, period){
+        if (period) {
+            date1 = startOf(date1, period);
+            date2 = startOf(date2, period);
+        }
+        return Number(date1) === Number(date2);
+    }
+
+    module.exports = isSame;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/parseIso.js b/node_modules/nyks/node_modules/mout/date/parseIso.js
new file mode 100644
index 0000000..40a70a8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/parseIso.js
@@ -0,0 +1,146 @@
+var some = require('../array/some');
+
+    var datePatterns = [
+        /^([0-9]{4})$/,                        // YYYY
+        /^([0-9]{4})-([0-9]{2})$/,             // YYYY-MM (YYYYMM not allowed)
+        /^([0-9]{4})-?([0-9]{2})-?([0-9]{2})$/ // YYYY-MM-DD or YYYYMMDD
+    ];
+    var ORD_DATE = /^([0-9]{4})-?([0-9]{3})$/; // YYYY-DDD
+
+    var timePatterns = [
+        /^([0-9]{2}(?:\.[0-9]*)?)$/,                      // HH.hh
+        /^([0-9]{2}):?([0-9]{2}(?:\.[0-9]*)?)$/,          // HH:MM.mm
+        /^([0-9]{2}):?([0-9]{2}):?([0-9]{2}(\.[0-9]*)?)$/ // HH:MM:SS.ss
+    ];
+
+    var DATE_TIME = /^(.+)T(.+)$/;
+    var TIME_ZONE = /^(.+)([+\-])([0-9]{2}):?([0-9]{2})$/;
+
+    function matchAll(str, patterns) {
+        var match;
+        var found = some(patterns, function(pattern) {
+            return !!(match = pattern.exec(str));
+        });
+
+        return found ? match : null;
+    }
+
+    function getDate(year, month, day) {
+        var date = new Date(Date.UTC(year, month, day));
+
+        // Explicitly set year to avoid Date.UTC making dates < 100 relative to
+        // 1900
+        date.setUTCFullYear(year);
+
+        var valid =
+            date.getUTCFullYear() === year &&
+            date.getUTCMonth() === month &&
+            date.getUTCDate() === day;
+        return valid ? +date : NaN;
+    }
+
+    function parseOrdinalDate(str) {
+        var match = ORD_DATE.exec(str);
+        if (match ) {
+            var year = +match[1],
+                day = +match[2],
+                date = new Date(Date.UTC(year, 0, day));
+
+            if (date.getUTCFullYear() === year) {
+                return +date;
+            }
+        }
+
+        return NaN;
+    }
+
+    function parseDate(str) {
+        var match, year, month, day;
+
+        match = matchAll(str, datePatterns);
+        if (match === null) {
+            // Ordinal dates are verified differently.
+            return parseOrdinalDate(str);
+        }
+
+        year = (match[1] === void 0) ? 0 : +match[1];
+        month = (match[2] === void 0) ? 0 : +match[2] - 1;
+        day = (match[3] === void 0) ? 1 : +match[3];
+
+        return getDate(year, month, day);
+    }
+
+    function getTime(hr, min, sec) {
+        var valid =
+            (hr < 24 && hr >= 0 &&
+             min < 60 && min >= 0 &&
+             sec < 60 && min >= 0) ||
+            (hr === 24 && min === 0 && sec === 0);
+        if (!valid) {
+            return NaN;
+        }
+
+        return ((hr * 60 + min) * 60 + sec) * 1000;
+    }
+
+    function parseOffset(str) {
+        var match;
+        if (str.charAt(str.length - 1) === 'Z') {
+            str = str.substring(0, str.length - 1);
+        } else {
+            match = TIME_ZONE.exec(str);
+            if (match) {
+                var hours = +match[3],
+                    minutes = (match[4] === void 0) ? 0 : +match[4],
+                    offset = getTime(hours, minutes, 0);
+
+                if (match[2] === '-') {
+                    offset *= -1;
+                }
+
+                return { offset: offset, time: match[1] };
+            }
+        }
+
+        // No time zone specified, assume UTC
+        return { offset: 0, time: str };
+    }
+
+    function parseTime(str) {
+        var match;
+        var offset = parseOffset(str);
+
+        str = offset.time;
+        offset = offset.offset;
+        if (isNaN(offset)) {
+            return NaN;
+        }
+
+        match = matchAll(str, timePatterns);
+        if (match === null) {
+            return NaN;
+        }
+
+        var hours = (match[1] === void 0) ? 0 : +match[1],
+            minutes = (match[2] === void 0) ? 0 : +match[2],
+            seconds = (match[3] === void 0) ? 0 : +match[3];
+
+        return getTime(hours, minutes, seconds) - offset;
+    }
+
+    /**
+     * Parse an ISO8601 formatted date string, and return a Date object.
+     */
+    function parseISO8601(str){
+        var match = DATE_TIME.exec(str);
+        if (!match) {
+            // No time specified
+            return parseDate(str);
+        }
+
+        return parseDate(match[1]) + parseTime(match[2]);
+    }
+
+    module.exports = parseISO8601;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/quarter.js b/node_modules/nyks/node_modules/mout/date/quarter.js
new file mode 100644
index 0000000..8f61076
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/quarter.js
@@ -0,0 +1,16 @@
+
+
+    /**
+     * gets date quarter
+     */
+    function quarter(date){
+        var month = date.getMonth();
+        if (month < 3) return 1;
+        if (month < 6) return 2;
+        if (month < 9) return 3;
+        return 4;
+    }
+
+    module.exports = quarter;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/startOf.js b/node_modules/nyks/node_modules/mout/date/startOf.js
new file mode 100644
index 0000000..072bc0e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/startOf.js
@@ -0,0 +1,54 @@
+var clone = require('../lang/clone');
+
+    /**
+     * get a new Date object representing start of period
+     */
+    function startOf(date, period){
+        date = clone(date);
+
+        // intentionally removed "break" from switch since start of
+        // month/year/etc should also reset the following periods
+        switch (period) {
+            case 'year':
+                date.setMonth(0);
+            /* falls through */
+            case 'month':
+                date.setDate(1);
+            /* falls through */
+            case 'week':
+            case 'day':
+                date.setHours(0);
+            /* falls through */
+            case 'hour':
+                date.setMinutes(0);
+            /* falls through */
+            case 'minute':
+                date.setSeconds(0);
+            /* falls through */
+            case 'second':
+                date.setMilliseconds(0);
+                break;
+            default:
+                throw new Error('"'+ period +'" is not a valid period');
+        }
+
+        // week is the only case that should reset the weekDay and maybe even
+        // overflow to previous month
+        if (period === 'week') {
+            var weekDay = date.getDay();
+            var baseDate = date.getDate();
+            if (weekDay) {
+                if (weekDay >= baseDate) {
+                    //start of the week is on previous month
+                    date.setDate(0);
+                }
+                date.setDate(date.getDate() - date.getDay());
+            }
+        }
+
+        return date;
+    }
+
+    module.exports = startOf;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/strftime.js b/node_modules/nyks/node_modules/mout/date/strftime.js
new file mode 100644
index 0000000..5e56633
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/strftime.js
@@ -0,0 +1,121 @@
+var pad = require('../number/pad');
+var lpad = require('../string/lpad');
+var i18n = require('./i18n_');
+var dayOfTheYear = require('./dayOfTheYear');
+var timezoneOffset = require('./timezoneOffset');
+var timezoneAbbr = require('./timezoneAbbr');
+var weekOfTheYear = require('./weekOfTheYear');
+
+    var _combinations = {
+        'D': '%m/%d/%y',
+        'F': '%Y-%m-%d',
+        'r': '%I:%M:%S %p',
+        'R': '%H:%M',
+        'T': '%H:%M:%S',
+        'x': 'locale',
+        'X': 'locale',
+        'c': 'locale'
+    };
+
+
+    /**
+     * format date based on strftime format
+     */
+    function strftime(date, format, localeData){
+        localeData = localeData  || i18n;
+        var reToken = /%([a-z%])/gi;
+
+        function makeIterator(fn) {
+            return function(match, token){
+                return fn(date, token, localeData);
+            };
+        }
+
+        return format
+            .replace(reToken, makeIterator(expandCombinations))
+            .replace(reToken, makeIterator(convertToken));
+    }
+
+
+    function expandCombinations(date, token, l10n){
+        if (token in _combinations) {
+            var expanded = _combinations[token];
+            return expanded === 'locale'? l10n[token] : expanded;
+        } else {
+            return '%'+ token;
+        }
+    }
+
+
+    function convertToken(date, token, l10n){
+        switch (token){
+            case 'a':
+                return l10n.days_abbr[date.getDay()];
+            case 'A':
+                return l10n.days[date.getDay()];
+            case 'h':
+            case 'b':
+                return l10n.months_abbr[date.getMonth()];
+            case 'B':
+                return l10n.months[date.getMonth()];
+            case 'C':
+                return pad(Math.floor(date.getFullYear() / 100), 2);
+            case 'd':
+                return pad(date.getDate(), 2);
+            case 'e':
+                return pad(date.getDate(), 2, ' ');
+            case 'H':
+                return pad(date.getHours(), 2);
+            case 'I':
+                return pad(date.getHours() % 12, 2);
+            case 'j':
+                return pad(dayOfTheYear(date), 3);
+            case 'l':
+                return lpad(date.getHours() % 12, 2);
+            case 'L':
+                return pad(date.getMilliseconds(), 3);
+            case 'm':
+                return pad(date.getMonth() + 1, 2);
+            case 'M':
+                return pad(date.getMinutes(), 2);
+            case 'n':
+                return '\n';
+            case 'p':
+                return date.getHours() >= 12? l10n.pm : l10n.am;
+            case 'P':
+                return convertToken(date, 'p', l10n).toLowerCase();
+            case 's':
+                return date.getTime() / 1000;
+            case 'S':
+                return pad(date.getSeconds(), 2);
+            case 't':
+                return '\t';
+            case 'u':
+                var day = date.getDay();
+                return day === 0? 7 : day;
+            case 'U':
+                return pad(weekOfTheYear(date), 2);
+            case 'w':
+                return date.getDay();
+            case 'W':
+                return pad(weekOfTheYear(date, 1), 2);
+            case 'y':
+                return pad(date.getFullYear() % 100, 2);
+            case 'Y':
+                return pad(date.getFullYear(), 4);
+            case 'z':
+                return timezoneOffset(date);
+            case 'Z':
+                return timezoneAbbr(date);
+            case '%':
+                return '%';
+            default:
+                // keep unrecognized tokens
+                return '%'+ token;
+        }
+    }
+
+
+    module.exports = strftime;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/timezoneAbbr.js b/node_modules/nyks/node_modules/mout/date/timezoneAbbr.js
new file mode 100644
index 0000000..b100687
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/timezoneAbbr.js
@@ -0,0 +1,17 @@
+var timezoneOffset = require('./timezoneOffset');
+
+    /**
+     * Abbreviated time zone name or similar information.
+     */
+    function timezoneAbbr(date){
+        // Date.toString gives different results depending on the
+        // browser/system so we fallback to timezone offset
+        // chrome: 'Mon Apr 08 2013 09:02:04 GMT-0300 (BRT)'
+        // IE: 'Mon Apr 8 09:02:04 UTC-0300 2013'
+        var tz = /\(([A-Z]{3,4})\)/.exec(date.toString());
+        return tz? tz[1] : timezoneOffset(date);
+    }
+
+    module.exports = timezoneAbbr;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/timezoneOffset.js b/node_modules/nyks/node_modules/mout/date/timezoneOffset.js
new file mode 100644
index 0000000..9492dce
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/timezoneOffset.js
@@ -0,0 +1,16 @@
+var pad = require('../number/pad');
+
+    /**
+     * time zone as hour and minute offset from UTC (e.g. +0900)
+     */
+    function timezoneOffset(date){
+        var offset = date.getTimezoneOffset();
+        var abs = Math.abs(offset);
+        var h = pad(Math.floor(abs / 60), 2);
+        var m = pad(abs % 60, 2);
+        return (offset > 0? '-' : '+') + h + m;
+    }
+
+    module.exports = timezoneOffset;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/totalDaysInMonth.js b/node_modules/nyks/node_modules/mout/date/totalDaysInMonth.js
new file mode 100644
index 0000000..e5d5390
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/totalDaysInMonth.js
@@ -0,0 +1,23 @@
+var isDate = require('../lang/isDate');
+var isLeapYear = require('./isLeapYear');
+
+    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+
+    /**
+     * returns the total amount of days in the month (considering leap years)
+     */
+    function totalDaysInMonth(fullYear, monthIndex){
+        if (isDate(fullYear)) {
+            monthIndex = fullYear.getMonth();
+        }
+
+        if (monthIndex === 1 && isLeapYear(fullYear)) {
+            return 29;
+        } else {
+            return DAYS_IN_MONTH[monthIndex];
+        }
+    }
+
+    module.exports = totalDaysInMonth;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/totalDaysInYear.js b/node_modules/nyks/node_modules/mout/date/totalDaysInYear.js
new file mode 100644
index 0000000..b4b7e9b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/totalDaysInYear.js
@@ -0,0 +1,13 @@
+var isLeapYear = require('./isLeapYear');
+
+    /**
+     * return the amount of days in the year following the gregorian calendar
+     * and leap years
+     */
+    function totalDaysInYear(fullYear){
+        return isLeapYear(fullYear)? 366 : 365;
+    }
+
+    module.exports = totalDaysInYear;
+
+
diff --git a/node_modules/nyks/node_modules/mout/date/weekOfTheYear.js b/node_modules/nyks/node_modules/mout/date/weekOfTheYear.js
new file mode 100644
index 0000000..dd51b7f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/date/weekOfTheYear.js
@@ -0,0 +1,16 @@
+var dayOfTheYear = require('./dayOfTheYear');
+
+    /**
+     * Return the week of the year based on given firstDayOfWeek
+     */
+    function weekOfTheYear(date, firstDayOfWeek){
+        firstDayOfWeek = firstDayOfWeek == null? 0 : firstDayOfWeek;
+        var doy = dayOfTheYear(date);
+        var dow = (7 + date.getDay() - firstDayOfWeek) % 7;
+        var relativeWeekDay = 6 - firstDayOfWeek - dow;
+        return Math.floor((doy + relativeWeekDay) / 7);
+    }
+
+    module.exports = weekOfTheYear;
+
+
diff --git a/node_modules/nyks/node_modules/mout/doc/array.md b/node_modules/nyks/node_modules/mout/doc/array.md
new file mode 100644
index 0000000..864dd39
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/array.md
@@ -0,0 +1,1003 @@
+# array #
+
+Array utilities.
+
+
+
+
+## append(arr1, arr2):Array
+
+Appends an array to the end of the other.
+The first array will be modified and will contain the appended items.
+
+See: [`union()`](#union), [`combine()`](#combine)
+
+```js
+var foo = ['a', 'b'],
+    bar = ['b', 'd'];
+
+append(foo, bar); // ['a', 'b', 'b', 'd']
+```
+
+
+
+## collect(arr, callback, [thisObj]):Array
+
+Maps the items in `arr` and concatenates the resulting arrays.
+
+See: [`map()`](#map)
+
+```js
+collect([1, 2, 3], function(val) {
+    return [val, val % 2];
+}); // [1, 1, 2, 0, 3, 1];
+
+collect(['a', 'bb', ''], function(val) {
+    return val.split('');
+}); // ['a', 'b', 'b']
+```
+
+It also supports a shorthand syntax:
+
+```js
+var items = [{ a: [1] }, { b: 'foo' }, { a: [2, 3] }];
+collect(items, 'a'); // [1, 2, 3];
+```
+
+
+
+## combine(arr1, arr2):Array
+
+Combines an array with all the items of another.
+The first array will be modified and will contain the combined items.
+Does not allow duplicates and is case and type sensitive.
+
+See: [`union()`](#union), [`append()`](#append)
+
+```js
+var foo = ['a', 'b'],
+    bar = ['b', 'd'];
+
+combine(foo, bar); // ['a', 'b', 'd']
+```
+
+
+
+## compact(arr):Array
+
+Returns a new Array without any `null` or `undefined` values. Note that it will
+keep empty strings and other falsy values (simillar to Ruby Array#compact).
+
+```js
+var arr = [0, 1, null, false, '', 'foo', undefined, 'bar'];
+compact(arr); // [0, 1, false, '', 'foo', 'bar'];
+```
+
+
+
+## contains(arr, value):Boolean
+
+Checks if Array contains value. Alias to `indexOf(arr, val) !== -1`.
+
+```js
+var arr = [1, 2, 3];
+contains(arr, 2);      // true
+contains(arr, 'foo');  // false
+```
+
+
+
+## difference(...arrs):Array
+
+Return a new Array with elements that aren't present in the other Arrays
+besides the first one.
+
+Works like [Python set#difference](http://docs.python.org/library/stdtypes.html#set.difference).
+
+It will remove duplicates.
+
+See: [`xor()`](#xor), [`intersection()`](#intersection)
+
+```js
+var a = ['a', 'b', 1];
+var b = ['c', 1];
+difference(a, b); // ['a', 'b']
+```
+
+
+## equals(a, b, [compare]):Boolean
+
+Checks if both arrays are equal.
+
+```js
+equals([1, 2], [1, 2]); // true
+equals([2, 4], [1, 2]); // false
+```
+
+By default it uses the [lang/is](lang.html#is) as the `compare` function but
+you can pass a custom function to change the behavior.
+
+```js
+function loose(a, b) {
+    return a == b;
+}
+equals(['1', 2], [1, 2], loose); // true
+```
+
+See: [object/equals](object.html#equals), [lang/deepEquals](lang.html#deepEquals)
+
+
+
+## every(arr, callback, [thisObj]):Array
+
+Crossbrowser `Array.every()`.
+
+Tests whether all elements in the array pass the test implemented by the provided function.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var items = [1, 'foo', 'bar'];
+every(items, isString);   // false
+every(items, isFunction); // false
+every(items, function(val, key, arr){
+    return val != null;
+}); // true
+```
+
+more info at [MDN Array#every](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every)
+
+It also supports a shorthand syntax:
+
+```js
+var items = [{id:1, active:true}, {id:3, active:true}, {id:8, active:true}];
+// all items with `id === 8`
+every(items, {id:8}); // false
+// `active` is truthy on all items
+every(items, 'active'); // true
+```
+
+
+
+## filter(arr, callback, [thisObj]):Array
+
+Crossbrowser `Array.filter()`.
+
+Creates a new array with all elements that pass the callback test.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var nums = [1, 2, 3, 4, 5, 6];
+var oddNumbers = filter(nums, function(val, key, arr){
+    return (val % 2) !== 0;
+});
+// > [1, 3, 5]
+```
+
+more info at [MDN Array#filter](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter)
+
+Filter also supports shorthand notation:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true},
+    {name:'jane', surname:'doe', beard:false}
+];
+// filter item that matches all properties/values pairs
+filter(users, {name:'john', beard:false});
+// > [{name:'john', surnname:'connor', beard:false}]
+// items where 'beard' is a truthy value
+filter(users, 'beard');
+// > [{name:'john', surnname:'doe', beard:true}]
+```
+
+See [`reject()`](#reject)
+
+
+
+## find(arr, callback, [thisObj]):*
+
+Loops through all the items in the Array and returns the first one that passes
+a truth test (callback).
+
+```js
+var arr = [123, {a:'b'}, 'foo', 'bar'];
+find(arr, isString); // "foo"
+find(arr, isNumber); // 123
+find(arr, isObject); // {a:'b'}
+```
+
+Find also supports shorthand notation:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true}
+];
+// first item that matches all properties/values pairs
+find(users, {name:'john'}); // {name:'john', surnname:'connor', beard:false}
+// first item where 'beard' is a truthy value
+find(users, 'beard'); // {name:'john', surnname:'doe', beard:true}
+```
+
+See: [findIndex()](#findIndex), [findLast()](#findLast),
+[findLastIndex()](#findLastIndex)
+
+
+
+## findLast(arr, callback, [thisObj]):*
+
+Loops through all the items in the Array (starting from last item) and returns
+the first one that passes a truth test (callback).
+
+```js
+var arr = [123, {a:'b'}, 'foo', 'bar'];
+findLast(arr, isString); // "bar"
+findLast(arr, isNumber); // 123
+findLast(arr, isObject); // {a:'b'}
+```
+
+`findLast` also supports shorthand notation:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true}
+];
+// last item that matches all properties/values pairs
+findLast(users, {name:'john'}); // {name:'john', surnname:'doe', beard:true}
+// last item where 'beard' is a truthy value
+findLast(users, 'beard'); // {name:'john', surnname:'doe', beard:true}
+```
+
+See: [find()](#find), [findIndex()](#findIndex),
+[findLastIndex()](#findLastIndex)
+
+
+
+## findIndex(arr, iterator, [thisObj]):Number
+
+Loops through the items in the Array and returns the index of the first one
+that passes a truth test (callback).
+
+Returns `-1` if no item was found that passes the truth test.
+
+```js
+var arr = [1, { a: 1 }, 'foo', 'bar'];
+findIndex(arr, isString); // 2
+findIndex(arr, isNumber); // 0
+findIndex(arr, isObject); // 1
+findIndex(arr, isRegExp); // -1
+```
+
+`findIndex` also supports shorthand notation:
+
+```js
+var pets = [
+    { pet: 'dog', name: 'Sam' },
+    { pet: 'dog', name: 'Maggie' }
+];
+
+findIndex(pets, { pet: 'dog' }); // 0
+findIndex(pets, { name: 'Maggie' }); // 1
+```
+
+See: [find()](#find), [findLastIndex()](#findLastIndex)
+
+
+
+## findLastIndex(arr, iterator, [thisObj]):Number
+
+Loops through the items in the Array on the reverse order and returns the index
+of the first one that passes a truth test (callback).
+
+Returns `-1` if no item was found that passes the truth test.
+
+```js
+var arr = [1, { a: 1 }, 'foo', 'bar'];
+findLastIndex(arr, isString); // 3
+findLastIndex(arr, isNumber); // 0
+findLastIndex(arr, isObject); // 1
+findLastIndex(arr, isRegExp); // -1
+```
+
+`findLastndex` also supports shorthand notation:
+
+```js
+var pets = [
+    { pet: 'dog', name: 'Sam' },
+    { pet: 'dog', name: 'Maggie' }
+];
+
+findLastIndex(pets, { pet: 'dog' }); // 1
+findLastIndex(pets, { name: 'Sam' }); // 0
+```
+
+See: [find()](#find), [findIndex()](#findIndex)
+
+
+
+## flatten(arr, [level]):Array
+
+Recursively flattens an array. A new array containing all the elements is
+returned. If `level` is specified, it will only flatten up to that level.
+Note that arrays within objects will not be flattened.
+
+### Example
+
+```js
+flatten([1, [2], [3, [4, 5]]]);
+// > [1, 2, 3, 4, 5]
+flatten([1, [2], [3, [4, 5]]], 1);
+// > [1, 2, 3, [4, 5]]
+```
+
+See: [`object/flatten()`](./object.html#flatten)
+
+
+## forEach(arr, callback, [thisObj]):void
+
+Crossbrowser `Array.forEach()`.
+
+It allows exiting the iteration early by returning `false` on the callback.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var items = ['foo', 'bar', 'lorem', 'ipsum'];
+forEach(items, function(val, key, arr){
+    console.log(key +' : '+ val);
+    if (val === 'lorem') {
+        // stop iteration (break)
+        return false;
+    }
+});
+```
+
+more info at [MDN Array#forEach](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach)
+
+
+
+## groupBy(arr, [categorize=identity], [thisObj]):Object
+
+Groups array elements by the `key` returned from the `categorize` function.
+
+It will use the [function/identity](function.html#identity) as the default
+`categorize` function.
+
+```js
+var items = ['lorem', 'ipsum', 'foo', 'bar', 'baz'];
+groupBy(items, function(val) { return val.length });
+// > {'3': ['foo', 'bar', 'baz'], '5': ['lorem', 'ipsum']}
+```
+
+
+
+## indexOf(arr, item, [fromIndex]):Number
+
+Crossbrowser `Array.indexOf()`.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#indexOf](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf)
+
+
+
+
+## indicesOf(arr, item, [fromIndex]):Number
+
+Returns an array of indices where `item` is found in the array.
+
+Like `array/indexOf` it does loop over sparse items in the array. The optional
+`fromIndex` parameter can limit the scope, the same way as it does in indexOf.
+
+```js
+var items = ['lorem', 'ipsum', 'foo', 'ipsum', 'ipsum'];
+
+indicesOf(items, 'ipsum');
+// > [1, 3, 4]
+
+indicesOf(items, 'ipsum', 1);
+// > [3, 4]
+```
+
+
+
+
+
+## insert(arr, ...items):Number
+
+Push items into array only if they aren't contained by it. Returns the new
+`length` of the array.
+
+See: [`remove()`](#remove), [`removeAll()`](#removeAll),
+[`contains()`](#contains)
+
+```js
+var arr = ['a', 'b'];
+insert(arr, 'a');       // 2 : ['a', 'b']
+insert(arr, 'c');       // 3 : ['a', 'b', 'c']
+insert(arr, 1, 2, 'b'); // 5 : ['a', 'b', 'c', 1, 2]
+```
+
+
+
+## intersection(...arrs):Array
+
+Return a new Array with elements common to all Arrays.
+
+Similar to Python set#intersection and underscore.js intersection.
+
+It will remove duplicates.
+
+See: [`difference()`](#difference), [`xor()`](#xor)
+
+```js
+var a = ['a', 'b', 1],
+    b = ['c', 1],
+    c = [1, 2, 3];
+intersection(a, b, c); // [1]
+```
+
+
+
+## invoke(arr, methodName[, ...args]):Array
+
+Call `methodName` on each item of the array passing custom arguments if needed.
+
+```js
+invoke([[3,2,1], [9,5,2]], 'sort'); // [[1,2,3], [2,5,9]]
+```
+
+
+
+## join(arr, [separator]):String
+
+Joins the strings in `arr`, inserting `separator` between each value.
+
+This ignores null values and empty strings that are in the array. `separator`
+defaults to an empty string. This will convert all non-string objects in the
+array to a string.
+
+### Example
+
+```js
+join(['a', 'b', 'c']); // 'abc'
+join(['foo', 'bar'], ', '); // 'foo, bar'
+join([null, 'foo', '', 'bar', undefined], ':'); // 'foo:bar'
+```
+
+
+## last(arr):*
+
+Returns the last element of an array without modifying the array.
+
+
+```js
+last( [1, 2, 3, 4] ) // > 4
+last( ['foo', 'bar'] ) // > 'bar'
+```
+
+
+## lastIndexOf(arr, item, [fromIndex]):Number
+
+Crossbrowser `Array.lastIndexOf()`.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#lastIndexOf](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf)
+
+
+
+## map(arr, callback, [thisObj]]):Array
+
+Crossbrowser `Array.map()`.
+
+Creates a new array with the results of calling a provided function on every
+element in this array.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+See: [`collect()`](#collect)
+
+```js
+var nums = [1,2,3,4];
+var double = map(nums, function(val, key, arr){
+    return val * 2;
+});
+// > [2, 4, 6, 8]
+```
+
+more info at [MDN Array#map](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map)
+
+It also supports a shorthand notation which can be used to achieve same result
+as [`array/pluck`](#pluck):
+
+```js
+var src = ['lorem', 'ipsum', 'foo', 'amet'];
+// grab the "length" property of all items
+var lengths = map(src, 'length'); // [5, 5, 3, 4]
+```
+
+
+
+## max(arr, [iterator], [thisObj]):*
+
+Returns maximum value inside array or use a custom iterator to define how items
+should be compared.
+
+See: [`min()`](#min)
+
+```js
+max([10, 2, 7]); // 10
+max(['foo', 'lorem', 'amet'], function(val){
+    return val.length;
+}); // 'lorem'
+```
+
+It also supports a shorthand notation:
+
+```js
+max(['foo', 'lorem', 'amet'], 'length'); // "lorem"
+```
+
+
+
+## min(arr, [iterator], [thisObj]):*
+
+Returns minimum value inside array or use a custom iterator to define how items
+should be compared.
+
+See: [`max()`](#max)
+
+```js
+min([10, 2, 7]); // 2
+min(['foo', 'lorem', 'amet'], function(val){
+    return val.length;
+}); // 'foo'
+```
+
+It also supports a shorthand notation:
+
+```js
+min(['foo', 'lorem', 'amet'], 'length'); // "foo"
+```
+
+
+
+## pick(arr, [nItems]):*
+
+Gets random item(s) and removes it from the original array.
+
+If `nItems` is specified it will return a new Array contained the *picked*
+items otherwise it returns a single item.
+
+See: [`random/choice()`](./random.html#choice)
+
+### Example:
+
+```js
+var arr = [1, 2, 3, 4, 5, 6];
+var item1 = pick(arr); // 4
+var item2 = pick(arr); // 1
+var items = pick(arr, 2); // [5, 2]
+console.log(arr); // [3, 6]
+```
+
+
+
+## pluck(arr, propName):Array
+
+Extract a list of property values.
+
+See: [`function/prop()`](function.html#prop)
+
+```js
+var users = [{name : 'John', age: 21}, {name: 'Jane', age : 27}];
+var names = pluck(users, 'name'); // ["John", "Jane"]
+var ages = pluck(users, 'age'); // [21, 27]
+```
+
+
+
+## range([start], stop[, step]):Array
+
+Creates a new Array with all the values inside the range. Works similarly to
+Python#range or PHP#range.
+
+### Arguments
+
+ 1. `[start]` (Number) : Range start. Default is `0`.
+ 2. `stop` (Number) : Range limit.
+ 3. `[step]` (Number) : Step size. Default is `1`.
+
+### Example
+
+```js
+range(5);         // [0, 1, 2, 3, 4, 5]
+range(0, 5);      // [0, 1, 2, 3, 4, 5]
+range(0, 5, 2);   // [0, 2, 4]
+range(20, 40, 5); // [20, 25, 30, 35, 40]
+```
+
+
+
+## reduce(arr, fn):*
+
+Crossbrowser `Array.reduce()`.
+
+Apply a function against an accumulator and each value of the array (from
+left-to-right) as to reduce it to a single value.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#reduce](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduce)
+
+
+
+## reduceRight(arr, fn):*
+
+Crossbrowser `Array.reduceRight()`.
+
+Apply a function simultaneously against two values of the array (from
+right-to-left) as to reduce it to a single value.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+more info at [MDN Array#reduceRight](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduceRight)
+
+
+
+## reject(arr, fn, thisObj):Array
+
+Creates a new array with all the elements that do **not** pass the truth test.
+Opposite of [`filter()`](#filter).
+
+See [`filter()`](#filter)
+
+### Example
+
+```js
+var numbers = [1, 2, 3, 4, 5, 6];
+reject(numbers, function(x) { return (x % 2) !== 0; }); // [2, 4, 6]
+```
+
+It also supports a shorthand syntax:
+
+```js
+var users = [
+    {name:'john', surname:'connor', beard:false},
+    {name:'john', surname:'doe', beard:true},
+    {name:'jane', surname:'doe', beard:false}
+];
+// reject items that matches all properties/values pairs
+reject(arr, {name:'john'});
+// > [{name:'jane', surnname:'doe', beard:false}]
+// reject items where 'beard' is a truthy value
+filter(arr, 'beard');
+// > [{name:'john', surnname:'connor', beard:false},
+//    {name:'jane', surname:'doe', beard:false}]
+```
+
+
+
+## remove(arr, item):void
+
+Remove a single item from the array.
+
+IMPORTANT: it won't remove duplicates, just a single item.
+
+### Example
+
+```js
+var foo = [1, 2, 3, 4];
+remove(foo, 2);
+console.log(foo); // [1, 3, 4]
+```
+
+
+
+## removeAll(arr, item):void
+
+Remove all instances of an item from the array.
+
+### Example
+
+```js
+var foo = [1, 2, 3, 4, 2, 2];
+removeAll(foo, 2);
+console.log(foo); // [1, 3, 4];
+```
+
+## reverse(arr):void
+
+Returns a copy of the array with all elements in reversed order.
+
+### Example
+
+```js
+var foo = [1, 2, 3, 4, 5];
+var bar = reverse(foo);
+console.log(bar); // [5, 4, 3, 2, 1];
+
+console.log(foo); // [1, 2, 3, 4, 5];
+```
+
+
+
+
+## shuffle(arr):Array
+
+Returns a new Array with items randomly sorted (shuffled). Similar to Ruby Array#shuffle.
+
+### Example
+
+```js
+var arr = ['a', 'b', 'c', 'd', 'e'];
+shuffle(arr); // ['b', 'd', 'e', 'c', 'a']
+```
+
+
+
+## slice(arr, [start], [end]):Array
+
+Returns a new array containing the items from `arr` from the start index to the
+end index.
+
+If `start` is omitted, it will start at `0`. If `end` is omitted, it will used
+the last index of the array.  If `start` or `end` is negative, it is used as an
+offset from the end of the array.
+
+It will also convert array-like objects to arrays.
+
+### Example
+
+```js
+slice([1, 2, 3, 4], 1, 2); // [2, 3]
+slice([1, 2, 3], 1); // [2, 3]
+slice([1, 2, 3]); // [1, 2, 3]
+slice({ length: 2, 0: 'a', 1: 'b' }); // ['a', 'b']
+slice([1, 2, 3], 0, -1); // [1, 2]
+slice([1, 2, 3], -2); // [2, 3]
+```
+
+
+
+## some(arr, callback, [thisObj]):Array
+
+Crossbrowser `Array.some()`.
+
+Tests whether some element in the array passes the test implemented by the provided function.
+
+It differs from ES5 since it will also loop over sparse items in the array to
+normalize the behavior across browsers (avoid inconsistencies).
+
+```js
+var items = [1, 'foo', 'bar'];
+some(items, isString);   // true
+some(items, isFunction); // false
+```
+
+more info at [MDN Array#some](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some)
+
+It also supports a shorthand syntax:
+
+```js
+var items = [{id:1, active:true}, {id:3, active:false}, {id:8, active:false}];
+// at least one item with `id === 8`
+some(items, {id:8}); // true
+// `active` is truthy on at least one item
+some(items, 'active'); // true
+```
+
+see also: [`object/matches`](object.html#matches)
+
+
+
+## sort(arr, [compareFn]):Array
+
+Returns a sorted Array using the [Merge Sort](http://en.wikipedia.org/wiki/Merge_sort) algorithm (stable sort).
+
+The `Array.prototype.sort` browser implementations differ since the sorting algorithm isn't described in the ES spec - [in V8 it isn't stable](http://code.google.com/p/v8/issues/detail?id=90) and [on Firefox it is stable](https://bugzilla.mozilla.org/show_bug.cgi?id=224128) - so this function doesn't use the browser native implementation and is recommended in cases where a stable sort is required (items should preserve same order if already sorted).
+
+**Important:** It does logical comparisson by default (greater/less than) and
+not a string comparisson like the native `Array#sort`.
+
+### compareFn
+
+If `compareFn` is supplied elements are sorted based on the value returned by
+the `compareFn`.
+
+ - If `compareFn(a, b)` is less than `0`, sort `a` to a lower index than `b`.
+ - If `compareFn(a, b)` returns `0`, leave `a` and `b` unchanged with respect
+   to each other, but sorted with respect to all different elements.
+ - If `compareFn(a, b)` is greater than `0`, sort `b` to a lower index than
+   `a`.
+
+See: [`sortBy`](#sortBy)
+
+### Example
+
+```js
+sort([187, 23, 47, 987, 12, 59, 0]); // [0, 12, 23, 47, 59, 187, 987]
+sort(['a', 'z', 'c', 'beta', 'b']); // ['a', 'b', 'beta', 'c', 'z']
+
+// ['sit', 'amet', 'lorem', 'ipsum']
+sort(['lorem', 'ipsum', 'sit', 'amet'], function(a, b){
+    // sort by length, items with same length
+    // will keep the relative order (stable)
+    return a.length - b.length;
+});
+
+// [4, 3, 2, 1]
+sort([2, 3, 1, 4], function(a, b){
+    // reverse sort
+    return b - a;
+});
+```
+
+
+
+## sortBy(arr, callback, [context]):Array
+
+Returns an array sorted by the result of the callback.
+
+The callback is called for each item that is to be sorted, and the
+results of the callback are used to sort the array. The callback
+is called with the item as the first parameter, optionally with
+the provided context.
+
+It also supports a shorthand notation which can be used to sort by a property
+name.
+
+See: [`sort`](#sort)
+
+```js
+// Returns [{ a: 1 }, { a: 2 }, { a: 3 }]
+sortBy([{ a: 1 }, { a: 3 }, { a: 2 }],
+    function(item) { return item.a; });
+
+// Same as above, using shorthand notation
+sortBy([{ a: 1 }, { a: 3 }, { a: 2 }], 'a');
+```
+
+
+
+## split(arr, [segments]):Array
+
+Splits an array into a fixed number of segments.
+
+The number of segments is specified by `segments` and defaults to 2. If the
+array cannot be evenly split, the first segments will contain the extra items.
+If `arr` is empty, an empty array is returned. If `arr.length` is less than
+`segments`, then the resulting array will have `arr.length` number of
+single-element arrays.
+
+### Example
+```js
+split([1, 2, 3, 4, 5], 3) // [ [1, 2], [3, 4], [5] ]
+split([1, 2, 3, 4, 5]) // [ [1, 2, 3], [4, 5] ]
+split([]) // []
+split([1, 2], 3) // [ [1], [2] ]
+```
+
+
+
+## take(times, callback, [thisObj]):Array
+
+Builds a new array based on the returned values from the given `callback`.
+
+```js
+take(4, function(i, total) {
+    return i / total;
+});
+// > [0, 0.25, 0.5, 0.75]
+```
+
+see: [function/times](../function.html#times)
+
+
+
+## toLookup(arr, key):Object
+
+Create an object that indexes the items in the array by a key. If `key` is a function, the key for each value in the resulting object will be the result of calling the function with the value as an argument. Otherwise `key` specifies the property on each value to use as the key.
+
+### Example
+
+```js
+var foo = [{ name: 'a', thing: 1 }, { name: 'b', thing: 2 }];
+// { a: { name: 'a', thing: 1 }, b: { name: 'b', thing: 2 } }
+toLookup(foo, 'name');
+// same as above
+toLookup(foo, function (value) { return value.name; });
+```
+
+
+
+## union(...arrs):Array
+
+Concat multiple arrays removing duplicates.
+
+```js
+var a = ['a', 'b'],
+    b = ['c', 'a'],
+    c = [1, 'b', 2, 3, 'a'];
+
+//note that unique remove from begin to end
+union(a, b, c); // ['c', 1, 'b', 2, 3, 'a']
+```
+
+
+
+## unique(arr, [compare]):Array
+
+Return a new Array of unique items.
+
+**IMPORTANT:** duplicates are removed starting from begining of array.
+
+```js
+var arr = [1, 2, 3, 4, 2, 2, 4];
+var foo = unique(arr);
+console.log(foo);
+// > [1, 3, 2, 4];
+
+// you also have the option to set a custom compare function
+var users = [{name: 'john'}, {name: 'paul'}, {name: 'john'}];
+var uniqueNames = unique(arr, function(a, b){
+    return a.name === b.name;
+});
+console.log(uniqueNames);
+// > [{name: 'paul'}, {name: 'john'}]
+```
+
+
+
+## xor(arr1, arr2):Array
+
+Exclusive OR. Returns items that are present in a single array.
+
+Works like [Python set#symmetric_difference](http://docs.python.org/library/stdtypes.html#set.symmetric_difference) renamed for brevity.
+
+It will remove duplicates.
+
+See: [`difference()`](#difference), [`intersection()`](#intersection)
+
+```js
+var a = ['a', 'b', 1];
+var b = ['c', 1];
+xor(a, b); // ['a', 'b', 'c']
+```
+
+
+
+## zip(...arrs):Array
+
+Groups the elements of each array at their corresponding indexes.
+
+Useful for separate data sources that are coordinated through matching array
+indexes. For a matrix of nested arrays, `zip.apply(...)` can transpose the
+matrix in a similar fashion.
+
+```js
+// [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]
+zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
+```
+
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/nyks/node_modules/mout/doc/collection.md b/node_modules/nyks/node_modules/mout/doc/collection.md
new file mode 100644
index 0000000..2ffcab1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/collection.md
@@ -0,0 +1,233 @@
+# collection #
+
+Methods for dealing with collections (Array or Objects).
+
+
+
+## contains(list, value):Boolean
+
+Checks if collection contains value.
+
+```js
+contains({a: 1, b: 2, c: 'bar'}, 2); // true
+contains([1, 2, 3], 'foo');  // false
+```
+
+See: [array/contains](array.html#contains), [object/contains](object.html#contains)
+
+
+
+## every(list, callback, [thisObj]):Boolean
+
+Tests whether all values in the collection pass the test implemented by the
+provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+every(obj, isNumber); // false
+```
+
+See: [array/every](array.html#every), [object/every](object.html#every)
+
+
+
+## filter(list, callback, [thisObj]):Array
+
+Filter collection properties.
+
+See: [array/filter](array.html#filter), [object/filter](object.html#filter)
+
+
+
+## find(list, callback, [thisObj]):*
+
+Loops through all the values in the collection and returns the first one that
+passes a truth test (callback).
+
+**Important:** loop order over objects properties isn't guaranteed to be the
+same on all environments.
+
+```js
+find({a: 'foo', b: 12}, isString); // 'foo'
+find(['foo', 12], isNumber); // 12
+```
+
+See: [array/find](array.html#find), [object/find](object.html#find)
+
+
+
+## forEach(list, callback, [thisObj])
+
+Loop through all values of the collection.
+
+See: [array/forEach](array.html#forEach), [object/forOwn](object.html#forOwn)
+
+
+
+## map(list, callback, [thisObj]):Array
+
+Returns a new collection where the properties values are the result of calling
+the callback for each property in the original collection.
+
+See: [array/map](array.html#map), [object/map](object.html#map)
+
+
+
+## max(list, [iterator]):*
+
+Returns maximum value inside collection or use a custom iterator to define how
+items should be compared.
+
+See: [`min()`](#min), [array/max](array.html#max), [object/max](object.html#max)
+
+```js
+max({a: 100, b: 2, c: 1, d: 3, e: 200}); // 200
+max(['foo', 'lorem', 'amet'], function(val){
+    return val.length;
+}); // 'lorem'
+```
+
+
+
+## min(list, [iterator]):*
+
+Returns minimum value inside collection or use a custom iterator to define how
+items should be compared.
+
+See: [`max()`](#max), [array/min](array.html#min), [object/min](object.html#min)
+
+```js
+min([10, 2, 7]); // 2
+min({a: 'foo', b: 'lorem', c: 'amet'}, function(val){
+    return val.length;
+}); // 'foo'
+```
+
+
+
+## pluck(list, propName):Array
+
+Extract a list of property values.
+
+```js
+var users = [
+    {
+        name : 'John',
+        age : 21
+    },
+    {
+        name : 'Jane',
+        age : 27
+    }
+];
+
+pluck(users, 'name'); // ["John", "Jane"]
+pluck(users, 'age'); // [21, 27]
+
+users = {
+    first: {
+        name : 'John',
+        age : 21
+    },
+    second: {
+        name : 'Mary',
+        age : 25
+    }
+};
+
+pluck(users, 'name'); // ['John', 'Mary']
+```
+
+See: [array/pluck](array.html#pluck), [object/pluck](object.html#pluck)
+
+
+
+## reduce(list, callback, initial, [thisObj]):*
+
+Apply a function against an accumulator and each value in the collection as to
+reduce it to a single value.
+
+```js
+var obj = {a: 1, b: 2, c: 3, d: 4};
+
+function sum(prev, cur, key, list) {
+    return prev + cur;
+}
+
+reduce(obj, sum); // 10
+```
+
+See: [array/reduce](array.html#reduce), [object/reduce](object.html#reduce)
+
+
+
+## reject(list, fn, [thisObj]):Array
+
+Creates a new array with all the elements that do **not** pass the truth test.
+Opposite of [`filter()`](#filter).
+
+### Example
+
+```js
+var numbers = [1, 2, 3, 4, 5];
+reject(numbers, function(x) { return (x % 2) !== 0; }); // [2, 4]
+
+var obj = {a: 1, b: 2, c: 3, d: 4, e: 5};
+reject(obj, function(x) { return (x % 2) !== 0; }); // [2, 4]
+```
+
+See: [array/reject](array.html#reject), [object/reject](object.html#reject)
+
+
+
+## size(list):Number
+
+Returns the number of values in the collection.
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+size(obj);     // 3
+size([1,2,3]); // 3
+size(null);    // 0
+```
+
+See: [object/size](object.html#size)
+
+
+
+## some(list, callback, [thisObj]):Boolean
+
+Tests whether any values in the collection pass the test implemented by the
+provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+some(obj, isNumber);      // true
+some(obj, isString);      // true
+some([1, 2, 3], isNumber) // true
+some([1, 2, 3], isString) // false
+```
+
+See: [array/some](array.html#some), [object/some](object.html#some)
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/nyks/node_modules/mout/doc/date.md b/node_modules/nyks/node_modules/mout/doc/date.md
new file mode 100644
index 0000000..e140399
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/date.md
@@ -0,0 +1,307 @@
+# date #
+
+Date utilities.
+
+
+## dayOfTheYear(date):Number
+
+How many days elapsed since begining of the year (following gregorian
+calendar).
+
+```js
+// Jan 1st
+dayOfTheYear(new Date(2013, 0, 1)); // 1
+// Dec 31th
+dayOfTheYear(new Date(2013, 11, 31)); // 364
+```
+
+
+
+## diff(date1, date2, [unitName]):Number
+
+Calculate the difference between dates (range).
+
+The returned value is always positive. The default `unitName` is `"ms"`.
+
+Available units: `year`, `month`, `week`, `day`, `hour`, `minute`, `second`,
+`millisecond`.
+
+See: [`time/convert()`](time.html#convert)
+
+```js
+var d1 = new Date(2012, 4, 5);
+var d2 = new Date(2013, 4, 8);
+diff(d1, d2);          // 31795200000
+diff(d1, d2, 'hour');  // 8832
+diff(d1, d2, 'week');  // 52.57142857142857
+diff(d1, d2, 'month'); // 12.096774193548388
+diff(d1, d2, 'year');  // 1.0082191780821919
+```
+
+
+
+## isLeapYear(fullYear|date):Boolean
+
+Checks if it's a [leap year](http://en.wikipedia.org/wiki/Leap_year) according
+to the Gregorian calendar.
+
+see: [`totalDaysInMonth()`](#totalDaysInMonth)
+
+```js
+isLeapYear(2012); // true
+isLeapYear(2013); // false
+isLeapYear(new Date(2012, 2, 28)); // true
+```
+
+
+## isSame(date1, date2[, period]):Boolean
+
+Check if both dates are the "same".
+
+You can pass an optional *period* used to set the comparisson precision.
+
+Available periods: `year`, `month`, `week`, `day`, `hour`, `minute`, `second`.
+
+```js
+var date1 = new Date(2013, 1, 3);
+var date2 = new Date(2013, 2, 9);
+isSame(date1, date2);          // false
+isSame(date1, date2, 'day');   // false
+isSame(date1, date2, 'month'); // false
+isSame(date1, date2, 'year');  // true
+```
+
+
+
+## parseIso(str):Number
+
+Parses an [ISO8601](http://en.wikipedia.org/wiki/Iso8601) date and returns the
+number of milliseconds since January 1, 1970, 00:00:00 UTC, or `NaN` if it is
+not a valid ISO8601 date.
+
+This parses *all* ISO8601 dates, including dates without times, [ordinal
+dates](https://en.wikipedia.org/wiki/ISO_8601#Ordinal_dates), and the compact
+representation (omitting delimeters). The only exception is [ISO week
+dates](https://en.wikipedia.org/wiki/ISO_week_date), which are not parsed.
+
+If no time zone offset is specified, it assumes UTC time.
+
+```js
+// Jan 01, 1970 00:00 GMT
+parseIso('1970-01-01T00:00:00')    // 0
+parseIso('1970-001')               // 0
+parseIso('1970-01-01')             // 0
+parseIso('19700101T000000.00')     // 0
+parseIso('1970-01-01T02:00+02:00') // 0
+
+// Jan 02, 2000 20:10 GMT+04:00
+parseIso('2000-01-02T20:10+04:00') // 946829400000
+```
+
+
+## quarter(date):Number
+
+Get a number between 1 to 4 that represents the quarter of the year.
+
+```js
+quarter(new Date(2013, 1, 19)); // 1
+quarter(new Date(2013, 4, 12)); // 2
+quarter(new Date(2013, 7, 25)); // 3
+quarter(new Date(2013, 10, 8)); // 4
+```
+
+
+## startOf(date, period):Date
+
+Get a new Date at the start of the period.
+
+Available periods: `year`, `month`, `week`, `day`, `hour`, `minute`, `second`.
+
+```js
+// Apr 05 2013 11:27:43
+var date = new Date(2013, 3, 5, 11, 27, 43, 123);
+startOf(date, 'year');  // Jan 01 2013 00:00:00
+startOf(date, 'month'); // Apr 01 2013 00:00:00
+startOf(date, 'day');   // Apr 05 2013 00:00:00
+startOf(date, 'hour');  // Apr 05 2013 11:00:00
+```
+
+
+
+## strftime(date, format, [l10n]):String
+
+Format date based on strftime format.
+
+Replaced tokens:
+
+<dl>
+<dt>%a</dt><dd> locale's abbreviated weekday name.</dd>
+<dt>%A</dt><dd> locale's full weekday name.</dd>
+<dt>%b</dt><dd> locale's abbreviated month name.</dd>
+<dt>%B</dt><dd> locale's full month name.</dd>
+<dt>%c</dt><dd> locale's appropriate date and time representation.</dd>
+<dt>%C</dt><dd> century number (the year divided by 100 and truncated
+to an integer) as a decimal number [00..99].</dd>
+<dt>%d</dt><dd> day of the month as a decimal number [01..31].</dd>
+<dt>%D</dt><dd>same as %m/%d/%y.</dd>
+<dt>%e</dt><dd> day of the month as a decimal number [1..31];
+a single digit is preceded by a space.</dd>
+<dt>%F</dt><dd>The ISO 8601 date format (%Y-%m-%d)</dd>
+<dt>%h</dt><dd>same as %b.</dd>
+<dt>%H</dt><dd> hour (24-hour clock) as a decimal number [00..23].</dd>
+<dt>%I</dt><dd> hour (12-hour clock) as a decimal number [01..12].</dd>
+<dt>%j</dt><dd> day of the year as a decimal number [001..366].</dd>
+<dt>%l</dt><dd> hour (12-hour clock) as a decimal number (range 1 to 12); single digits are preceded by a blank</dd>
+<dt>%L</dt><dd> zero-padded milliseconds [000..999]</dd>
+<dt>%m</dt><dd> month as a decimal number [01..12].</dd>
+<dt>%M</dt><dd> minute as a decimal number [00..59].</dd>
+<dt>%n</dt><dd> newline character.</dd>
+<dt>%p</dt><dd> locale's equivalent of either "am" or "pm"</dd>
+<dt>%P</dt><dd> locale's equivalent of either "AM" or "PM"</dd>
+<dt>%r</dt><dd> time in a.m. and
+p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.</dd>
+<dt>%R</dt><dd> time in 24 hour notation (%H:%M).</dd>
+<dt>%s</dt><dd> seconds since Epoch (1970-01-01 00:00:00 UTC)</dd>
+<dt>%S</dt><dd> second as a decimal number [00..60].</dd>
+<dt>%t</dt><dd> tab character.</dd>
+<dt>%T</dt><dd> time (%H:%M:%S).</dd>
+<dt>%u</dt><dd> weekday as a decimal number [1..7], with 1 representing
+Monday.</dd>
+<dt>%U</dt><dd> week number of the year (Sunday as the first day of
+the week) as a decimal number [00..53].</dd>
+<del><dt>%V</dt><dd> week number of the year (Monday as the first day of the
+week) as a decimal number [01..53].  If the week containing 1 January has
+four or more days in the new year, then it is considered week 1. Otherwise,
+it is the last week of the previous year, and the next week is week 1.</dd></del>
+<dt>%w</dt><dd> weekday as a decimal number [0..6], with 0 representing
+Sunday.</dd>
+<dt>%W</dt><dd> week number of the year (Monday as the first day of
+the week) as a decimal number [00..53].  All days in a new year preceding
+the first Monday are considered to be in week 0.</dd>
+<dt>%x</dt><dd> locale's appropriate date representation.</dd>
+<dt>%X</dt><dd> locale's appropriate time representation.</dd>
+<dt>%y</dt><dd> year without century as a decimal number [00..99].</dd>
+<dt>%Y</dt><dd> year with century as a decimal number.</dd>
+<dt>%Z</dt><dd> timezone name or abbreviation, or by no bytes
+if no timezone information exists.</dd>
+<dt>%%</dt><dd>is replaced by %.</dd>
+</dl>
+
+```js
+var date = new Date(2013, 3, 8, 9, 2, 4);
+strftime(date, '%Y-%m-%d'); // "2013-04-08"
+strftime(date, '%R'); // "09:02"
+strftime(date, '%Y-%m-%dT%H:%M:%S%z'); // "2013-04-08T09:02:04+0000"
+```
+
+You can also set a custom locale:
+
+```js
+var ptBr = require('mout/date/i18n/pt-BR');
+strftime(date, '%a, %d %b', ptBr); // 'Seg, 08 Abr'
+strftime(date, '%A, %d %B', ptBr); // 'Segunda, 08 Abril'
+```
+
+To set it globally:
+
+```js
+require('mout/date/i18n_').set( customLocaleData );
+```
+
+See [date/i18n](https://github.com/mout/mout/tree/master/src/date/i18n)
+for localization examples.
+
+
+
+## timezoneAbbr(date):String
+
+Return timezone abbreviation or similar data.
+
+The result will vary based on the OS/browser since some environments doesn't
+provide enough info about the current locale.
+
+```js
+// IE 7-8
+timezoneAbbr(new Date()); // "-0500"
+// Chrome, FF, V8
+timezoneAbbr(new Date()); // "EST"
+```
+
+
+
+## timezoneOffset(date):String
+
+Return time zone as hour and minute offset from UTC (e.g. +0900).
+
+It's important to note that JavaScript Date object will use the system locale
+info to determinate the [timezone
+offset](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)
+and that daylight saving time affects the result.
+
+```js
+// if system locale is EST
+timezoneOffset(new Date()); // -0500
+```
+
+
+
+## totalDaysInMonth(fullYear, monthIndex):Number
+
+Returns the amount of days in the month taking into consideration leap years
+(following Gregorian calendar).
+
+see: [`isLeapYear()`](#isLeapYear)
+
+```js
+totalDaysInMonth(2008, 1); // 29 (leap year)
+totalDaysInMonth(2009, 1); // 28
+
+// you can also pass a Date object as single argument
+totalDaysInMonth( new Date(2013, 0, 1) ); // 31
+```
+
+
+## totalDaysInYear(fullYear):Number
+
+Returns the amount of days in the year taking into consideration leap years
+(following Gregorian calendar).
+
+see: [`isLeapYear()`](#isLeapYear), [`totalDaysInMonth()`](#totalDaysInMonth)
+
+```js
+totalDaysInYear(2008); // 366 (leap year)
+totalDaysInYear(2009); // 365
+
+// you can also pass a Date object as single argument
+totalDaysInYear( new Date(2013, 0, 1) ); // 365
+```
+
+
+
+## weekOfTheYear(date, [firstDayOfWeek]):Number
+
+Returns how many weeks elapsed since start of the year (`0..53`).
+
+`firstDayOfWeek` can be `0` (Sunday) or `1` (Monday). By default weeks start at
+Sunday.
+
+It will return `0` if `date` is before the first `firstDayOfWeek` of the year.
+
+```js
+// Tue Jan 01 2013
+weekOfTheYear( new Date(2013,0,1) ); // 0
+// Wed Jan 09 2013
+weekOfTheYear( new Date(2013,0,9) ); // 1
+// Sun Jan 01 2012
+weekOfTheYear( new Date(2012,0,1) ); // 1
+// Mon Jan 09 2012
+weekOfTheYear( new Date(2012,0,9) ); // 2
+```
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/nyks/node_modules/mout/doc/function.md b/node_modules/nyks/node_modules/mout/doc/function.md
new file mode 100644
index 0000000..1425cb3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/function.md
@@ -0,0 +1,310 @@
+# function #
+
+Function*(al)* utilities.
+
+## after(fn, n):Function
+
+This creates a function that will only call `fn` if it was called `n` or more times.
+
+
+```js
+function onLoaded() {
+    console.log('all images loaded');
+}
+
+var imagePaths = ['1.jpg', '2.jpg', '3.jpg'];
+var callback = after(onLoaded, imagePaths.length);
+
+forEach(imagePaths, function(path) {
+    asyncLoad(path, callback);
+});
+```
+
+## awaitDelay(fn, delay):Function
+
+Returns a function that ensures that `fn` is only called *after* `delay`
+milliseconds have elapsed. When the returned function is called before the
+delay has elapsed, it will wait until the delay has elapsed and then call `fn`.
+When the returned function is called after the delay has elapsed, it will call
+`fn` after the next "tick" (it will always be called asynchronously). The
+context and arguments that the returned function is called in are applied to
+`fn`.
+
+In the below example `onLoaded` will not be executed before a 1000 millisecond
+delay. Even if `loadImages` loads and calls `callback` earlier.  However, say
+the images take 1500 milliseconds to load, it will trigger `onLoaded`
+immediately.
+
+```js
+var callback = awaitDelay(onLoaded, 1000);
+loadImages(callback);
+function onLoaded(){
+    console.log('loaded');
+}
+```
+
+You can also cancel de delayed call by simply using the native `clearTimeout`
+method (like a regular `setTimeout` call).
+
+```js
+var timeoutId = callback();
+// onLoaded won't be called since it was canceled before the 1000ms delay
+clearTimeout(timeoutId);
+```
+
+### Arguments:
+
+ 1. `fn` (Function)    : Target Function
+ 2. `delay` (Number)   : Delay of execution in milliseconds
+
+See: [`debounce()`](#debounce)
+
+
+
+## bind(fn, context, [...args]):Function
+
+Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
+
+### Arguments
+
+ 1. `fn` (Function)    : Target Function
+ 2. `context` (Object) : Execution context (object used as `this`)
+ 3. `[...args]` (*)    : Arguments (0...n arguments)
+
+See: [`partial()`](#partial), [object/bindAll](./object.html#bindAll)
+
+
+
+## compose(...fn):Function
+
+Returns the composition of a list of functions, where each function consumes
+the return value of the function that follows. In math terms, composing the
+functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
+
+```js
+function add2(x) { return x + 2 }
+function multi2(x) { return x * 2 }
+map([1, 2, 3], compose(add2, multi2)); // [4, 6, 8]
+
+//same as
+map([1, 2, 3], function(x){
+    return add2( multi2(x) );
+});
+```
+
+
+
+## constant(value):Function
+
+Returns a new function that will always return `value` when called.
+
+```js
+var f = constant('foo');
+f(); // 'foo'
+
+// Provided arguments are ignored; value is always returned
+f(1); // 'foo'
+
+f = constant({ foo: 'bar' });
+f(); // { foo: 'bar' }
+```
+
+
+
+## debounce(fn, delay[, isAsap]):Function
+
+Creates a function that will delay the execution of `fn` until after `delay`
+milliseconds have elapsed since the last time it was invoked.
+
+Subsequent calls to the debounced function will return the result of the last
+`fn` call.
+
+```js
+// sometimes less is more
+var lazyRedraw = debounce(redraw, 300);
+foo.on.resize.add(lazyRedraw);
+```
+
+In this visualization, `|` is a debounced-function call and `X` is the actual
+callback execution:
+
+    Default
+    ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
+                             X                                 X
+
+    Debounced with `isAsap == true`:
+    ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
+    X                                 X
+
+You also have the option to cancel the debounced call if it didn't happen yet:
+
+```js
+lazyRedraw();
+// lazyRedraw won't be called since `cancel` was called before the `delay`
+lazyRedraw.cancel();
+```
+
+See: [`throttle()`](#throttle)
+
+
+## func(name):Function
+
+Returns a function that calls a method with given `name` on supplied object.
+Useful for iteration methods like `array/map` and `array/forEach`.
+
+See: [`prop()`](#prop)
+
+```js
+// will call the method `getName()` for each `user`
+var names = map(users, func('getName'));
+```
+
+
+
+## identity(val):*
+
+Returns the first argument provided to it.
+
+```js
+identity(3);     // 3
+identity(1,2,3); // 1
+identity('foo'); // "foo"
+```
+
+
+
+## partial(fn, [...args]):Function
+
+Return a partially applied function supplying default arguments.
+
+This method is similar to [`bind`](#bind), except it does not alter the this
+binding.
+
+### Arguments
+
+ 1. `fn` (Function)    : Target Function
+ 2. `[...args]` (*)    : Arguments (0...n arguments)
+
+See: [`bind()`](#bind)
+
+```js
+function add(a, b){ return a + b }
+var add10 = partial(add, 10);
+console.log( add10(2) ); // 12
+```
+
+
+
+## prop(name):Function
+
+Returns a function that gets a property with given `name` from supplied object.
+Useful for using in conjunction with `array/map` and/or for creating getters.
+
+See: [`array/pluck()`](array.html#pluck)
+
+```js
+var users = [{name:"John", age:21}, {name:"Jane", age:25}];
+// ["John", "Jane"]
+var names = map(users, prop('name'));
+```
+
+
+
+## series(...fn):Function
+
+Returns a function that will execute all the supplied functions in order and
+passing the same parameters to all of them. Useful for combining multiple
+`array/forEach` into a single one and/or for debugging.
+
+```js
+// call `console.log()` and `doStuff()` for each item item in the array
+forEach(arr, series(console.log, doStuff));
+```
+
+
+
+## throttle(fn, interval):Function
+
+Creates a function that, when executed, will only call the `fn` function at
+most once per every `interval` milliseconds.
+
+If the throttled function is invoked more than once during the wait timeout,
+`fn` will also be called on the trailing edge of the timeout.
+
+Subsequent calls to the throttled function will return the result of the last
+`fn` call.
+
+```js
+// sometimes less is more
+var lazyRedraw = throttle(redraw, 300);
+foo.on.resize.add(lazyRedraw);
+```
+
+In this visualization, `|` is a throttled-function call and `X` is the actual
+`fn` execution:
+
+    ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
+    X    X    X    X    X    X        X    X    X    X    X    X
+
+You also have the option to cancel the throttled call if it didn't happen yet:
+
+```js
+lazyRedraw();
+setTimeout(function(){
+    lazyRedraw();
+    // lazyRedraw will be called only once since `cancel` was called before
+    // the `interval` for 2nd call completed
+    lazyRedraw.cancel();
+}, 250);
+```
+
+See: [`debounce()`](#debounce)
+
+
+## timeout(fn, millis, context, [...args]):Number
+
+Functions as a wrapper for `setTimeout`. Calls a the function `fn` after a given delay `millis` in milliseconds.
+The function is called within the specified context. The return value can be used to clear the timeout using `clearTimeout`.
+
+```js
+var id = timeout(doStuff, 300, this);
+
+clearTimeout(id);
+```
+
+## times(n, callback, [context]):void
+
+Iterates over a callback `n` times.
+
+### Arguments
+
+ 1. `n` (Number)           : Number of iterations
+ 2. `callback` (Function)  : Closure executed for every iteration
+ 3. `context` (Object)     : Execution context (object used as `this`)
+
+```js
+var output = '';
+times(5, function(i) {
+    output += i.toString();
+});
+// output: 01234
+```
+
+## wrap(fn, wrapper):Function
+
+Wraps the first `fn` inside of the `wrapper` function, passing it as the first argument. This allows the `wrapper` to execute code before and after the `fn` runs, adjust the arguments, and execute it conditionally.
+
+```js
+var hello = function(name) { return "hello: " + name; };
+hello = wrap(hello, function(func) {
+  return "before, " + func("moe") + ", after";
+});
+hello();
+// output: 'before, hello: moe, after'
+```
+
+See: [`partial()`](#partial)
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/nyks/node_modules/mout/doc/lang.md b/node_modules/nyks/node_modules/mout/doc/lang.md
new file mode 100644
index 0000000..9324968
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/lang.md
@@ -0,0 +1,516 @@
+# lang #
+
+Language Utilities. Easier inheritance, scope handling, type checks.
+
+
+
+## clone(val):*
+
+Clone native types like Object, Array, RegExp, Date and primitives.
+
+This method will not clone values that are referenced within `val`. It will
+only copy the value reference to the new value. If the value is not a plain
+object but is an object, it will return the value unchanged.
+
+### Example
+
+```js
+var a = { foo: 'bar' };
+var b = clone(a);
+console.log(a === b); // false
+console.log(a.foo === b.foo); // true
+
+var c = [1, 2, 3];
+var d = clone(b);
+console.log(c === d); // false
+console.log(c); // [1, 2, 3]
+```
+
+See: [`deepClone()`](#deepClone)
+
+
+
+## createObject(parent, [props]):Object
+
+Create Object using prototypal inheritance and setting custom properties.
+
+Mix between [Douglas Crockford Prototypal Inheritance](http://javascript.crockford.com/prototypal.html) and [`object/mixIn`](./object.html#mixIn).
+
+### Arguments
+
+ 1. `parent` (Object)  : Parent Object
+ 2. `[props]` (Object) : Object properties
+
+### Example
+
+```js
+var base = {
+    trace : function(){
+        console.log(this.name);
+    }
+};
+
+var myObject = createObject(base, {
+    name : 'Lorem Ipsum'
+});
+
+myObject.trace(); // "Lorem Ipsum"
+```
+
+
+
+## ctorApply(constructor, args):Object
+
+Do `Function.prototype.apply()` on a constructor while maintaining prototype
+chain.
+
+```js
+function Person(name, surname) {
+    this.name = name;
+    this.surname = surname;
+}
+
+Person.prototype.walk = function(){
+    console.log(this.name +' is walking');
+};
+
+var args = ['John', 'Doe'];
+
+// "similar" effect as calling `new Person("John", "Doe")`
+var john = ctorApply(Person, args);
+john.walk(); // "John is walking"
+```
+
+
+
+## deepClone(val, [instanceClone]):*
+
+Deep clone native types like Object, Array, RegExp, Date and primitives.
+
+The `instanceClone` function will be invoked to clone objects that are not
+"plain" objects (as defined by [`isPlainObject`](#isPlainObject)) if it is
+provided. If `instanceClone` is not specified, it will not attempt to clone
+non-plain objects, and will copy the object reference.
+
+### Example
+
+```js
+var a = {foo:'bar', obj: {a:1, b:2}};
+var b = deepClone(a); // {foo:'bar', obj: {a:1, b:2}}
+console.log( a === b ); // false
+console.log( a.obj === b.obj ); // false
+
+var c = [1, 2, [3, 4]];
+var d = deepClone(c); // [1, 2, [3, 4]]
+var e = c.concat(); // [1, 2, [3, 4]]
+
+console.log( c[2] === d[2] ); // false
+// concat doesn't do a deep clone, arrays are passed by reference
+console.log( e[2] === d[2] ); // true
+
+function Custom() { }
+function cloneCustom(x) { return new Custom(); }
+var f = { test: new Custom() };
+var g = deepClone(f, cloneCustom);
+g.test === f.test // false, since new Custom instance will be created
+```
+
+See: [`clone()`](#clone)
+
+
+
+## deepEquals(a, b, [callback]):Boolean
+
+Recursively tests whether two values contains the same keys and values.
+
+`callback` specifies the equality comparison function used to compare
+non-object values. It defaults to using the [`is()`](#is) function.
+
+If the values are both an object or array, it will recurse into both values,
+checking if their keys/values are equal. It will only check the keys and values
+contained by the objects; it will not check the objects' prototypes.  If either
+of the values are not objects, they will be checked using the `callback`
+function.
+
+Example:
+
+```js
+deepEquals({ a: 1 }, { a: 1 }); // true
+deepEquals({ value: { a: 1 } }, { value: { a: 1 } }); // true
+deepEquals({ value: { a: 1 } }, { value: { a: 2 } }); // false
+deepEquals({ value: { a: 1 } }, { value: { a: 1, b: 2 } }); // false
+deepEquals({}, null); // false
+deepEquals(null, null); // true
+deepEquals(
+    { a: { b: 1 } },
+    { a: { b: '1' } },
+    function(a, b) { return a == b; }); // true
+```
+
+See: [object/equals](object.html#equals), [array/equals](array.html#equals)
+
+
+
+## defaults(val, ...defaults):void
+
+Return first value that isn't `null` or `undefined`.
+
+    function doSomethingAwesome(foo, bar) {
+        // default arguments
+        foo = defaults(foo, 'lorem');
+        bar = defaults(bar, 123);
+        // ...
+    }
+
+
+
+## GLOBAL:Object
+
+Reference to the global context (`window` inside a browser, `global` on
+node.js). Works on ES3 and ES5 strict-mode.
+
+
+
+## inheritPrototype(childCtor, parentCtor):Object
+
+Inherit the prototype methods from one constructor into another.
+
+Similar to [node.js util/inherits](http://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor).
+
+It returns the the `childCtor.prototype` for convenience.
+
+```js
+function Foo(name){
+    this.name = name;
+}
+Foo.prototype = {
+    getName : function(){
+        return this.name;
+    }
+};
+
+function Bar(name){
+    Foo.call(this, name);
+}
+//should be called before calling constructor
+var proto = inheritPrototype(Bar, Foo);
+
+// for convenience we return the new prototype object
+console.log(proto === Bar.prototype); // true
+
+var myObj = new Bar('lorem ipsum');
+myObj.getName(); // "lorem ipsum"
+
+console.log(myObj instanceof Foo); // true
+
+// you also have access to the "super" constructor
+console.log(Bar.super_ === Foo); // true
+```
+
+
+## is(x, y):Boolean
+
+Check if both values are identical/egal.
+
+```js
+// wtfjs
+NaN === NaN; // false
+-0 === +0;   // true
+
+is(NaN, NaN); // true
+is(-0, +0);   // false
+is('a', 'b'); // false
+```
+
+See: [`isnt()`](#isnt)
+
+
+
+## isnt(x, y):Boolean
+
+Check if both values are not identical/egal.
+
+```js
+// wtfjs
+NaN === NaN; // false
+-0 === +0;   // true
+
+isnt(NaN, NaN); // false
+isnt(-0, +0);   // true
+isnt('a', 'b'); // true
+```
+
+See: [`is()`](#is)
+
+
+
+
+## isArguments(val):Boolean
+
+If value is an "Arguments" object.
+
+
+
+## isArray(val):Boolean
+
+If value is an Array. Uses native ES5 `Array.isArray()` if available.
+
+
+
+## isBoolean(val):Boolean
+
+If value is a Boolean.
+
+
+
+## isDate(val):Boolean
+
+If value is a Date.
+
+
+
+## isEmpty(val):Boolean
+
+Checks if Array/Object/String is empty.
+
+Will return `true` for any object that doesn't contain enumerable properties
+and also to any type of value that isn't considered a collection (boolean,
+null, undefined, function, etc).
+
+```js
+isEmpty('');         // true
+isEmpty('bar');      // false
+isEmpty([]);         // true
+isEmpty([1, 2]);     // false
+isEmpty({});         // true
+isEmpty({a:1, b:2}); // false
+// null, undefined, booleans, numbers are considered as "empty" values
+isEmpty(null);       // true
+isEmpty(undefined);  // true
+isEmpty(123);        // true
+isEmpty(true);       // true
+```
+
+
+## isFinite(val):Boolean
+
+Checks if value is Finite.
+
+**IMPORTANT:** This is not the same as native `isFinite`, which will return
+`true` for values that can be coerced into finite numbers. See
+http://es5.github.com/#x15.1.2.5.
+
+```js
+isFinite(123);      // true
+isFinite(Infinity); // false
+
+// this is different than native behavior
+isFinite('');   // false
+isFinite(true); // false
+isFinite([]);   // false
+isFinite(null); // false
+```
+
+
+## isFunction(val):Boolean
+
+If value is a Function.
+
+
+
+## isKind(val, kind):Boolean
+
+If value is of "kind". (used internally by some of the *isSomething* checks).
+
+Favor the other methods since strings are commonly mistyped and also because
+some "kinds" can only be accurately checked by using other methods (e.g.
+`Arguments`), some of the other checks are also faster.
+
+```js
+isKind([1,2], 'Array'); // true
+isKind(3, 'Array');     // false
+isKind(3, 'Number');    // true
+```
+
+See: [`kindOf()`](#kindOf)
+
+
+
+## isInteger(val):Boolean
+
+Check if value is an integer.
+
+```js
+isInteger(123);    // true
+isInteger(123.45); // false
+isInteger({});     // false
+isInteger('foo');  // false
+isInteger('123');  // false
+```
+
+
+
+## isNaN(val):Boolean
+
+Check if value is not a number.
+
+It doesn't coerce value into number before doing the check, giving better
+results than native `isNaN`. Returns `true` for everything besides numeric
+values.
+
+**IMPORTANT:** behavior is very different than the native `isNaN` and way more
+useful!!! See: http://es5.github.io/#x15.1.2.4
+
+```js
+isNaN(123);       // false
+
+isNaN(NaN);       // true
+isNaN({});        // true
+isNaN(undefined); // true
+isNaN([4,5]);     // true
+
+// these are all "false" on native isNaN and main reason why this module exists
+isNaN('');    // true
+isNaN(null);  // true
+isNaN(true);  // true
+isNaN(false); // true
+isNaN("123"); // true
+isNaN([]);    // true
+isNaN([5]);   // true
+```
+
+
+
+## isNull(val):Boolean
+
+If value is `null`.
+
+
+
+## isNumber(val):Boolean
+
+If value is a Number.
+
+
+
+## isObject(val):Boolean
+
+If value is an Object.
+
+
+
+## isPlainObject(val):Boolean
+
+If the value is an Object created by the Object constructor.
+
+
+
+## isRegExp(val):Boolean
+
+If value is a RegExp.
+
+
+
+## isString(val):Boolean
+
+If value is a String.
+
+
+
+## isUndefined(val):Boolean
+
+If value is `undefined`.
+
+
+
+## kindOf(val):String
+
+Gets kind of value (e.g. "String", "Number", "RegExp", "Null", "Date").
+Used internally by `isKind()` and most of the other *isSomething* checks.
+
+```js
+kindOf([1,2]); // "Array"
+kindOf('foo'); // "String"
+kindOf(3);     // "Number"
+```
+
+See: [`isKind()`](#isKind)
+
+
+## toArray(val):Array
+
+Convert array-like object into Array or wrap value into Array.
+
+```js
+toArray({
+    "0" : "foo",
+    "1" : "bar",
+    "length" : 2
+});                              // ["foo", "bar"]
+
+function foo(){
+    return toArray(arguments);
+}
+foo("lorem", 123);               // ["lorem", 123]
+
+toArray("lorem ipsum");          // ["lorem ipsum"]
+toArray(window);                 // [window]
+toArray({foo:"bar", lorem:123}); // [{foo:"bar", lorem:123}]
+```
+
+See: object/values()
+
+
+
+## toNumber(val):Number
+
+Convert value into number.
+
+```js
+// numeric values are typecasted as Number
+toNumber('123');     // 123
+toNumber(-567);      // -567
+
+// falsy values returns zero
+toNumber('');        // 0
+toNumber(null);      // 0
+toNumber(undefined); // 0
+toNumber(false);     // 0
+
+// non-numeric values returns NaN
+toNumber('asd');     // NaN
+toNumber({});        // NaN
+toNumber([]);        // NaN
+
+// Date objects return milliseconds since epoch
+toNumber(new Date(1985, 6, 23)); // 490935600000
+```
+
+
+
+## toString(val):String
+
+Convert any value to its string representation.
+
+Will return an empty string for `undefined` or `null`, otherwise will convert
+the value to its string representation.
+
+```js
+// null and undefined are converted into empty strings
+toString(null);      // ""
+toString(undefined); // ""
+
+toString(1);       // "1"
+toString([1,2,3]); // "1,2,3"
+toString(false);   // "false"
+
+// uses `val.toString()` to convert value
+toString({toString:funtion(){ return 'foo'; }}); // "foo"
+```
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/nyks/node_modules/mout/doc/math.md b/node_modules/nyks/node_modules/mout/doc/math.md
new file mode 100644
index 0000000..d9d2410
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/math.md
@@ -0,0 +1,316 @@
+# math #
+
+Math utilities.
+
+
+## ceil(val[, step]):Number
+
+Round value up to full steps. Similar to `Math.ceil()` but can round value
+to an arbitrary *radix*.
+
+    ceil(7.2);   // 8
+    ceil(7.8);   // 8
+    ceil(7, 5);  // 10
+    ceil(11, 5); // 15
+    ceil(15, 5); // 15
+
+### Common use cases
+
+Round values by increments of 5/10/1000/etc.
+
+See: [`round()`](#round), [`floor()`](#floor), [`countSteps()`](#countSteps)
+
+
+
+## clamp(val, min, max):Number
+
+Clamps value inside range.
+
+`clamp()` is extremely useful in cases where you need to limit a value inside
+a certain range. So instead of doing a complex `if/else` to filter/process the
+value you can restrict it to always be inside the desired range:
+
+    clamp(-5, 0, 10); // 0
+    clamp(7, 1, 10);  // 7
+    clamp(8, 1, 10);  // 8
+    clamp(10, 1, 10); // 10
+    clamp(11, 1, 10); // 10
+
+If the value is smaller than `min` it returns the `min`, if `val` is higher
+than `max` it returns `max`.
+
+### Common use cases
+
+Any situation where you need to limit a number inside a range like: slider
+position, image galleries <small>(so user can't skip to an image that doesn't
+exist)</small>, drag and drop, scroll boundaries, etc.
+
+See: [`loop()`](#loop)
+
+
+
+
+## countSteps(val, step[, overflow]):Number
+
+Count number of full steps.
+
+### Arguments:
+
+ 1. `val` (Number)        : Value.
+ 2. `step` (Number)       : Step size.
+ 3. `[overflow]` (Number) : Maximum number of steps, nSteps will loop if
+`>=` than overflow.
+
+
+Count steps is very useful for cases where you need to know how many "full
+steps" the number *completed*. Think of it as a division that only returns
+integers and ignore remainders.
+
+    countSteps(3,  5);    // 0
+    countSteps(6,  5);    // 1
+    countSteps(12, 5);    // 2
+    countSteps(18, 5);    // 3
+    countSteps(21, 5);    // 4
+
+You can also set an `overflow` which will reset the *counter* before reaching
+this number.
+
+    countSteps(3, 5, 3);  // 0
+    countSteps(6, 5, 3);  // 1
+    countSteps(12, 5, 3); // 2
+    countSteps(18, 5, 3); // 0
+    countSteps(21, 5, 3); // 1
+
+### Common use cases
+
+#### How many items fit inside an area:
+
+    var containerWidth = 100;
+    var itemWidth = 8;
+    var howManyFit = countSteps(containerWidth, itemWidth); // 12
+
+#### Split value into different scales or convert value from one scale to another
+
+From [mout/time/parseMs](time.html#parseMs):
+
+    function parseMs(ms){
+        return {
+            milliseconds : countSteps(ms, 1, 1000),
+            seconds      : countSteps(ms, 1000, 60),
+            minutes      : countSteps(ms, 60000, 60),
+            hours        : countSteps(ms, 3600000, 24),
+            days         : countSteps(ms, 86400000)
+        };
+    }
+
+    // {days:27, hours:4, minutes:26, seconds:5, milliseconds:454}
+    parseMs(2348765454);
+
+
+
+## floor(val[, step]):Number
+
+Round value down to full steps. Similar to `Math.floor()` but can round value
+to an arbitrary *radix*. (formerly `snap`)
+
+    floor(7.2);   // 7
+    floor(7.8);   // 7
+    floor(7, 5);  // 5
+    floor(11, 5); // 10
+    floor(15, 5); // 15
+
+### Common use cases
+
+Round values by increments of 5/10/1000/etc.
+
+See: [`round()`](#round), [`ceil()`](#ceil), [`countSteps()`](#countSteps)
+
+
+
+## inRange(val, min, max[, threshold]):Boolean
+
+Checks if value is inside the range.
+
+    inRange(-6, 1, 10);    // false
+    inRange( 5, 1, 10);    // true
+    inRange(12, 1, 10);    // false
+
+The threshold can be useful when you want granular control of what should match
+and/or the precision could change at runtime or by some configuration option,
+avoids the clutter of adding/subtracting the `threshold` from `mix` and `max`.
+
+    inRange(12, 1, 10, 2); // true
+    inRange(13, 1, 10, 2); // false
+
+### Common use cases
+
+Anything that needs to check if value is inside a range, be it collision
+detection, limiting interaction by mouse position, ignoring parts of the logic
+that shouldn't happen if value isn't valid, simplify `if/else` conditions,
+making code more readable, etc...
+
+
+
+
+## isNear(val, target, threshold):Boolean
+
+Check if value is close to target.
+
+Similar to `inRange()` but used to check if value is close to a certain value
+or match the desired value. Basically to simplify `if/else` conditions and to
+make code clearer.
+
+    isNear( 10.2, 10, 0.5); // true
+    isNear( 10.5, 10, 0.5); // true
+    isNear(10.51, 10, 0.5); // false
+
+### Common use cases
+
+Games where a certain action should happen if an *actor* is close to a target,
+gravity fields, any numeric check that has some tolerance.
+
+
+
+
+## lerp(ratio, start, end):Number
+
+Linear interpolation.
+
+    lerp(0.5, 0, 10);  // 5
+    lerp(0.75, 0, 10); // 7.5
+
+### Common use cases
+
+Linear interpolation is commonly used to create animations of elements moving
+from one point to another, where you simply update the current ratio (which in
+this case represents time) and get back the position of the element at that
+"frame".
+
+The core idea of `lerp` is that you are using a number that goes from `0` to
+`1` to specify a ratio inside that scale. This concept can be applied to
+convert numbers from different scales easily.
+
+See: [`map()`](#map), [`norm()`](#norm)
+
+
+
+
+## loop(val, min, max):Number
+
+Loops value inside range. Will return `min` if `val > max` and `max` if `val
+< min`, otherwise it returns `val`.
+
+    loop(-1, 0, 10); // 10
+    loop( 1, 0, 10); // 1
+    loop( 5, 0, 10); // 5
+    loop( 9, 0, 10); // 9
+    loop(10, 0, 10); // 10
+    loop(11, 0, 10); // 0
+
+Similar to [`clamp()`](#clamp) but *loops* the value inside the range when an
+overflow occurs.
+
+### Common use cases
+
+Image galleries, infinite scroll, any kind of logic that requires that the
+first item should be displayed after the last one or the last one should be
+displayed after first if going on the opposite direction.
+
+See: [`clamp()`](#clamp)
+
+
+
+
+## map(val, min1, max1, min2, max2):Number
+
+Maps a number from one scale to another.
+
+    map(3, 0, 4, -1, 1)   // 0.5
+    map(3, 0, 10, 0, 100) // 30
+
+### Common use cases
+
+Very useful to convert values from/to multiple scales.
+
+Let's suppose we have a slider that needs to go from `2000` to `5000` and that slider
+has `300px` of width, here is how we would translate the knob position into the
+current value:
+
+    var knobX = 123;
+    var sliderWid = 300;
+    var minVal = 2000;
+    var maxVal = 5000;
+
+    var curVal = map(knobX, 0, sliderWid, minVal, maxVal); // 3230
+
+See: [`lerp()`](#lerp), [`norm()`](#norm)
+
+
+
+
+## norm(val, min, max):Number
+
+Gets normalized ratio of value inside range.
+
+If `val < min` or `val > max` it will throw a `RangeError` since we can't
+normalize the value.
+
+    norm(50, 0, 100); // 0.5
+    norm(75, 0, 100); // 0.75
+    norm(100, 0, 100); // 1
+    norm(-50, 0, 100); // RangeError: value (-50) must be between 0 and 100
+
+### Common use cases
+
+Convert values between scales, used by [`map()`](#map) internally. Direct
+opposite of [`lerp()`](#lerp).
+
+See: [`lerp()`](#lerp), [`map()`](#map)
+
+
+## overflow(val[, min], max):Number
+
+Wraps number within [min, max). When no `min` is given, the value `0` is assumed.
+A number larger or equal `max` loops around and starts over at `min`. For positive numbers larger
+or equal max this method behaves identical to the modulo operator.
+Numbers smaller than min loop around and start over at `max`.
+
+    overflow(13, 5, 10); // 8
+    overflow(3, 5, 10); // 8
+    overflow(23, 5); // 3
+    overflow(-10, -7, -1); // -4
+
+See: [`loop()`](#loop)
+
+
+## round(val[, step]):Number
+
+Round value to full steps. Similar to `Math.round()` but allow setting an
+arbitrary *radix*.
+
+    // default
+    round(0.22);      // 0
+    round(0.49);      // 0
+    round(0.51);      // 1
+
+    // custom radix
+    round(0.22, 0.5); // 0
+    round(0.49, 0.5); // 0.5
+    round(0.51, 0.5); // 0.5
+    round(0.74, 0.5); // 0.5
+    round(0.75, 0.5); // 1
+    round(1.24, 0.5); // 1
+    round(1.25, 0.5); // 1.5
+    round(1.74, 0.5); // 1.5
+
+### Common use cases
+
+Round values by increments of 0.5/5/10/1000/etc.
+
+See: [`floor()`](#floor), [`ceil()`](#ceil), [`countSteps()`](#countSteps)
+
+
+-------------------------------------------------------------------------------
+
+For more usage more info check the specs and source code.
+
diff --git a/node_modules/nyks/node_modules/mout/doc/number.md b/node_modules/nyks/node_modules/mout/doc/number.md
new file mode 100644
index 0000000..78e9c07
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/number.md
@@ -0,0 +1,279 @@
+# number #
+
+Number utilities.
+
+
+## abbreviate(val[, nDecimalDigits, dictionary]):String
+
+Abbreviate number to thousands (K), millions (M) or billions (B).
+
+The default value for `nDecimalDigits` is `1`.
+
+### Example
+
+    abbreviate(123456);     // "123.5K"
+    abbreviate(12345678);   // "12.3M"
+    abbreviate(1234567890); // "1.2B"
+
+You can set the amount of decimal digits (default is `1`):
+
+    abbreviate(543);    // "0.5K"
+    abbreviate(543, 1); // "0.5K"
+    abbreviate(543, 2); // "0.54K"
+    abbreviate(543, 3); // "0.543K"
+
+You can customize the abbreviation by passing a custom "dictionary":
+
+    var _ptbrDict = {
+        thousand: ' mil',
+        million: ' Mi',
+        billion: ' Bi'
+    };
+    function customAbbr(val) {
+        return abbreviate(val, 1, _ptbrDict);
+    }
+
+    customAbbr(123456); // "123.5 mil"
+    customAbbr(12345678); // "12.3 Mi"
+    customAbbr(1234567890); // "1.2 Bi"
+
+
+
+## currencyFormat(val[, nDecimalDigits, decimalSeparator, thousandsSeparator]):String
+
+Format a number as currency.
+
+### Example:
+
+    currencyFormat(1000);              // "1,000.00"
+    currencyFormat(1000, 1);           // "1,000.0"
+    currencyFormat(1000, 2, ',', '.'); // "1.000,00"
+
+
+
+## enforcePrecision(val, nDecimalDigits):Number
+
+Enforce a specific amount of decimal digits and also fix floating point
+rounding issues.
+
+### Example:
+
+```js
+enforcePrecision(0.615, 2); // 0.62
+enforcePrecision(0.625, 2); // 0.63
+//floating point rounding "error" (rounds to odd number)
++(0.615).toFixed(2);        // 0.61
++(0.625).toFixed(2);        // 0.63
+```
+
+
+## isNaN(val):Boolean
+
+ES6 `Number.isNaN()`, checks if supplied value is `NaN`.
+
+```js
+// only returns `true` for `NaN`
+isNaN(NaN);    // true
+isNaN(0 / 0);  // true
+
+// everything else is `false`
+isNaN(true);   // false
+isNaN(123);    // false
+isNaN('asd');  // false
+isNaN('NaN');  // false
+```
+
+
+## MAX_INT:Number
+
+Maximum 32-bit signed integer value. `Math.pow(2, 31) - 1`
+
+### Example:
+
+```js
+console.log( MAX_INT ); // 2147483647
+```
+
+
+## MAX_SAFE_INTEGER:Number
+
+Maximum safe integer. `Math.pow(2,53) − 1`
+
+
+## MAX_UINT:Number
+
+Maximum 32-bit unsigned integer value. `Math.pow(2, 32) - 1`
+
+### Example:
+
+```js
+console.log( MAX_UINT ); // 4294967295
+```
+
+
+## MIN_INT:Number
+
+Minimum 32-bit signed integer value. `Math.pow(2, 31) * -1`.
+
+### Example:
+
+```js
+console.log( MIN_INT ); // -2147483648
+```
+
+
+## nth(n):String
+
+Returns the "nth" of number. (`"st"`, `"nd"`, `"rd"`, `"th"`)
+
+```js
+nth(1); // "st"
+nth(2); // "nd"
+nth(12); // "th"
+nth(22); // "nd"
+nth(23); // "rd"
+nth(34); // "th"
+```
+
+See: [`ordinal()`](#ordinal)
+
+
+
+## ordinal(n):String
+
+Converts number into ordinal form (1st, 2nd, 3rd, 4th, ...)
+
+```js
+ordinal(1); // "1st"
+ordinal(2); // "2nd"
+ordinal(3); // "3rd"
+ordinal(14); // "14th"
+ordinal(21); // "21st"
+```
+
+See: [`nth()`](#nth)
+
+
+
+## pad(n, minLength[, char]):String
+
+Add padding zeros if `n.length` < `minLength`.
+
+### Example:
+
+```js
+pad(1, 5);      // "00001"
+pad(12, 5);     // "00012"
+pad(123, 5);    // "00123"
+pad(1234, 5);   // "01234"
+pad(12345, 5);  // "12345"
+pad(123456, 5); // "123456"
+
+// you can also specify the "char" used for padding
+pad(12, 5, '_'); // "___12"
+```
+
+see: [string/lpad](./string.html#lpad)
+
+
+
+## rol(val, shift):Number
+
+Bitwise circular shift left.
+
+More info at [Wikipedia#Circular_shift](http://en.wikipedia.org/wiki/Circular_shift)
+
+
+
+## ror(val, shift):Number
+
+Bitwise circular shift right.
+
+More info at [Wikipedia#Circular_shift](http://en.wikipedia.org/wiki/Circular_shift)
+
+
+
+## sign(val):Number
+
+Returns `-1` if value is negative, `0` if the value is `0` and `1` if value is positive. Useful for
+multiplications.
+
+```js
+sign(-123); // -1
+sign(123);  // 1
+sign(0);    // 0
+```
+
+
+
+## toInt(val):Number
+
+"Convert" value into an 32-bit integer.  Works like `Math.floor` if `val > 0` and
+`Math.ceil` if `val < 0`.
+
+**IMPORTANT:** val will wrap at [number/MIN_INT](#MIN_INT) and
+[number/MAX_INT](#MAX_INT).
+
+Created because most people don't know bitwise operations and also because this
+feature is commonly needed.
+
+[Perf tests](http://jsperf.com/vs-vs-parseint-bitwise-operators/7)
+
+### Example:
+
+```js
+toInt(1.25);   // 1
+toInt(0.75);   // 0
+toInt(-0.55);  // 0
+toInt(-5.0001) // -5
+```
+
+
+
+## toUInt(val):Number
+
+"Convert" value into an 32-bit unsigned integer.
+
+Works like AS3#uint().
+
+**IMPORTANT:** val will wrap at 2^32.
+
+### Example:
+
+```js
+toUInt(1.25);                 // 1
+toUInt(0.75);                 // 0
+toUInt(-0.55);                // 0
+toUInt(-5.0001);              // 4294967291
+toUInt(Math.pow(2,32) - 0.5); // 4294967295
+toUInt(Math.pow(2,32) + 0.5); // 0
+```
+
+
+## toUInt31(val):Number
+
+"Convert" value into an 31-bit unsigned integer (since 1 bit is used for sign).
+
+Useful since all bitwise operators besides `>>>` treat numbers as signed
+integers.
+
+**IMPORTANT:** val will wrap at 2^31 and negative numbers will be treated as
+`zero`.
+
+### Example:
+
+```js
+toUInt31(1.25);                 // 1
+toUInt31(0.75);                 // 0
+toUInt31(-0.55);                // 0
+toUInt31(-5.0001);              // 0
+toUInt31(Math.pow(2,31) - 0.5); // 21474836470
+toUInt31(Math.pow(2,31) + 0.5); // 0
+```
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/nyks/node_modules/mout/doc/object.md b/node_modules/nyks/node_modules/mout/doc/object.md
new file mode 100644
index 0000000..02bf4e6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/object.md
@@ -0,0 +1,811 @@
+# object #
+
+Object utilities.
+
+
+
+## bindAll(obj, [...methodNames]):void
+
+Bind methods of the target object to always execute on its own context
+(ovewritting the original function).
+
+See: [function/bind](./function.html#bind)
+
+```js
+var view = {
+    name: 'Lorem Ipsum',
+    logNameOnClick: function() {
+        console.log(this.name);
+    }
+};
+
+// binds all methods by default
+bindAll(view);
+jQuery('#docs').on('click', view.logNameOnClick);
+```
+
+You can also specify the list of methods that you want to bind (in case you
+just want to bind a few of them).
+
+```js
+// only the listed methods will be bound to `obj` context
+bindAll(obj, 'logNameOnClick', 'doAwesomeStuffOnDrag');
+```
+
+
+
+## contains(obj, value):Boolean
+
+Similar to [Array/contains](array.html#contains). Checks if Object contains
+value.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 'bar'
+};
+contains(obj, 2);      // true
+contains(obj, 'foo');  // false
+```
+
+
+
+## deepFillIn(target, ...objects):Object
+
+Fill missing properties recursively.
+
+It's different from `deepMixIn` since it won't override any existing property.
+It's also different from `merge` since it won't clone child objects during the
+process.
+
+It returns the target object and mutates it in place.
+
+See: [`fillIn()`](#fillIn), [`deepMixIn()`](#deepMixIn), [`merge()`](#merge)
+
+```js
+var base = {
+    foo : {
+        bar : 123
+    },
+    lorem : 'ipsum'
+};
+var options = deepFillIn({foo : { baz : 45 }, lorem : 'amet'}, base);
+// > {foo: {bar:123, baz : 45}, lorem : 'amet'}
+```
+
+
+
+## deepMatches(target, pattern):Boolean
+
+Recursively checks if object contains all properties/value pairs. When both
+the target and pattern values are arrays, it checks that the target value
+contain matches for all the items in the pattern array (independent of order).
+
+```js
+var john = {
+    name: 'John',
+    age: 22,
+    pets: [
+        { type: 'cat', name: 'Grumpy Cat' },
+        { type: 'dog', name: 'Hawk' }
+    ]
+};
+
+deepMatches(john, { name: 'John' }); // true
+deepMatches(john, { age: 21 }); // false
+deepMatches(john, { pets: [ { type: 'cat' } ] }); // true
+deepMatches(john, { pets: [ { name: 'Hawk' } ] }); // true
+deepMatches(john, { pets: [ { name: 'Hairball' } ] }); // false
+```
+
+See [`matches()`](#matches)
+
+
+
+## deepMixIn(target, ...objects):Object
+
+Mixes objects into the target object, recursively mixing existing child objects
+as well.
+
+It will only recursively mix objects if both (existing and new) values are
+plain objects.
+
+Returns the target object. Like [`merge()`](#merge), but mutates the target
+object, and does not clone child objects.
+
+```js
+var target = {
+    foo: {
+        name: "foo",
+        id: 1
+    }
+};
+
+deepMixIn(target, { foo: { id: 2 } });
+console.log(target); // { foo: { name: "foo", id: 2 } }
+```
+
+See: [`mixIn()`](#mixIn), [`merge()`](#merge), [`deepFillIn()`](#deepFillIn)
+
+
+
+## equals(a, b, [callback]):Boolean
+
+Tests whether two objects contain the same keys and values.
+
+`callback` specifies the equality comparison function used to compare the
+values. It defaults to using [lang/is](lang.html#is).
+
+It will only check the keys and values contained by the objects; it will not
+check the objects' prototypes. If either of the values are not objects, they
+will be compared using the `callback` function.
+
+```js
+equals({}, {}); // true
+equals({ a: 1 }, { a: 1 }); // true
+equals({ a: 1 }, { a: 2 }); // false
+equals({ a: 1, b: 2 }, { a: 1 }); // false
+equals({ a: 1 }, { a: 1, b: 2 }); // false
+equals(null, null); // true
+equals(null, {}); // false
+equals({ a: 1 }, { a: '1' }, function(a, b) { return a == b; }); // true
+```
+
+See: [array/equals](array.html#equals), [lang/deepEquals](lang.html#deepEquals)
+
+
+## every(obj, callback, [thisObj]):Boolean
+
+Similar to [Array/every](array.html#every). Tests whether all properties in the
+object pass the test implemented by the provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+every(obj, isNumber); // false
+```
+
+
+
+## fillIn(obj, ...default):Object
+
+Fill in missing properties in object with values from the *defaults* objects.
+
+    var base = {
+        foo : 'bar',
+        num : 123
+    };
+
+    fillIn({foo:'ipsum'}, base); // {foo:'ipsum', num:123}
+
+PS: it allows merging multiple objects at once, the first ones will take
+precedence.
+
+See: [`mixIn()`](#mixIn), [`merge()`](#merge), [`deepFillIn()`](#deepFillIn)
+
+
+
+## filter(obj, callback, [thisObj])
+
+Returns a new object containing all properties where `callback` returns true,
+similar to Array/filter. It does not use properties from the object's
+prototype.
+
+Callback receives the same arguments as `forOwn()`.
+
+See: [`forOwn()`](#forOwn), [`forIn()`](#forIn), [`pick()`](#pick)
+
+```js
+var obj = {
+    foo: 'value',
+    bar: 'bar value'
+};
+
+// returns { bar: 'bar value' }
+filter(obj, function(v) { return v.length > 5; });
+
+// returns { foo: 'value' }
+filter(obj, function(v, k) { return k === 'foo'; });
+```
+
+
+
+## find(obj, callback, [thisObj])
+
+Loops through all the properties in the Object and returns the first one that
+passes a truth test (callback), similar to [Array/find](array.html#find).
+Unlike Array/find, order of iteration is not guaranteed.
+
+```js
+var obj = {
+    a: 'foo',
+    b: 12
+};
+
+find(obj, isString); // 'foo'
+find(obj, isNumber); // 12
+```
+
+
+
+## flatten(object, [level]):Object
+
+Recursively flattens an object. A new object containing all the values is
+returned. If `level` is specified, it will only flatten up to that level.
+Note that objects within arrays will not be flattened.
+
+### Example
+
+```js
+flatten({ a: 1, b: { c: 2, d: { e: 3 } } });
+// > { a: 1, 'b.c': 2, 'b.d.e': 3 }
+flatten({ a: 1, b: { c: 2, d: { e: 3 } } }, 1);
+// > { a: 1, 'b.c': 2, 'b.d': { e: 3 } }
+```
+
+See: [`array/flatten()`](./array.html#flatten)
+
+
+## forIn(obj, callback[, thisObj])
+
+Iterate over all properties of an Object, similar to
+[Array/forEach](array.html#forEach).
+
+It [avoids don't enum bug on IE](https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug).
+It **will** iterate over inherited (enumerable) properties from the prototype.
+
+It allows exiting the iteration early by returning `false` on the callback.
+
+See: [`forOwn()`](#forOwn), [`keys()`](#keys), [`values()`](#values)
+
+### Callback arguments
+
+Callback will receive the following arguments:
+
+ 1. Property Value (*)
+ 2. Key name (String)
+ 3. Target object (Object)
+
+### Example
+
+```js
+function Foo(){
+    this.foo = 1;
+    this.bar = 2;
+}
+
+Foo.prototype.lorem = 4;
+
+var obj = new Foo();
+
+var result = 0;
+var keys = [];
+
+forIn(obj, function(val, key, o){
+    result += val;
+    keys.push(key);
+});
+
+console.log(result); // 7
+console.log(keys);   // ['foo', 'bar', 'lorem']
+```
+
+
+
+## forOwn(obj, callback[, thisObj])
+
+Iterate over all own properties from an Object, similar to
+[Array/forEach](array.html#forEach).
+
+It [avoids don't enum bug on IE](https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug).
+Notice that it **won't** iterate over properties from the prototype.
+
+It allows exiting the iteration early by returning `false` on the callback.
+
+See: [`forIn()`](#forIn), [`keys()`](#keys), [`values()`](#values)
+
+### Callback arguments
+
+Callback will receive the following arguments:
+
+ 1. Property Value (*)
+ 2. Key name (String)
+ 3. Target object (Object)
+
+### Example
+
+```js
+function Foo(){
+    this.foo = 1;
+    this.bar = 2;
+}
+
+// will be ignored
+Foo.prototype.lorem = 4;
+
+var obj = new Foo();
+
+var result = 0;
+var keys = [];
+
+forOwn(obj, function(val, key, o){
+    result += val;
+    keys.push(key);
+});
+
+console.log(result); // 3
+console.log(keys);   // ['foo', 'bar']
+```
+
+
+
+## functions(obj):Array
+
+Returns a sorted list of all enumerable properties that have function values
+(including inherited properties).
+
+```js
+var obj = {
+    foo : function(){},
+    bar : 'baz'
+};
+functions(obj); // ['foo']
+```
+
+
+
+## get(obj, propName):*
+
+Returns nested property value. Will return `undefined` if property doesn't
+exist.
+
+See: [`set()`](#set), [`namespace()`](#namespace), [`has()`](#has)
+
+```js
+var lorem = {
+        ipsum : {
+            dolor : {
+                sit : 'amet'
+            }
+        }
+    };
+
+get(lorem, 'ipsum.dolor.sit'); // "amet"
+get(lorem, 'foo.bar');         // undefined
+```
+
+
+
+## has(obj, propName):Boolean
+
+Checks if object contains a child property. Useful for cases where you need to
+check if an object contain a *nested* property. It will get properties
+inherited by the prototype.
+
+see: [`hasOwn()`](#hasOwn), [`get()`](#get)
+
+```js
+var a = {
+        b : {
+            c : 123
+        }
+    };
+
+has(a, 'b.c');   // true
+has(a, 'foo.c'); // false
+```
+
+### Common use case
+
+```js
+if( has(a, 'foo.c') ){ // false
+    // ...
+}
+
+if( a.foo.c ){ // ReferenceError: `foo` is not defined
+    // ...
+}
+```
+
+
+
+## hasOwn(obj, propName):Boolean
+
+Safer `Object.hasOwnProperty`. Returns a boolean indicating whether the object
+has the specified property.
+
+see: [`has()`](#has)
+
+```js
+var obj = {
+    foo: 1,
+    hasOwnProperty : 'bar'
+};
+
+obj.hasOwnProperty('foo'); // ERROR! hasOwnProperty is not a function
+
+hasOwn(obj, 'foo');            // true
+hasOwn(obj, 'hasOwnProperty'); // true
+hasOwn(obj, 'toString');       // false
+```
+
+
+
+## keys(obj):Array
+
+Returns an array of all own enumerable properties found upon a given object.
+It will use the native `Object.keys` if present.
+
+PS: it won't return properties from the prototype.
+
+See: [`forOwn()`](#forOwn), [`values()`](#values)
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+keys(obj); // ['foo', 'bar', 'lorem']
+```
+
+
+
+## map(obj, callback, [thisObj]):Object
+
+Returns a new object where the property values are the result of calling the
+callback for each property in the original object, similar to Array/map.
+
+The callback function receives the same arguments as in `forOwn()`.
+
+See: [`forOwn()`](#forOwn)
+
+```js
+var obj = { foo: 1, bar: 2 },
+    data = { foo: 0, bar: 1 };
+
+map(obj, function(v) { return v + 1; }); // { foo: 2, bar: 3 }
+map(obj, function(v, k) { return k; }); // { foo: "foo", bar: "bar" }
+map(obj, function(v, k) { return this[k]; }, data); // { foo: 0, bar: 1 }
+```
+
+
+
+## matches(obj, props):Boolean
+
+Checks if object contains all properties/values pairs. Useful for validation
+and filtering.
+
+```js
+var john = {age:25, hair:'long', beard:true};
+var mark = {age:27, hair:'short', beard:false};
+var hippie = {hair:'long', beard:true};
+matches(john, hippie); // true
+matches(mark, hippie); // false
+```
+
+See [`deepMatches()`](#deepMatches)
+
+
+
+## merge(...objects):Object
+
+Deep merges objects. Note that objects and properties will be cloned during the
+process to avoid undesired side effects. It return a new object and won't
+affect source objects.
+
+```js
+var obj1 = {a: {b: 1, c: 1, d: {e: 1, f: 1}}};
+var obj2 = {a: {b: 2, d : {f : 'yeah'} }};
+
+merge(obj1, obj2); // {a: {b : 2, c : 1, d : {e : 1, f : 'yeah'}}}
+```
+
+See: [`deepMixIn()`](#deepMixIn), [`deepFillIn()`](#deepFillIn)
+
+
+
+## max(obj[, iterator]):*
+
+Returns maximum value inside object or use a custom iterator to define how
+items should be compared. Similar to [Array/max](array.html#max).
+
+See: [`min()`](#min)
+
+```js
+max({a: 100, b: 2, c: 1, d: 3, e: 200}); // 200
+max({a: 'foo', b: 'lorem', c: 'amet'}, function(val){
+    return val.length;
+}); // 'lorem'
+```
+
+
+
+## min(obj[, iterator]):*
+
+Returns minimum value inside object or use a custom iterator to define how
+items should be compared. Similar to [Array/min](array.html#min).
+
+See: [`max()`](#max)
+
+```js
+min({a: 100, b: 2, c: 1, d: 3, e: 200}); // 1
+min({a: 'foo', b: 'lorem', c: 'amet'}, function(val){
+    return val.length;
+}); // 'foo'
+```
+
+
+
+## mixIn(target, ...objects):Object
+
+Combine properties from all the objects into first one.
+
+This method affects target object in place, if you want to create a new Object
+pass an empty object as first parameter.
+
+### Arguments
+
+ 1. `target` (Object)        : Target Object.
+ 2. `...objects` (...Object) : Objects to be combined (0...n objects).
+
+### Example
+
+```js
+var a = {foo: "bar"};
+var b = {lorem: 123};
+
+mixIn({}, a, b); // {foo: "bar", lorem: 123}
+console.log(a);  // {foo: "bar"}
+
+mixIn(a, b);     // {foo: "bar", lorem: 123}
+console.log(a);  // {foo: "bar", lorem: 123}
+```
+
+See: [`fillIn()`](#fillIn), [`merge()`](#merge)
+
+
+
+
+## namespace(obj, propName):Object
+
+Creates an empty object inside namespace if not existent. Will return created
+object or existing object.
+
+See: [`get()`](#get), [`set()`](#set)
+
+```js
+var obj = {};
+namespace(obj, 'foo.bar'); // {}
+console.log(obj);          // {foo:{bar:{}}}
+```
+
+
+## omit(obj, ...keys):Object
+
+Return a copy of the object without the blacklisted keys.
+
+See: [`filter()`](#filter)
+
+```js
+var user = {
+    firstName : 'John',
+    lastName : 'Doe',
+    dob : '1985/07/23',
+    gender : 'male'
+};
+
+// can pass an array of keys as second argument
+var keys = ['firstName', 'dob']
+omit(user, keys); // {lastName : 'Doe', gender : 'male'}
+
+// or multiple arguments
+omit(user, 'firstName', 'lastName'); // {dob : '1985/07/23', gender : 'male'}
+```
+
+
+
+## pick(obj, ...keys):Object
+
+Return a copy of the object that contains only the whitelisted keys.
+
+See: [`filter()`](#filter)
+
+```js
+var user = {
+    firstName : 'John',
+    lastName : 'Doe',
+    dob : '1985/07/23',
+    gender : 'male'
+};
+
+// can pass an array of keys as second argument
+var keys = ['firstName', 'dob']
+pick(user, keys); // {firstName:"John", dob: "1985/07/23"}
+
+// or multiple arguments
+pick(user, 'firstName', 'lastName'); // {firstName:"John", lastName: "Doe"}
+```
+
+
+
+## pluck(obj, propName):Object
+
+Extract an object containing property values with keys as they appear in the
+passed object.
+
+```js
+var users = {
+    first: {
+        name : 'John',
+        age : 21
+    },
+    second: {
+        name : 'Mary',
+        age : 25
+    }
+};
+
+pluck(users, 'name'); // {first: 'John', second: 'Mary'} );
+pluck(users, 'age');  // {first: 21, second: 25} );
+```
+
+
+
+## reduce(obj, callback, initial, [thisObj]):*
+
+Similar to [Array/reduce](array.html#reduce).
+
+Apply a function against an accumulator and each property of the object (order
+is undefined) as to reduce it to a single value.
+
+```js
+var obj = {a: 1, b: 2, c: 3, d: 4};
+
+function sum(prev, cur, key, list) {
+    compare1.push(prev);
+    return prev + cur;
+}
+
+reduce(obj, sum); // 10
+```
+
+
+
+## reject(obj, callback, thisObj):Object
+
+Returns a new object containing all properties where `callback` returns true,
+similar to [Array/reject](array.html#reject). It does not use properties from
+the object's prototype. Opposite of [`filter()`](#filter).
+
+See [`filter()`](#filter)
+
+### Example
+
+```js
+var obj = {a: 1, b: 2, c: 3, d: 4, e: 5};
+reject(obj, function(x) { return (x % 2) !== 0; }); // {b: 2, d: 4}
+```
+
+
+
+## values(obj):Array
+
+Returns an array of all own enumerable properties values found upon a given object.
+
+PS: it won't return properties from the prototype.
+
+See: [`forOwn()`](#forOwn), [`keys()`](#keys)
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+values(obj); // [1, 2, 3]
+```
+
+
+
+## set(obj, propName, value)
+
+Sets a nested property value.
+
+See: [`get()`](#get), [`namespace()`](#namespace)
+
+```js
+var obj = {};
+set(obj, 'foo.bar', 123);
+console.log(obj.foo.bar); // 123
+console.log(obj);         // {foo:{bar:123}}
+```
+
+
+
+## size(obj):Number
+
+Returns the count of own enumerable properties found upon a given object.
+
+PS: it won't return properties from the prototype.
+
+See: [`forOwn()`](#forOwn), [`keys()`](#keys)
+
+```js
+var obj = {
+    foo : 1,
+    bar : 2,
+    lorem : 3
+};
+size(obj); // 3
+```
+
+
+
+## some(obj, callback, [thisObj]):Boolean
+
+Similar to [Array/some](array.html#some). Tests whether any properties in the
+object pass the test implemented by the provided callback.
+
+```js
+var obj = {
+    a: 1,
+    b: 2,
+    c: 3,
+    d: 'string'
+};
+
+some(obj, isNumber); // true
+```
+
+
+
+## unset(obj, propName):Boolean
+
+Delete object property if existent and returns a boolean indicating succes. It
+will also return `true` if property doesn't exist.
+
+Some properties can't be deleted, to understand why [check this
+article](http://perfectionkills.com/understanding-delete/).
+
+See: [`set()`](#set)
+
+```js
+var lorem = {
+        ipsum : {
+            dolor : {
+                sit : 'amet'
+            }
+        }
+    };
+
+unset(lorem, 'ipsum.dolor.sit'); // true
+console.log(lorem.ipsum.dolor);  // {}
+unset(lorem, 'foo.bar');         // true
+```
+
+
+
+## result(object, property):Mixed
+
+Evaluates an objects property and returns result.
+
+```js
+var person = {
+    name: 'john',
+
+    mood: function() {
+        // some dynamic calculated property.
+        return 'happy';
+    }
+};
+
+var name = result(person, 'name'), // john
+    mood = result(person, 'mood'); // happy
+```
diff --git a/node_modules/nyks/node_modules/mout/doc/queryString.md b/node_modules/nyks/node_modules/mout/doc/queryString.md
new file mode 100644
index 0000000..1be3c10
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/queryString.md
@@ -0,0 +1,115 @@
+# queryString #
+
+Utilities for query string manipulation.
+
+
+
+## contains(url, paramName):Boolen
+
+Checks if query string contains parameter.
+
+### Arguments:
+
+ 1. `url` (String)     : URL or query string.
+ 2. `paramName` (String) : Parameter name.
+
+### Example:
+
+```js
+var url = 'example.com/?lorem=ipsum';
+contains(url, 'lorem'); // true
+contains(url, 'foo');   //false
+```
+
+
+
+## decode(queryStr[, shouldTypecast]):Object
+
+Parses query string and creates an object of keys => vals.
+
+Will typecast value with [`string/typecast`](string.html#typecast) by default
+and decode string parameters using `decodeURIComponent()`.
+
+```js
+var query = '?foo=bar&lorem=123';
+decode(query);        // {foo: "bar", lorem: 123}
+decode(query, false); // {foo: "bar", lorem: "123"}
+```
+
+
+## encode(obj):String
+
+Encode object into a query string.
+
+Will encode parameters with `encodeURIComponent()`.
+
+```js
+encode({foo: "bar", lorem: 123}); // "?foo=bar&lorem=123"
+```
+
+
+## getParam(url, param[, shouldTypecast]):*
+
+Get query parameter value.
+
+Will typecast value with [`string/typecast`](string.html#typecast) by default.
+
+See: [`setParam()`](#setParam)
+
+### Arguments:
+
+ 1. `url` (String) : Url.
+ 2. `param` (String) : Parameter name.
+ 3. `[shouldTypecast]` (Boolean) : If it should typecast value.
+
+### Example:
+
+```js
+var url = 'example.com/?foo=bar&lorem=123&ipsum=false';
+getParam(url, 'dolor');        // "amet"
+getParam(url, 'lorem');        // 123
+getParam(url, 'lorem', false); // "123"
+```
+
+
+## parse(url[, shouldTypecast]):Object
+
+Parses URL, extracts query string and decodes it.
+
+It will typecast all properties of the query object unless second argument is
+`false`.
+
+Alias to: `decode(getQuery(url))`.
+
+```js
+var url = 'example.com/?lorem=ipsum&a=123';
+parse(url);        // {lorem: "ipsum", a: 123}
+parse(url, false); // {lorem: "ipsum", a: "123"}
+```
+
+
+## getQuery(url):String
+
+Gets full query as string with all special chars decoded.
+
+```js
+getQuery('example.com/?lorem=ipsum'); // "?lorem=ipsum"
+```
+
+
+## setParam(url, paramName, value):String
+
+Add new query string parameter to URL or update existing value.
+
+See: [`getParam()`](#getParam)
+
+```js
+setParam('?foo=bar&lorem=0', 'lorem', 'ipsum'); // '?foo=bar&lorem=ipsum'
+setParam('?lorem=1', 'foo', 123); // '?lorem=1&foo=123'
+```
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/nyks/node_modules/mout/doc/random.md b/node_modules/nyks/node_modules/mout/doc/random.md
new file mode 100644
index 0000000..0d24dc3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/random.md
@@ -0,0 +1,256 @@
+# random #
+
+Pseudo-random generators.
+
+mout uses `Math.random` by default on all the pseudo-random generators, if
+you need a seeded random or a better algorithm see the [`random()`](#random)
+documentation for instructions.
+
+
+
+## choice(...items):*
+
+Returns a random element from the supplied arguments or from an array if single
+argument is an array.
+
+### Example:
+
+```js
+choice(1, 2, 3, 4, 5); // 3
+
+var arr = ['lorem', 'ipsum', 'dolor'];
+choice(arr); // 'dolor'
+```
+
+
+
+## guid():String
+
+Generates a pseudo-random [Globally Unique Identifier](http://en.wikipedia.org/wiki/Globally_unique_identifier) (v4).
+
+Since the total number of GUIDs is 2<sup>122</sup> the chance of generating the
+same value twice is negligible.
+
+**Important:** this method uses `Math.random` by default so the UUID isn't
+*safe* (sequence of outputs can be predicted in some cases), check the
+[`random()`](#random) documentation for more info on how to replace the default
+PRNG if you need extra safety or need *seeded* results.
+
+See: [`randHex()`](#randHex), [`random()`](#random)
+
+### Example:
+
+```js
+guid();      // 830e9f50-ac7f-4369-a14f-ed0e62b2fa0b
+guid();      // 5de3d09b-e79c-4727-932b-48c49228d508
+```
+
+
+
+## rand([min], [max]):Number
+
+Gets a random number inside range or snap to min/max values.
+
+### Arguments:
+
+ 1. `[min]` (Number)         : Minimum value. Defaults to `number/MIN_INT`.
+ 2. `[max]` (Number)         : Maximum value. Defaults to `number/MAX_INT`.
+
+
+### Example:
+
+```js
+rand();      // 448740433.55274725
+rand();      // -31797596.097682
+rand(0, 10); // 7.369723
+rand(0, 10); // 5.987042
+```
+
+See: [`random()`](#random)
+
+
+
+## randBit():Number
+
+Returns a random "bit" (0 or 1). Useful for addition/subtraction.
+
+It's slightly faster than `choice(0, 1)` since implementation is simpler (not
+that it will make a huge difference in most cases).
+
+See: [`choice()`](#choice)
+
+### Example:
+
+```js
+randBit(); // 1
+randBit(); // 0
+
+//same effect as
+choice(0, 1);
+```
+
+
+## randBool():Boolean
+
+Returns a random Boolean (`true` or `false`).
+
+Since this is very common it makes sense to abstract it into a discrete method.
+
+### Example:
+
+```js
+randBool(); // true
+randBool(); // false
+```
+
+
+
+## randHex([size]):String
+
+Returns a random hexadecimal string.
+
+The default `size` is `6`.
+
+### Example:
+
+```js
+randHex();   // "dd8575"
+randHex();   // "e6baeb"
+randHex(2);  // "a2"
+randHex(30); // "effd7e2ad9a4a3067e30525fab983a"
+```
+
+
+
+## randInt([min], [max]):Number
+
+Gets a random integer inside range or snap to min/max values.
+
+### Arguments:
+
+ 1. `[min]` (Number)         : Minimum value. Defaults to `number/MIN_INT`.
+ 2. `[max]` (Number)         : Maximum value. Defaults to `number/MAX_INT`.
+
+
+### Example:
+
+```js
+randInt();      // 448740433
+randInt();      // -31797596
+randInt(0, 10); // 7
+randInt(0, 10); // 5
+```
+
+
+
+## randSign():Number
+
+Returns a random "sign" (-1 or 1). Useful for multiplications.
+
+It's slightly faster than `choice(-1, 1)` since implementation is simpler (not
+that it will make a huge difference in most cases).
+
+See: [`choice()`](#choice)
+
+### Example:
+
+```js
+randSign(); // -1
+randSign(); // 1
+
+//same effect as
+choice(-1, 1);
+```
+
+
+
+## random():Number
+
+Returns a random number between `0` and `1`. Same as `Math.random()`.
+
+```js
+random(); // 0.35435103671625257
+random(); // 0.8768321881070733
+```
+
+**Important:** No methods inside mout should call `Math.random()`
+directly, they all use `random/random` as a proxy, that way we can
+inject/replace the pseudo-random number generator if needed (ie. in case we
+need a seeded random or a better algorithm than the native one).
+
+### Replacing the PRNG
+
+In some cases we might need better/different algorithms than the one provided
+by `Math.random` (ie. safer, seeded).
+
+Because of licensing issues, file size limitations and different needs we
+decided to **not** implement a custom PRNG and instead provide a easy way to
+override the default behavior. - [issue #99](https://github.com/millermedeiros/amd-utils/issues/99)
+
+If you are using mout with a loader that supports the [AMD map
+config](https://github.com/amdjs/amdjs-api/wiki/Common-Config), such as
+[RequireJS](http://requirejs.org/), you can use it to replace the PRNG
+(recommended approach):
+
+```js
+requirejs.config({
+    map : {
+        // all modules will load "my_custom_prng" instead of
+        // "mout/random/random"
+        '*' : {
+            'mout/random/random' : 'my_custom_prng'
+        }
+    }
+});
+```
+
+You also have the option to override `random.get` in case you are using
+mout on node.js or with a loader which doesn't support the map config:
+
+```js
+// replace the PRNG
+var n = 0;
+random.get = function(){
+    return ++n % 2? 0 : 1; // not so random :P
+};
+random(); // 0
+random(); // 1
+random(); // 0
+random(); // 1
+```
+
+See this [detailed explanation about PRNG in
+JavaScript](https://github.com/nquinlan/better-random-numbers-for-javascript-mirror)
+to understand the issues with the native `Math.random` and also for a list of
+algorithms that could be used instead.
+
+
+
+## randString([length, dictionary]):String
+
+Returns a random string.
+
+By default returns string containing alphanumeric characters (lowercase and uppercase) with a length of 8.
+
+### Arguments:
+
+ 1. `[length]`      (number)       : Length of the string to return. Defaults to 8.
+ 2. `[dictionary]`  (string)       : A string containing all characters used as a dictionary for the random string construction. Defaults to alphanumeric characters (lowercase and uppercase).
+
+### Example:
+
+```js
+randString();             // returns a string with length 8.
+randString(12);           // returns a string of length 12.
+randString(-1);           // returns a string of length 8.
+randString(null, 'pew!'); // returns a random string of length 8 composed of 'p', 'e', 'w' and '!'.
+randString(10, '0');      // always returns '0's of length 10.
+randString(rand(8, 10));  // returns a random string with length between 8 and 10.
+```
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
diff --git a/node_modules/nyks/node_modules/mout/doc/string.md b/node_modules/nyks/node_modules/mout/doc/string.md
new file mode 100644
index 0000000..70a36fc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/string.md
@@ -0,0 +1,626 @@
+# string #
+
+String utilities.
+
+
+## camelCase(str):String
+
+Convert string to "camelCase" text.
+
+See: [`pascalCase()`](#pascalCase), [`unCamelCase()`](#unCamelCase)
+
+### Example
+
+```js
+camelCase('lorem-ipsum-dolor'); // "loremIpsumDolor"
+camelCase('lorem ipsum dolor'); // "loremIpsumDolor"
+```
+
+
+
+## contains(str, substring, [fromIndex]):Boolean
+
+Checks if string contains the given substring.
+
+See: [`startsWith()`](#startsWith), [`endsWith()`](#endsWith)
+
+### Example
+
+```js
+contains('lorem', 'or');  // true
+contains('lorem', 'bar'); // false
+```
+
+
+
+## crop(str, maxChars, [append]):String
+
+Truncate string at full words. Alias to `truncate(str, maxChars, append, true);`.
+
+See: [`truncate()`](#truncate)
+
+### Example
+
+```js
+crop('lorem ipsum dolor', 10);      // "lorem..."
+crop('lorem ipsum dolor', 10, '+'); // "lorem+"
+```
+
+
+
+## endsWith(str, suffix):Boolean
+
+Checks if string ends with specified suffix.
+
+See: [`startsWith()`](#startsWith), [`contains()`](#contains)
+
+### Example
+
+```js
+endsWith('lorem ipsum', 'lorem'); // false
+endsWith('lorem ipsum', 'ipsum'); // true
+```
+
+
+
+## escapeHtml(str):String
+
+Escapes the following special characters for use in HTML:
+
+* `&` becomes `&amp;`
+* `<` becomes `&lt;`
+* `>` becomes `&gt;`
+* `'` becomes `&#39;`
+* `"` becomes `&quot;`
+
+No other characters are escaped. To HTML-escape other characters as well, use a third-party library like [_he_](http://mths.be/he).
+
+See: [`unescapeHtml()`](#unescapeHtml)
+
+### Example
+
+```js
+escapeHtml('lorem & "ipsum"'); // "lorem &amp;amp; &amp;quot;ipsum&amp;quot;"
+```
+
+
+
+## escapeRegExp(str):String
+
+Escape special chars to be used as literals in RegExp constructors.
+
+### Example
+
+```js
+str = escapeRegExp('[lorem.ipsum]'); // "\\[lorem\\.ipsum\\]"
+reg = new RegExp(str);               // /\[lorem\.ipsum\]/
+```
+
+
+
+## escapeUnicode(str[, shouldEscapePrintable]):String
+
+Unicode escape chars.
+
+It will only escape non-printable ASCII chars unless `shouldEscapePrintable` is
+set to `true`.
+
+See: [`unescapeUnicode()`](#unescapeUnicode)
+
+```js
+escapeUnicode('føo bår');
+// > "f\u00f8o b\u00e5r"
+escapeUnicode('føo bår', true);
+// > "\u0066\u00f8\u006f\u0020\u0062\u00e5\u0072"
+```
+
+
+
+## hyphenate(str):String
+
+Replaces spaces with hyphens, split camelCase text, remove non-word chars,
+remove accents and convert to lower case.
+
+See: [`slugify()`](#slugify), [`underscore()`](#underscore),
+[`unhyphenate`](#unhyphenate)
+
+```js
+hyphenate(' %# lorem ipsum  ? $  dolor'); // "lorem-ipsum-dolor"
+hyphenate('spéçïãl çhârs');               // "special-chars"
+hyphenate('loremIpsum');                  // "lorem-ipsum"
+```
+
+
+
+## insert(str, index, partial):String
+
+Inserts a `partial` before the given `index` in the provided `str`.
+If the index is larger than the length of the string the partial is appended at the end.
+A negative index is treated as `length - index` where `length` is the length or the string.
+
+```js
+insert('this is a sentence', 10, 'sample '); // "this is a sample sentence"
+insert('foo', 100, 'bar'); // "foobar"
+insert('image.png', -4, '-large'); // "image-large.png"
+```
+
+## interpolate(str, replacements[, syntax]):String
+
+String interpolation. Format/replace tokens with object properties.
+
+```js
+var tmpl = 'Hello {{name}}!';
+interpolate(tmpl, {name: 'World'});       // "Hello World!"
+interpolate(tmpl, {name: 'Lorem Ipsum'}); // "Hello Lorem Ipsum!"
+
+tmpl = 'Hello {{name.first}}!';
+interpolate(tmpl, {name: {first: 'Lorem'}}); // "Hello Lorem!"
+```
+
+It uses a mustache-like syntax by default but you can set your own format if
+needed. You can also use Arrays for the replacements (since Arrays are
+objects as well):
+
+```js
+// matches everything inside "${}"
+var syntax = /\$\{([^}]+)\}/g;
+var tmpl = "Hello ${0}!";
+interpolate(tmpl, ['Foo Bar'], syntax); // "Hello Foo Bar!"
+```
+
+
+
+## lowerCase(str):String
+
+"Safer" `String.toLowerCase()`. (Used internally)
+
+### Example
+
+```js
+(null).toLowerCase();      // Error!
+(undefined).toLowerCase(); // Error!
+lowerCase(null);           // ""
+lowerCase(undefined);      // ""
+```
+
+
+
+## lpad(str, minLength[, char]):String
+
+Pad string from left with `char` if its' length is smaller than `minLen`.
+
+See: [`rpad()`](#rpad)
+
+### Example
+
+```js
+lpad('a', 5);        // "    a"
+lpad('a', 5, '-');   // "----a"
+lpad('abc', 3, '-'); // "abc"
+lpad('abc', 4, '-'); // "-abc"
+```
+
+
+
+## ltrim(str, [chars]):String
+
+Remove chars or white-spaces from beginning of string.
+
+`chars` is an array of chars to remove from the beginning of the string. If
+`chars` is not specified, Unicode whitespace chars will be used instead.
+
+See: [`rtrim()`](#rtrim), [`trim()`](#trim)
+
+### Example
+
+```js
+ltrim('   lorem ipsum   ');      // "lorem ipsum   "
+ltrim('--lorem ipsum--', ['-']); // "lorem ipsum--"
+```
+
+
+
+## makePath(...args):String
+
+Group arguments as path segments, if any of the args is `null` or `undefined`
+it will be ignored from resulting path. It will also remove duplicate "/".
+
+See: [`array/join()`](array.html#join)
+
+### Example
+
+```js
+makePath('lorem', 'ipsum', null, 'dolor'); // "lorem/ipsum/dolor"
+makePath('foo///bar/');                    // "foo/bar/"
+```
+
+
+
+## normalizeLineBreaks(str, [lineBreak]):String
+
+Normalize line breaks to a single format. Defaults to Unix `\n`.
+
+It handles DOS (`\r\n`), Mac (`\r`) and Unix (`\n`) formats.
+
+### Example
+
+```js
+// "foo\nbar\nlorem\nipsum"
+normalizeLineBreaks('foo\nbar\r\nlorem\ripsum');
+
+// "foo\rbar\rlorem\ripsum"
+normalizeLineBreaks('foo\nbar\r\nlorem\ripsum', '\r');
+
+// "foo bar lorem ipsum"
+normalizeLineBreaks('foo\nbar\r\nlorem\ripsum', ' ');
+```
+
+
+
+## pascalCase(str):String
+
+Convert string to "PascalCase" text.
+
+See: [`camelCase()`](#camelCase)
+
+### Example
+
+```js
+pascalCase('lorem-ipsum-dolor'); // "LoremIpsumDolor"
+pascalCase('lorem ipsum dolor'); // "LoremIpsumDolor"
+```
+
+
+
+## properCase(str):String
+
+UPPERCASE first char of each word, lowercase other chars.
+
+### Example
+
+```js
+properCase('loRem iPSum'); // "Lorem Ipsum"
+```
+
+
+
+## removeNonASCII(str):String
+
+Remove [non-printable ASCII
+chars](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).
+
+### Example
+
+```js
+removeNonASCII('äÄçÇéÉêlorem-ipsumöÖÐþúÚ'); // "lorem-ipsum"
+```
+
+
+
+## removeNonWord(str):String
+
+Remove non-word chars.
+
+### Example
+
+```js
+var str = 'lorem ~!@#$%^&*()_+`-={}[]|\\:";\'/?><., ipsum';
+removeNonWord(str); // "lorem - ipsum"
+```
+
+
+
+## repeat(str, n):String
+
+Repeat string n-times.
+
+### Example
+
+```js
+repeat('a', 3);  // "aaa"
+repeat('bc', 2); // "bcbc"
+repeat('a', 0);  // ""
+```
+
+
+
+## replace(str, search, replacements):String
+
+Replace string(s) with the replacement(s) in the source.
+
+`search` and `replacements` can be an array, or a single item. For every item
+in `search`, it will call `str.replace` with the search item and the matching
+replacement in `replacements`. If `replacements` only contains one replacement,
+it will be used for all the searches, otherwise it will use the replacement at
+the same index as the search.
+
+### Example
+
+```js
+replace('foo bar', 'foo', 'test');                // "test bar"
+replace('test 1 2', ['1', '2'], 'n');             // "test n n"
+replace('test 1 2', ['1', '2'], ['one', 'two']);  // "test one two"
+replace('123abc', [/\d/g, /[a-z]/g], ['0', '.']); // "000..."
+```
+
+
+
+## replaceAccents(str):String
+
+Replaces all accented chars with regular ones.
+
+**Important:** Only covers **Basic Latin** and **Latin-1** unicode chars.
+
+### Example
+
+```js
+replaceAccents('spéçïãl çhârs'); // "special chars"
+```
+
+
+
+## rpad(str, minLength[, char]):String
+
+Pad string from right with `char` if its' length is smaller than `minLen`.
+
+See: [`lpad()`](#lpad)
+
+### Example
+
+```js
+rpad('a', 5);        // "a    "
+rpad('a', 5, '-');   // "a----"
+rpad('abc', 3, '-'); // "abc"
+rpad('abc', 4, '-'); // "abc-"
+```
+
+
+
+## rtrim(str, [chars]):String
+
+Remove chars or white-spaces from end of string.
+
+`chars` is an array of chars to remove from the end of the string. If
+`chars` is not specified, Unicode whitespace chars will be used instead.
+
+See: [`trim()`](#trim), [`ltrim()`](#ltrim)
+
+### Example
+
+```js
+rtrim('   lorem ipsum   ');      // "   lorem ipsum"
+rtrim('--lorem ipsum--', ['-']); // "--lorem ipsum"
+```
+
+
+
+## sentenceCase(str):String
+
+UPPERCASE first char of each sentence and lowercase other chars.
+
+### Example
+
+```js
+var str = 'Lorem IpSum DoLOr. maeCeNnas Ullamcor.';
+sentenceCase(str); // "Lorem ipsum dolor. Maecennas ullamcor."
+```
+
+
+
+## stripHtmlTags(str):String
+
+Remove HTML/XML tags from string.
+
+### Example
+
+```js
+var str = '<p><em>lorem</em> <strong>ipsum</strong></p>';
+stripHtmlTags(str); // "lorem ipsum"
+```
+
+
+
+## startsWith(str, prefix):Boolean
+
+Checks if string starts with specified prefix.
+
+See: [`endsWith()`](#endsWith), [`contains()`](#contains)
+
+### Example
+
+```js
+startsWith('lorem ipsum', 'lorem'); // true
+startsWith('lorem ipsum', 'ipsum'); // false
+```
+
+
+
+## slugify(str[, delimeter]):String
+
+Convert to lower case, remove accents, remove non-word chars and replace spaces
+with the delimeter. The default delimeter is a hyphen.
+
+Note that this does not split camelCase text.
+
+See: [`hyphenate()`](#hyphenate) and [`underscore()`](#underscore)
+
+### Example
+
+```js
+var str = 'loremIpsum dolor spéçïãl chârs';
+slugify(str); // "loremipsum-dolor-special-chars"
+slugify(str, '_'); // "loremipsum_dolor_special_chars"
+```
+
+
+
+## trim(str, [chars]):String
+
+Remove chars or white-spaces from beginning and end of string.
+
+`chars` is an array of chars to remove from the beginning and end of the
+string. If `chars` is not specified, Unicode whitespace chars will be used
+instead.
+
+See: [`rtrim()`](#rtrim), [`ltrim()`](#ltrim)
+
+### Example
+
+```js
+trim('   lorem ipsum   ');             // "lorem ipsum"
+trim('-+-lorem ipsum-+-', ['-', '+']); // "lorem ipsum"
+```
+
+
+
+## truncate(str, maxChars, [append], [onlyFullWords]):String
+
+Limit number of chars. Returned string `length` will be `<= maxChars`.
+
+See: [`crop()`](#crop)
+
+### Arguments
+
+ 1. `str` (String) : String
+ 2. `maxChars` (Number) : Maximum number of characters including `append.length`.
+ 3. `[append]` (String) : Value that should be added to the end of string.
+    Defaults to "...".
+ 4. `[onlyFullWords]` (Boolean) : If it shouldn't break words. Default is
+    `false`. (favor [`crop()`](#crop) since code will be clearer).
+
+### Example
+
+```js
+truncate('lorem ipsum dolor', 11);             // "lorem ip..."
+truncate('lorem ipsum dolor', 11, '+');        // "lorem ipsu+"
+truncate('lorem ipsum dolor', 11, null, true); // "lorem..."
+```
+
+
+
+## typecast(str):*
+
+Parses string and convert it into a native value.
+
+### Example
+
+```js
+typecast('lorem ipsum'); // "lorem ipsum"
+typecast('123');         // 123
+typecast('123.45');      // 123.45
+typecast('false');       // false
+typecast('true');        // true
+typecast('null');        // null
+typecast('undefined');   // undefined
+```
+
+
+
+## unCamelCase(str, [delimiter]):String
+
+Add the delimiter between camelCase text and convert first char of each word to
+lower case.
+
+The delimiter defaults to a space character.
+
+See: [`camelCase()`][#camelCase]
+
+### Example
+
+```js
+unCamelCase('loremIpsumDolor'); // "lorem ipsum dolor"
+unCamelCase('loremIpsumDolor', '-'); // "lorem-ipsum-color"
+```
+
+
+## underscore(str):String
+
+Replaces spaces with underscores, split camelCase text, remove non-word chars,
+remove accents and convert to lower case.
+
+See: [`slugify()`](#slugify), [`hyphenate()`](#hyphenate)
+
+```js
+underscore(' %# lorem ipsum  ? $  dolor'); // "lorem_ipsum_dolor"
+underscore('spéçïãl çhârs');               // "special_chars"
+underscore('loremIpsum');                  // "lorem_ipsum"
+```
+
+
+
+## unescapeHtml(str):String
+
+Unescapes the following HTML character references back into the raw symbol they map to: 
+
+* `&amp;` becomes `&`
+* `&lt;` becomes `<`
+* `&gt;` becomes `>`
+* `&#39;` becomes `'`
+* `&quot;` becomes `"`
+
+No other HTML character references are unescaped. To HTML-unescape other entities as well, use a third-party library like [_he_](http://mths.be/he).
+
+
+See: [`escapeHtml()`](#escapeHtml)
+
+### Example
+
+```js
+unescapeHtml('lorem &amp;amp; &amp;quot;ipsum&amp;quot;'); // 'lorem & "ipsum"'
+```
+
+
+
+## unescapeUnicode(str):String
+
+Unescapes unicode char sequences.
+
+See: [`escapeUnicode()`](#escapeUnicode)
+
+```js
+unescapeUnicode('\\u0066\\u00f8\\u006f\\u0020\\u0062\\u00e5\\u0072');
+// > 'føo bår'
+```
+
+
+
+## unhyphenate(str):String
+
+Replaces hyphens with spaces. (only hyphens between word chars)
+
+See : [`hyphenate()`](#hyphenate)
+
+### Example
+
+```js
+unhyphenate('lorem-ipsum-dolor'); // "lorem ipsum dolor"
+```
+
+
+## upperCase(str):String
+
+"Safer" `String.toUpperCase()`. (Used internally)
+
+### Example
+
+```js
+(null).toUpperCase();      // Error!
+(undefined).toUpperCase(); // Error!
+upperCase(null);           // ""
+upperCase(undefined);      // ""
+```
+
+
+
+## WHITE_SPACES:Array
+
+Constant array of all [Unicode white-space
+characters](http://en.wikipedia.org/wiki/Whitespace_character).
+
+
+
+-------------------------------------------------------------------------------
+
+For more usage examples check specs inside `/tests` folder. Unit tests are the
+best documentation you can get...
+
diff --git a/node_modules/nyks/node_modules/mout/doc/time.md b/node_modules/nyks/node_modules/mout/doc/time.md
new file mode 100644
index 0000000..628c2a9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/doc/time.md
@@ -0,0 +1,64 @@
+# time #
+
+Utilities for time manipulation.
+
+
+## convert(value, sourceUnit, [destinationUnit]):Number
+
+Converts time between units.
+
+Available units: `millisecond`, `second`, `minute`, `hour`, `day`, `week`.
+Abbreviations: `ms`, `s`, `m`, `h`, `d`, `w`.
+
+We do **not** support year and month as a time unit since their values are not
+fixed.
+
+The default `destinationUnit` is `ms`.
+
+```js
+convert(1, 'minute');    // 60000
+convert(2.5, 's', 'ms'); // 2500
+convert(2, 'm', 's');    // 120
+convert(500, 'ms', 's'); // 0.5
+```
+
+
+
+## now():Number
+
+Returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.
+Uses `Date.now()` if available.
+
+### Example
+
+```js
+now(); // 1335449614650
+```
+
+
+
+## parseMs(ms):Object
+
+Parse timestamp (milliseconds) into an object `{milliseconds:number,
+seconds:number, minutes:number, hours:number, days:number}`.
+
+### Example
+
+```js
+// {days:27, hours:4, minutes:26, seconds:5, milliseconds:454}
+parseMs(2348765454);
+```
+
+
+
+## toTimeString(ms):String
+
+Convert timestamp (milliseconds) into a time string in the format "[H:]MM:SS".
+
+### Example
+
+```js
+toTimeString(12513);   // "00:12"
+toTimeString(951233);  // "15:51"
+toTimeString(8765235); // "2:26:05"
+```
diff --git a/node_modules/nyks/node_modules/mout/function.js b/node_modules/nyks/node_modules/mout/function.js
new file mode 100644
index 0000000..1065230
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function.js
@@ -0,0 +1,25 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'after' : require('./function/after'),
+    'awaitDelay' : require('./function/awaitDelay'),
+    'bind' : require('./function/bind'),
+    'compose' : require('./function/compose'),
+    'constant' : require('./function/constant'),
+    'debounce' : require('./function/debounce'),
+    'func' : require('./function/func'),
+    'identity' : require('./function/identity'),
+    'makeIterator_' : require('./function/makeIterator_'),
+    'memoize' : require('./function/memoize'),
+    'partial' : require('./function/partial'),
+    'prop' : require('./function/prop'),
+    'series' : require('./function/series'),
+    'throttle' : require('./function/throttle'),
+    'timeout' : require('./function/timeout'),
+    'times' : require('./function/times'),
+    'wrap' : require('./function/wrap')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/after.js b/node_modules/nyks/node_modules/mout/function/after.js
new file mode 100644
index 0000000..828bdd6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/after.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Calls closure only after callback is called x times
+     */
+    function after(closure, times){
+        return function () {
+            if (--times <= 0) closure();
+        };
+    }
+
+    module.exports = after;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/awaitDelay.js b/node_modules/nyks/node_modules/mout/function/awaitDelay.js
new file mode 100644
index 0000000..8c9b1a3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/awaitDelay.js
@@ -0,0 +1,22 @@
+var now = require('../time/now');
+var timeout = require('./timeout');
+var append = require('../array/append');
+
+    /**
+     * Ensure a minimum delay for callbacks
+     */
+    function awaitDelay( callback, delay ){
+        var baseTime = now() + delay;
+        return function() {
+            // ensure all browsers will execute it asynchronously (avoid hard
+            // to catch errors) not using "0" because of old browsers and also
+            // since new browsers increase the value to be at least "4"
+            // http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout
+            var ms = Math.max(baseTime - now(), 4);
+            return timeout.apply(this, append([callback, ms, this], arguments));
+        };
+    }
+
+    module.exports = awaitDelay;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/bind.js b/node_modules/nyks/node_modules/mout/function/bind.js
new file mode 100644
index 0000000..c6c4719
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/bind.js
@@ -0,0 +1,19 @@
+var slice = require('../array/slice');
+
+    /**
+     * Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
+     * @param {Function} fn  Function.
+     * @param {object} context   Execution context.
+     * @param {rest} args    Arguments (0...n arguments).
+     * @return {Function} Wrapped Function.
+     */
+    function bind(fn, context, args){
+        var argsArr = slice(arguments, 2); //curried args
+        return function(){
+            return fn.apply(context, argsArr.concat(slice(arguments)));
+        };
+    }
+
+    module.exports = bind;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/compose.js b/node_modules/nyks/node_modules/mout/function/compose.js
new file mode 100644
index 0000000..8cd5c5f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/compose.js
@@ -0,0 +1,23 @@
+
+
+    /**
+     * Returns a function that composes multiple functions, passing results to
+     * each other.
+     */
+    function compose() {
+        var fns = arguments;
+        return function(arg){
+            // only cares about the first argument since the chain can only
+            // deal with a single return value anyway. It should start from
+            // the last fn.
+            var n = fns.length;
+            while (n--) {
+                arg = fns[n].call(this, arg);
+            }
+            return arg;
+         };
+     }
+
+     module.exports = compose;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/constant.js b/node_modules/nyks/node_modules/mout/function/constant.js
new file mode 100644
index 0000000..ab932d9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/constant.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a new function that will return the value
+     */
+    function constant(value){
+        return function() {
+            return value;
+        };
+    }
+
+    module.exports = constant;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/debounce.js b/node_modules/nyks/node_modules/mout/function/debounce.js
new file mode 100644
index 0000000..7f6f302
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/debounce.js
@@ -0,0 +1,32 @@
+
+
+    /**
+     * Debounce callback execution
+     */
+    function debounce(fn, threshold, isAsap){
+        var timeout, result;
+        function debounced(){
+            var args = arguments, context = this;
+            function delayed(){
+                if (! isAsap) {
+                    result = fn.apply(context, args);
+                }
+                timeout = null;
+            }
+            if (timeout) {
+                clearTimeout(timeout);
+            } else if (isAsap) {
+                result = fn.apply(context, args);
+            }
+            timeout = setTimeout(delayed, threshold);
+            return result;
+        }
+        debounced.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return debounced;
+    }
+
+    module.exports = debounce;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/func.js b/node_modules/nyks/node_modules/mout/function/func.js
new file mode 100644
index 0000000..b81bf0a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/func.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a function that call a method on the passed object
+     */
+    function func(name){
+        return function(obj){
+            return obj[name]();
+        };
+    }
+
+    module.exports = func;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/identity.js b/node_modules/nyks/node_modules/mout/function/identity.js
new file mode 100644
index 0000000..d07b01a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/identity.js
@@ -0,0 +1,12 @@
+
+
+    /**
+     * Returns the first argument provided to it.
+     */
+    function identity(val){
+        return val;
+    }
+
+    module.exports = identity;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/makeIterator_.js b/node_modules/nyks/node_modules/mout/function/makeIterator_.js
new file mode 100644
index 0000000..20cc0e7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/makeIterator_.js
@@ -0,0 +1,34 @@
+var identity = require('./identity');
+var prop = require('./prop');
+var deepMatches = require('../object/deepMatches');
+
+    /**
+     * Converts argument into a valid iterator.
+     * Used internally on most array/object/collection methods that receives a
+     * callback/iterator providing a shortcut syntax.
+     */
+    function makeIterator(src, thisObj){
+        if (src == null) {
+            return identity;
+        }
+        switch(typeof src) {
+            case 'function':
+                // function is the first to improve perf (most common case)
+                // also avoid using `Function#call` if not needed, which boosts
+                // perf a lot in some cases
+                return (typeof thisObj !== 'undefined')? function(val, i, arr){
+                    return src.call(thisObj, val, i, arr);
+                } : src;
+            case 'object':
+                return function(val){
+                    return deepMatches(val, src);
+                };
+            case 'string':
+            case 'number':
+                return prop(src);
+        }
+    }
+
+    module.exports = makeIterator;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/memoize.js b/node_modules/nyks/node_modules/mout/function/memoize.js
new file mode 100644
index 0000000..0ea4433
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/memoize.js
@@ -0,0 +1,40 @@
+var isFunction = require('../lang/isFunction');
+var hasOwn = require('../object/hasOwn');
+
+    /**
+     * Creates a function that memoizes the result of `fn`. If `resolver` is
+     * provided it determines the cache key for storing the result based on the
+     * arguments provided to the memoized function. By default, the first argument
+     * provided to the memoized function is coerced to a string and used as the
+     * cache key. The `fn` is invoked with the `this` binding of the memoized
+     * function. Modified from lodash.
+     *
+     * @param {Function} fn Function to have its output memoized.
+     * @param {Function} context Function to resolve the cache key.
+     * @return {Function} Returns the new memoized function.
+     */
+    function memoize(fn, resolver) {
+        if (!isFunction(fn) || (resolver && !isFunction(resolver))) {
+            throw new TypeError('Expected a function');
+        }
+
+        var memoized = function() {
+            var cache = memoized.cache,
+                key = resolver ? resolver.apply(this, arguments) : arguments[0];
+
+            if (hasOwn(cache, key)) {
+                return cache[key];
+            }
+            var result = fn.apply(this, arguments);
+            cache[key] = result;
+            return result;
+        };
+
+        memoized.cache = {};
+
+        return memoized;
+    }
+
+    module.exports = memoize;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/partial.js b/node_modules/nyks/node_modules/mout/function/partial.js
new file mode 100644
index 0000000..fbebb2d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/partial.js
@@ -0,0 +1,31 @@
+var indexOf = require('../array/indexOf');
+var slice = require('../array/slice');
+var take = require('../array/take');
+
+    var _ = {};
+
+    /**
+     * Creates a partially applied function.
+     */
+    function partial(f) {
+        var as = slice(arguments, 1);
+        var has_ = indexOf(as, _) !== -1;
+
+        return function() {
+            var rest = slice(arguments);
+
+            // Don't waste time checking for placeholders if there aren't any.
+            var args = has_ ? take(as.length, function(i) {
+                var a = as[i];
+                return a === _ ? rest.shift() : a;
+            }) : as;
+
+            return f.apply(this, rest.length ? args.concat(rest) : args);
+        };
+    }
+
+    partial._ = _;
+
+    module.exports = partial;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/prop.js b/node_modules/nyks/node_modules/mout/function/prop.js
new file mode 100644
index 0000000..734acb7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/prop.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * Returns a function that gets a property of the passed object
+     */
+    function prop(name){
+        return function(obj){
+            return obj[name];
+        };
+    }
+
+    module.exports = prop;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/series.js b/node_modules/nyks/node_modules/mout/function/series.js
new file mode 100644
index 0000000..25159c2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/series.js
@@ -0,0 +1,22 @@
+
+
+    /**
+     * Returns a function that will execute a list of functions in sequence
+     * passing the same arguments to each one. (useful for batch processing
+     * items during a forEach loop)
+     */
+    function series(){
+        var fns = arguments;
+        return function(){
+            var i = 0,
+                n = fns.length;
+            while (i < n) {
+                fns[i].apply(this, arguments);
+                i += 1;
+            }
+        };
+    }
+
+    module.exports = series;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/throttle.js b/node_modules/nyks/node_modules/mout/function/throttle.js
new file mode 100644
index 0000000..0a5e161
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/throttle.js
@@ -0,0 +1,33 @@
+var now = require('../time/now');
+
+    /**
+     */
+    function throttle(fn, delay){
+        var context, timeout, result, args,
+            diff, prevCall = 0;
+        function delayed(){
+            prevCall = now();
+            timeout = null;
+            result = fn.apply(context, args);
+        }
+        function throttled(){
+            context = this;
+            args = arguments;
+            diff = delay - (now() - prevCall);
+            if (diff <= 0) {
+                clearTimeout(timeout);
+                delayed();
+            } else if (! timeout) {
+                timeout = setTimeout(delayed, diff);
+            }
+            return result;
+        }
+        throttled.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return throttled;
+    }
+
+    module.exports = throttle;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/timeout.js b/node_modules/nyks/node_modules/mout/function/timeout.js
new file mode 100644
index 0000000..509dd68
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/timeout.js
@@ -0,0 +1,17 @@
+var slice = require('../array/slice');
+
+    /**
+     * Delays the call of a function within a given context.
+     */
+    function timeout(fn, millis, context){
+
+        var args = slice(arguments, 3);
+
+        return setTimeout(function() {
+            fn.apply(context, args);
+        }, millis);
+    }
+
+    module.exports = timeout;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/times.js b/node_modules/nyks/node_modules/mout/function/times.js
new file mode 100644
index 0000000..04a11c2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/times.js
@@ -0,0 +1,17 @@
+
+
+    /**
+     * Iterates over a callback a set amount of times
+     */
+    function times(n, callback, thisObj){
+        var i = -1;
+        while (++i < n) {
+            if ( callback.call(thisObj, i) === false ) {
+                break;
+            }
+        }
+    }
+
+    module.exports = times;
+
+
diff --git a/node_modules/nyks/node_modules/mout/function/wrap.js b/node_modules/nyks/node_modules/mout/function/wrap.js
new file mode 100644
index 0000000..82d77ff
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/function/wrap.js
@@ -0,0 +1,14 @@
+var partial = require('./partial');
+
+    /**
+     * Returns the first function passed as an argument to the second,
+     * allowing you to adjust arguments, run code before and after, and
+     * conditionally execute the original function.
+     */
+    function wrap(fn, wrapper){
+        return partial(wrapper, fn);
+    }
+
+    module.exports = wrap;
+
+
diff --git a/node_modules/nyks/node_modules/mout/index.js b/node_modules/nyks/node_modules/mout/index.js
new file mode 100644
index 0000000..ae262b0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/index.js
@@ -0,0 +1,25 @@
+/**@license
+ * mout v1.0.0 | http://moutjs.com | MIT license
+ */
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'VERSION' : '1.0.0',
+    'array' : require('./array'),
+    'collection' : require('./collection'),
+    'date' : require('./date'),
+    'function' : require('./function'),
+    'lang' : require('./lang'),
+    'math' : require('./math'),
+    'number' : require('./number'),
+    'object' : require('./object'),
+    'queryString' : require('./queryString'),
+    'random' : require('./random'),
+    'string' : require('./string'),
+    'time' : require('./time'),
+    'fn' : require('./function')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang.js b/node_modules/nyks/node_modules/mout/lang.js
new file mode 100644
index 0000000..150007f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang.js
@@ -0,0 +1,40 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'GLOBAL' : require('./lang/GLOBAL'),
+    'clone' : require('./lang/clone'),
+    'createObject' : require('./lang/createObject'),
+    'ctorApply' : require('./lang/ctorApply'),
+    'deepClone' : require('./lang/deepClone'),
+    'deepEquals' : require('./lang/deepEquals'),
+    'defaults' : require('./lang/defaults'),
+    'inheritPrototype' : require('./lang/inheritPrototype'),
+    'is' : require('./lang/is'),
+    'isArguments' : require('./lang/isArguments'),
+    'isArray' : require('./lang/isArray'),
+    'isBoolean' : require('./lang/isBoolean'),
+    'isDate' : require('./lang/isDate'),
+    'isEmpty' : require('./lang/isEmpty'),
+    'isFinite' : require('./lang/isFinite'),
+    'isFunction' : require('./lang/isFunction'),
+    'isInteger' : require('./lang/isInteger'),
+    'isKind' : require('./lang/isKind'),
+    'isNaN' : require('./lang/isNaN'),
+    'isNull' : require('./lang/isNull'),
+    'isNumber' : require('./lang/isNumber'),
+    'isObject' : require('./lang/isObject'),
+    'isPlainObject' : require('./lang/isPlainObject'),
+    'isPrimitive' : require('./lang/isPrimitive'),
+    'isRegExp' : require('./lang/isRegExp'),
+    'isString' : require('./lang/isString'),
+    'isUndefined' : require('./lang/isUndefined'),
+    'isnt' : require('./lang/isnt'),
+    'kindOf' : require('./lang/kindOf'),
+    'toArray' : require('./lang/toArray'),
+    'toNumber' : require('./lang/toNumber'),
+    'toString' : require('./lang/toString')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/GLOBAL.js b/node_modules/nyks/node_modules/mout/lang/GLOBAL.js
new file mode 100644
index 0000000..4d759ba
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/GLOBAL.js
@@ -0,0 +1,7 @@
+
+
+    // Reference to the global context (works on ES3 and ES5-strict mode)
+    //jshint -W061, -W064
+    module.exports = Function('return this')();
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/clone.js b/node_modules/nyks/node_modules/mout/lang/clone.js
new file mode 100644
index 0000000..e515487
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/clone.js
@@ -0,0 +1,49 @@
+var kindOf = require('./kindOf');
+var isPlainObject = require('./isPlainObject');
+var mixIn = require('../object/mixIn');
+
+    /**
+     * Clone native types.
+     */
+    function clone(val){
+        switch (kindOf(val)) {
+            case 'Object':
+                return cloneObject(val);
+            case 'Array':
+                return cloneArray(val);
+            case 'RegExp':
+                return cloneRegExp(val);
+            case 'Date':
+                return cloneDate(val);
+            default:
+                return val;
+        }
+    }
+
+    function cloneObject(source) {
+        if (isPlainObject(source)) {
+            return mixIn({}, source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneRegExp(r) {
+        var flags = '';
+        flags += r.multiline ? 'm' : '';
+        flags += r.global ? 'g' : '';
+        flags += r.ignoreCase ? 'i' : '';
+        return new RegExp(r.source, flags);
+    }
+
+    function cloneDate(date) {
+        return new Date(+date);
+    }
+
+    function cloneArray(arr) {
+        return arr.slice();
+    }
+
+    module.exports = clone;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/createObject.js b/node_modules/nyks/node_modules/mout/lang/createObject.js
new file mode 100644
index 0000000..bbc14c1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/createObject.js
@@ -0,0 +1,18 @@
+var mixIn = require('../object/mixIn');
+
+    /**
+     * Create Object using prototypal inheritance and setting custom properties.
+     * - Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.
+     * @param {object} parent    Parent Object.
+     * @param {object} [props] Object properties.
+     * @return {object} Created object.
+     */
+    function createObject(parent, props){
+        function F(){}
+        F.prototype = parent;
+        return mixIn(new F(), props);
+
+    }
+    module.exports = createObject;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/ctorApply.js b/node_modules/nyks/node_modules/mout/lang/ctorApply.js
new file mode 100644
index 0000000..077cde4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/ctorApply.js
@@ -0,0 +1,15 @@
+
+
+    var bind = Function.prototype.bind;
+
+    /**
+     * Do fn.apply on a constructor.
+     */
+    function ctorApply(ctor, args) {
+        var Bound = bind.bind(ctor, undefined).apply(undefined, args);
+        return new Bound();
+    }
+
+    module.exports = ctorApply;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/deepClone.js b/node_modules/nyks/node_modules/mout/lang/deepClone.js
new file mode 100644
index 0000000..25fd95f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/deepClone.js
@@ -0,0 +1,48 @@
+var clone = require('./clone');
+var forOwn = require('../object/forOwn');
+var kindOf = require('./kindOf');
+var isPlainObject = require('./isPlainObject');
+
+    /**
+     * Recursively clone native types.
+     */
+    function deepClone(val, instanceClone) {
+        switch ( kindOf(val) ) {
+            case 'Object':
+                return cloneObject(val, instanceClone);
+            case 'Array':
+                return cloneArray(val, instanceClone);
+            default:
+                return clone(val);
+        }
+    }
+
+    function cloneObject(source, instanceClone) {
+        if (isPlainObject(source)) {
+            var out = {};
+            forOwn(source, function(val, key) {
+                this[key] = deepClone(val, instanceClone);
+            }, out);
+            return out;
+        } else if (instanceClone) {
+            return instanceClone(source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneArray(arr, instanceClone) {
+        var out = [],
+            i = -1,
+            n = arr.length,
+            val;
+        while (++i < n) {
+            out[i] = deepClone(arr[i], instanceClone);
+        }
+        return out;
+    }
+
+    module.exports = deepClone;
+
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/deepEquals.js b/node_modules/nyks/node_modules/mout/lang/deepEquals.js
new file mode 100644
index 0000000..bf2b90d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/deepEquals.js
@@ -0,0 +1,30 @@
+var is = require('./is');
+var isObject = require('./isObject');
+var isArray = require('./isArray');
+var objEquals = require('../object/equals');
+var arrEquals = require('../array/equals');
+
+    /**
+     * Recursively checks for same properties and values.
+     */
+    function deepEquals(a, b, callback){
+        callback = callback || is;
+
+        var bothObjects = isObject(a) && isObject(b);
+        var bothArrays = !bothObjects && isArray(a) && isArray(b);
+
+        if (!bothObjects && !bothArrays) {
+            return callback(a, b);
+        }
+
+        function compare(a, b){
+            return deepEquals(a, b, callback);
+        }
+
+        var method = bothObjects ? objEquals : arrEquals;
+        return method(a, b, compare);
+    }
+
+    module.exports = deepEquals;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/defaults.js b/node_modules/nyks/node_modules/mout/lang/defaults.js
new file mode 100644
index 0000000..1111b2e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/defaults.js
@@ -0,0 +1,17 @@
+var toArray = require('./toArray');
+var find = require('../array/find');
+
+    /**
+     * Return first non void argument
+     */
+    function defaults(var_args){
+        return find(toArray(arguments), nonVoid);
+    }
+
+    function nonVoid(val){
+        return val != null;
+    }
+
+    module.exports = defaults;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/inheritPrototype.js b/node_modules/nyks/node_modules/mout/lang/inheritPrototype.js
new file mode 100644
index 0000000..1c9da1f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/inheritPrototype.js
@@ -0,0 +1,18 @@
+var createObject = require('./createObject');
+
+    /**
+    * Inherit prototype from another Object.
+    * - inspired by Nicholas Zackas <http://nczonline.net> Solution
+    * @param {object} child Child object
+    * @param {object} parent    Parent Object
+    */
+    function inheritPrototype(child, parent){
+        var p = createObject(parent.prototype);
+        p.constructor = child;
+        child.prototype = p;
+        child.super_ = parent;
+        return p;
+    }
+
+    module.exports = inheritPrototype;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/is.js b/node_modules/nyks/node_modules/mout/lang/is.js
new file mode 100644
index 0000000..4a83573
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/is.js
@@ -0,0 +1,23 @@
+
+
+    /**
+     * Check if both arguments are egal.
+     */
+    function is(x, y){
+        // implementation borrowed from harmony:egal spec
+        if (x === y) {
+          // 0 === -0, but they are not identical
+          return x !== 0 || 1 / x === 1 / y;
+        }
+
+        // NaN !== NaN, but they are identical.
+        // NaNs are the only non-reflexive value, i.e., if x !== x,
+        // then x is a NaN.
+        // isNaN is broken: it converts its argument to number, so
+        // isNaN("foo") => true
+        return x !== x && y !== y;
+    }
+
+    module.exports = is;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isArguments.js b/node_modules/nyks/node_modules/mout/lang/isArguments.js
new file mode 100644
index 0000000..f7b08ba
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isArguments.js
@@ -0,0 +1,15 @@
+var isKind = require('./isKind');
+
+    /**
+     */
+    var isArgs = isKind(arguments, 'Arguments')?
+            function(val){
+                return isKind(val, 'Arguments');
+            } :
+            function(val){
+                // Arguments is an Object on IE7
+                return !!(val && Object.prototype.hasOwnProperty.call(val, 'callee'));
+            };
+
+    module.exports = isArgs;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isArray.js b/node_modules/nyks/node_modules/mout/lang/isArray.js
new file mode 100644
index 0000000..262ee40
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isArray.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    var isArray = Array.isArray || function (val) {
+        return isKind(val, 'Array');
+    };
+    module.exports = isArray;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isBoolean.js b/node_modules/nyks/node_modules/mout/lang/isBoolean.js
new file mode 100644
index 0000000..86557cb
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isBoolean.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isBoolean(val) {
+        return isKind(val, 'Boolean');
+    }
+    module.exports = isBoolean;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isDate.js b/node_modules/nyks/node_modules/mout/lang/isDate.js
new file mode 100644
index 0000000..4a5130f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isDate.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isDate(val) {
+        return isKind(val, 'Date');
+    }
+    module.exports = isDate;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isEmpty.js b/node_modules/nyks/node_modules/mout/lang/isEmpty.js
new file mode 100644
index 0000000..c7854c6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isEmpty.js
@@ -0,0 +1,24 @@
+var forOwn = require('../object/forOwn');
+var isArray = require('./isArray');
+
+    function isEmpty(val){
+        if (val == null) {
+            // typeof null == 'object' so we check it first
+            return true;
+        } else if ( typeof val === 'string' || isArray(val) ) {
+            return !val.length;
+        } else if ( typeof val === 'object' ) {
+            var result = true;
+            forOwn(val, function(){
+                result = false;
+                return false; // break loop
+            });
+            return result;
+        } else {
+            return true;
+        }
+    }
+
+    module.exports = isEmpty;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isFinite.js b/node_modules/nyks/node_modules/mout/lang/isFinite.js
new file mode 100644
index 0000000..812e317
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isFinite.js
@@ -0,0 +1,20 @@
+var isNumber = require('./isNumber');
+var GLOBAL = require('./GLOBAL');
+
+    /**
+     * Check if value is finite
+     */
+    function isFinite(val){
+        var is = false;
+        if (typeof val === 'string' && val !== '') {
+            is = GLOBAL.isFinite( parseFloat(val) );
+        } else if (isNumber(val)){
+            // need to use isNumber because of Number constructor
+            is = GLOBAL.isFinite( val );
+        }
+        return is;
+    }
+
+    module.exports = isFinite;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isFunction.js b/node_modules/nyks/node_modules/mout/lang/isFunction.js
new file mode 100644
index 0000000..216879f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isFunction.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isFunction(val) {
+        return isKind(val, 'Function');
+    }
+    module.exports = isFunction;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isInteger.js b/node_modules/nyks/node_modules/mout/lang/isInteger.js
new file mode 100644
index 0000000..29f95d9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isInteger.js
@@ -0,0 +1,12 @@
+var isNumber = require('./isNumber');
+
+    /**
+     * Check if value is an integer
+     */
+    function isInteger(val){
+        return isNumber(val) && (val % 1 === 0);
+    }
+
+    module.exports = isInteger;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isKind.js b/node_modules/nyks/node_modules/mout/lang/isKind.js
new file mode 100644
index 0000000..02301e0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isKind.js
@@ -0,0 +1,9 @@
+var kindOf = require('./kindOf');
+    /**
+     * Check if value is from a specific "kind".
+     */
+    function isKind(val, kind){
+        return kindOf(val) === kind;
+    }
+    module.exports = isKind;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isNaN.js b/node_modules/nyks/node_modules/mout/lang/isNaN.js
new file mode 100644
index 0000000..b1018ec
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isNaN.js
@@ -0,0 +1,16 @@
+var isNumber = require('./isNumber');
+var $isNaN = require('../number/isNaN');
+
+    /**
+     * Check if value is NaN for realz
+     */
+    function isNaN(val){
+        // based on the fact that NaN !== NaN
+        // need to check if it's a number to avoid conflicts with host objects
+        // also need to coerce ToNumber to avoid edge case `new Number(NaN)`
+        return !isNumber(val) || $isNaN(Number(val));
+    }
+
+    module.exports = isNaN;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isNull.js b/node_modules/nyks/node_modules/mout/lang/isNull.js
new file mode 100644
index 0000000..6252f9e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isNull.js
@@ -0,0 +1,9 @@
+
+    /**
+     */
+    function isNull(val){
+        return val === null;
+    }
+    module.exports = isNull;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isNumber.js b/node_modules/nyks/node_modules/mout/lang/isNumber.js
new file mode 100644
index 0000000..126c1cc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isNumber.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isNumber(val) {
+        return isKind(val, 'Number');
+    }
+    module.exports = isNumber;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isObject.js b/node_modules/nyks/node_modules/mout/lang/isObject.js
new file mode 100644
index 0000000..7350c89
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isObject.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isObject(val) {
+        return isKind(val, 'Object');
+    }
+    module.exports = isObject;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isPlainObject.js b/node_modules/nyks/node_modules/mout/lang/isPlainObject.js
new file mode 100644
index 0000000..b81342e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isPlainObject.js
@@ -0,0 +1,13 @@
+
+
+    /**
+     * Checks if the value is created by the `Object` constructor.
+     */
+    function isPlainObject(value) {
+        return (!!value && typeof value === 'object' &&
+            value.constructor === Object);
+    }
+
+    module.exports = isPlainObject;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isPrimitive.js b/node_modules/nyks/node_modules/mout/lang/isPrimitive.js
new file mode 100644
index 0000000..e255475
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isPrimitive.js
@@ -0,0 +1,21 @@
+
+
+    /**
+     * Checks if the object is a primitive
+     */
+    function isPrimitive(value) {
+        // Using switch fallthrough because it's simple to read and is
+        // generally fast: http://jsperf.com/testing-value-is-primitive/5
+        switch (typeof value) {
+            case "string":
+            case "number":
+            case "boolean":
+                return true;
+        }
+
+        return value == null;
+    }
+
+    module.exports = isPrimitive;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isRegExp.js b/node_modules/nyks/node_modules/mout/lang/isRegExp.js
new file mode 100644
index 0000000..fc5459a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isRegExp.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isRegExp(val) {
+        return isKind(val, 'RegExp');
+    }
+    module.exports = isRegExp;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isString.js b/node_modules/nyks/node_modules/mout/lang/isString.js
new file mode 100644
index 0000000..f890658
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isString.js
@@ -0,0 +1,8 @@
+var isKind = require('./isKind');
+    /**
+     */
+    function isString(val) {
+        return isKind(val, 'String');
+    }
+    module.exports = isString;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isUndefined.js b/node_modules/nyks/node_modules/mout/lang/isUndefined.js
new file mode 100644
index 0000000..fb2261d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isUndefined.js
@@ -0,0 +1,10 @@
+
+    var UNDEF;
+
+    /**
+     */
+    function isUndef(val){
+        return val === UNDEF;
+    }
+    module.exports = isUndef;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/isnt.js b/node_modules/nyks/node_modules/mout/lang/isnt.js
new file mode 100644
index 0000000..9dad58c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/isnt.js
@@ -0,0 +1,12 @@
+var is = require('./is');
+
+    /**
+     * Check if both values are not identical/egal
+     */
+    function isnt(x, y){
+        return !is(x, y);
+    }
+
+    module.exports = isnt;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/kindOf.js b/node_modules/nyks/node_modules/mout/lang/kindOf.js
new file mode 100644
index 0000000..c3d43ba
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/kindOf.js
@@ -0,0 +1,9 @@
+
+    /**
+     * Gets the "kind" of value. (e.g. "String", "Number", etc)
+     */
+    function kindOf(val) {
+        return Object.prototype.toString.call(val).slice(8, -1);
+    }
+    module.exports = kindOf;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/toArray.js b/node_modules/nyks/node_modules/mout/lang/toArray.js
new file mode 100644
index 0000000..1f3a2b6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/toArray.js
@@ -0,0 +1,30 @@
+var kindOf = require('./kindOf');
+var GLOBAL = require('./GLOBAL');
+
+    /**
+     * Convert array-like object into array
+     */
+    function toArray(val){
+        var ret = [],
+            kind = kindOf(val),
+            n;
+
+        if (val != null) {
+            if ( val.length == null || kind === 'String' || kind === 'Function' || kind === 'RegExp' || val === GLOBAL ) {
+                //string, regexp, function have .length but user probably just want
+                //to wrap value into an array..
+                ret[ret.length] = val;
+            } else {
+                //window returns true on isObject in IE7 and may have length
+                //property. `typeof NodeList` returns `function` on Safari so
+                //we can't use it (#58)
+                n = val.length;
+                while (n--) {
+                    ret[n] = val[n];
+                }
+            }
+        }
+        return ret;
+    }
+    module.exports = toArray;
+
diff --git a/node_modules/nyks/node_modules/mout/lang/toNumber.js b/node_modules/nyks/node_modules/mout/lang/toNumber.js
new file mode 100644
index 0000000..8b6df34
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/toNumber.js
@@ -0,0 +1,20 @@
+var isArray = require('./isArray');
+
+    /**
+     * covert value into number if numeric
+     */
+    function toNumber(val){
+        // numberic values should come first because of -0
+        if (typeof val === 'number') return val;
+        // we want all falsy values (besides -0) to return zero to avoid
+        // headaches
+        if (!val) return 0;
+        if (typeof val === 'string') return parseFloat(val);
+        // arrays are edge cases. `Number([4]) === 4`
+        if (isArray(val)) return NaN;
+        return Number(val);
+    }
+
+    module.exports = toNumber;
+
+
diff --git a/node_modules/nyks/node_modules/mout/lang/toString.js b/node_modules/nyks/node_modules/mout/lang/toString.js
new file mode 100644
index 0000000..ae5c2b0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/lang/toString.js
@@ -0,0 +1,13 @@
+
+
+    /**
+     * Typecast a value to a String, using an empty string value for null or
+     * undefined.
+     */
+    function toString(val){
+        return val == null ? '' : val.toString();
+    }
+
+    module.exports = toString;
+
+
diff --git a/node_modules/nyks/node_modules/mout/math.js b/node_modules/nyks/node_modules/mout/math.js
new file mode 100644
index 0000000..bd3ec5a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math.js
@@ -0,0 +1,20 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'ceil' : require('./math/ceil'),
+    'clamp' : require('./math/clamp'),
+    'countSteps' : require('./math/countSteps'),
+    'floor' : require('./math/floor'),
+    'inRange' : require('./math/inRange'),
+    'isNear' : require('./math/isNear'),
+    'lerp' : require('./math/lerp'),
+    'loop' : require('./math/loop'),
+    'map' : require('./math/map'),
+    'norm' : require('./math/norm'),
+    'overflow' : require('./math/overflow'),
+    'round' : require('./math/round')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/math/ceil.js b/node_modules/nyks/node_modules/mout/math/ceil.js
new file mode 100644
index 0000000..a279e15
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/ceil.js
@@ -0,0 +1,11 @@
+
+    /**
+     * Round value up with a custom radix.
+     */
+    function ceil(val, step){
+        step = Math.abs(step || 1);
+        return Math.ceil(val / step) * step;
+    }
+
+    module.exports = ceil;
+
diff --git a/node_modules/nyks/node_modules/mout/math/clamp.js b/node_modules/nyks/node_modules/mout/math/clamp.js
new file mode 100644
index 0000000..e929a9a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/clamp.js
@@ -0,0 +1,9 @@
+
+    /**
+     * Clamps value inside range.
+     */
+    function clamp(val, min, max){
+        return val < min? min : (val > max? max : val);
+    }
+    module.exports = clamp;
+
diff --git a/node_modules/nyks/node_modules/mout/math/countSteps.js b/node_modules/nyks/node_modules/mout/math/countSteps.js
new file mode 100644
index 0000000..60ac90c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/countSteps.js
@@ -0,0 +1,16 @@
+
+    /**
+    * Count number of full steps.
+    */
+    function countSteps(val, step, overflow){
+        val = Math.floor(val / step);
+
+        if (overflow) {
+            return val % overflow;
+        }
+
+        return val;
+    }
+
+    module.exports = countSteps;
+
diff --git a/node_modules/nyks/node_modules/mout/math/floor.js b/node_modules/nyks/node_modules/mout/math/floor.js
new file mode 100644
index 0000000..9de5053
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/floor.js
@@ -0,0 +1,10 @@
+
+    /**
+    * Floor value to full steps.
+    */
+    function floor(val, step){
+        step = Math.abs(step || 1);
+        return Math.floor(val / step) * step;
+    }
+    module.exports = floor;
+
diff --git a/node_modules/nyks/node_modules/mout/math/inRange.js b/node_modules/nyks/node_modules/mout/math/inRange.js
new file mode 100644
index 0000000..763218f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/inRange.js
@@ -0,0 +1,11 @@
+
+    /**
+    * Checks if value is inside the range.
+    */
+    function inRange(val, min, max, threshold){
+        threshold = threshold || 0;
+        return (val + threshold >= min && val - threshold <= max);
+    }
+
+    module.exports = inRange;
+
diff --git a/node_modules/nyks/node_modules/mout/math/isNear.js b/node_modules/nyks/node_modules/mout/math/isNear.js
new file mode 100644
index 0000000..45486b6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/isNear.js
@@ -0,0 +1,9 @@
+
+    /**
+    * Check if value is close to target.
+    */
+    function isNear(val, target, threshold){
+        return (Math.abs(val - target) <= threshold);
+    }
+    module.exports = isNear;
+
diff --git a/node_modules/nyks/node_modules/mout/math/lerp.js b/node_modules/nyks/node_modules/mout/math/lerp.js
new file mode 100644
index 0000000..111e271
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/lerp.js
@@ -0,0 +1,11 @@
+
+    /**
+    * Linear interpolation.
+    * IMPORTANT:will return `Infinity` if numbers overflow Number.MAX_VALUE
+    */
+    function lerp(ratio, start, end){
+        return start + (end - start) * ratio;
+    }
+
+    module.exports = lerp;
+
diff --git a/node_modules/nyks/node_modules/mout/math/loop.js b/node_modules/nyks/node_modules/mout/math/loop.js
new file mode 100644
index 0000000..35207c1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/loop.js
@@ -0,0 +1,10 @@
+
+    /**
+    * Loops value inside range.
+    */
+    function loop(val, min, max){
+        return val < min? max : (val > max? min : val);
+    }
+
+    module.exports = loop;
+
diff --git a/node_modules/nyks/node_modules/mout/math/map.js b/node_modules/nyks/node_modules/mout/math/map.js
new file mode 100644
index 0000000..96c4b78
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/map.js
@@ -0,0 +1,11 @@
+var lerp = require('./lerp');
+var norm = require('./norm');
+    /**
+    * Maps a number from one scale to another.
+    * @example map(3, 0, 4, -1, 1) -> 0.5
+    */
+    function map(val, min1, max1, min2, max2){
+        return lerp( norm(val, min1, max1), min2, max2 );
+    }
+    module.exports = map;
+
diff --git a/node_modules/nyks/node_modules/mout/math/norm.js b/node_modules/nyks/node_modules/mout/math/norm.js
new file mode 100644
index 0000000..8ee53d8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/norm.js
@@ -0,0 +1,13 @@
+
+    /**
+    * Gets normalized ratio of value inside range.
+    */
+    function norm(val, min, max){
+        if (val < min || val > max) {
+            throw new RangeError('value (' + val + ') must be between ' + min + ' and ' + max);
+        }
+
+        return val === max ? 1 : (val - min) / (max - min);
+    }
+    module.exports = norm;
+
diff --git a/node_modules/nyks/node_modules/mout/math/overflow.js b/node_modules/nyks/node_modules/mout/math/overflow.js
new file mode 100644
index 0000000..af4950c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/overflow.js
@@ -0,0 +1,23 @@
+
+
+    /**
+     * Wraps number within bounds both positive and negative
+     */
+    function overflow(number, min, max){
+        if ( max === undefined ) {
+            max = min;
+            min = 0;
+        }
+
+        var difference = max - min;
+
+        if ( number < min ) {
+            number += difference * ( ~~( ( min - number ) / difference ) + 1 );
+        }
+
+        return min + ( number - min ) % difference;
+    }
+
+    module.exports = overflow;
+
+
diff --git a/node_modules/nyks/node_modules/mout/math/round.js b/node_modules/nyks/node_modules/mout/math/round.js
new file mode 100644
index 0000000..d108e6c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/math/round.js
@@ -0,0 +1,12 @@
+
+    /**
+     * Round number to a specific radix
+     */
+    function round(value, radix){
+        radix = radix || 1; // default round 1
+        return Math.round(value / radix) * radix;
+    }
+
+    module.exports = round;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number.js b/node_modules/nyks/node_modules/mout/number.js
new file mode 100644
index 0000000..ba7034a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number.js
@@ -0,0 +1,25 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'MAX_INT' : require('./number/MAX_INT'),
+    'MAX_SAFE_INTEGER' : require('./number/MAX_SAFE_INTEGER'),
+    'MAX_UINT' : require('./number/MAX_UINT'),
+    'MIN_INT' : require('./number/MIN_INT'),
+    'abbreviate' : require('./number/abbreviate'),
+    'currencyFormat' : require('./number/currencyFormat'),
+    'enforcePrecision' : require('./number/enforcePrecision'),
+    'isNaN' : require('./number/isNaN'),
+    'nth' : require('./number/nth'),
+    'ordinal' : require('./number/ordinal'),
+    'pad' : require('./number/pad'),
+    'rol' : require('./number/rol'),
+    'ror' : require('./number/ror'),
+    'sign' : require('./number/sign'),
+    'toInt' : require('./number/toInt'),
+    'toUInt' : require('./number/toUInt'),
+    'toUInt31' : require('./number/toUInt31')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/MAX_INT.js b/node_modules/nyks/node_modules/mout/number/MAX_INT.js
new file mode 100644
index 0000000..1d6f0e4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/MAX_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit signed integer value. (2^31 - 1)
+ */
+
+    module.exports = 2147483647;
+
diff --git a/node_modules/nyks/node_modules/mout/number/MAX_SAFE_INTEGER.js b/node_modules/nyks/node_modules/mout/number/MAX_SAFE_INTEGER.js
new file mode 100644
index 0000000..b13e538
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/MAX_SAFE_INTEGER.js
@@ -0,0 +1,7 @@
+
+
+    // maximum safe integer (Math.pow(2, 53) - 1)
+    // see: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer
+    module.exports = 9007199254740991;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/MAX_UINT.js b/node_modules/nyks/node_modules/mout/number/MAX_UINT.js
new file mode 100644
index 0000000..700da0f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/MAX_UINT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit unsigned integet value (2^32 - 1)
+ */
+
+    module.exports = 4294967295;
+
diff --git a/node_modules/nyks/node_modules/mout/number/MIN_INT.js b/node_modules/nyks/node_modules/mout/number/MIN_INT.js
new file mode 100644
index 0000000..b34ab2c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/MIN_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Minimum 32-bit signed integer value (-2^31).
+ */
+
+    module.exports = -2147483648;
+
diff --git a/node_modules/nyks/node_modules/mout/number/abbreviate.js b/node_modules/nyks/node_modules/mout/number/abbreviate.js
new file mode 100644
index 0000000..dd6716b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/abbreviate.js
@@ -0,0 +1,35 @@
+var enforcePrecision = require('./enforcePrecision');
+
+    var _defaultDict = {
+        thousand : 'K',
+        million : 'M',
+        billion : 'B'
+    };
+
+    /**
+     * Abbreviate number if bigger than 1000. (eg: 2.5K, 17.5M, 3.4B, ...)
+     */
+    function abbreviateNumber(val, nDecimals, dict){
+        nDecimals = nDecimals != null? nDecimals : 1;
+        dict = dict || _defaultDict;
+        val = enforcePrecision(val, nDecimals);
+
+        var str, mod;
+
+        if (val < 1000000) {
+            mod = enforcePrecision(val / 1000, nDecimals);
+            // might overflow to next scale during rounding
+            str = mod < 1000? mod + dict.thousand : 1 + dict.million;
+        } else if (val < 1000000000) {
+            mod = enforcePrecision(val / 1000000, nDecimals);
+            str = mod < 1000? mod + dict.million : 1 + dict.billion;
+        } else {
+            str = enforcePrecision(val / 1000000000, nDecimals) + dict.billion;
+        }
+
+        return str;
+    }
+
+    module.exports = abbreviateNumber;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/currencyFormat.js b/node_modules/nyks/node_modules/mout/number/currencyFormat.js
new file mode 100644
index 0000000..c85a668
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/currencyFormat.js
@@ -0,0 +1,27 @@
+var toNumber = require('../lang/toNumber');
+
+    /**
+     * Converts number into currency format
+     */
+    function currencyFormat(val, nDecimalDigits, decimalSeparator, thousandsSeparator) {
+        val = toNumber(val);
+        nDecimalDigits = nDecimalDigits == null? 2 : nDecimalDigits;
+        decimalSeparator = decimalSeparator == null? '.' : decimalSeparator;
+        thousandsSeparator = thousandsSeparator == null? ',' : thousandsSeparator;
+
+        //can't use enforce precision since it returns a number and we are
+        //doing a RegExp over the string
+        var fixed = val.toFixed(nDecimalDigits),
+            //separate begin [$1], middle [$2] and decimal digits [$4]
+            parts = new RegExp('^(-?\\d{1,3})((?:\\d{3})+)(\\.(\\d{'+ nDecimalDigits +'}))?$').exec( fixed );
+
+        if(parts){ //val >= 1000 || val <= -1000
+            return parts[1] + parts[2].replace(/\d{3}/g, thousandsSeparator + '$&') + (parts[4] ? decimalSeparator + parts[4] : '');
+        }else{
+            return fixed.replace('.', decimalSeparator);
+        }
+    }
+
+    module.exports = currencyFormat;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/enforcePrecision.js b/node_modules/nyks/node_modules/mout/number/enforcePrecision.js
new file mode 100644
index 0000000..3d3b2d4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/enforcePrecision.js
@@ -0,0 +1,12 @@
+var toNumber = require('../lang/toNumber');
+    /**
+     * Enforce a specific amount of decimal digits and also fix floating
+     * point rounding issues.
+     */
+    function enforcePrecision(val, nDecimalDigits){
+        val = toNumber(val);
+        var pow = Math.pow(10, nDecimalDigits);
+        return +(Math.round(val * pow) / pow).toFixed(nDecimalDigits);
+    }
+    module.exports = enforcePrecision;
+
diff --git a/node_modules/nyks/node_modules/mout/number/isNaN.js b/node_modules/nyks/node_modules/mout/number/isNaN.js
new file mode 100644
index 0000000..3799f3b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/isNaN.js
@@ -0,0 +1,14 @@
+
+
+    /**
+     * ES6 Number.isNaN
+     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
+     */
+    function isNaN(val){
+        // jshint eqeqeq:false
+        return typeof val === 'number' && val != val;
+    }
+
+    module.exports = isNaN;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/nth.js b/node_modules/nyks/node_modules/mout/number/nth.js
new file mode 100644
index 0000000..43ffb21
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/nth.js
@@ -0,0 +1,25 @@
+
+
+    /**
+     * Returns "nth" of number (1 = "st", 2 = "nd", 3 = "rd", 4..10 = "th", ...)
+     */
+    function nth(i) {
+        var t = (i % 100);
+        if (t >= 10 && t <= 20) {
+            return 'th';
+        }
+        switch(i % 10) {
+            case 1:
+                return 'st';
+            case 2:
+                return 'nd';
+            case 3:
+                return 'rd';
+            default:
+                return 'th';
+        }
+    }
+
+    module.exports = nth;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/ordinal.js b/node_modules/nyks/node_modules/mout/number/ordinal.js
new file mode 100644
index 0000000..939a0fa
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/ordinal.js
@@ -0,0 +1,14 @@
+var toInt = require('./toInt');
+var nth = require('./nth');
+
+    /**
+     * converts number into ordinal form (1st, 2nd, 3rd, 4th, ...)
+     */
+    function ordinal(n){
+       n = toInt(n);
+       return n + nth(n);
+    }
+
+    module.exports = ordinal;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/pad.js b/node_modules/nyks/node_modules/mout/number/pad.js
new file mode 100644
index 0000000..1f83af4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/pad.js
@@ -0,0 +1,14 @@
+var lpad = require('../string/lpad');
+var toNumber = require('../lang/toNumber');
+
+    /**
+     * Add padding zeros if n.length < minLength.
+     */
+    function pad(n, minLength, char){
+        n = toNumber(n);
+        return lpad(''+ n, minLength, char || '0');
+    }
+
+    module.exports = pad;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/rol.js b/node_modules/nyks/node_modules/mout/number/rol.js
new file mode 100644
index 0000000..ecd58da
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/rol.js
@@ -0,0 +1,10 @@
+
+    /**
+     * Bitwise circular shift left
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function rol(val, shift){
+        return (val << shift) | (val >> (32 - shift));
+    }
+    module.exports = rol;
+
diff --git a/node_modules/nyks/node_modules/mout/number/ror.js b/node_modules/nyks/node_modules/mout/number/ror.js
new file mode 100644
index 0000000..2eda81d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/ror.js
@@ -0,0 +1,10 @@
+
+    /**
+     * Bitwise circular shift right
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function ror(val, shift){
+        return (val >> shift) | (val << (32 - shift));
+    }
+    module.exports = ror;
+
diff --git a/node_modules/nyks/node_modules/mout/number/sign.js b/node_modules/nyks/node_modules/mout/number/sign.js
new file mode 100644
index 0000000..7f9a1e2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/sign.js
@@ -0,0 +1,15 @@
+var toNumber = require('../lang/toNumber');
+
+    /**
+     * Get sign of the value.
+     */
+    function sign(val) {
+        var num = toNumber(val);
+        if (num === 0) return num; // +0 and +0 === 0
+        if (isNaN(num)) return num; // NaN
+        return num < 0? -1 : 1;
+    }
+
+    module.exports = sign;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/toInt.js b/node_modules/nyks/node_modules/mout/number/toInt.js
new file mode 100644
index 0000000..72fd7de
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/toInt.js
@@ -0,0 +1,17 @@
+
+
+    /**
+     * "Convert" value into an 32-bit integer.
+     * Works like `Math.floor` if val > 0 and `Math.ceil` if val < 0.
+     * IMPORTANT: val will wrap at 2^31 and -2^31.
+     * Perf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7
+     */
+    function toInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return ~~val;
+    }
+
+    module.exports = toInt;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/toUInt.js b/node_modules/nyks/node_modules/mout/number/toUInt.js
new file mode 100644
index 0000000..d279656
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/toUInt.js
@@ -0,0 +1,15 @@
+
+
+    /**
+     * "Convert" value into a 32-bit unsigned integer.
+     * IMPORTANT: Value will wrap at 2^32.
+     */
+    function toUInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return val >>> 0;
+    }
+
+    module.exports = toUInt;
+
+
diff --git a/node_modules/nyks/node_modules/mout/number/toUInt31.js b/node_modules/nyks/node_modules/mout/number/toUInt31.js
new file mode 100644
index 0000000..6cd3bb5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/number/toUInt31.js
@@ -0,0 +1,15 @@
+var MAX_INT = require('./MAX_INT');
+
+    /**
+     * "Convert" value into an 31-bit unsigned integer (since 1 bit is used for sign).
+     * IMPORTANT: value wil wrap at 2^31, if negative will return 0.
+     */
+    function toUInt31(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return (val <= 0)? 0 : (val > MAX_INT? ~~(val % (MAX_INT + 1)) : ~~val);
+    }
+
+    module.exports = toUInt31;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object.js b/node_modules/nyks/node_modules/mout/object.js
new file mode 100644
index 0000000..ee1e94e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object.js
@@ -0,0 +1,44 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'bindAll' : require('./object/bindAll'),
+    'contains' : require('./object/contains'),
+    'deepFillIn' : require('./object/deepFillIn'),
+    'deepMatches' : require('./object/deepMatches'),
+    'deepMixIn' : require('./object/deepMixIn'),
+    'equals' : require('./object/equals'),
+    'every' : require('./object/every'),
+    'fillIn' : require('./object/fillIn'),
+    'filter' : require('./object/filter'),
+    'find' : require('./object/find'),
+    'flatten' : require('./object/flatten'),
+    'forIn' : require('./object/forIn'),
+    'forOwn' : require('./object/forOwn'),
+    'functions' : require('./object/functions'),
+    'get' : require('./object/get'),
+    'has' : require('./object/has'),
+    'hasOwn' : require('./object/hasOwn'),
+    'keys' : require('./object/keys'),
+    'map' : require('./object/map'),
+    'matches' : require('./object/matches'),
+    'max' : require('./object/max'),
+    'merge' : require('./object/merge'),
+    'min' : require('./object/min'),
+    'mixIn' : require('./object/mixIn'),
+    'namespace' : require('./object/namespace'),
+    'omit' : require('./object/omit'),
+    'pick' : require('./object/pick'),
+    'pluck' : require('./object/pluck'),
+    'reduce' : require('./object/reduce'),
+    'reject' : require('./object/reject'),
+    'result' : require('./object/result'),
+    'set' : require('./object/set'),
+    'size' : require('./object/size'),
+    'some' : require('./object/some'),
+    'unset' : require('./object/unset'),
+    'values' : require('./object/values')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/bindAll.js b/node_modules/nyks/node_modules/mout/object/bindAll.js
new file mode 100644
index 0000000..c8a2034
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/bindAll.js
@@ -0,0 +1,19 @@
+var functions = require('./functions');
+var bind = require('../function/bind');
+var forEach = require('../array/forEach');
+var slice = require('../array/slice');
+
+    /**
+     * Binds methods of the object to be run in it's own context.
+     */
+    function bindAll(obj, rest_methodNames){
+        var keys = arguments.length > 1?
+                    slice(arguments, 1) : functions(obj);
+        forEach(keys, function(key){
+            obj[key] = bind(obj[key], obj);
+        });
+    }
+
+    module.exports = bindAll;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/contains.js b/node_modules/nyks/node_modules/mout/object/contains.js
new file mode 100644
index 0000000..8076e2c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/contains.js
@@ -0,0 +1,13 @@
+var some = require('./some');
+
+    /**
+     * Check if object contains value
+     */
+    function contains(obj, needle) {
+        return some(obj, function(val) {
+            return (val === needle);
+        });
+    }
+    module.exports = contains;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/deepFillIn.js b/node_modules/nyks/node_modules/mout/object/deepFillIn.js
new file mode 100644
index 0000000..6568ea8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/deepFillIn.js
@@ -0,0 +1,33 @@
+var forOwn = require('./forOwn');
+var isPlainObject = require('../lang/isPlainObject');
+
+    /**
+     * Deeply copy missing properties in the target from the defaults.
+     */
+    function deepFillIn(target, defaults){
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n) {
+            obj = arguments[i];
+            if (obj) {
+                // jshint loopfunc: true
+                forOwn(obj, function(newValue, key) {
+                    var curValue = target[key];
+                    if (curValue == null) {
+                        target[key] = newValue;
+                    } else if (isPlainObject(curValue) &&
+                               isPlainObject(newValue)) {
+                        deepFillIn(curValue, newValue);
+                    }
+                });
+            }
+        }
+
+        return target;
+    }
+
+    module.exports = deepFillIn;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/deepMatches.js b/node_modules/nyks/node_modules/mout/object/deepMatches.js
new file mode 100644
index 0000000..4beaf57
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/deepMatches.js
@@ -0,0 +1,56 @@
+var forOwn = require('./forOwn');
+var isArray = require('../lang/isArray');
+
+    function containsMatch(array, pattern) {
+        var i = -1, length = array.length;
+        while (++i < length) {
+            if (deepMatches(array[i], pattern)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    function matchArray(target, pattern) {
+        var i = -1, patternLength = pattern.length;
+        while (++i < patternLength) {
+            if (!containsMatch(target, pattern[i])) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    function matchObject(target, pattern) {
+        var result = true;
+        forOwn(pattern, function(val, key) {
+            if (!deepMatches(target[key], val)) {
+                // Return false to break out of forOwn early
+                return (result = false);
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively check if the objects match.
+     */
+    function deepMatches(target, pattern){
+        if (target && typeof target === 'object' &&
+            pattern && typeof pattern === 'object') {
+            if (isArray(target) && isArray(pattern)) {
+                return matchArray(target, pattern);
+            } else {
+                return matchObject(target, pattern);
+            }
+        } else {
+            return target === pattern;
+        }
+    }
+
+    module.exports = deepMatches;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/deepMixIn.js b/node_modules/nyks/node_modules/mout/object/deepMixIn.js
new file mode 100644
index 0000000..a97e98d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/deepMixIn.js
@@ -0,0 +1,34 @@
+var forOwn = require('./forOwn');
+var isPlainObject = require('../lang/isPlainObject');
+
+    /**
+     * Mixes objects into the target object, recursively mixing existing child
+     * objects.
+     */
+    function deepMixIn(target, objects) {
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n){
+            obj = arguments[i];
+            if (obj) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+
+        return target;
+    }
+
+    function copyProp(val, key) {
+        var existing = this[key];
+        if (isPlainObject(val) && isPlainObject(existing)) {
+            deepMixIn(existing, val);
+        } else {
+            this[key] = val;
+        }
+    }
+
+    module.exports = deepMixIn;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/equals.js b/node_modules/nyks/node_modules/mout/object/equals.js
new file mode 100644
index 0000000..7c89ab8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/equals.js
@@ -0,0 +1,33 @@
+var hasOwn = require('./hasOwn');
+var every = require('./every');
+var isObject = require('../lang/isObject');
+var is = require('../lang/is');
+
+    // Makes a function to compare the object values from the specified compare
+    // operation callback.
+    function makeCompare(callback) {
+        return function(value, key) {
+            return hasOwn(this, key) && callback(value, this[key]);
+        };
+    }
+
+    function checkProperties(value, key) {
+        return hasOwn(this, key);
+    }
+
+    /**
+     * Checks if two objects have the same keys and values.
+     */
+    function equals(a, b, callback) {
+        callback = callback || is;
+
+        if (!isObject(a) || !isObject(b)) {
+            return callback(a, b);
+        }
+
+        return (every(a, makeCompare(callback), b) &&
+                every(b, checkProperties, a));
+    }
+
+    module.exports = equals;
+
diff --git a/node_modules/nyks/node_modules/mout/object/every.js b/node_modules/nyks/node_modules/mout/object/every.js
new file mode 100644
index 0000000..01106e5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/every.js
@@ -0,0 +1,23 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Object every
+     */
+    function every(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        forOwn(obj, function(val, key) {
+            // we consider any falsy values as "false" on purpose so shorthand
+            // syntax can be used to check property existence
+            if (!callback(val, key, obj)) {
+                result = false;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    module.exports = every;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/fillIn.js b/node_modules/nyks/node_modules/mout/object/fillIn.js
new file mode 100644
index 0000000..4010e28
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/fillIn.js
@@ -0,0 +1,21 @@
+var forEach = require('../array/forEach');
+var slice = require('../array/slice');
+var forOwn = require('./forOwn');
+
+    /**
+     * Copy missing properties in the obj from the defaults.
+     */
+    function fillIn(obj, var_defaults){
+        forEach(slice(arguments, 1), function(base){
+            forOwn(base, function(val, key){
+                if (obj[key] == null) {
+                    obj[key] = val;
+                }
+            });
+        });
+        return obj;
+    }
+
+    module.exports = fillIn;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/filter.js b/node_modules/nyks/node_modules/mout/object/filter.js
new file mode 100644
index 0000000..3a83a92
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/filter.js
@@ -0,0 +1,20 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Creates a new object with all the properties where the callback returns
+     * true.
+     */
+    function filterValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                output[key] = value;
+            }
+        });
+
+        return output;
+    }
+    module.exports = filterValues;
+
diff --git a/node_modules/nyks/node_modules/mout/object/find.js b/node_modules/nyks/node_modules/mout/object/find.js
new file mode 100644
index 0000000..d39c070
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/find.js
@@ -0,0 +1,21 @@
+var some = require('./some');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result;
+        some(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                result = value;
+                return true; //break
+            }
+        });
+        return result;
+    }
+
+    module.exports = find;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/flatten.js b/node_modules/nyks/node_modules/mout/object/flatten.js
new file mode 100644
index 0000000..a356f15
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/flatten.js
@@ -0,0 +1,38 @@
+var forOwn = require('./forOwn');
+var isPlainObject = require('../lang/isPlainObject');
+
+    /*
+     * Helper function to flatten to a destination object.
+     * Used to remove the need to create intermediate objects while flattening.
+     */
+    function flattenTo(obj, result, prefix, level) {
+        forOwn(obj, function (value, key) {
+            var nestedPrefix = prefix ? prefix + '.' + key : key;
+
+            if (level !== 0 && isPlainObject(value)) {
+                flattenTo(value, result, nestedPrefix, level - 1);
+            } else {
+                result[nestedPrefix] = value;
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively flattens an object.
+     * A new object containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(obj, level) {
+        if (obj == null) {
+            return {};
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(obj, {}, '', level);
+    }
+
+    module.exports = flatten;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/forIn.js b/node_modules/nyks/node_modules/mout/object/forIn.js
new file mode 100644
index 0000000..7fe96ce
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/forIn.js
@@ -0,0 +1,76 @@
+var hasOwn = require('./hasOwn');
+
+    var _hasDontEnumBug,
+        _dontEnums;
+
+    function checkDontEnum(){
+        _dontEnums = [
+                'toString',
+                'toLocaleString',
+                'valueOf',
+                'hasOwnProperty',
+                'isPrototypeOf',
+                'propertyIsEnumerable',
+                'constructor'
+            ];
+
+        _hasDontEnumBug = true;
+
+        for (var key in {'toString': null}) {
+            _hasDontEnumBug = false;
+        }
+    }
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forIn(obj, fn, thisObj){
+        var key, i = 0;
+        // no need to check if argument is a real object that way we can use
+        // it for arrays, functions, date, etc.
+
+        //post-pone check till needed
+        if (_hasDontEnumBug == null) checkDontEnum();
+
+        for (key in obj) {
+            if (exec(fn, obj, key, thisObj) === false) {
+                break;
+            }
+        }
+
+
+        if (_hasDontEnumBug) {
+            var ctor = obj.constructor,
+                isProto = !!ctor && obj === ctor.prototype;
+
+            while (key = _dontEnums[i++]) {
+                // For constructor, if it is a prototype object the constructor
+                // is always non-enumerable unless defined otherwise (and
+                // enumerated above).  For non-prototype objects, it will have
+                // to be defined on this object, since it cannot be defined on
+                // any prototype objects.
+                //
+                // For other [[DontEnum]] properties, check if the value is
+                // different than Object prototype value.
+                if (
+                    (key !== 'constructor' ||
+                        (!isProto && hasOwn(obj, key))) &&
+                    obj[key] !== Object.prototype[key]
+                ) {
+                    if (exec(fn, obj, key, thisObj) === false) {
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+    function exec(fn, obj, key, thisObj){
+        return fn.call(thisObj, obj[key], key, obj);
+    }
+
+    module.exports = forIn;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/forOwn.js b/node_modules/nyks/node_modules/mout/object/forOwn.js
new file mode 100644
index 0000000..5f2dfbf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/forOwn.js
@@ -0,0 +1,19 @@
+var hasOwn = require('./hasOwn');
+var forIn = require('./forIn');
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forOwn(obj, fn, thisObj){
+        forIn(obj, function(val, key){
+            if (hasOwn(obj, key)) {
+                return fn.call(thisObj, obj[key], key, obj);
+            }
+        });
+    }
+
+    module.exports = forOwn;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/functions.js b/node_modules/nyks/node_modules/mout/object/functions.js
new file mode 100644
index 0000000..f571797
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/functions.js
@@ -0,0 +1,18 @@
+var forIn = require('./forIn');
+
+    /**
+     * return a list of all enumerable properties that have function values
+     */
+    function functions(obj){
+        var keys = [];
+        forIn(obj, function(val, key){
+            if (typeof val === 'function'){
+                keys.push(key);
+            }
+        });
+        return keys.sort();
+    }
+
+    module.exports = functions;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/get.js b/node_modules/nyks/node_modules/mout/object/get.js
new file mode 100644
index 0000000..9c64e21
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/get.js
@@ -0,0 +1,20 @@
+var isPrimitive = require('../lang/isPrimitive');
+
+    /**
+     * get "nested" object property
+     */
+    function get(obj, prop){
+        var parts = prop.split('.'),
+            last = parts.pop();
+
+        while (prop = parts.shift()) {
+            obj = obj[prop];
+            if (obj == null) return;
+        }
+
+        return obj[last];
+    }
+
+    module.exports = get;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/has.js b/node_modules/nyks/node_modules/mout/object/has.js
new file mode 100644
index 0000000..ca9f228
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/has.js
@@ -0,0 +1,15 @@
+var get = require('./get');
+
+    var UNDEF;
+
+    /**
+     * Check if object has nested property.
+     */
+    function has(obj, prop){
+        return get(obj, prop) !== UNDEF;
+    }
+
+    module.exports = has;
+
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/hasOwn.js b/node_modules/nyks/node_modules/mout/object/hasOwn.js
new file mode 100644
index 0000000..7e3c82a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/hasOwn.js
@@ -0,0 +1,12 @@
+
+
+    /**
+     * Safer Object.hasOwnProperty
+     */
+     function hasOwn(obj, prop){
+         return Object.prototype.hasOwnProperty.call(obj, prop);
+     }
+
+     module.exports = hasOwn;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/keys.js b/node_modules/nyks/node_modules/mout/object/keys.js
new file mode 100644
index 0000000..dd2f4f5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/keys.js
@@ -0,0 +1,16 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * Get object keys
+     */
+     var keys = Object.keys || function (obj) {
+            var keys = [];
+            forOwn(obj, function(val, key){
+                keys.push(key);
+            });
+            return keys;
+        };
+
+    module.exports = keys;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/map.js b/node_modules/nyks/node_modules/mout/object/map.js
new file mode 100644
index 0000000..dd449a7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/map.js
@@ -0,0 +1,18 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Creates a new object where all the values are the result of calling
+     * `callback`.
+     */
+    function mapValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(val, key, obj) {
+            output[key] = callback(val, key, obj);
+        });
+
+        return output;
+    }
+    module.exports = mapValues;
+
diff --git a/node_modules/nyks/node_modules/mout/object/matches.js b/node_modules/nyks/node_modules/mout/object/matches.js
new file mode 100644
index 0000000..6074faa
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/matches.js
@@ -0,0 +1,20 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * checks if a object contains all given properties/values
+     */
+    function matches(target, props){
+        // can't use "object/every" because of circular dependency
+        var result = true;
+        forOwn(props, function(val, key){
+            if (target[key] !== val) {
+                // break loop at first difference
+                return (result = false);
+            }
+        });
+        return result;
+    }
+
+    module.exports = matches;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/max.js b/node_modules/nyks/node_modules/mout/object/max.js
new file mode 100644
index 0000000..3e8e92c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/max.js
@@ -0,0 +1,12 @@
+var arrMax = require('../array/max');
+var values = require('./values');
+
+    /**
+     * Returns maximum value inside object.
+     */
+    function max(obj, compareFn) {
+        return arrMax(values(obj), compareFn);
+    }
+
+    module.exports = max;
+
diff --git a/node_modules/nyks/node_modules/mout/object/merge.js b/node_modules/nyks/node_modules/mout/object/merge.js
new file mode 100644
index 0000000..6961f60
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/merge.js
@@ -0,0 +1,40 @@
+var hasOwn = require('./hasOwn');
+var deepClone = require('../lang/deepClone');
+var isObject = require('../lang/isObject');
+
+    /**
+     * Deep merge objects.
+     */
+    function merge() {
+        var i = 1,
+            key, val, obj, target;
+
+        // make sure we don't modify source element and it's properties
+        // objects are passed by reference
+        target = deepClone( arguments[0] );
+
+        while (obj = arguments[i++]) {
+            for (key in obj) {
+                if ( ! hasOwn(obj, key) ) {
+                    continue;
+                }
+
+                val = obj[key];
+
+                if ( isObject(val) && isObject(target[key]) ){
+                    // inception, deep merge objects
+                    target[key] = merge(target[key], val);
+                } else {
+                    // make sure arrays, regexp, date, objects are cloned
+                    target[key] = deepClone(val);
+                }
+
+            }
+        }
+
+        return target;
+    }
+
+    module.exports = merge;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/min.js b/node_modules/nyks/node_modules/mout/object/min.js
new file mode 100644
index 0000000..e1e6697
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/min.js
@@ -0,0 +1,12 @@
+var arrMin = require('../array/min');
+var values = require('./values');
+
+    /**
+     * Returns minimum value inside object.
+     */
+    function min(obj, iterator) {
+        return arrMin(values(obj), iterator);
+    }
+
+    module.exports = min;
+
diff --git a/node_modules/nyks/node_modules/mout/object/mixIn.js b/node_modules/nyks/node_modules/mout/object/mixIn.js
new file mode 100644
index 0000000..55ec8fd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/mixIn.js
@@ -0,0 +1,28 @@
+var forOwn = require('./forOwn');
+
+    /**
+    * Combine properties from all the objects into first one.
+    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
+    * @param {object} target    Target Object
+    * @param {...object} objects    Objects to be combined (0...n objects).
+    * @return {object} Target Object.
+    */
+    function mixIn(target, objects){
+        var i = 0,
+            n = arguments.length,
+            obj;
+        while(++i < n){
+            obj = arguments[i];
+            if (obj != null) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+        return target;
+    }
+
+    function copyProp(val, key){
+        this[key] = val;
+    }
+
+    module.exports = mixIn;
+
diff --git a/node_modules/nyks/node_modules/mout/object/namespace.js b/node_modules/nyks/node_modules/mout/object/namespace.js
new file mode 100644
index 0000000..c6e79f6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/namespace.js
@@ -0,0 +1,19 @@
+var forEach = require('../array/forEach');
+
+    /**
+     * Create nested object if non-existent
+     */
+    function namespace(obj, path){
+        if (!path) return obj;
+        forEach(path.split('.'), function(key){
+            if (!obj[key]) {
+                obj[key] = {};
+            }
+            obj = obj[key];
+        });
+        return obj;
+    }
+
+    module.exports = namespace;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/omit.js b/node_modules/nyks/node_modules/mout/object/omit.js
new file mode 100644
index 0000000..7a5ef05
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/omit.js
@@ -0,0 +1,21 @@
+var slice = require('../array/slice');
+var contains = require('../array/contains');
+
+    /**
+     * Return a copy of the object, filtered to only contain properties except the blacklisted keys.
+     */
+    function omit(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {};
+
+        for (var property in obj) {
+            if (obj.hasOwnProperty(property) && !contains(keys, property)) {
+                out[property] = obj[property];
+            }
+        }
+        return out;
+    }
+
+    module.exports = omit;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/pick.js b/node_modules/nyks/node_modules/mout/object/pick.js
new file mode 100644
index 0000000..da5a564
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/pick.js
@@ -0,0 +1,18 @@
+var slice = require('../array/slice');
+
+    /**
+     * Return a copy of the object, filtered to only have values for the whitelisted keys.
+     */
+    function pick(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {},
+            i = 0, key;
+        while (key = keys[i++]) {
+            out[key] = obj[key];
+        }
+        return out;
+    }
+
+    module.exports = pick;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/pluck.js b/node_modules/nyks/node_modules/mout/object/pluck.js
new file mode 100644
index 0000000..e844df4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/pluck.js
@@ -0,0 +1,13 @@
+var map = require('./map');
+var prop = require('../function/prop');
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(obj, propName){
+        return map(obj, prop(propName));
+    }
+
+    module.exports = pluck;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/reduce.js b/node_modules/nyks/node_modules/mout/object/reduce.js
new file mode 100644
index 0000000..6f19a3a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/reduce.js
@@ -0,0 +1,29 @@
+var forOwn = require('./forOwn');
+var size = require('./size');
+
+    /**
+     * Object reduce
+     */
+    function reduce(obj, callback, memo, thisObj) {
+        var initial = arguments.length > 2;
+
+        if (!size(obj) && !initial) {
+            throw new Error('reduce of empty object with no initial value');
+        }
+
+        forOwn(obj, function(value, key, list) {
+            if (!initial) {
+                memo = value;
+                initial = true;
+            }
+            else {
+                memo = callback.call(thisObj, memo, value, key, list);
+            }
+        });
+
+        return memo;
+    }
+
+    module.exports = reduce;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/reject.js b/node_modules/nyks/node_modules/mout/object/reject.js
new file mode 100644
index 0000000..7464379
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/reject.js
@@ -0,0 +1,16 @@
+var filter = require('./filter');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Object reject
+     */
+    function reject(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        return filter(obj, function(value, index, obj) {
+            return !callback(value, index, obj);
+        }, thisObj);
+    }
+
+    module.exports = reject;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/result.js b/node_modules/nyks/node_modules/mout/object/result.js
new file mode 100644
index 0000000..0efdd41
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/result.js
@@ -0,0 +1,14 @@
+var isFunction = require('../lang/isFunction');
+
+    function result(obj, prop) {
+        var property = obj[prop];
+
+        if(property === undefined) {
+            return;
+        }
+
+        return isFunction(property) ? property.call(obj) : property;
+    }
+
+    module.exports = result;
+
diff --git a/node_modules/nyks/node_modules/mout/object/set.js b/node_modules/nyks/node_modules/mout/object/set.js
new file mode 100644
index 0000000..9b3cdc4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/set.js
@@ -0,0 +1,17 @@
+var namespace = require('./namespace');
+
+    /**
+     * set "nested" object property
+     */
+    function set(obj, prop, val){
+        var parts = (/^(.+)\.(.+)$/).exec(prop);
+        if (parts){
+            namespace(obj, parts[1])[parts[2]] = val;
+        } else {
+            obj[prop] = val;
+        }
+    }
+
+    module.exports = set;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/size.js b/node_modules/nyks/node_modules/mout/object/size.js
new file mode 100644
index 0000000..9788595
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/size.js
@@ -0,0 +1,16 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * Get object size
+     */
+    function size(obj) {
+        var count = 0;
+        forOwn(obj, function(){
+            count++;
+        });
+        return count;
+    }
+
+    module.exports = size;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/some.js b/node_modules/nyks/node_modules/mout/object/some.js
new file mode 100644
index 0000000..384c6f3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/some.js
@@ -0,0 +1,21 @@
+var forOwn = require('./forOwn');
+var makeIterator = require('../function/makeIterator_');
+
+    /**
+     * Object some
+     */
+    function some(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        forOwn(obj, function(val, key) {
+            if (callback(val, key, obj)) {
+                result = true;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    module.exports = some;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/unset.js b/node_modules/nyks/node_modules/mout/object/unset.js
new file mode 100644
index 0000000..343bca0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/unset.js
@@ -0,0 +1,23 @@
+var has = require('./has');
+
+    /**
+     * Unset object property.
+     */
+    function unset(obj, prop){
+        if (has(obj, prop)) {
+            var parts = prop.split('.'),
+                last = parts.pop();
+            while (prop = parts.shift()) {
+                obj = obj[prop];
+            }
+            return (delete obj[last]);
+
+        } else {
+            // if property doesn't exist treat as deleted
+            return true;
+        }
+    }
+
+    module.exports = unset;
+
+
diff --git a/node_modules/nyks/node_modules/mout/object/values.js b/node_modules/nyks/node_modules/mout/object/values.js
new file mode 100644
index 0000000..265a693
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/object/values.js
@@ -0,0 +1,16 @@
+var forOwn = require('./forOwn');
+
+    /**
+     * Get object values
+     */
+    function values(obj) {
+        var vals = [];
+        forOwn(obj, function(val, key){
+            vals.push(val);
+        });
+        return vals;
+    }
+
+    module.exports = values;
+
+
diff --git a/node_modules/nyks/node_modules/mout/package.json b/node_modules/nyks/node_modules/mout/package.json
new file mode 100644
index 0000000..373b3c8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/package.json
@@ -0,0 +1,145 @@
+{
+  "_from": "mout@^1.0.0",
+  "_id": "mout@1.1.0",
+  "_inBundle": false,
+  "_integrity": "sha512-XsP0vf4As6BfqglxZqbqQ8SR6KQot2AgxvR0gG+WtUkf90vUXchMOZQtPf/Hml1rEffJupqL/tIrU6EYhsUQjw==",
+  "_location": "/nyks/mout",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "range",
+    "registry": true,
+    "raw": "mout@^1.0.0",
+    "name": "mout",
+    "escapedName": "mout",
+    "rawSpec": "^1.0.0",
+    "saveSpec": null,
+    "fetchSpec": "^1.0.0"
+  },
+  "_requiredBy": [
+    "/nyks"
+  ],
+  "_resolved": "https://registry.npmjs.org/mout/-/mout-1.1.0.tgz",
+  "_shasum": "0b29d41e6a80fa9e2d4a5be9d602e1d9d02177f6",
+  "_spec": "mout@^1.0.0",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge\\node_modules\\nyks",
+  "author": {
+    "name": "Miller Medeiros",
+    "email": "contact@millermedeiros.com",
+    "url": "http://blog.millermedeiros.com"
+  },
+  "bugs": {
+    "url": "https://github.com/mout/mout/issues/"
+  },
+  "bundleDependencies": false,
+  "contributors": [
+    {
+      "name": "Adam Nowotny"
+    },
+    {
+      "name": "André Cruz",
+      "email": "amdfcruz@gmail.com"
+    },
+    {
+      "name": "Conrad Zimmerman",
+      "url": "http://www.conradz.com"
+    },
+    {
+      "name": "Friedemann Altrock",
+      "email": "frodenius@gmail.com"
+    },
+    {
+      "name": "Igor Almeida",
+      "email": "igor.p.almeida@gmail.com"
+    },
+    {
+      "name": "Jarrod Overson",
+      "url": "http://jarrodoverson.com"
+    },
+    {
+      "name": "Mathias Paumgarten",
+      "email": "mail@mathias-paumgarten.com"
+    },
+    {
+      "name": "Zach Shipley"
+    }
+  ],
+  "deprecated": false,
+  "description": "Modular Utilities",
+  "devDependencies": {
+    "commander": "~2.11.0",
+    "handlebars": "~1.0.6",
+    "istanbul": "~0.4.5",
+    "jasmine-node": "~1.14.5",
+    "jshint": "~2.9.1",
+    "mdoc": "~0.5.3",
+    "nodefy": "*",
+    "regenerate": "~1.3.3",
+    "requirejs": "~2.3.5",
+    "rimraf": "~2.6.2",
+    "rocambole": "~0.7.0"
+  },
+  "directories": {
+    "doc": "./doc"
+  },
+  "homepage": "http://moutjs.com/",
+  "keywords": [
+    "utilities",
+    "functional",
+    "amd-utils",
+    "stdlib"
+  ],
+  "license": "MIT",
+  "main": "./index.js",
+  "name": "mout",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/mout/mout.git"
+  },
+  "scripts": {
+    "pretest": "node build pkg",
+    "test": "istanbul test tests/runner.js --hook-run-in-context"
+  },
+  "testling": {
+    "preprocess": "node build testling",
+    "browsers": {
+      "ie": [
+        7,
+        8,
+        9,
+        10
+      ],
+      "firefox": [
+        17,
+        "nightly"
+      ],
+      "chrome": [
+        23,
+        "canary"
+      ],
+      "opera": [
+        12,
+        "next"
+      ],
+      "safari": [
+        5.1,
+        6
+      ],
+      "iphone": [
+        6
+      ],
+      "ipad": [
+        6
+      ]
+    },
+    "scripts": [
+      "tests/lib/jasmine/jasmine.js",
+      "tests/lib/jasmine/jasmine.async.js",
+      "tests/lib/jasmine/jasmine-tap.js",
+      "tests/lib/requirejs/require.js",
+      "tests/testling/src.js",
+      "tests/testling/specs.js",
+      "tests/runner.js"
+    ]
+  },
+  "version": "1.1.0"
+}
diff --git a/node_modules/nyks/node_modules/mout/queryString.js b/node_modules/nyks/node_modules/mout/queryString.js
new file mode 100644
index 0000000..22685a7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString.js
@@ -0,0 +1,15 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'contains' : require('./queryString/contains'),
+    'decode' : require('./queryString/decode'),
+    'encode' : require('./queryString/encode'),
+    'getParam' : require('./queryString/getParam'),
+    'getQuery' : require('./queryString/getQuery'),
+    'parse' : require('./queryString/parse'),
+    'setParam' : require('./queryString/setParam')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/queryString/contains.js b/node_modules/nyks/node_modules/mout/queryString/contains.js
new file mode 100644
index 0000000..da678cf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString/contains.js
@@ -0,0 +1,12 @@
+var getQuery = require('./getQuery');
+
+    /**
+     * Checks if query string contains parameter.
+     */
+    function contains(url, paramName) {
+        var regex = new RegExp('(\\?|&)'+ paramName +'=', 'g'); //matches `?param=` or `&param=`
+        return regex.test(getQuery(url));
+    }
+
+    module.exports = contains;
+
diff --git a/node_modules/nyks/node_modules/mout/queryString/decode.js b/node_modules/nyks/node_modules/mout/queryString/decode.js
new file mode 100644
index 0000000..c1b2cab
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString/decode.js
@@ -0,0 +1,36 @@
+var typecast = require('../string/typecast');
+var isArray = require('../lang/isArray');
+var hasOwn = require('../object/hasOwn');
+
+    /**
+     * Decode query string into an object of keys => vals.
+     */
+    function decode(queryStr, shouldTypecast) {
+        var queryArr = (queryStr || '').replace('?', '').split('&'),
+            reg = /([^=]+)=(.+)/,
+            i = -1,
+            obj = {},
+            equalIndex, cur, pValue, pName;
+
+        while ((cur = queryArr[++i])) {
+            equalIndex = cur.indexOf('=');
+            pName = cur.substring(0, equalIndex);
+            pValue = decodeURIComponent(cur.substring(equalIndex + 1));
+            if (shouldTypecast !== false) {
+                pValue = typecast(pValue);
+            }
+            if (hasOwn(obj, pName)){
+                if(isArray(obj[pName])){
+                    obj[pName].push(pValue);
+                } else {
+                    obj[pName] = [obj[pName], pValue];
+                }
+            } else {
+                obj[pName] = pValue;
+           }
+        }
+        return obj;
+    }
+
+    module.exports = decode;
+
diff --git a/node_modules/nyks/node_modules/mout/queryString/encode.js b/node_modules/nyks/node_modules/mout/queryString/encode.js
new file mode 100644
index 0000000..3a4fd0a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString/encode.js
@@ -0,0 +1,27 @@
+var forOwn = require('../object/forOwn');
+var isArray = require('../lang/isArray');
+var forEach = require('../array/forEach');
+
+    /**
+     * Encode object into a query string.
+     */
+    function encode(obj){
+        var query = [],
+            arrValues, reg;
+        forOwn(obj, function (val, key) {
+            if (isArray(val)) {
+                arrValues = key + '=';
+                reg = new RegExp('&'+key+'+=$');
+                forEach(val, function (aValue) {
+                    arrValues += encodeURIComponent(aValue) + '&' + key + '=';
+                });
+                query.push(arrValues.replace(reg, ''));
+            } else {
+               query.push(key + '=' + encodeURIComponent(val));
+            }
+        });
+        return (query.length) ? '?' + query.join('&') : '';
+    }
+
+    module.exports = encode;
+
diff --git a/node_modules/nyks/node_modules/mout/queryString/getParam.js b/node_modules/nyks/node_modules/mout/queryString/getParam.js
new file mode 100644
index 0000000..f149c3e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString/getParam.js
@@ -0,0 +1,15 @@
+var typecast = require('../string/typecast');
+var getQuery = require('./getQuery');
+
+    /**
+     * Get query parameter value.
+     */
+    function getParam(url, param, shouldTypecast){
+        var regexp = new RegExp('(\\?|&)'+ param + '=([^&]*)'), //matches `?param=value` or `&param=value`, value = $2
+            result = regexp.exec( getQuery(url) ),
+            val = (result && result[2])? result[2] : null;
+        return shouldTypecast === false? val : typecast(val);
+    }
+
+    module.exports = getParam;
+
diff --git a/node_modules/nyks/node_modules/mout/queryString/getQuery.js b/node_modules/nyks/node_modules/mout/queryString/getQuery.js
new file mode 100644
index 0000000..9d4402e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString/getQuery.js
@@ -0,0 +1,13 @@
+
+
+    /**
+     * Gets full query as string with all special chars decoded.
+     */
+    function getQuery(url) {
+        // url = url.replace(/#.*\?/, '?'); //removes hash (to avoid getting hash query)
+        var queryString = /\?[a-zA-Z0-9\=\&\%\$\-\_\.\+\!\*\'\(\)\,]+/.exec(url); //valid chars according to: http://www.ietf.org/rfc/rfc1738.txt
+        return (queryString)? decodeURIComponent(queryString[0].replace(/\+/g,' ')) : '';
+    }
+
+    module.exports = getQuery;
+
diff --git a/node_modules/nyks/node_modules/mout/queryString/parse.js b/node_modules/nyks/node_modules/mout/queryString/parse.js
new file mode 100644
index 0000000..532906c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString/parse.js
@@ -0,0 +1,13 @@
+var decode = require('./decode');
+var getQuery = require('./getQuery');
+
+    /**
+     * Get query string, parses and decodes it.
+     */
+    function parse(url, shouldTypecast) {
+        return decode(getQuery(url), shouldTypecast);
+    }
+
+    module.exports = parse;
+
+
diff --git a/node_modules/nyks/node_modules/mout/queryString/setParam.js b/node_modules/nyks/node_modules/mout/queryString/setParam.js
new file mode 100644
index 0000000..052a9ba
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/queryString/setParam.js
@@ -0,0 +1,28 @@
+
+
+    /**
+     * Set query string parameter value
+     */
+    function setParam(url, paramName, value){
+        url = url || '';
+
+        var re = new RegExp('(\\?|&)'+ paramName +'=[^&]*' );
+        var param = paramName +'='+ encodeURIComponent( value );
+
+        if ( re.test(url) ) {
+            return url.replace(re, '$1'+ param);
+        } else {
+            if (url.indexOf('?') === -1) {
+                url += '?';
+            }
+            if (url.indexOf('=') !== -1) {
+                url += '&';
+            }
+            return url + param;
+        }
+
+    }
+
+    module.exports = setParam;
+
+
diff --git a/node_modules/nyks/node_modules/mout/random.js b/node_modules/nyks/node_modules/mout/random.js
new file mode 100644
index 0000000..a924a10
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random.js
@@ -0,0 +1,18 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'choice' : require('./random/choice'),
+    'guid' : require('./random/guid'),
+    'rand' : require('./random/rand'),
+    'randBit' : require('./random/randBit'),
+    'randBool' : require('./random/randBool'),
+    'randHex' : require('./random/randHex'),
+    'randInt' : require('./random/randInt'),
+    'randSign' : require('./random/randSign'),
+    'randString' : require('./random/randString'),
+    'random' : require('./random/random')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/random/choice.js b/node_modules/nyks/node_modules/mout/random/choice.js
new file mode 100644
index 0000000..51aa82a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/choice.js
@@ -0,0 +1,15 @@
+var randInt = require('./randInt');
+var isArray = require('../lang/isArray');
+
+    /**
+     * Returns a random element from the supplied arguments
+     * or from the array (if single argument is an array).
+     */
+    function choice(items) {
+        var target = (arguments.length === 1 && isArray(items))? items : arguments;
+        return target[ randInt(0, target.length - 1) ];
+    }
+
+    module.exports = choice;
+
+
diff --git a/node_modules/nyks/node_modules/mout/random/guid.js b/node_modules/nyks/node_modules/mout/random/guid.js
new file mode 100644
index 0000000..41f6edd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/guid.js
@@ -0,0 +1,24 @@
+var randHex = require('./randHex');
+var choice = require('./choice');
+
+  /**
+   * Returns pseudo-random guid (UUID v4)
+   * IMPORTANT: it's not totally "safe" since randHex/choice uses Math.random
+   * by default and sequences can be predicted in some cases. See the
+   * "random/random" documentation for more info about it and how to replace
+   * the default PRNG.
+   */
+  function guid() {
+    return (
+        randHex(8)+'-'+
+        randHex(4)+'-'+
+        // v4 UUID always contain "4" at this position to specify it was
+        // randomly generated
+        '4' + randHex(3) +'-'+
+        // v4 UUID always contain chars [a,b,8,9] at this position
+        choice(8, 9, 'a', 'b') + randHex(3)+'-'+
+        randHex(12)
+    );
+  }
+  module.exports = guid;
+
diff --git a/node_modules/nyks/node_modules/mout/random/rand.js b/node_modules/nyks/node_modules/mout/random/rand.js
new file mode 100644
index 0000000..782dec8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/rand.js
@@ -0,0 +1,15 @@
+var random = require('./random');
+var MIN_INT = require('../number/MIN_INT');
+var MAX_INT = require('../number/MAX_INT');
+
+    /**
+     * Returns random number inside range
+     */
+    function rand(min, max){
+        min = min == null? MIN_INT : min;
+        max = max == null? MAX_INT : max;
+        return min + (max - min) * random();
+    }
+
+    module.exports = rand;
+
diff --git a/node_modules/nyks/node_modules/mout/random/randBit.js b/node_modules/nyks/node_modules/mout/random/randBit.js
new file mode 100644
index 0000000..04f7aa5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/randBit.js
@@ -0,0 +1,11 @@
+var randBool = require('./randBool');
+
+    /**
+     * Returns random bit (0 or 1)
+     */
+    function randomBit() {
+        return randBool()? 1 : 0;
+    }
+
+    module.exports = randomBit;
+
diff --git a/node_modules/nyks/node_modules/mout/random/randBool.js b/node_modules/nyks/node_modules/mout/random/randBool.js
new file mode 100644
index 0000000..d3d35cb
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/randBool.js
@@ -0,0 +1,12 @@
+var random = require('./random');
+
+    /**
+     * returns a random boolean value (true or false)
+     */
+    function randBool(){
+        return random() >= 0.5;
+    }
+
+    module.exports = randBool;
+
+
diff --git a/node_modules/nyks/node_modules/mout/random/randHex.js b/node_modules/nyks/node_modules/mout/random/randHex.js
new file mode 100644
index 0000000..d8d711c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/randHex.js
@@ -0,0 +1,19 @@
+var choice = require('./choice');
+
+    var _chars = '0123456789abcdef'.split('');
+
+    /**
+     * Returns a random hexadecimal string
+     */
+    function randHex(size){
+        size = size && size > 0? size : 6;
+        var str = '';
+        while (size--) {
+            str += choice(_chars);
+        }
+        return str;
+    }
+
+    module.exports = randHex;
+
+
diff --git a/node_modules/nyks/node_modules/mout/random/randInt.js b/node_modules/nyks/node_modules/mout/random/randInt.js
new file mode 100644
index 0000000..e237d96
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/randInt.js
@@ -0,0 +1,18 @@
+var MIN_INT = require('../number/MIN_INT');
+var MAX_INT = require('../number/MAX_INT');
+var rand = require('./rand');
+
+    /**
+     * Gets random integer inside range or snap to min/max values.
+     */
+    function randInt(min, max){
+        min = min == null? MIN_INT : ~~min;
+        max = max == null? MAX_INT : ~~max;
+        // can't be max + 0.5 otherwise it will round up if `rand`
+        // returns `max` causing it to overflow range.
+        // -0.5 and + 0.49 are required to avoid bias caused by rounding
+        return Math.round( rand(min - 0.5, max + 0.499999999999) );
+    }
+
+    module.exports = randInt;
+
diff --git a/node_modules/nyks/node_modules/mout/random/randSign.js b/node_modules/nyks/node_modules/mout/random/randSign.js
new file mode 100644
index 0000000..75a1a51
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/randSign.js
@@ -0,0 +1,11 @@
+var randBool = require('./randBool');
+
+    /**
+     * Returns random sign (-1 or 1)
+     */
+    function randomSign() {
+        return randBool()? 1 : -1;
+    }
+
+    module.exports = randomSign;
+
diff --git a/node_modules/nyks/node_modules/mout/random/randString.js b/node_modules/nyks/node_modules/mout/random/randString.js
new file mode 100644
index 0000000..e3c3597
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/randString.js
@@ -0,0 +1,27 @@
+var isNumber = require('../lang/isNumber');
+var isString = require('../lang/isString');
+var randInt = require('./randInt');
+
+    var defaultDictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
+
+    function randomString(length, dictionary) {
+        if(!isNumber(length) || length <= 0) {
+          length = 8;
+        }
+
+        if(!isString(dictionary) || dictionary.length < 1) {
+          dictionary = defaultDictionary;
+        }
+
+        var result = '',
+            domain = dictionary.length - 1;
+
+        while(length--) {
+          result += dictionary[randInt(0, domain)];
+        }
+        
+        return result;
+    }
+
+    module.exports = randomString;
+
diff --git a/node_modules/nyks/node_modules/mout/random/random.js b/node_modules/nyks/node_modules/mout/random/random.js
new file mode 100644
index 0000000..670a3cc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/random/random.js
@@ -0,0 +1,18 @@
+
+
+    /**
+     * Just a wrapper to Math.random. No methods inside mout/random should call
+     * Math.random() directly so we can inject the pseudo-random number
+     * generator if needed (ie. in case we need a seeded random or a better
+     * algorithm than the native one)
+     */
+    function random(){
+        return random.get();
+    }
+
+    // we expose the method so it can be swapped if needed
+    random.get = Math.random;
+
+    module.exports = random;
+
+
diff --git a/node_modules/nyks/node_modules/mout/src/array.js b/node_modules/nyks/node_modules/mout/src/array.js
new file mode 100644
index 0000000..19cb9de
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array.js
@@ -0,0 +1,56 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'append' : require('./array/append'),
+    'collect' : require('./array/collect'),
+    'combine' : require('./array/combine'),
+    'compact' : require('./array/compact'),
+    'contains' : require('./array/contains'),
+    'difference' : require('./array/difference'),
+    'equals' : require('./array/equals'),
+    'every' : require('./array/every'),
+    'filter' : require('./array/filter'),
+    'find' : require('./array/find'),
+    'findIndex' : require('./array/findIndex'),
+    'findLast' : require('./array/findLast'),
+    'findLastIndex' : require('./array/findLastIndex'),
+    'flatten' : require('./array/flatten'),
+    'forEach' : require('./array/forEach'),
+    'groupBy' : require('./array/groupBy'),
+    'indexOf' : require('./array/indexOf'),
+    'indicesOf' : require('./array/indicesOf'),
+    'insert' : require('./array/insert'),
+    'intersection' : require('./array/intersection'),
+    'invoke' : require('./array/invoke'),
+    'join' : require('./array/join'),
+    'last' : require('./array/last'),
+    'lastIndexOf' : require('./array/lastIndexOf'),
+    'map' : require('./array/map'),
+    'max' : require('./array/max'),
+    'min' : require('./array/min'),
+    'pick' : require('./array/pick'),
+    'pluck' : require('./array/pluck'),
+    'range' : require('./array/range'),
+    'reduce' : require('./array/reduce'),
+    'reduceRight' : require('./array/reduceRight'),
+    'reject' : require('./array/reject'),
+    'remove' : require('./array/remove'),
+    'removeAll' : require('./array/removeAll'),
+    'reverse' : require('./array/reverse'),
+    'shuffle' : require('./array/shuffle'),
+    'slice' : require('./array/slice'),
+    'some' : require('./array/some'),
+    'sort' : require('./array/sort'),
+    'sortBy' : require('./array/sortBy'),
+    'split' : require('./array/split'),
+    'take' : require('./array/take'),
+    'toLookup' : require('./array/toLookup'),
+    'union' : require('./array/union'),
+    'unique' : require('./array/unique'),
+    'xor' : require('./array/xor'),
+    'zip' : require('./array/zip')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/append.js b/node_modules/nyks/node_modules/mout/src/array/append.js
new file mode 100644
index 0000000..549d875
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/append.js
@@ -0,0 +1,21 @@
+define(function () {
+
+    /**
+     * Appends an array to the end of another.
+     * The first array will be modified.
+     */
+    function append(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var pad = arr1.length,
+            i = -1,
+            len = arr2.length;
+        while (++i < len) {
+            arr1[pad + i] = arr2[i];
+        }
+        return arr1;
+    }
+    return append;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/collect.js b/node_modules/nyks/node_modules/mout/src/array/collect.js
new file mode 100644
index 0000000..8f60cda
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/collect.js
@@ -0,0 +1,26 @@
+define(['./append', '../function/makeIterator_'], function (append, makeIterator) {
+
+    /**
+     * Maps the items in the array and concatenates the result arrays.
+     */
+    function collect(arr, callback, thisObj){
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            var value = callback(arr[i], i, arr);
+            if (value != null) {
+                append(results, value);
+            }
+        }
+
+        return results;
+    }
+
+    return collect;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/combine.js b/node_modules/nyks/node_modules/mout/src/array/combine.js
new file mode 100644
index 0000000..22efb86
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/combine.js
@@ -0,0 +1,22 @@
+define(['./indexOf'], function (indexOf) {
+
+    /**
+     * Combines an array with all the items of another.
+     * Does not allow duplicates and is case and type sensitive.
+     */
+    function combine(arr1, arr2) {
+        if (arr2 == null) {
+            return arr1;
+        }
+
+        var i = -1, len = arr2.length;
+        while (++i < len) {
+            if (indexOf(arr1, arr2[i]) === -1) {
+                arr1.push(arr2[i]);
+            }
+        }
+
+        return arr1;
+    }
+    return combine;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/compact.js b/node_modules/nyks/node_modules/mout/src/array/compact.js
new file mode 100644
index 0000000..02a8109
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/compact.js
@@ -0,0 +1,13 @@
+define(['./filter'], function (filter) {
+
+    /**
+     * Remove all null/undefined items from array.
+     */
+    function compact(arr) {
+        return filter(arr, function(val){
+            return (val != null);
+        });
+    }
+
+    return compact;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/contains.js b/node_modules/nyks/node_modules/mout/src/array/contains.js
new file mode 100644
index 0000000..fca4f7c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/contains.js
@@ -0,0 +1,10 @@
+define(['./indexOf'], function (indexOf) {
+
+    /**
+     * If array contains values.
+     */
+    function contains(arr, val) {
+        return indexOf(arr, val) !== -1;
+    }
+    return contains;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/difference.js b/node_modules/nyks/node_modules/mout/src/array/difference.js
new file mode 100644
index 0000000..0d52c25
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/difference.js
@@ -0,0 +1,19 @@
+define(['./unique', './filter', './some', './contains', './slice'], function (unique, filter, some, contains, slice) {
+
+
+    /**
+     * Return a new Array with elements that aren't present in the other Arrays.
+     */
+    function difference(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return !some(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    return difference;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/equals.js b/node_modules/nyks/node_modules/mout/src/array/equals.js
new file mode 100644
index 0000000..0e3e148
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/equals.js
@@ -0,0 +1,28 @@
+define(['../lang/is', '../lang/isArray', './every'], function(is, isArray, every) {
+
+    /**
+     * Compares if both arrays have the same elements
+     */
+    function equals(a, b, callback){
+        callback = callback || is;
+
+        if (!isArray(a) || !isArray(b)) {
+            return callback(a, b);
+        }
+
+        if (a.length !== b.length) {
+            return false;
+        }
+
+        return every(a, makeCompare(callback), b);
+    }
+
+    function makeCompare(callback) {
+        return function(value, i) {
+            return i in this && callback(value, this[i]);
+        };
+    }
+
+    return equals;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/every.js b/node_modules/nyks/node_modules/mout/src/array/every.js
new file mode 100644
index 0000000..78ba46d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/every.js
@@ -0,0 +1,27 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array every
+     */
+    function every(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (!callback(arr[i], i, arr) ) {
+                result = false;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    return every;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/filter.js b/node_modules/nyks/node_modules/mout/src/array/filter.js
new file mode 100644
index 0000000..38add18
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/filter.js
@@ -0,0 +1,26 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array filter
+     */
+    function filter(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    return filter;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/find.js b/node_modules/nyks/node_modules/mout/src/array/find.js
new file mode 100644
index 0000000..3957dcd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/find.js
@@ -0,0 +1,13 @@
+define(['./findIndex'], function (findIndex) {
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(arr, iterator, thisObj){
+        var idx = findIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    return find;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/findIndex.js b/node_modules/nyks/node_modules/mout/src/array/findIndex.js
new file mode 100644
index 0000000..59dfeeb
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/findIndex.js
@@ -0,0 +1,23 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Returns the index of the first item that matches criteria
+     */
+    function findIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (iterator(arr[i], i, arr)) {
+                return i;
+            }
+        }
+
+        return -1;
+    }
+
+    return findIndex;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/findLast.js b/node_modules/nyks/node_modules/mout/src/array/findLast.js
new file mode 100644
index 0000000..9308fa6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/findLast.js
@@ -0,0 +1,13 @@
+define(['./findLastIndex'], function (findLastIndex) {
+
+    /**
+     * Returns last item that matches criteria
+     */
+    function findLast(arr, iterator, thisObj){
+        var idx = findLastIndex(arr, iterator, thisObj);
+        return idx >= 0? arr[idx] : void(0);
+    }
+
+    return findLast;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/findLastIndex.js b/node_modules/nyks/node_modules/mout/src/array/findLastIndex.js
new file mode 100644
index 0000000..45f266e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/findLastIndex.js
@@ -0,0 +1,24 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Returns the index of the last item that matches criteria
+     */
+    function findLastIndex(arr, iterator, thisObj){
+        iterator = makeIterator(iterator, thisObj);
+        if (arr == null) {
+            return -1;
+        }
+
+        var n = arr.length;
+        while (--n >= 0) {
+            if (iterator(arr[n], n, arr)) {
+                return n;
+            }
+        }
+
+        return -1;
+    }
+
+    return findLastIndex;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/flatten.js b/node_modules/nyks/node_modules/mout/src/array/flatten.js
new file mode 100644
index 0000000..3035b33
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/flatten.js
@@ -0,0 +1,44 @@
+define(['../lang/isArray', './append'], function (isArray, append) {
+
+    /*
+     * Helper function to flatten to a destination array.
+     * Used to remove the need to create intermediate arrays while flattening.
+     */
+    function flattenTo(arr, result, level) {
+        if (level === 0) {
+            append(result, arr);
+            return result;
+        }
+
+        var value,
+            i = -1,
+            len = arr.length;
+        while (++i < len) {
+            value = arr[i];
+            if (isArray(value)) {
+                flattenTo(value, result, level - 1);
+            } else {
+                result.push(value);
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Recursively flattens an array.
+     * A new array containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(arr, level) {
+        if (arr == null) {
+            return [];
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(arr, [], level);
+    }
+
+    return flatten;
+
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/array/forEach.js b/node_modules/nyks/node_modules/mout/src/array/forEach.js
new file mode 100644
index 0000000..0e04586
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/forEach.js
@@ -0,0 +1,23 @@
+define(function () {
+
+    /**
+     * Array forEach
+     */
+    function forEach(arr, callback, thisObj) {
+        if (arr == null) {
+            return;
+        }
+        var i = -1,
+            len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback.call(thisObj, arr[i], i, arr) === false ) {
+                break;
+            }
+        }
+    }
+
+    return forEach;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/groupBy.js b/node_modules/nyks/node_modules/mout/src/array/groupBy.js
new file mode 100644
index 0000000..47906be
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/groupBy.js
@@ -0,0 +1,32 @@
+define([
+    '../array/forEach',
+    '../function/identity',
+    '../function/makeIterator_'
+], function(forEach, identity, makeIterator) {
+
+    /**
+     * Bucket the array values.
+     */
+    function groupBy(arr, categorize, thisObj) {
+        if (categorize) {
+            categorize = makeIterator(categorize, thisObj);
+        } else {
+            // Default to identity function.
+            categorize = identity;
+        }
+
+        var buckets = {};
+        forEach(arr, function(element) {
+            var bucket = categorize(element);
+            if (!(bucket in buckets)) {
+                buckets[bucket] = [];
+            }
+
+            buckets[bucket].push(element);
+        });
+
+        return buckets;
+    }
+
+    return groupBy;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/indexOf.js b/node_modules/nyks/node_modules/mout/src/array/indexOf.js
new file mode 100644
index 0000000..0e75f99
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/indexOf.js
@@ -0,0 +1,28 @@
+define(function () {
+
+    /**
+     * Array.indexOf
+     */
+    function indexOf(arr, item, fromIndex) {
+        fromIndex = fromIndex || 0;
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length,
+            i = fromIndex < 0 ? len + fromIndex : fromIndex;
+        while (i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[i] === item) {
+                return i;
+            }
+
+            i++;
+        }
+
+        return -1;
+    }
+
+    return indexOf;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/indicesOf.js b/node_modules/nyks/node_modules/mout/src/array/indicesOf.js
new file mode 100644
index 0000000..c17006b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/indicesOf.js
@@ -0,0 +1,28 @@
+define(function () {
+
+    /**
+     * Array indicesOf
+     */
+    function indicesOf(arr, item, fromIndex) {
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        fromIndex = typeof fromIndex === 'number' ? fromIndex : 0;
+
+        var length = arr.length;
+        var cursor = fromIndex >= 0 ? fromIndex : length + fromIndex;
+
+        while (cursor < length) {
+            if (arr[cursor] === item) {
+                results.push(cursor);
+            }
+            cursor++;
+        }
+
+        return results;
+    }
+
+    return indicesOf;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/insert.js b/node_modules/nyks/node_modules/mout/src/array/insert.js
new file mode 100644
index 0000000..a3d7196
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/insert.js
@@ -0,0 +1,14 @@
+define(['./difference', './slice'], function (difference, slice) {
+
+    /**
+     * Insert item into array if not already present.
+     */
+    function insert(arr, rest_items) {
+        var diff = difference(slice(arguments, 1), arr);
+        if (diff.length) {
+            Array.prototype.push.apply(arr, diff);
+        }
+        return arr.length;
+    }
+    return insert;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/intersection.js b/node_modules/nyks/node_modules/mout/src/array/intersection.js
new file mode 100644
index 0000000..8d0baa4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/intersection.js
@@ -0,0 +1,20 @@
+define(['./unique', './filter', './every', './contains', './slice'], function (unique, filter, every, contains, slice) {
+
+
+    /**
+     * Return a new Array with elements common to all Arrays.
+     * - based on underscore.js implementation
+     */
+    function intersection(arr) {
+        var arrs = slice(arguments, 1),
+            result = filter(unique(arr), function(needle){
+                return every(arrs, function(haystack){
+                    return contains(haystack, needle);
+                });
+            });
+        return result;
+    }
+
+    return intersection;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/invoke.js b/node_modules/nyks/node_modules/mout/src/array/invoke.js
new file mode 100644
index 0000000..860d72a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/invoke.js
@@ -0,0 +1,23 @@
+define(['./slice'], function (slice) {
+
+    /**
+     * Call `methodName` on each item of the array passing custom arguments if
+     * needed.
+     */
+    function invoke(arr, methodName, var_args){
+        if (arr == null) {
+            return arr;
+        }
+
+        var args = slice(arguments, 2);
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            value[methodName].apply(value, args);
+        }
+
+        return arr;
+    }
+
+    return invoke;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/join.js b/node_modules/nyks/node_modules/mout/src/array/join.js
new file mode 100644
index 0000000..2c618d2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/join.js
@@ -0,0 +1,17 @@
+define(['./filter'], function(filter) {
+
+    function isValidString(val) {
+        return (val != null && val !== '');
+    }
+
+    /**
+     * Joins strings with the specified separator inserted between each value.
+     * Null values and empty strings will be excluded.
+     */
+    function join(items, separator) {
+        separator = separator || '';
+        return filter(items, isValidString).join(separator);
+    }
+
+    return join;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/last.js b/node_modules/nyks/node_modules/mout/src/array/last.js
new file mode 100644
index 0000000..2c85296
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/last.js
@@ -0,0 +1,16 @@
+define(function () {
+
+    /**
+     * Returns last element of array.
+     */
+    function last(arr){
+        if (arr == null || arr.length < 1) {
+            return undefined;
+        }
+
+        return arr[arr.length - 1];
+    }
+
+    return last;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/lastIndexOf.js b/node_modules/nyks/node_modules/mout/src/array/lastIndexOf.js
new file mode 100644
index 0000000..931235f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/lastIndexOf.js
@@ -0,0 +1,28 @@
+define(function () {
+
+    /**
+     * Array lastIndexOf
+     */
+    function lastIndexOf(arr, item, fromIndex) {
+        if (arr == null) {
+            return -1;
+        }
+
+        var len = arr.length;
+        fromIndex = (fromIndex == null || fromIndex >= len)? len - 1 : fromIndex;
+        fromIndex = (fromIndex < 0)? len + fromIndex : fromIndex;
+
+        while (fromIndex >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if (arr[fromIndex] === item) {
+                return fromIndex;
+            }
+            fromIndex--;
+        }
+
+        return -1;
+    }
+
+    return lastIndexOf;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/map.js b/node_modules/nyks/node_modules/mout/src/array/map.js
new file mode 100644
index 0000000..14377ab
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/map.js
@@ -0,0 +1,22 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array map
+     */
+    function map(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null){
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            results[i] = callback(arr[i], i, arr);
+        }
+
+        return results;
+    }
+
+     return map;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/max.js b/node_modules/nyks/node_modules/mout/src/array/max.js
new file mode 100644
index 0000000..d0628f0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/max.js
@@ -0,0 +1,34 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Return maximum value inside array
+     */
+    function max(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.max.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = -Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp > compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    return max;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/min.js b/node_modules/nyks/node_modules/mout/src/array/min.js
new file mode 100644
index 0000000..07a0c71
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/min.js
@@ -0,0 +1,34 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Return minimum value inside array
+     */
+    function min(arr, iterator, thisObj){
+        if (arr == null || !arr.length) {
+            return -Infinity;
+        } else if (arr.length && !iterator) {
+            return Math.min.apply(Math, arr);
+        } else {
+            iterator = makeIterator(iterator, thisObj);
+            var result,
+                compare = Infinity,
+                value,
+                temp;
+
+            var i = -1, len = arr.length;
+            while (++i < len) {
+                value = arr[i];
+                temp = iterator(value, i, arr);
+                if (temp < compare) {
+                    compare = temp;
+                    result = value;
+                }
+            }
+
+            return result;
+        }
+    }
+
+    return min;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/pick.js b/node_modules/nyks/node_modules/mout/src/array/pick.js
new file mode 100644
index 0000000..dc5b222
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/pick.js
@@ -0,0 +1,31 @@
+define(['../random/randInt'], function (randInt) {
+
+    /**
+     * Remove random item(s) from the Array and return it.
+     * Returns an Array of items if [nItems] is provided or a single item if
+     * it isn't specified.
+     */
+    function pick(arr, nItems){
+        if (nItems != null) {
+            var result = [];
+            if (nItems > 0 && arr && arr.length) {
+                nItems = nItems > arr.length? arr.length : nItems;
+                while (nItems--) {
+                    result.push( pickOne(arr) );
+                }
+            }
+            return result;
+        }
+        return (arr && arr.length)? pickOne(arr) : void(0);
+    }
+
+
+    function pickOne(arr){
+        var idx = randInt(0, arr.length - 1);
+        return arr.splice(idx, 1)[0];
+    }
+
+
+    return pick;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/pluck.js b/node_modules/nyks/node_modules/mout/src/array/pluck.js
new file mode 100644
index 0000000..c908856
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/pluck.js
@@ -0,0 +1,12 @@
+define(['./map'], function (map) {
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(arr, propName){
+        return map(arr, propName);
+    }
+
+    return pluck;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/range.js b/node_modules/nyks/node_modules/mout/src/array/range.js
new file mode 100644
index 0000000..148ebf9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/range.js
@@ -0,0 +1,27 @@
+define(['../math/countSteps'], function (countSteps) {
+
+    /**
+     * Returns an Array of numbers inside range.
+     */
+    function range(start, stop, step) {
+        if (stop == null) {
+            stop = start;
+            start = 0;
+        }
+        step = step || 1;
+
+        var result = [],
+            nSteps = countSteps(stop - start, step),
+            i = start;
+
+        while (i <= stop) {
+            result.push(i);
+            i += step;
+        }
+
+        return result;
+    }
+
+    return range;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/reduce.js b/node_modules/nyks/node_modules/mout/src/array/reduce.js
new file mode 100644
index 0000000..5f97ae8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/reduce.js
@@ -0,0 +1,33 @@
+define(function () {
+
+    /**
+     * Array reduce
+     */
+    function reduce(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2,
+            result = initVal;
+
+        if (arr == null || !arr.length) {
+            if (!hasInit) {
+                throw new Error('reduce of empty array with no initial value');
+            } else {
+                return initVal;
+            }
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (!hasInit) {
+                result = arr[i];
+                hasInit = true;
+            } else {
+                result = fn(result, arr[i], i, arr);
+            }
+        }
+
+        return result;
+    }
+
+    return reduce;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/reduceRight.js b/node_modules/nyks/node_modules/mout/src/array/reduceRight.js
new file mode 100644
index 0000000..ddae0e7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/reduceRight.js
@@ -0,0 +1,34 @@
+define(function () {
+
+    /**
+     * Array reduceRight
+     */
+    function reduceRight(arr, fn, initVal) {
+        // check for args.length since initVal might be "undefined" see #gh-57
+        var hasInit = arguments.length > 2;
+
+        if (arr == null || !arr.length) {
+            if (hasInit) {
+                return initVal;
+            } else {
+                throw new Error('reduce of empty array with no initial value');
+            }
+        }
+
+        var i = arr.length, result = initVal, value;
+        while (--i >= 0) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            value = arr[i];
+            if (!hasInit) {
+                result = value;
+                hasInit = true;
+            } else {
+                result = fn(result, value, i, arr);
+            }
+        }
+        return result;
+    }
+
+    return reduceRight;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/reject.js b/node_modules/nyks/node_modules/mout/src/array/reject.js
new file mode 100644
index 0000000..cad4038
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/reject.js
@@ -0,0 +1,25 @@
+define(['../function/makeIterator_'], function(makeIterator) {
+
+    /**
+     * Array reject
+     */
+    function reject(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var results = [];
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length, value;
+        while (++i < len) {
+            value = arr[i];
+            if (!callback(value, i, arr)) {
+                results.push(value);
+            }
+        }
+
+        return results;
+    }
+
+    return reject;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/remove.js b/node_modules/nyks/node_modules/mout/src/array/remove.js
new file mode 100644
index 0000000..dec9134
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/remove.js
@@ -0,0 +1,13 @@
+define(['./indexOf'], function(indexOf){
+
+    /**
+     * Remove a single item from the array.
+     * (it won't remove duplicates, just a single item)
+     */
+    function remove(arr, item){
+        var idx = indexOf(arr, item);
+        if (idx !== -1) arr.splice(idx, 1);
+    }
+
+    return remove;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/removeAll.js b/node_modules/nyks/node_modules/mout/src/array/removeAll.js
new file mode 100644
index 0000000..e81022b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/removeAll.js
@@ -0,0 +1,15 @@
+define(['./indexOf'], function(indexOf){
+
+    /**
+     * Remove all instances of an item from array.
+     */
+    function removeAll(arr, item){
+        var idx = indexOf(arr, item);
+        while (idx !== -1) {
+            arr.splice(idx, 1);
+            idx = indexOf(arr, item, idx);
+        }
+    }
+
+    return removeAll;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/reverse.js b/node_modules/nyks/node_modules/mout/src/array/reverse.js
new file mode 100644
index 0000000..b970427
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/reverse.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a copy of the array in reversed order.
+     */
+    function reverse(array) {
+        var copy = array.slice();
+        copy.reverse();
+        return copy;
+    }
+
+    return reverse;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/shuffle.js b/node_modules/nyks/node_modules/mout/src/array/shuffle.js
new file mode 100644
index 0000000..1965b66
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/shuffle.js
@@ -0,0 +1,28 @@
+define(['../random/randInt'], function (randInt) {
+
+    /**
+     * Shuffle array items.
+     */
+    function shuffle(arr) {
+        var results = [],
+            rnd;
+        if (arr == null) {
+            return results;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            if (!i) {
+                results[0] = arr[0];
+            } else {
+                rnd = randInt(0, i);
+                results[i] = results[rnd];
+                results[rnd] = arr[i];
+            }
+        }
+
+        return results;
+    }
+
+    return shuffle;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/slice.js b/node_modules/nyks/node_modules/mout/src/array/slice.js
new file mode 100644
index 0000000..994caba
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/slice.js
@@ -0,0 +1,35 @@
+define(function () {
+
+    /**
+     * Create slice of source array or array-like object
+     */
+    function slice(arr, start, end){
+        var len = arr.length;
+
+        if (start == null) {
+            start = 0;
+        } else if (start < 0) {
+            start = Math.max(len + start, 0);
+        } else {
+            start = Math.min(start, len);
+        }
+
+        if (end == null) {
+            end = len;
+        } else if (end < 0) {
+            end = Math.max(len + end, 0);
+        } else {
+            end = Math.min(end, len);
+        }
+
+        var result = [];
+        while (start < end) {
+            result.push(arr[start++]);
+        }
+
+        return result;
+    }
+
+    return slice;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/some.js b/node_modules/nyks/node_modules/mout/src/array/some.js
new file mode 100644
index 0000000..e46a978
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/some.js
@@ -0,0 +1,27 @@
+define(['../function/makeIterator_'], function (makeIterator) {
+
+    /**
+     * Array some
+     */
+    function some(arr, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length;
+        while (++i < len) {
+            // we iterate over sparse items since there is no way to make it
+            // work properly on IE 7-8. see #64
+            if ( callback(arr[i], i, arr) ) {
+                result = true;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    return some;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/sort.js b/node_modules/nyks/node_modules/mout/src/array/sort.js
new file mode 100644
index 0000000..4c19404
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/sort.js
@@ -0,0 +1,55 @@
+define(function () {
+
+    /**
+     * Merge sort (http://en.wikipedia.org/wiki/Merge_sort)
+     */
+    function mergeSort(arr, compareFn) {
+        if (arr == null) {
+            return [];
+        } else if (arr.length < 2) {
+            return arr;
+        }
+
+        if (compareFn == null) {
+            compareFn = defaultCompare;
+        }
+
+        var mid, left, right;
+
+        mid   = ~~(arr.length / 2);
+        left  = mergeSort( arr.slice(0, mid), compareFn );
+        right = mergeSort( arr.slice(mid, arr.length), compareFn );
+
+        return merge(left, right, compareFn);
+    }
+
+    function defaultCompare(a, b) {
+        return a < b ? -1 : (a > b? 1 : 0);
+    }
+
+    function merge(left, right, compareFn) {
+        var result = [];
+
+        while (left.length && right.length) {
+            if (compareFn(left[0], right[0]) <= 0) {
+                // if 0 it should preserve same order (stable)
+                result.push(left.shift());
+            } else {
+                result.push(right.shift());
+            }
+        }
+
+        if (left.length) {
+            result.push.apply(result, left);
+        }
+
+        if (right.length) {
+            result.push.apply(result, right);
+        }
+
+        return result;
+    }
+
+    return mergeSort;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/sortBy.js b/node_modules/nyks/node_modules/mout/src/array/sortBy.js
new file mode 100644
index 0000000..2797194
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/sortBy.js
@@ -0,0 +1,18 @@
+define(['./sort', '../function/makeIterator_'], function (sort, makeIterator) {
+
+    /*
+     * Sort array by the result of the callback
+     */
+    function sortBy(arr, callback, context){
+        callback = makeIterator(callback, context);
+
+        return sort(arr, function(a, b) {
+            a = callback(a);
+            b = callback(b);
+            return (a < b) ? -1 : ((a > b) ? 1 : 0);
+        });
+    }
+
+    return sortBy;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/split.js b/node_modules/nyks/node_modules/mout/src/array/split.js
new file mode 100644
index 0000000..a17275e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/split.js
@@ -0,0 +1,35 @@
+define(function() {
+
+    /**
+     * Split array into a fixed number of segments.
+     */
+    function split(array, segments) {
+        segments = segments || 2;
+        var results = [];
+        if (array == null) {
+            return results;
+        }
+
+        var minLength = Math.floor(array.length / segments),
+            remainder = array.length % segments,
+            i = 0,
+            len = array.length,
+            segmentIndex = 0,
+            segmentLength;
+
+        while (i < len) {
+            segmentLength = minLength;
+            if (segmentIndex < remainder) {
+                segmentLength++;
+            }
+
+            results.push(array.slice(i, i + segmentLength));
+
+            segmentIndex++;
+            i += segmentLength;
+        }
+
+        return results;
+    }
+    return split;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/take.js b/node_modules/nyks/node_modules/mout/src/array/take.js
new file mode 100644
index 0000000..74b8241
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/take.js
@@ -0,0 +1,24 @@
+define(function () {
+
+    /**
+     * Iterates over a callback a set amount of times
+     * returning the results
+     */
+    function take(n, callback, thisObj){
+        var i = -1;
+        var arr = [];
+        if( !thisObj ){
+            while(++i < n){
+                arr[i] = callback(i, n);
+            }
+        } else {
+            while(++i < n){
+                arr[i] = callback.call(thisObj, i, n);
+            }
+        }
+        return arr;
+    }
+
+    return take;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/toLookup.js b/node_modules/nyks/node_modules/mout/src/array/toLookup.js
new file mode 100644
index 0000000..aac8fd1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/toLookup.js
@@ -0,0 +1,28 @@
+define(['../lang/isFunction'], function (isFunction) {
+
+    /**
+     * Creates an object that holds a lookup for the objects in the array.
+     */
+    function toLookup(arr, key) {
+        var result = {};
+        if (arr == null) {
+            return result;
+        }
+
+        var i = -1, len = arr.length, value;
+        if (isFunction(key)) {
+            while (++i < len) {
+                value = arr[i];
+                result[key(value)] = value;
+            }
+        } else {
+            while (++i < len) {
+                value = arr[i];
+                result[value[key]] = value;
+            }
+        }
+
+        return result;
+    }
+    return toLookup;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/union.js b/node_modules/nyks/node_modules/mout/src/array/union.js
new file mode 100644
index 0000000..5f9922e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/union.js
@@ -0,0 +1,18 @@
+define(['./unique', './append'], function (unique, append) {
+
+    /**
+     * Concat multiple arrays and remove duplicates
+     */
+    function union(arrs) {
+        var results = [];
+        var i = -1, len = arguments.length;
+        while (++i < len) {
+            append(results, arguments[i]);
+        }
+
+        return unique(results);
+    }
+
+    return union;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/unique.js b/node_modules/nyks/node_modules/mout/src/array/unique.js
new file mode 100644
index 0000000..c4a011a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/unique.js
@@ -0,0 +1,25 @@
+define(['./filter'], function(filter){
+
+    /**
+     * @return {array} Array of unique items
+     */
+    function unique(arr, compare){
+        compare = compare || isEqual;
+        return filter(arr, function(item, i, arr){
+            var n = arr.length;
+            while (++i < n) {
+                if ( compare(item, arr[i]) ) {
+                    return false;
+                }
+            }
+            return true;
+        });
+    }
+
+    function isEqual(a, b){
+        return a === b;
+    }
+
+    return unique;
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/array/xor.js b/node_modules/nyks/node_modules/mout/src/array/xor.js
new file mode 100644
index 0000000..7df89d9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/xor.js
@@ -0,0 +1,24 @@
+define(['./unique', './filter', './contains'], function (unique, filter, contains) {
+
+
+    /**
+     * Exclusive OR. Returns items that are present in a single array.
+     * - like ptyhon's `symmetric_difference`
+     */
+    function xor(arr1, arr2) {
+        arr1 = unique(arr1);
+        arr2 = unique(arr2);
+
+        var a1 = filter(arr1, function(item){
+                return !contains(arr2, item);
+            }),
+            a2 = filter(arr2, function(item){
+                return !contains(arr1, item);
+            });
+
+        return a1.concat(a2);
+    }
+
+    return xor;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/array/zip.js b/node_modules/nyks/node_modules/mout/src/array/zip.js
new file mode 100644
index 0000000..bd0dbb8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/array/zip.js
@@ -0,0 +1,27 @@
+define(['./max', './map'], function (max, map) {
+
+    function getLength(arr) {
+        return arr == null ? 0 : arr.length;
+    }
+
+    /**
+     * Merges together the values of each of the arrays with the values at the
+     * corresponding position.
+     */
+    function zip(arr){
+        var len = arr ? max(map(arguments, getLength)) : 0,
+            results = [],
+            i = -1;
+        while (++i < len) {
+            // jshint loopfunc: true
+            results.push(map(arguments, function(item) {
+                return item == null ? undefined : item[i];
+            }));
+        }
+
+        return results;
+    }
+
+    return zip;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection.js b/node_modules/nyks/node_modules/mout/src/collection.js
new file mode 100644
index 0000000..386e6da
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection.js
@@ -0,0 +1,22 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'contains' : require('./collection/contains'),
+    'every' : require('./collection/every'),
+    'filter' : require('./collection/filter'),
+    'find' : require('./collection/find'),
+    'forEach' : require('./collection/forEach'),
+    'make_' : require('./collection/make_'),
+    'map' : require('./collection/map'),
+    'max' : require('./collection/max'),
+    'min' : require('./collection/min'),
+    'pluck' : require('./collection/pluck'),
+    'reduce' : require('./collection/reduce'),
+    'reject' : require('./collection/reject'),
+    'size' : require('./collection/size'),
+    'some' : require('./collection/some')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/contains.js b/node_modules/nyks/node_modules/mout/src/collection/contains.js
new file mode 100644
index 0000000..192167e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/contains.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/contains', '../object/contains'], function (make, arrContains, objContains) {
+
+    /**
+     */
+    return make(arrContains, objContains);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/every.js b/node_modules/nyks/node_modules/mout/src/collection/every.js
new file mode 100644
index 0000000..6317f50
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/every.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/every', '../object/every'], function (make, arrEvery, objEvery) {
+
+    /**
+     */
+    return make(arrEvery, objEvery);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/filter.js b/node_modules/nyks/node_modules/mout/src/collection/filter.js
new file mode 100644
index 0000000..4e7fadc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/filter.js
@@ -0,0 +1,22 @@
+define(['./forEach', '../function/makeIterator_'], function (forEach, makeIterator) {
+
+    /**
+     * filter collection values, returns array.
+     */
+    function filter(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        var results = [];
+        if (!list) {
+            return results;
+        }
+        forEach(list, function(value, index, list) {
+            if (iterator(value, index, list)) {
+                results[results.length] = value;
+            }
+        });
+        return results;
+    }
+
+    return filter;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/find.js b/node_modules/nyks/node_modules/mout/src/collection/find.js
new file mode 100644
index 0000000..681f941
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/find.js
@@ -0,0 +1,8 @@
+define(['./make_', '../array/find', '../object/find'], function(make, arrFind, objFind) {
+
+    /**
+     * Find value that returns true on iterator check.
+     */
+    return make(arrFind, objFind);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/forEach.js b/node_modules/nyks/node_modules/mout/src/collection/forEach.js
new file mode 100644
index 0000000..3b39d3e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/forEach.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/forEach', '../object/forOwn'], function (make, arrForEach, objForEach) {
+
+    /**
+     */
+    return make(arrForEach, objForEach);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/make_.js b/node_modules/nyks/node_modules/mout/src/collection/make_.js
new file mode 100644
index 0000000..290a651
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/make_.js
@@ -0,0 +1,19 @@
+define(['../array/slice'], function(slice){
+
+    /**
+     * internal method used to create other collection modules.
+     */
+    function makeCollectionMethod(arrMethod, objMethod, defaultReturn) {
+        return function(){
+            var args = slice(arguments);
+            if (args[0] == null) {
+                return defaultReturn;
+            }
+            // array-like is treated as array
+            return (typeof args[0].length === 'number')? arrMethod.apply(null, args) : objMethod.apply(null, args);
+        };
+    }
+
+    return makeCollectionMethod;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/map.js b/node_modules/nyks/node_modules/mout/src/collection/map.js
new file mode 100644
index 0000000..96e2498
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/map.js
@@ -0,0 +1,20 @@
+define(['../lang/isObject', '../object/values', '../array/map', '../function/makeIterator_'], function (isObject, values, arrMap, makeIterator) {
+
+    /**
+     * Map collection values, returns Array.
+     */
+    function map(list, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        // list.length to check array-like object, if not array-like
+        // we simply map all the object values
+        if( isObject(list) && list.length == null ){
+            list = values(list);
+        }
+        return arrMap(list, function (val, key, list) {
+            return callback(val, key, list);
+        });
+    }
+
+    return map;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/max.js b/node_modules/nyks/node_modules/mout/src/collection/max.js
new file mode 100644
index 0000000..de9a6da
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/max.js
@@ -0,0 +1,8 @@
+define(['./make_', '../array/max', '../object/max'], function (make, arrMax, objMax) {
+
+    /**
+     * Get maximum value inside collection
+     */
+    return make(arrMax, objMax);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/min.js b/node_modules/nyks/node_modules/mout/src/collection/min.js
new file mode 100644
index 0000000..f0c239a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/min.js
@@ -0,0 +1,8 @@
+define(['./make_', '../array/min', '../object/min'], function (make, arrMin, objMin) {
+
+    /**
+     * Get minimum value inside collection.
+     */
+    return make(arrMin, objMin);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/pluck.js b/node_modules/nyks/node_modules/mout/src/collection/pluck.js
new file mode 100644
index 0000000..ef784a7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/pluck.js
@@ -0,0 +1,14 @@
+define(['./map'], function (map) {
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(list, key) {
+        return map(list, function(value) {
+            return value[key];
+        });
+    }
+
+    return pluck;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/reduce.js b/node_modules/nyks/node_modules/mout/src/collection/reduce.js
new file mode 100644
index 0000000..bd05d43
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/reduce.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/reduce', '../object/reduce'], function (make, arrReduce, objReduce) {
+
+    /**
+     */
+    return make(arrReduce, objReduce);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/reject.js b/node_modules/nyks/node_modules/mout/src/collection/reject.js
new file mode 100644
index 0000000..581adfd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/reject.js
@@ -0,0 +1,15 @@
+define(['./filter', '../function/makeIterator_'], function (filter, makeIterator) {
+
+    /**
+     * Inverse or collection/filter
+     */
+    function reject(list, iterator, thisObj) {
+        iterator = makeIterator(iterator, thisObj);
+        return filter(list, function(value, index, list) {
+            return !iterator(value, index, list);
+        }, thisObj);
+    }
+
+    return reject;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/size.js b/node_modules/nyks/node_modules/mout/src/collection/size.js
new file mode 100644
index 0000000..4e5ab41
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/size.js
@@ -0,0 +1,18 @@
+define(['../lang/isArray', '../object/size'], function (isArray, objSize) {
+
+    /**
+     * Get collection size
+     */
+    function size(list) {
+        if (!list) {
+            return 0;
+        }
+        if (isArray(list)) {
+            return list.length;
+        }
+        return objSize(list);
+    }
+
+    return size;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/collection/some.js b/node_modules/nyks/node_modules/mout/src/collection/some.js
new file mode 100644
index 0000000..c0aebee
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/collection/some.js
@@ -0,0 +1,7 @@
+define(['./make_', '../array/some', '../object/some'], function (make, arrSome, objSome) {
+
+    /**
+     */
+    return make(arrSome, objSome);
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date.js b/node_modules/nyks/node_modules/mout/src/date.js
new file mode 100644
index 0000000..b3038ee
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date.js
@@ -0,0 +1,22 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'dayOfTheYear' : require('./date/dayOfTheYear'),
+    'diff' : require('./date/diff'),
+    'i18n_' : require('./date/i18n_'),
+    'isLeapYear' : require('./date/isLeapYear'),
+    'isSame' : require('./date/isSame'),
+    'parseIso' : require('./date/parseIso'),
+    'quarter' : require('./date/quarter'),
+    'startOf' : require('./date/startOf'),
+    'strftime' : require('./date/strftime'),
+    'timezoneAbbr' : require('./date/timezoneAbbr'),
+    'timezoneOffset' : require('./date/timezoneOffset'),
+    'totalDaysInMonth' : require('./date/totalDaysInMonth'),
+    'totalDaysInYear' : require('./date/totalDaysInYear'),
+    'weekOfTheYear' : require('./date/weekOfTheYear')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/dayOfTheYear.js b/node_modules/nyks/node_modules/mout/src/date/dayOfTheYear.js
new file mode 100644
index 0000000..dc77ae1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/dayOfTheYear.js
@@ -0,0 +1,13 @@
+define(['../lang/isDate'], function (isDate) {
+
+    /**
+     * return the day of the year (1..366)
+     */
+    function dayOfTheYear(date){
+        return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -
+                Date.UTC(date.getFullYear(), 0, 1)) / 86400000 + 1;
+    }
+
+    return dayOfTheYear;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/diff.js b/node_modules/nyks/node_modules/mout/src/date/diff.js
new file mode 100644
index 0000000..667165f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/diff.js
@@ -0,0 +1,128 @@
+define(['./totalDaysInMonth', './totalDaysInYear', '../time/convert'], function(totalDaysInMonth, totalDaysInYear, convert){
+
+    /**
+     * calculate the difference between dates (range)
+     */
+    function diff(start, end, unitName){
+        // sort the dates to make it easier to process (specially year/month)
+        if (start > end) {
+            var swap = start;
+            start = end;
+            end = swap;
+        }
+
+        var output;
+
+        if (unitName === 'month') {
+            output = getMonthsDiff(start, end);
+        } else if (unitName === 'year'){
+            output = getYearsDiff(start, end);
+        } else if (unitName != null) {
+            if (unitName === 'day') {
+                // ignore timezone difference because of daylight savings time
+                start = toUtc(start);
+                end = toUtc(end);
+            }
+            output = convert(end - start, 'ms', unitName);
+        } else {
+            output = end - start;
+        }
+
+        return output;
+    }
+
+
+    function toUtc(d){
+        // we ignore timezone differences on purpose because of daylight
+        // savings time, otherwise it would return fractional days/weeks even
+        // if a full day elapsed. eg:
+        // Wed Feb 12 2014 00:00:00 GMT-0200 (BRST)
+        // Sun Feb 16 2014 00:00:00 GMT-0300 (BRT)
+        // diff should be 4 days and not 4.041666666666667
+        return Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(),
+                        d.getHours(), d.getMinutes(), d.getSeconds(),
+                        d.getMilliseconds());
+    }
+
+
+    function getMonthsDiff(start, end){
+        return getElapsedMonths(start, end) +
+               getElapsedYears(start, end) * 12 +
+               getFractionalMonth(start, end);
+    }
+
+
+    function getYearsDiff(start, end){
+        var elapsedYears = getElapsedYears(start, end);
+        return elapsedYears + getFractionalYear(start, end, elapsedYears);
+    }
+
+
+    function getElapsedMonths(start, end){
+        var monthDiff = end.getMonth() - start.getMonth();
+        if (monthDiff < 0) {
+            monthDiff += 12;
+        }
+        // less than a full month
+        if (start.getDate() > end.getDate()) {
+            monthDiff -= 1;
+        }
+        return monthDiff;
+    }
+
+
+    function getElapsedYears(start, end){
+        var yearDiff = end.getFullYear() - start.getFullYear();
+        // less than a full year
+        if (start.getMonth() > end.getMonth()) {
+            yearDiff -= 1;
+        }
+        return yearDiff;
+    }
+
+
+    function getFractionalMonth(start, end){
+        var fractionalDiff = 0;
+        var startDay = start.getDate();
+        var endDay = end.getDate();
+
+        if (startDay !== endDay) {
+            var startTotalDays = totalDaysInMonth(start);
+            var endTotalDays = totalDaysInMonth(end);
+            var totalDays;
+            var daysElapsed;
+
+            if (startDay > endDay) {
+                // eg: Jan 29 - Feb 27 (29 days elapsed but not a full month)
+                var baseDay = startTotalDays - startDay;
+                daysElapsed = endDay + baseDay;
+                // total days should be relative to 1st day of next month if
+                // startDay > endTotalDays
+                totalDays = (startDay > endTotalDays)?
+                    endTotalDays + baseDay + 1 : startDay + baseDay;
+            } else {
+                // fractional is only based on endMonth eg: Jan 12 - Feb 18
+                // (6 fractional days, 28 days until next full month)
+                daysElapsed = endDay - startDay;
+                totalDays = endTotalDays;
+            }
+
+            fractionalDiff = daysElapsed / totalDays;
+        }
+
+        return fractionalDiff;
+    }
+
+
+    function getFractionalYear(start, end, elapsedYears){
+        var base = elapsedYears?
+            new Date(end.getFullYear(), start.getMonth(), start.getDate()) :
+            start;
+        var elapsedDays = diff(base, end, 'day');
+        return elapsedDays / totalDaysInYear(end);
+    }
+
+
+    return diff;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/i18n/de-DE.js b/node_modules/nyks/node_modules/mout/src/date/i18n/de-DE.js
new file mode 100644
index 0000000..46f5c6a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/i18n/de-DE.js
@@ -0,0 +1,61 @@
+define(function(){
+    // de-DE (German)
+    return {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Januar",
+            "Februar",
+            "März",
+            "April",
+            "Mai",
+            "Juni",
+            "Juli",
+            "August",
+            "September",
+            "Oktober",
+            "November",
+            "Dezember"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Febr",
+            "März",
+            "Apr",
+            "Mai",
+            "Juni",
+            "Juli",
+            "Aug",
+            "Sept",
+            "Okt",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Sonntag",
+            "Montag",
+            "Dienstag",
+            "Mittwoch",
+            "Donnerstag",
+            "Freitag",
+            "Samstag"
+        ],
+
+        "days_abbr" : [
+            "So",
+            "Mo",
+            "Di",
+            "Mi",
+            "Do",
+            "Fr",
+            "Sa"
+        ]
+    };
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/i18n/en-US.js b/node_modules/nyks/node_modules/mout/src/date/i18n/en-US.js
new file mode 100644
index 0000000..5e640c2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/i18n/en-US.js
@@ -0,0 +1,61 @@
+define(function(){
+    // en-US (English, United States)
+    return {
+        "am" : "AM",
+        "pm" : "PM",
+
+        "x": "%m/%d/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %I:%M:%S %p %Z",
+
+        "months" : [
+            "January",
+            "February",
+            "March",
+            "April",
+            "May",
+            "June",
+            "July",
+            "August",
+            "September",
+            "October",
+            "November",
+            "December"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Feb",
+            "Mar",
+            "Apr",
+            "May",
+            "Jun",
+            "Jul",
+            "Aug",
+            "Sep",
+            "Oct",
+            "Nov",
+            "Dec"
+        ],
+
+        "days" : [
+            "Sunday",
+            "Monday",
+            "Tuesday",
+            "Wednesday",
+            "Thursday",
+            "Friday",
+            "Saturday"
+        ],
+
+        "days_abbr" : [
+            "Sun",
+            "Mon",
+            "Tue",
+            "Wed",
+            "Thu",
+            "Fri",
+            "Sat"
+        ]
+    };
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/i18n/pt-BR.js b/node_modules/nyks/node_modules/mout/src/date/i18n/pt-BR.js
new file mode 100644
index 0000000..47256dd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/i18n/pt-BR.js
@@ -0,0 +1,61 @@
+define(function(){
+    // pt-BR (Brazillian Portuguese)
+    return {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d/%m/%y",
+        "X": "%H:%M:%S",
+        "c": "%a %d %b %Y %H:%M:%S %Z",
+
+        "months" : [
+            "Janeiro",
+            "Fevereiro",
+            "Março",
+            "Abril",
+            "Maio",
+            "Junho",
+            "Julho",
+            "Agosto",
+            "Setembro",
+            "Outubro",
+            "Novembro",
+            "Dezembro"
+        ],
+
+        "months_abbr" : [
+            "Jan",
+            "Fev",
+            "Mar",
+            "Abr",
+            "Mai",
+            "Jun",
+            "Jul",
+            "Ago",
+            "Set",
+            "Out",
+            "Nov",
+            "Dez"
+        ],
+
+        "days" : [
+            "Domingo",
+            "Segunda",
+            "Terça",
+            "Quarta",
+            "Quinta",
+            "Sexta",
+            "Sábado"
+        ],
+
+        "days_abbr" : [
+            "Dom",
+            "Seg",
+            "Ter",
+            "Qua",
+            "Qui",
+            "Sex",
+            "Sáb"
+        ]
+    };
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/i18n/ru.js b/node_modules/nyks/node_modules/mout/src/date/i18n/ru.js
new file mode 100644
index 0000000..89f0d06
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/i18n/ru.js
@@ -0,0 +1,61 @@
+define(function(){
+    // ru (Russian)
+    return {
+        "am" : "",
+        "pm" : "",
+
+        "x": "%d.%m.%Y",
+        "X": "%H:%M:%S",
+        "c": "%a, %e %b %Y г., %H:%M",
+
+        "months" : [
+            "Январь",
+            "Февраль",
+            "Март",
+            "Апрель",
+            "Май",
+            "Июнь",
+            "Июль",
+            "Август",
+            "Сентябрь",
+            "Октябрь",
+            "Ноябрь",
+            "Декабрь"
+        ],
+
+        "months_abbr" : [
+            "Янв.",
+            "Февр.",
+            "Март",
+            "Апр.",
+            "Май",
+            "Июнь",
+            "Июль",
+            "Авг.",
+            "Сент.",
+            "Окт.",
+            "Нояб.",
+            "Дек."
+        ],
+
+        "days" : [
+            "Воскресенье",
+            "Понедельник",
+            "Вторник",
+            "Среда",
+            "Четверг",
+            "Пятница",
+            "Суббота"
+        ],
+
+        "days_abbr" : [
+            "Вс",
+            "Пн",
+            "Вт",
+            "Ср",
+            "Чт",
+            "Пт",
+            "Сб"
+        ]
+    };
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/i18n_.js b/node_modules/nyks/node_modules/mout/src/date/i18n_.js
new file mode 100644
index 0000000..c04ce88
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/i18n_.js
@@ -0,0 +1,13 @@
+define(['../object/mixIn', './i18n/en-US'], function(mixIn, enUS){
+
+    // we also use mixIn to make sure we don't affect the original locale
+    var activeLocale = mixIn({}, enUS, {
+        // we expose a "set" method to allow overriding the global locale
+        set : function(localeData){
+            mixIn(activeLocale, localeData);
+        }
+    });
+
+    return activeLocale;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/isLeapYear.js b/node_modules/nyks/node_modules/mout/src/date/isLeapYear.js
new file mode 100644
index 0000000..e400b43
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/isLeapYear.js
@@ -0,0 +1,15 @@
+define(['../lang/isDate'], function (isDate) {
+
+    /**
+     * checks if it's a leap year
+     */
+    function isLeapYear(fullYear){
+        if (isDate(fullYear)) {
+            fullYear = fullYear.getFullYear();
+        }
+        return fullYear % 400 === 0 || (fullYear % 100 !== 0 && fullYear % 4 === 0);
+    }
+
+    return isLeapYear;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/isSame.js b/node_modules/nyks/node_modules/mout/src/date/isSame.js
new file mode 100644
index 0000000..f30531f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/isSame.js
@@ -0,0 +1,16 @@
+define(['./startOf'], function (startOf) {
+
+    /**
+     * Check if date is "same" with optional period
+     */
+    function isSame(date1, date2, period){
+        if (period) {
+            date1 = startOf(date1, period);
+            date2 = startOf(date2, period);
+        }
+        return Number(date1) === Number(date2);
+    }
+
+    return isSame;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/parseIso.js b/node_modules/nyks/node_modules/mout/src/date/parseIso.js
new file mode 100644
index 0000000..b21c879
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/parseIso.js
@@ -0,0 +1,146 @@
+define(['../array/some'], function (some) {
+
+    var datePatterns = [
+        /^([0-9]{4})$/,                        // YYYY
+        /^([0-9]{4})-([0-9]{2})$/,             // YYYY-MM (YYYYMM not allowed)
+        /^([0-9]{4})-?([0-9]{2})-?([0-9]{2})$/ // YYYY-MM-DD or YYYYMMDD
+    ];
+    var ORD_DATE = /^([0-9]{4})-?([0-9]{3})$/; // YYYY-DDD
+
+    var timePatterns = [
+        /^([0-9]{2}(?:\.[0-9]*)?)$/,                      // HH.hh
+        /^([0-9]{2}):?([0-9]{2}(?:\.[0-9]*)?)$/,          // HH:MM.mm
+        /^([0-9]{2}):?([0-9]{2}):?([0-9]{2}(\.[0-9]*)?)$/ // HH:MM:SS.ss
+    ];
+
+    var DATE_TIME = /^(.+)T(.+)$/;
+    var TIME_ZONE = /^(.+)([+\-])([0-9]{2}):?([0-9]{2})$/;
+
+    function matchAll(str, patterns) {
+        var match;
+        var found = some(patterns, function(pattern) {
+            return !!(match = pattern.exec(str));
+        });
+
+        return found ? match : null;
+    }
+
+    function getDate(year, month, day) {
+        var date = new Date(Date.UTC(year, month, day));
+
+        // Explicitly set year to avoid Date.UTC making dates < 100 relative to
+        // 1900
+        date.setUTCFullYear(year);
+
+        var valid =
+            date.getUTCFullYear() === year &&
+            date.getUTCMonth() === month &&
+            date.getUTCDate() === day;
+        return valid ? +date : NaN;
+    }
+
+    function parseOrdinalDate(str) {
+        var match = ORD_DATE.exec(str);
+        if (match ) {
+            var year = +match[1],
+                day = +match[2],
+                date = new Date(Date.UTC(year, 0, day));
+
+            if (date.getUTCFullYear() === year) {
+                return +date;
+            }
+        }
+
+        return NaN;
+    }
+
+    function parseDate(str) {
+        var match, year, month, day;
+
+        match = matchAll(str, datePatterns);
+        if (match === null) {
+            // Ordinal dates are verified differently.
+            return parseOrdinalDate(str);
+        }
+
+        year = (match[1] === void 0) ? 0 : +match[1];
+        month = (match[2] === void 0) ? 0 : +match[2] - 1;
+        day = (match[3] === void 0) ? 1 : +match[3];
+
+        return getDate(year, month, day);
+    }
+
+    function getTime(hr, min, sec) {
+        var valid =
+            (hr < 24 && hr >= 0 &&
+             min < 60 && min >= 0 &&
+             sec < 60 && min >= 0) ||
+            (hr === 24 && min === 0 && sec === 0);
+        if (!valid) {
+            return NaN;
+        }
+
+        return ((hr * 60 + min) * 60 + sec) * 1000;
+    }
+
+    function parseOffset(str) {
+        var match;
+        if (str.charAt(str.length - 1) === 'Z') {
+            str = str.substring(0, str.length - 1);
+        } else {
+            match = TIME_ZONE.exec(str);
+            if (match) {
+                var hours = +match[3],
+                    minutes = (match[4] === void 0) ? 0 : +match[4],
+                    offset = getTime(hours, minutes, 0);
+
+                if (match[2] === '-') {
+                    offset *= -1;
+                }
+
+                return { offset: offset, time: match[1] };
+            }
+        }
+
+        // No time zone specified, assume UTC
+        return { offset: 0, time: str };
+    }
+
+    function parseTime(str) {
+        var match;
+        var offset = parseOffset(str);
+
+        str = offset.time;
+        offset = offset.offset;
+        if (isNaN(offset)) {
+            return NaN;
+        }
+
+        match = matchAll(str, timePatterns);
+        if (match === null) {
+            return NaN;
+        }
+
+        var hours = (match[1] === void 0) ? 0 : +match[1],
+            minutes = (match[2] === void 0) ? 0 : +match[2],
+            seconds = (match[3] === void 0) ? 0 : +match[3];
+
+        return getTime(hours, minutes, seconds) - offset;
+    }
+
+    /**
+     * Parse an ISO8601 formatted date string, and return a Date object.
+     */
+    function parseISO8601(str){
+        var match = DATE_TIME.exec(str);
+        if (!match) {
+            // No time specified
+            return parseDate(str);
+        }
+
+        return parseDate(match[1]) + parseTime(match[2]);
+    }
+
+    return parseISO8601;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/quarter.js b/node_modules/nyks/node_modules/mout/src/date/quarter.js
new file mode 100644
index 0000000..62b9206
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/quarter.js
@@ -0,0 +1,16 @@
+define(function () {
+
+    /**
+     * gets date quarter
+     */
+    function quarter(date){
+        var month = date.getMonth();
+        if (month < 3) return 1;
+        if (month < 6) return 2;
+        if (month < 9) return 3;
+        return 4;
+    }
+
+    return quarter;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/startOf.js b/node_modules/nyks/node_modules/mout/src/date/startOf.js
new file mode 100644
index 0000000..747f114
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/startOf.js
@@ -0,0 +1,54 @@
+define(['../lang/clone'], function (clone) {
+
+    /**
+     * get a new Date object representing start of period
+     */
+    function startOf(date, period){
+        date = clone(date);
+
+        // intentionally removed "break" from switch since start of
+        // month/year/etc should also reset the following periods
+        switch (period) {
+            case 'year':
+                date.setMonth(0);
+            /* falls through */
+            case 'month':
+                date.setDate(1);
+            /* falls through */
+            case 'week':
+            case 'day':
+                date.setHours(0);
+            /* falls through */
+            case 'hour':
+                date.setMinutes(0);
+            /* falls through */
+            case 'minute':
+                date.setSeconds(0);
+            /* falls through */
+            case 'second':
+                date.setMilliseconds(0);
+                break;
+            default:
+                throw new Error('"'+ period +'" is not a valid period');
+        }
+
+        // week is the only case that should reset the weekDay and maybe even
+        // overflow to previous month
+        if (period === 'week') {
+            var weekDay = date.getDay();
+            var baseDate = date.getDate();
+            if (weekDay) {
+                if (weekDay >= baseDate) {
+                    //start of the week is on previous month
+                    date.setDate(0);
+                }
+                date.setDate(date.getDate() - date.getDay());
+            }
+        }
+
+        return date;
+    }
+
+    return startOf;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/strftime.js b/node_modules/nyks/node_modules/mout/src/date/strftime.js
new file mode 100644
index 0000000..9c09c69
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/strftime.js
@@ -0,0 +1,115 @@
+define(['../number/pad', '../string/lpad', './i18n_', './dayOfTheYear', './timezoneOffset', './timezoneAbbr', './weekOfTheYear'], function (pad, lpad, i18n, dayOfTheYear, timezoneOffset, timezoneAbbr, weekOfTheYear) {
+
+    var _combinations = {
+        'D': '%m/%d/%y',
+        'F': '%Y-%m-%d',
+        'r': '%I:%M:%S %p',
+        'R': '%H:%M',
+        'T': '%H:%M:%S',
+        'x': 'locale',
+        'X': 'locale',
+        'c': 'locale'
+    };
+
+
+    /**
+     * format date based on strftime format
+     */
+    function strftime(date, format, localeData){
+        localeData = localeData  || i18n;
+        var reToken = /%([a-z%])/gi;
+
+        function makeIterator(fn) {
+            return function(match, token){
+                return fn(date, token, localeData);
+            };
+        }
+
+        return format
+            .replace(reToken, makeIterator(expandCombinations))
+            .replace(reToken, makeIterator(convertToken));
+    }
+
+
+    function expandCombinations(date, token, l10n){
+        if (token in _combinations) {
+            var expanded = _combinations[token];
+            return expanded === 'locale'? l10n[token] : expanded;
+        } else {
+            return '%'+ token;
+        }
+    }
+
+
+    function convertToken(date, token, l10n){
+        switch (token){
+            case 'a':
+                return l10n.days_abbr[date.getDay()];
+            case 'A':
+                return l10n.days[date.getDay()];
+            case 'h':
+            case 'b':
+                return l10n.months_abbr[date.getMonth()];
+            case 'B':
+                return l10n.months[date.getMonth()];
+            case 'C':
+                return pad(Math.floor(date.getFullYear() / 100), 2);
+            case 'd':
+                return pad(date.getDate(), 2);
+            case 'e':
+                return pad(date.getDate(), 2, ' ');
+            case 'H':
+                return pad(date.getHours(), 2);
+            case 'I':
+                return pad(date.getHours() % 12, 2);
+            case 'j':
+                return pad(dayOfTheYear(date), 3);
+            case 'l':
+                return lpad(date.getHours() % 12, 2);
+            case 'L':
+                return pad(date.getMilliseconds(), 3);
+            case 'm':
+                return pad(date.getMonth() + 1, 2);
+            case 'M':
+                return pad(date.getMinutes(), 2);
+            case 'n':
+                return '\n';
+            case 'p':
+                return date.getHours() >= 12? l10n.pm : l10n.am;
+            case 'P':
+                return convertToken(date, 'p', l10n).toLowerCase();
+            case 's':
+                return date.getTime() / 1000;
+            case 'S':
+                return pad(date.getSeconds(), 2);
+            case 't':
+                return '\t';
+            case 'u':
+                var day = date.getDay();
+                return day === 0? 7 : day;
+            case 'U':
+                return pad(weekOfTheYear(date), 2);
+            case 'w':
+                return date.getDay();
+            case 'W':
+                return pad(weekOfTheYear(date, 1), 2);
+            case 'y':
+                return pad(date.getFullYear() % 100, 2);
+            case 'Y':
+                return pad(date.getFullYear(), 4);
+            case 'z':
+                return timezoneOffset(date);
+            case 'Z':
+                return timezoneAbbr(date);
+            case '%':
+                return '%';
+            default:
+                // keep unrecognized tokens
+                return '%'+ token;
+        }
+    }
+
+
+    return strftime;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/timezoneAbbr.js b/node_modules/nyks/node_modules/mout/src/date/timezoneAbbr.js
new file mode 100644
index 0000000..225a685
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/timezoneAbbr.js
@@ -0,0 +1,17 @@
+define(['./timezoneOffset'], function(timezoneOffset) {
+
+    /**
+     * Abbreviated time zone name or similar information.
+     */
+    function timezoneAbbr(date){
+        // Date.toString gives different results depending on the
+        // browser/system so we fallback to timezone offset
+        // chrome: 'Mon Apr 08 2013 09:02:04 GMT-0300 (BRT)'
+        // IE: 'Mon Apr 8 09:02:04 UTC-0300 2013'
+        var tz = /\(([A-Z]{3,4})\)/.exec(date.toString());
+        return tz? tz[1] : timezoneOffset(date);
+    }
+
+    return timezoneAbbr;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/timezoneOffset.js b/node_modules/nyks/node_modules/mout/src/date/timezoneOffset.js
new file mode 100644
index 0000000..ca06705
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/timezoneOffset.js
@@ -0,0 +1,16 @@
+define(['../number/pad'], function (pad) {
+
+    /**
+     * time zone as hour and minute offset from UTC (e.g. +0900)
+     */
+    function timezoneOffset(date){
+        var offset = date.getTimezoneOffset();
+        var abs = Math.abs(offset);
+        var h = pad(Math.floor(abs / 60), 2);
+        var m = pad(abs % 60, 2);
+        return (offset > 0? '-' : '+') + h + m;
+    }
+
+    return timezoneOffset;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/totalDaysInMonth.js b/node_modules/nyks/node_modules/mout/src/date/totalDaysInMonth.js
new file mode 100644
index 0000000..9aaafd7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/totalDaysInMonth.js
@@ -0,0 +1,22 @@
+define(['../lang/isDate', './isLeapYear'], function (isDate, isLeapYear) {
+
+    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+
+    /**
+     * returns the total amount of days in the month (considering leap years)
+     */
+    function totalDaysInMonth(fullYear, monthIndex){
+        if (isDate(fullYear)) {
+            monthIndex = fullYear.getMonth();
+        }
+
+        if (monthIndex === 1 && isLeapYear(fullYear)) {
+            return 29;
+        } else {
+            return DAYS_IN_MONTH[monthIndex];
+        }
+    }
+
+    return totalDaysInMonth;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/totalDaysInYear.js b/node_modules/nyks/node_modules/mout/src/date/totalDaysInYear.js
new file mode 100644
index 0000000..e9036b4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/totalDaysInYear.js
@@ -0,0 +1,13 @@
+define(['./isLeapYear'], function (isLeapYear) {
+
+    /**
+     * return the amount of days in the year following the gregorian calendar
+     * and leap years
+     */
+    function totalDaysInYear(fullYear){
+        return isLeapYear(fullYear)? 366 : 365;
+    }
+
+    return totalDaysInYear;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/date/weekOfTheYear.js b/node_modules/nyks/node_modules/mout/src/date/weekOfTheYear.js
new file mode 100644
index 0000000..8dabc45
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/date/weekOfTheYear.js
@@ -0,0 +1,16 @@
+define(['./dayOfTheYear'], function (dayOfTheYear) {
+
+    /**
+     * Return the week of the year based on given firstDayOfWeek
+     */
+    function weekOfTheYear(date, firstDayOfWeek){
+        firstDayOfWeek = firstDayOfWeek == null? 0 : firstDayOfWeek;
+        var doy = dayOfTheYear(date);
+        var dow = (7 + date.getDay() - firstDayOfWeek) % 7;
+        var relativeWeekDay = 6 - firstDayOfWeek - dow;
+        return Math.floor((doy + relativeWeekDay) / 7);
+    }
+
+    return weekOfTheYear;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function.js b/node_modules/nyks/node_modules/mout/src/function.js
new file mode 100644
index 0000000..a2f667e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function.js
@@ -0,0 +1,25 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'after' : require('./function/after'),
+    'awaitDelay' : require('./function/awaitDelay'),
+    'bind' : require('./function/bind'),
+    'compose' : require('./function/compose'),
+    'constant' : require('./function/constant'),
+    'debounce' : require('./function/debounce'),
+    'func' : require('./function/func'),
+    'identity' : require('./function/identity'),
+    'makeIterator_' : require('./function/makeIterator_'),
+    'memoize' : require('./function/memoize'),
+    'partial' : require('./function/partial'),
+    'prop' : require('./function/prop'),
+    'series' : require('./function/series'),
+    'throttle' : require('./function/throttle'),
+    'timeout' : require('./function/timeout'),
+    'times' : require('./function/times'),
+    'wrap' : require('./function/wrap')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/after.js b/node_modules/nyks/node_modules/mout/src/function/after.js
new file mode 100644
index 0000000..e4ccf65
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/after.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Calls closure only after callback is called x times
+     */
+    function after(closure, times){
+        return function () {
+            if (--times <= 0) closure();
+        };
+    }
+
+    return after;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/awaitDelay.js b/node_modules/nyks/node_modules/mout/src/function/awaitDelay.js
new file mode 100644
index 0000000..88bea6e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/awaitDelay.js
@@ -0,0 +1,20 @@
+define(['../time/now', './timeout', '../array/append'], function (now, timeout, append) {
+
+    /**
+     * Ensure a minimum delay for callbacks
+     */
+    function awaitDelay( callback, delay ){
+        var baseTime = now() + delay;
+        return function() {
+            // ensure all browsers will execute it asynchronously (avoid hard
+            // to catch errors) not using "0" because of old browsers and also
+            // since new browsers increase the value to be at least "4"
+            // http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout
+            var ms = Math.max(baseTime - now(), 4);
+            return timeout.apply(this, append([callback, ms, this], arguments));
+        };
+    }
+
+    return awaitDelay;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/bind.js b/node_modules/nyks/node_modules/mout/src/function/bind.js
new file mode 100644
index 0000000..787c298
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/bind.js
@@ -0,0 +1,19 @@
+define(['../array/slice'], function(slice){
+
+    /**
+     * Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
+     * @param {Function} fn  Function.
+     * @param {object} context   Execution context.
+     * @param {rest} args    Arguments (0...n arguments).
+     * @return {Function} Wrapped Function.
+     */
+    function bind(fn, context, args){
+        var argsArr = slice(arguments, 2); //curried args
+        return function(){
+            return fn.apply(context, argsArr.concat(slice(arguments)));
+        };
+    }
+
+    return bind;
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/function/compose.js b/node_modules/nyks/node_modules/mout/src/function/compose.js
new file mode 100644
index 0000000..d8b228f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/compose.js
@@ -0,0 +1,23 @@
+define(function () {
+
+    /**
+     * Returns a function that composes multiple functions, passing results to
+     * each other.
+     */
+    function compose() {
+        var fns = arguments;
+        return function(arg){
+            // only cares about the first argument since the chain can only
+            // deal with a single return value anyway. It should start from
+            // the last fn.
+            var n = fns.length;
+            while (n--) {
+                arg = fns[n].call(this, arg);
+            }
+            return arg;
+         };
+     }
+
+     return compose;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/constant.js b/node_modules/nyks/node_modules/mout/src/function/constant.js
new file mode 100644
index 0000000..addd412
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/constant.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a new function that will return the value
+     */
+    function constant(value){
+        return function() {
+            return value;
+        };
+    }
+
+    return constant;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/debounce.js b/node_modules/nyks/node_modules/mout/src/function/debounce.js
new file mode 100644
index 0000000..8c5fd47
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/debounce.js
@@ -0,0 +1,32 @@
+define(function () {
+
+    /**
+     * Debounce callback execution
+     */
+    function debounce(fn, threshold, isAsap){
+        var timeout, result;
+        function debounced(){
+            var args = arguments, context = this;
+            function delayed(){
+                if (! isAsap) {
+                    result = fn.apply(context, args);
+                }
+                timeout = null;
+            }
+            if (timeout) {
+                clearTimeout(timeout);
+            } else if (isAsap) {
+                result = fn.apply(context, args);
+            }
+            timeout = setTimeout(delayed, threshold);
+            return result;
+        }
+        debounced.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return debounced;
+    }
+
+    return debounce;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/func.js b/node_modules/nyks/node_modules/mout/src/function/func.js
new file mode 100644
index 0000000..b920e00
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/func.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a function that call a method on the passed object
+     */
+    function func(name){
+        return function(obj){
+            return obj[name]();
+        };
+    }
+
+    return func;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/identity.js b/node_modules/nyks/node_modules/mout/src/function/identity.js
new file mode 100644
index 0000000..59f7182
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/identity.js
@@ -0,0 +1,12 @@
+define(function () {
+
+    /**
+     * Returns the first argument provided to it.
+     */
+    function identity(val){
+        return val;
+    }
+
+    return identity;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/makeIterator_.js b/node_modules/nyks/node_modules/mout/src/function/makeIterator_.js
new file mode 100644
index 0000000..771ea19
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/makeIterator_.js
@@ -0,0 +1,32 @@
+define(['./identity', './prop', '../object/deepMatches'], function(identity, prop, deepMatches) {
+
+    /**
+     * Converts argument into a valid iterator.
+     * Used internally on most array/object/collection methods that receives a
+     * callback/iterator providing a shortcut syntax.
+     */
+    function makeIterator(src, thisObj){
+        if (src == null) {
+            return identity;
+        }
+        switch(typeof src) {
+            case 'function':
+                // function is the first to improve perf (most common case)
+                // also avoid using `Function#call` if not needed, which boosts
+                // perf a lot in some cases
+                return (typeof thisObj !== 'undefined')? function(val, i, arr){
+                    return src.call(thisObj, val, i, arr);
+                } : src;
+            case 'object':
+                return function(val){
+                    return deepMatches(val, src);
+                };
+            case 'string':
+            case 'number':
+                return prop(src);
+        }
+    }
+
+    return makeIterator;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/memoize.js b/node_modules/nyks/node_modules/mout/src/function/memoize.js
new file mode 100644
index 0000000..8833fee
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/memoize.js
@@ -0,0 +1,39 @@
+define(['../lang/isFunction', '../object/hasOwn'], function(isFunction, hasOwn){
+
+    /**
+     * Creates a function that memoizes the result of `fn`. If `resolver` is
+     * provided it determines the cache key for storing the result based on the
+     * arguments provided to the memoized function. By default, the first argument
+     * provided to the memoized function is coerced to a string and used as the
+     * cache key. The `fn` is invoked with the `this` binding of the memoized
+     * function. Modified from lodash.
+     *
+     * @param {Function} fn Function to have its output memoized.
+     * @param {Function} context Function to resolve the cache key.
+     * @return {Function} Returns the new memoized function.
+     */
+    function memoize(fn, resolver) {
+        if (!isFunction(fn) || (resolver && !isFunction(resolver))) {
+            throw new TypeError('Expected a function');
+        }
+
+        var memoized = function() {
+            var cache = memoized.cache,
+                key = resolver ? resolver.apply(this, arguments) : arguments[0];
+
+            if (hasOwn(cache, key)) {
+                return cache[key];
+            }
+            var result = fn.apply(this, arguments);
+            cache[key] = result;
+            return result;
+        };
+
+        memoized.cache = {};
+
+        return memoized;
+    }
+
+    return memoize;
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/function/partial.js b/node_modules/nyks/node_modules/mout/src/function/partial.js
new file mode 100644
index 0000000..a9e9d76
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/partial.js
@@ -0,0 +1,29 @@
+define(['../array/indexOf', '../array/slice', '../array/take'], function (indexOf, slice, take) {
+
+    var _ = {};
+
+    /**
+     * Creates a partially applied function.
+     */
+    function partial(f) {
+        var as = slice(arguments, 1);
+        var has_ = indexOf(as, _) !== -1;
+
+        return function() {
+            var rest = slice(arguments);
+
+            // Don't waste time checking for placeholders if there aren't any.
+            var args = has_ ? take(as.length, function(i) {
+                var a = as[i];
+                return a === _ ? rest.shift() : a;
+            }) : as;
+
+            return f.apply(this, rest.length ? args.concat(rest) : args);
+        };
+    }
+
+    partial._ = _;
+
+    return partial;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/prop.js b/node_modules/nyks/node_modules/mout/src/function/prop.js
new file mode 100644
index 0000000..c9df78c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/prop.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * Returns a function that gets a property of the passed object
+     */
+    function prop(name){
+        return function(obj){
+            return obj[name];
+        };
+    }
+
+    return prop;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/series.js b/node_modules/nyks/node_modules/mout/src/function/series.js
new file mode 100644
index 0000000..c8856a2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/series.js
@@ -0,0 +1,22 @@
+define(function () {
+
+    /**
+     * Returns a function that will execute a list of functions in sequence
+     * passing the same arguments to each one. (useful for batch processing
+     * items during a forEach loop)
+     */
+    function series(){
+        var fns = arguments;
+        return function(){
+            var i = 0,
+                n = fns.length;
+            while (i < n) {
+                fns[i].apply(this, arguments);
+                i += 1;
+            }
+        };
+    }
+
+    return series;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/throttle.js b/node_modules/nyks/node_modules/mout/src/function/throttle.js
new file mode 100644
index 0000000..9fb47b2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/throttle.js
@@ -0,0 +1,33 @@
+define(['../time/now'], function (now) {
+
+    /**
+     */
+    function throttle(fn, delay){
+        var context, timeout, result, args,
+            diff, prevCall = 0;
+        function delayed(){
+            prevCall = now();
+            timeout = null;
+            result = fn.apply(context, args);
+        }
+        function throttled(){
+            context = this;
+            args = arguments;
+            diff = delay - (now() - prevCall);
+            if (diff <= 0) {
+                clearTimeout(timeout);
+                delayed();
+            } else if (! timeout) {
+                timeout = setTimeout(delayed, diff);
+            }
+            return result;
+        }
+        throttled.cancel = function(){
+            clearTimeout(timeout);
+        };
+        return throttled;
+    }
+
+    return throttle;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/timeout.js b/node_modules/nyks/node_modules/mout/src/function/timeout.js
new file mode 100644
index 0000000..61b832c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/timeout.js
@@ -0,0 +1,17 @@
+define(['../array/slice'], function (slice) {
+
+    /**
+     * Delays the call of a function within a given context.
+     */
+    function timeout(fn, millis, context){
+
+        var args = slice(arguments, 3);
+
+        return setTimeout(function() {
+            fn.apply(context, args);
+        }, millis);
+    }
+
+    return timeout;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/times.js b/node_modules/nyks/node_modules/mout/src/function/times.js
new file mode 100644
index 0000000..ec10cae
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/times.js
@@ -0,0 +1,17 @@
+define(function () {
+
+    /**
+     * Iterates over a callback a set amount of times
+     */
+    function times(n, callback, thisObj){
+        var i = -1;
+        while (++i < n) {
+            if ( callback.call(thisObj, i) === false ) {
+                break;
+            }
+        }
+    }
+
+    return times;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/function/wrap.js b/node_modules/nyks/node_modules/mout/src/function/wrap.js
new file mode 100644
index 0000000..b2f54dd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/function/wrap.js
@@ -0,0 +1,14 @@
+define(['./partial'], function (partial) {
+
+    /**
+     * Returns the first function passed as an argument to the second,
+     * allowing you to adjust arguments, run code before and after, and
+     * conditionally execute the original function.
+     */
+    function wrap(fn, wrapper){
+        return partial(wrapper, fn);
+    }
+
+    return wrap;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/index.js b/node_modules/nyks/node_modules/mout/src/index.js
new file mode 100644
index 0000000..7e24b1f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/index.js
@@ -0,0 +1,25 @@
+/**@license
+ * mout v1.0.0 | http://moutjs.com | MIT license
+ */
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'VERSION' : '1.0.0',
+    'array' : require('./array'),
+    'collection' : require('./collection'),
+    'date' : require('./date'),
+    'function' : require('./function'),
+    'lang' : require('./lang'),
+    'math' : require('./math'),
+    'number' : require('./number'),
+    'object' : require('./object'),
+    'queryString' : require('./queryString'),
+    'random' : require('./random'),
+    'string' : require('./string'),
+    'time' : require('./time'),
+    'fn' : require('./function')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang.js b/node_modules/nyks/node_modules/mout/src/lang.js
new file mode 100644
index 0000000..df713a5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang.js
@@ -0,0 +1,40 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'GLOBAL' : require('./lang/GLOBAL'),
+    'clone' : require('./lang/clone'),
+    'createObject' : require('./lang/createObject'),
+    'ctorApply' : require('./lang/ctorApply'),
+    'deepClone' : require('./lang/deepClone'),
+    'deepEquals' : require('./lang/deepEquals'),
+    'defaults' : require('./lang/defaults'),
+    'inheritPrototype' : require('./lang/inheritPrototype'),
+    'is' : require('./lang/is'),
+    'isArguments' : require('./lang/isArguments'),
+    'isArray' : require('./lang/isArray'),
+    'isBoolean' : require('./lang/isBoolean'),
+    'isDate' : require('./lang/isDate'),
+    'isEmpty' : require('./lang/isEmpty'),
+    'isFinite' : require('./lang/isFinite'),
+    'isFunction' : require('./lang/isFunction'),
+    'isInteger' : require('./lang/isInteger'),
+    'isKind' : require('./lang/isKind'),
+    'isNaN' : require('./lang/isNaN'),
+    'isNull' : require('./lang/isNull'),
+    'isNumber' : require('./lang/isNumber'),
+    'isObject' : require('./lang/isObject'),
+    'isPlainObject' : require('./lang/isPlainObject'),
+    'isPrimitive' : require('./lang/isPrimitive'),
+    'isRegExp' : require('./lang/isRegExp'),
+    'isString' : require('./lang/isString'),
+    'isUndefined' : require('./lang/isUndefined'),
+    'isnt' : require('./lang/isnt'),
+    'kindOf' : require('./lang/kindOf'),
+    'toArray' : require('./lang/toArray'),
+    'toNumber' : require('./lang/toNumber'),
+    'toString' : require('./lang/toString')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/GLOBAL.js b/node_modules/nyks/node_modules/mout/src/lang/GLOBAL.js
new file mode 100644
index 0000000..dcd4a42
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/GLOBAL.js
@@ -0,0 +1,7 @@
+define(function () {
+
+    // Reference to the global context (works on ES3 and ES5-strict mode)
+    //jshint -W061, -W064
+    return Function('return this')();
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/clone.js b/node_modules/nyks/node_modules/mout/src/lang/clone.js
new file mode 100644
index 0000000..d3429fd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/clone.js
@@ -0,0 +1,47 @@
+define(['./kindOf', './isPlainObject', '../object/mixIn'], function (kindOf, isPlainObject, mixIn) {
+
+    /**
+     * Clone native types.
+     */
+    function clone(val){
+        switch (kindOf(val)) {
+            case 'Object':
+                return cloneObject(val);
+            case 'Array':
+                return cloneArray(val);
+            case 'RegExp':
+                return cloneRegExp(val);
+            case 'Date':
+                return cloneDate(val);
+            default:
+                return val;
+        }
+    }
+
+    function cloneObject(source) {
+        if (isPlainObject(source)) {
+            return mixIn({}, source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneRegExp(r) {
+        var flags = '';
+        flags += r.multiline ? 'm' : '';
+        flags += r.global ? 'g' : '';
+        flags += r.ignoreCase ? 'i' : '';
+        return new RegExp(r.source, flags);
+    }
+
+    function cloneDate(date) {
+        return new Date(+date);
+    }
+
+    function cloneArray(arr) {
+        return arr.slice();
+    }
+
+    return clone;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/createObject.js b/node_modules/nyks/node_modules/mout/src/lang/createObject.js
new file mode 100644
index 0000000..f766150
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/createObject.js
@@ -0,0 +1,18 @@
+define(['../object/mixIn'], function(mixIn){
+
+    /**
+     * Create Object using prototypal inheritance and setting custom properties.
+     * - Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.
+     * @param {object} parent    Parent Object.
+     * @param {object} [props] Object properties.
+     * @return {object} Created object.
+     */
+    function createObject(parent, props){
+        function F(){}
+        F.prototype = parent;
+        return mixIn(new F(), props);
+
+    }
+    return createObject;
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/lang/ctorApply.js b/node_modules/nyks/node_modules/mout/src/lang/ctorApply.js
new file mode 100644
index 0000000..d0674b1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/ctorApply.js
@@ -0,0 +1,15 @@
+define(function () {
+
+    var bind = Function.prototype.bind;
+
+    /**
+     * Do fn.apply on a constructor.
+     */
+    function ctorApply(ctor, args) {
+        var Bound = bind.bind(ctor, undefined).apply(undefined, args);
+        return new Bound();
+    }
+
+    return ctorApply;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/deepClone.js b/node_modules/nyks/node_modules/mout/src/lang/deepClone.js
new file mode 100644
index 0000000..d45c10a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/deepClone.js
@@ -0,0 +1,45 @@
+define(['./clone', '../object/forOwn', './kindOf', './isPlainObject'], function (clone, forOwn, kindOf, isPlainObject) {
+
+    /**
+     * Recursively clone native types.
+     */
+    function deepClone(val, instanceClone) {
+        switch ( kindOf(val) ) {
+            case 'Object':
+                return cloneObject(val, instanceClone);
+            case 'Array':
+                return cloneArray(val, instanceClone);
+            default:
+                return clone(val);
+        }
+    }
+
+    function cloneObject(source, instanceClone) {
+        if (isPlainObject(source)) {
+            var out = {};
+            forOwn(source, function(val, key) {
+                this[key] = deepClone(val, instanceClone);
+            }, out);
+            return out;
+        } else if (instanceClone) {
+            return instanceClone(source);
+        } else {
+            return source;
+        }
+    }
+
+    function cloneArray(arr, instanceClone) {
+        var out = [],
+            i = -1,
+            n = arr.length,
+            val;
+        while (++i < n) {
+            out[i] = deepClone(arr[i], instanceClone);
+        }
+        return out;
+    }
+
+    return deepClone;
+
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/lang/deepEquals.js b/node_modules/nyks/node_modules/mout/src/lang/deepEquals.js
new file mode 100644
index 0000000..f4eda1a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/deepEquals.js
@@ -0,0 +1,26 @@
+define(['./is', './isObject', './isArray', '../object/equals', '../array/equals'], function (is, isObject, isArray, objEquals, arrEquals) {
+
+    /**
+     * Recursively checks for same properties and values.
+     */
+    function deepEquals(a, b, callback){
+        callback = callback || is;
+
+        var bothObjects = isObject(a) && isObject(b);
+        var bothArrays = !bothObjects && isArray(a) && isArray(b);
+
+        if (!bothObjects && !bothArrays) {
+            return callback(a, b);
+        }
+
+        function compare(a, b){
+            return deepEquals(a, b, callback);
+        }
+
+        var method = bothObjects ? objEquals : arrEquals;
+        return method(a, b, compare);
+    }
+
+    return deepEquals;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/defaults.js b/node_modules/nyks/node_modules/mout/src/lang/defaults.js
new file mode 100644
index 0000000..5156b1b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/defaults.js
@@ -0,0 +1,16 @@
+define(['./toArray', '../array/find'], function (toArray, find) {
+
+    /**
+     * Return first non void argument
+     */
+    function defaults(var_args){
+        return find(toArray(arguments), nonVoid);
+    }
+
+    function nonVoid(val){
+        return val != null;
+    }
+
+    return defaults;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/inheritPrototype.js b/node_modules/nyks/node_modules/mout/src/lang/inheritPrototype.js
new file mode 100644
index 0000000..64c9178
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/inheritPrototype.js
@@ -0,0 +1,18 @@
+define(['./createObject'], function(createObject){
+
+    /**
+    * Inherit prototype from another Object.
+    * - inspired by Nicholas Zackas <http://nczonline.net> Solution
+    * @param {object} child Child object
+    * @param {object} parent    Parent Object
+    */
+    function inheritPrototype(child, parent){
+        var p = createObject(parent.prototype);
+        p.constructor = child;
+        child.prototype = p;
+        child.super_ = parent;
+        return p;
+    }
+
+    return inheritPrototype;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/is.js b/node_modules/nyks/node_modules/mout/src/lang/is.js
new file mode 100644
index 0000000..261a207
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/is.js
@@ -0,0 +1,23 @@
+define(function () {
+
+    /**
+     * Check if both arguments are egal.
+     */
+    function is(x, y){
+        // implementation borrowed from harmony:egal spec
+        if (x === y) {
+          // 0 === -0, but they are not identical
+          return x !== 0 || 1 / x === 1 / y;
+        }
+
+        // NaN !== NaN, but they are identical.
+        // NaNs are the only non-reflexive value, i.e., if x !== x,
+        // then x is a NaN.
+        // isNaN is broken: it converts its argument to number, so
+        // isNaN("foo") => true
+        return x !== x && y !== y;
+    }
+
+    return is;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isArguments.js b/node_modules/nyks/node_modules/mout/src/lang/isArguments.js
new file mode 100644
index 0000000..f889ee8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isArguments.js
@@ -0,0 +1,15 @@
+define(['./isKind'], function (isKind) {
+
+    /**
+     */
+    var isArgs = isKind(arguments, 'Arguments')?
+            function(val){
+                return isKind(val, 'Arguments');
+            } :
+            function(val){
+                // Arguments is an Object on IE7
+                return !!(val && Object.prototype.hasOwnProperty.call(val, 'callee'));
+            };
+
+    return isArgs;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isArray.js b/node_modules/nyks/node_modules/mout/src/lang/isArray.js
new file mode 100644
index 0000000..886e2aa
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isArray.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    var isArray = Array.isArray || function (val) {
+        return isKind(val, 'Array');
+    };
+    return isArray;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isBoolean.js b/node_modules/nyks/node_modules/mout/src/lang/isBoolean.js
new file mode 100644
index 0000000..1ca27a6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isBoolean.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isBoolean(val) {
+        return isKind(val, 'Boolean');
+    }
+    return isBoolean;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isDate.js b/node_modules/nyks/node_modules/mout/src/lang/isDate.js
new file mode 100644
index 0000000..2708d67
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isDate.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isDate(val) {
+        return isKind(val, 'Date');
+    }
+    return isDate;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isEmpty.js b/node_modules/nyks/node_modules/mout/src/lang/isEmpty.js
new file mode 100644
index 0000000..8b67750
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isEmpty.js
@@ -0,0 +1,23 @@
+define(['../object/forOwn', './isArray'], function (forOwn, isArray) {
+
+    function isEmpty(val){
+        if (val == null) {
+            // typeof null == 'object' so we check it first
+            return true;
+        } else if ( typeof val === 'string' || isArray(val) ) {
+            return !val.length;
+        } else if ( typeof val === 'object' ) {
+            var result = true;
+            forOwn(val, function(){
+                result = false;
+                return false; // break loop
+            });
+            return result;
+        } else {
+            return true;
+        }
+    }
+
+    return isEmpty;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isFinite.js b/node_modules/nyks/node_modules/mout/src/lang/isFinite.js
new file mode 100644
index 0000000..05c29ac
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isFinite.js
@@ -0,0 +1,19 @@
+define(['./isNumber', './GLOBAL'], function (isNumber, GLOBAL) {
+
+    /**
+     * Check if value is finite
+     */
+    function isFinite(val){
+        var is = false;
+        if (typeof val === 'string' && val !== '') {
+            is = GLOBAL.isFinite( parseFloat(val) );
+        } else if (isNumber(val)){
+            // need to use isNumber because of Number constructor
+            is = GLOBAL.isFinite( val );
+        }
+        return is;
+    }
+
+    return isFinite;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isFunction.js b/node_modules/nyks/node_modules/mout/src/lang/isFunction.js
new file mode 100644
index 0000000..ff5df7f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isFunction.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isFunction(val) {
+        return isKind(val, 'Function');
+    }
+    return isFunction;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isInteger.js b/node_modules/nyks/node_modules/mout/src/lang/isInteger.js
new file mode 100644
index 0000000..1931f51
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isInteger.js
@@ -0,0 +1,12 @@
+define(['./isNumber'], function (isNumber) {
+
+    /**
+     * Check if value is an integer
+     */
+    function isInteger(val){
+        return isNumber(val) && (val % 1 === 0);
+    }
+
+    return isInteger;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isKind.js b/node_modules/nyks/node_modules/mout/src/lang/isKind.js
new file mode 100644
index 0000000..6937a12
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isKind.js
@@ -0,0 +1,9 @@
+define(['./kindOf'], function (kindOf) {
+    /**
+     * Check if value is from a specific "kind".
+     */
+    function isKind(val, kind){
+        return kindOf(val) === kind;
+    }
+    return isKind;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isNaN.js b/node_modules/nyks/node_modules/mout/src/lang/isNaN.js
new file mode 100644
index 0000000..2219404
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isNaN.js
@@ -0,0 +1,15 @@
+define(['./isNumber', '../number/isNaN'], function (isNumber, $isNaN) {
+
+    /**
+     * Check if value is NaN for realz
+     */
+    function isNaN(val){
+        // based on the fact that NaN !== NaN
+        // need to check if it's a number to avoid conflicts with host objects
+        // also need to coerce ToNumber to avoid edge case `new Number(NaN)`
+        return !isNumber(val) || $isNaN(Number(val));
+    }
+
+    return isNaN;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isNull.js b/node_modules/nyks/node_modules/mout/src/lang/isNull.js
new file mode 100644
index 0000000..506e05e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isNull.js
@@ -0,0 +1,9 @@
+define(function () {
+    /**
+     */
+    function isNull(val){
+        return val === null;
+    }
+    return isNull;
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isNumber.js b/node_modules/nyks/node_modules/mout/src/lang/isNumber.js
new file mode 100644
index 0000000..9a832c5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isNumber.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isNumber(val) {
+        return isKind(val, 'Number');
+    }
+    return isNumber;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isObject.js b/node_modules/nyks/node_modules/mout/src/lang/isObject.js
new file mode 100644
index 0000000..0befb06
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isObject.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isObject(val) {
+        return isKind(val, 'Object');
+    }
+    return isObject;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isPlainObject.js b/node_modules/nyks/node_modules/mout/src/lang/isPlainObject.js
new file mode 100644
index 0000000..406a279
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isPlainObject.js
@@ -0,0 +1,13 @@
+define(function () {
+
+    /**
+     * Checks if the value is created by the `Object` constructor.
+     */
+    function isPlainObject(value) {
+        return (!!value && typeof value === 'object' &&
+            value.constructor === Object);
+    }
+
+    return isPlainObject;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isPrimitive.js b/node_modules/nyks/node_modules/mout/src/lang/isPrimitive.js
new file mode 100644
index 0000000..c4035ea
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isPrimitive.js
@@ -0,0 +1,21 @@
+define(function() {
+
+    /**
+     * Checks if the object is a primitive
+     */
+    function isPrimitive(value) {
+        // Using switch fallthrough because it's simple to read and is
+        // generally fast: http://jsperf.com/testing-value-is-primitive/5
+        switch (typeof value) {
+            case "string":
+            case "number":
+            case "boolean":
+                return true;
+        }
+
+        return value == null;
+    }
+
+    return isPrimitive;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isRegExp.js b/node_modules/nyks/node_modules/mout/src/lang/isRegExp.js
new file mode 100644
index 0000000..d78a03d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isRegExp.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isRegExp(val) {
+        return isKind(val, 'RegExp');
+    }
+    return isRegExp;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isString.js b/node_modules/nyks/node_modules/mout/src/lang/isString.js
new file mode 100644
index 0000000..8a42fe0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isString.js
@@ -0,0 +1,8 @@
+define(['./isKind'], function (isKind) {
+    /**
+     */
+    function isString(val) {
+        return isKind(val, 'String');
+    }
+    return isString;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isUndefined.js b/node_modules/nyks/node_modules/mout/src/lang/isUndefined.js
new file mode 100644
index 0000000..c57b28e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isUndefined.js
@@ -0,0 +1,10 @@
+define(function () {
+    var UNDEF;
+
+    /**
+     */
+    function isUndef(val){
+        return val === UNDEF;
+    }
+    return isUndef;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/isnt.js b/node_modules/nyks/node_modules/mout/src/lang/isnt.js
new file mode 100644
index 0000000..d433622
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/isnt.js
@@ -0,0 +1,12 @@
+define(['./is'], function (is) {
+
+    /**
+     * Check if both values are not identical/egal
+     */
+    function isnt(x, y){
+        return !is(x, y);
+    }
+
+    return isnt;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/kindOf.js b/node_modules/nyks/node_modules/mout/src/lang/kindOf.js
new file mode 100644
index 0000000..4c7dc4c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/kindOf.js
@@ -0,0 +1,9 @@
+define(function () {
+    /**
+     * Gets the "kind" of value. (e.g. "String", "Number", etc)
+     */
+    function kindOf(val) {
+        return Object.prototype.toString.call(val).slice(8, -1);
+    }
+    return kindOf;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/toArray.js b/node_modules/nyks/node_modules/mout/src/lang/toArray.js
new file mode 100644
index 0000000..ad04d07
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/toArray.js
@@ -0,0 +1,29 @@
+define(['./kindOf', './GLOBAL'], function (kindOf, GLOBAL) {
+
+    /**
+     * Convert array-like object into array
+     */
+    function toArray(val){
+        var ret = [],
+            kind = kindOf(val),
+            n;
+
+        if (val != null) {
+            if ( val.length == null || kind === 'String' || kind === 'Function' || kind === 'RegExp' || val === GLOBAL ) {
+                //string, regexp, function have .length but user probably just want
+                //to wrap value into an array..
+                ret[ret.length] = val;
+            } else {
+                //window returns true on isObject in IE7 and may have length
+                //property. `typeof NodeList` returns `function` on Safari so
+                //we can't use it (#58)
+                n = val.length;
+                while (n--) {
+                    ret[n] = val[n];
+                }
+            }
+        }
+        return ret;
+    }
+    return toArray;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/toNumber.js b/node_modules/nyks/node_modules/mout/src/lang/toNumber.js
new file mode 100644
index 0000000..3976738
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/toNumber.js
@@ -0,0 +1,20 @@
+define(['./isArray'], function (isArray) {
+
+    /**
+     * covert value into number if numeric
+     */
+    function toNumber(val){
+        // numberic values should come first because of -0
+        if (typeof val === 'number') return val;
+        // we want all falsy values (besides -0) to return zero to avoid
+        // headaches
+        if (!val) return 0;
+        if (typeof val === 'string') return parseFloat(val);
+        // arrays are edge cases. `Number([4]) === 4`
+        if (isArray(val)) return NaN;
+        return Number(val);
+    }
+
+    return toNumber;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/lang/toString.js b/node_modules/nyks/node_modules/mout/src/lang/toString.js
new file mode 100644
index 0000000..c28b89a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/lang/toString.js
@@ -0,0 +1,13 @@
+define(function () {
+
+    /**
+     * Typecast a value to a String, using an empty string value for null or
+     * undefined.
+     */
+    function toString(val){
+        return val == null ? '' : val.toString();
+    }
+
+    return toString;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math.js b/node_modules/nyks/node_modules/mout/src/math.js
new file mode 100644
index 0000000..481e44f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math.js
@@ -0,0 +1,20 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'ceil' : require('./math/ceil'),
+    'clamp' : require('./math/clamp'),
+    'countSteps' : require('./math/countSteps'),
+    'floor' : require('./math/floor'),
+    'inRange' : require('./math/inRange'),
+    'isNear' : require('./math/isNear'),
+    'lerp' : require('./math/lerp'),
+    'loop' : require('./math/loop'),
+    'map' : require('./math/map'),
+    'norm' : require('./math/norm'),
+    'overflow' : require('./math/overflow'),
+    'round' : require('./math/round')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/ceil.js b/node_modules/nyks/node_modules/mout/src/math/ceil.js
new file mode 100644
index 0000000..d73b058
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/ceil.js
@@ -0,0 +1,11 @@
+define(function(){
+    /**
+     * Round value up with a custom radix.
+     */
+    function ceil(val, step){
+        step = Math.abs(step || 1);
+        return Math.ceil(val / step) * step;
+    }
+
+    return ceil;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/clamp.js b/node_modules/nyks/node_modules/mout/src/math/clamp.js
new file mode 100644
index 0000000..fb5a148
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/clamp.js
@@ -0,0 +1,9 @@
+define(function(){
+    /**
+     * Clamps value inside range.
+     */
+    function clamp(val, min, max){
+        return val < min? min : (val > max? max : val);
+    }
+    return clamp;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/countSteps.js b/node_modules/nyks/node_modules/mout/src/math/countSteps.js
new file mode 100644
index 0000000..0ecb32f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/countSteps.js
@@ -0,0 +1,16 @@
+define(function(){
+    /**
+    * Count number of full steps.
+    */
+    function countSteps(val, step, overflow){
+        val = Math.floor(val / step);
+
+        if (overflow) {
+            return val % overflow;
+        }
+
+        return val;
+    }
+
+    return countSteps;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/floor.js b/node_modules/nyks/node_modules/mout/src/math/floor.js
new file mode 100644
index 0000000..8a4456b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/floor.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+    * Floor value to full steps.
+    */
+    function floor(val, step){
+        step = Math.abs(step || 1);
+        return Math.floor(val / step) * step;
+    }
+    return floor;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/inRange.js b/node_modules/nyks/node_modules/mout/src/math/inRange.js
new file mode 100644
index 0000000..0c89053
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/inRange.js
@@ -0,0 +1,11 @@
+define(function(){
+    /**
+    * Checks if value is inside the range.
+    */
+    function inRange(val, min, max, threshold){
+        threshold = threshold || 0;
+        return (val + threshold >= min && val - threshold <= max);
+    }
+
+    return inRange;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/isNear.js b/node_modules/nyks/node_modules/mout/src/math/isNear.js
new file mode 100644
index 0000000..b308a0b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/isNear.js
@@ -0,0 +1,9 @@
+define(function(){
+    /**
+    * Check if value is close to target.
+    */
+    function isNear(val, target, threshold){
+        return (Math.abs(val - target) <= threshold);
+    }
+    return isNear;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/lerp.js b/node_modules/nyks/node_modules/mout/src/math/lerp.js
new file mode 100644
index 0000000..26b99d0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/lerp.js
@@ -0,0 +1,11 @@
+define(function(){
+    /**
+    * Linear interpolation.
+    * IMPORTANT:will return `Infinity` if numbers overflow Number.MAX_VALUE
+    */
+    function lerp(ratio, start, end){
+        return start + (end - start) * ratio;
+    }
+
+    return lerp;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/loop.js b/node_modules/nyks/node_modules/mout/src/math/loop.js
new file mode 100644
index 0000000..c735ecf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/loop.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+    * Loops value inside range.
+    */
+    function loop(val, min, max){
+        return val < min? max : (val > max? min : val);
+    }
+
+    return loop;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/map.js b/node_modules/nyks/node_modules/mout/src/math/map.js
new file mode 100644
index 0000000..bf7dc5d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/map.js
@@ -0,0 +1,10 @@
+define(['./lerp', './norm'], function(lerp, norm){
+    /**
+    * Maps a number from one scale to another.
+    * @example map(3, 0, 4, -1, 1) -> 0.5
+    */
+    function map(val, min1, max1, min2, max2){
+        return lerp( norm(val, min1, max1), min2, max2 );
+    }
+    return map;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/norm.js b/node_modules/nyks/node_modules/mout/src/math/norm.js
new file mode 100644
index 0000000..724d4f5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/norm.js
@@ -0,0 +1,13 @@
+define(function(){
+    /**
+    * Gets normalized ratio of value inside range.
+    */
+    function norm(val, min, max){
+        if (val < min || val > max) {
+            throw new RangeError('value (' + val + ') must be between ' + min + ' and ' + max);
+        }
+
+        return val === max ? 1 : (val - min) / (max - min);
+    }
+    return norm;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/overflow.js b/node_modules/nyks/node_modules/mout/src/math/overflow.js
new file mode 100644
index 0000000..d9fd529
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/overflow.js
@@ -0,0 +1,23 @@
+define(function () {
+
+    /**
+     * Wraps number within bounds both positive and negative
+     */
+    function overflow(number, min, max){
+        if ( max === undefined ) {
+            max = min;
+            min = 0;
+        }
+
+        var difference = max - min;
+
+        if ( number < min ) {
+            number += difference * ( ~~( ( min - number ) / difference ) + 1 );
+        }
+
+        return min + ( number - min ) % difference;
+    }
+
+    return overflow;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/math/round.js b/node_modules/nyks/node_modules/mout/src/math/round.js
new file mode 100644
index 0000000..b43e4ac
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/math/round.js
@@ -0,0 +1,12 @@
+define(function () {
+    /**
+     * Round number to a specific radix
+     */
+    function round(value, radix){
+        radix = radix || 1; // default round 1
+        return Math.round(value / radix) * radix;
+    }
+
+    return round;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number.js b/node_modules/nyks/node_modules/mout/src/number.js
new file mode 100644
index 0000000..ffdb2cd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number.js
@@ -0,0 +1,25 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'MAX_INT' : require('./number/MAX_INT'),
+    'MAX_SAFE_INTEGER' : require('./number/MAX_SAFE_INTEGER'),
+    'MAX_UINT' : require('./number/MAX_UINT'),
+    'MIN_INT' : require('./number/MIN_INT'),
+    'abbreviate' : require('./number/abbreviate'),
+    'currencyFormat' : require('./number/currencyFormat'),
+    'enforcePrecision' : require('./number/enforcePrecision'),
+    'isNaN' : require('./number/isNaN'),
+    'nth' : require('./number/nth'),
+    'ordinal' : require('./number/ordinal'),
+    'pad' : require('./number/pad'),
+    'rol' : require('./number/rol'),
+    'ror' : require('./number/ror'),
+    'sign' : require('./number/sign'),
+    'toInt' : require('./number/toInt'),
+    'toUInt' : require('./number/toUInt'),
+    'toUInt31' : require('./number/toUInt31')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/MAX_INT.js b/node_modules/nyks/node_modules/mout/src/number/MAX_INT.js
new file mode 100644
index 0000000..23a6e1a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/MAX_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit signed integer value. (2^31 - 1)
+ */
+define(function(){
+    return 2147483647;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/MAX_SAFE_INTEGER.js b/node_modules/nyks/node_modules/mout/src/number/MAX_SAFE_INTEGER.js
new file mode 100644
index 0000000..ecdc62e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/MAX_SAFE_INTEGER.js
@@ -0,0 +1,7 @@
+define(function () {
+
+    // maximum safe integer (Math.pow(2, 53) - 1)
+    // see: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer
+    return 9007199254740991;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/MAX_UINT.js b/node_modules/nyks/node_modules/mout/src/number/MAX_UINT.js
new file mode 100644
index 0000000..a035096
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/MAX_UINT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Maximum 32-bit unsigned integet value (2^32 - 1)
+ */
+define(function(){
+    return 4294967295;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/MIN_INT.js b/node_modules/nyks/node_modules/mout/src/number/MIN_INT.js
new file mode 100644
index 0000000..9b3e978
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/MIN_INT.js
@@ -0,0 +1,6 @@
+/**
+ * @constant Minimum 32-bit signed integer value (-2^31).
+ */
+define(function(){
+    return -2147483648;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/abbreviate.js b/node_modules/nyks/node_modules/mout/src/number/abbreviate.js
new file mode 100644
index 0000000..7e7405a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/abbreviate.js
@@ -0,0 +1,35 @@
+define(['./enforcePrecision'], function (enforcePrecision) {
+
+    var _defaultDict = {
+        thousand : 'K',
+        million : 'M',
+        billion : 'B'
+    };
+
+    /**
+     * Abbreviate number if bigger than 1000. (eg: 2.5K, 17.5M, 3.4B, ...)
+     */
+    function abbreviateNumber(val, nDecimals, dict){
+        nDecimals = nDecimals != null? nDecimals : 1;
+        dict = dict || _defaultDict;
+        val = enforcePrecision(val, nDecimals);
+
+        var str, mod;
+
+        if (val < 1000000) {
+            mod = enforcePrecision(val / 1000, nDecimals);
+            // might overflow to next scale during rounding
+            str = mod < 1000? mod + dict.thousand : 1 + dict.million;
+        } else if (val < 1000000000) {
+            mod = enforcePrecision(val / 1000000, nDecimals);
+            str = mod < 1000? mod + dict.million : 1 + dict.billion;
+        } else {
+            str = enforcePrecision(val / 1000000000, nDecimals) + dict.billion;
+        }
+
+        return str;
+    }
+
+    return abbreviateNumber;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/currencyFormat.js b/node_modules/nyks/node_modules/mout/src/number/currencyFormat.js
new file mode 100644
index 0000000..1e5fecb
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/currencyFormat.js
@@ -0,0 +1,27 @@
+define(['../lang/toNumber'], function (toNumber) {
+
+    /**
+     * Converts number into currency format
+     */
+    function currencyFormat(val, nDecimalDigits, decimalSeparator, thousandsSeparator) {
+        val = toNumber(val);
+        nDecimalDigits = nDecimalDigits == null? 2 : nDecimalDigits;
+        decimalSeparator = decimalSeparator == null? '.' : decimalSeparator;
+        thousandsSeparator = thousandsSeparator == null? ',' : thousandsSeparator;
+
+        //can't use enforce precision since it returns a number and we are
+        //doing a RegExp over the string
+        var fixed = val.toFixed(nDecimalDigits),
+            //separate begin [$1], middle [$2] and decimal digits [$4]
+            parts = new RegExp('^(-?\\d{1,3})((?:\\d{3})+)(\\.(\\d{'+ nDecimalDigits +'}))?$').exec( fixed );
+
+        if(parts){ //val >= 1000 || val <= -1000
+            return parts[1] + parts[2].replace(/\d{3}/g, thousandsSeparator + '$&') + (parts[4] ? decimalSeparator + parts[4] : '');
+        }else{
+            return fixed.replace('.', decimalSeparator);
+        }
+    }
+
+    return currencyFormat;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/enforcePrecision.js b/node_modules/nyks/node_modules/mout/src/number/enforcePrecision.js
new file mode 100644
index 0000000..1e65e50
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/enforcePrecision.js
@@ -0,0 +1,12 @@
+define(['../lang/toNumber'], function(toNumber){
+    /**
+     * Enforce a specific amount of decimal digits and also fix floating
+     * point rounding issues.
+     */
+    function enforcePrecision(val, nDecimalDigits){
+        val = toNumber(val);
+        var pow = Math.pow(10, nDecimalDigits);
+        return +(Math.round(val * pow) / pow).toFixed(nDecimalDigits);
+    }
+    return enforcePrecision;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/isNaN.js b/node_modules/nyks/node_modules/mout/src/number/isNaN.js
new file mode 100644
index 0000000..3f1ebb6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/isNaN.js
@@ -0,0 +1,14 @@
+define(function () {
+
+    /**
+     * ES6 Number.isNaN
+     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
+     */
+    function isNaN(val){
+        // jshint eqeqeq:false
+        return typeof val === 'number' && val != val;
+    }
+
+    return isNaN;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/nth.js b/node_modules/nyks/node_modules/mout/src/number/nth.js
new file mode 100644
index 0000000..e991e2b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/nth.js
@@ -0,0 +1,25 @@
+define(function () {
+
+    /**
+     * Returns "nth" of number (1 = "st", 2 = "nd", 3 = "rd", 4..10 = "th", ...)
+     */
+    function nth(i) {
+        var t = (i % 100);
+        if (t >= 10 && t <= 20) {
+            return 'th';
+        }
+        switch(i % 10) {
+            case 1:
+                return 'st';
+            case 2:
+                return 'nd';
+            case 3:
+                return 'rd';
+            default:
+                return 'th';
+        }
+    }
+
+    return nth;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/ordinal.js b/node_modules/nyks/node_modules/mout/src/number/ordinal.js
new file mode 100644
index 0000000..17927fc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/ordinal.js
@@ -0,0 +1,13 @@
+define(['./toInt', './nth'], function (toInt, nth) {
+
+    /**
+     * converts number into ordinal form (1st, 2nd, 3rd, 4th, ...)
+     */
+    function ordinal(n){
+       n = toInt(n);
+       return n + nth(n);
+    }
+
+    return ordinal;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/pad.js b/node_modules/nyks/node_modules/mout/src/number/pad.js
new file mode 100644
index 0000000..194a3df
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/pad.js
@@ -0,0 +1,13 @@
+define(['../string/lpad', '../lang/toNumber'], function(lpad, toNumber){
+
+    /**
+     * Add padding zeros if n.length < minLength.
+     */
+    function pad(n, minLength, char){
+        n = toNumber(n);
+        return lpad(''+ n, minLength, char || '0');
+    }
+
+    return pad;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/rol.js b/node_modules/nyks/node_modules/mout/src/number/rol.js
new file mode 100644
index 0000000..a148f44
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/rol.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+     * Bitwise circular shift left
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function rol(val, shift){
+        return (val << shift) | (val >> (32 - shift));
+    }
+    return rol;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/ror.js b/node_modules/nyks/node_modules/mout/src/number/ror.js
new file mode 100644
index 0000000..b5c66f9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/ror.js
@@ -0,0 +1,10 @@
+define(function(){
+    /**
+     * Bitwise circular shift right
+     * http://en.wikipedia.org/wiki/Circular_shift
+     */
+    function ror(val, shift){
+        return (val >> shift) | (val << (32 - shift));
+    }
+    return ror;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/sign.js b/node_modules/nyks/node_modules/mout/src/number/sign.js
new file mode 100644
index 0000000..b387c95
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/sign.js
@@ -0,0 +1,15 @@
+define(['../lang/toNumber'], function (toNumber) {
+
+    /**
+     * Get sign of the value.
+     */
+    function sign(val) {
+        var num = toNumber(val);
+        if (num === 0) return num; // +0 and +0 === 0
+        if (isNaN(num)) return num; // NaN
+        return num < 0? -1 : 1;
+    }
+
+    return sign;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/toInt.js b/node_modules/nyks/node_modules/mout/src/number/toInt.js
new file mode 100644
index 0000000..5ea59e5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/toInt.js
@@ -0,0 +1,17 @@
+define(function(){
+
+    /**
+     * "Convert" value into an 32-bit integer.
+     * Works like `Math.floor` if val > 0 and `Math.ceil` if val < 0.
+     * IMPORTANT: val will wrap at 2^31 and -2^31.
+     * Perf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7
+     */
+    function toInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return ~~val;
+    }
+
+    return toInt;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/toUInt.js b/node_modules/nyks/node_modules/mout/src/number/toUInt.js
new file mode 100644
index 0000000..36bbdad
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/toUInt.js
@@ -0,0 +1,15 @@
+define(function () {
+
+    /**
+     * "Convert" value into a 32-bit unsigned integer.
+     * IMPORTANT: Value will wrap at 2^32.
+     */
+    function toUInt(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return val >>> 0;
+    }
+
+    return toUInt;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/number/toUInt31.js b/node_modules/nyks/node_modules/mout/src/number/toUInt31.js
new file mode 100644
index 0000000..c1c4aff
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/number/toUInt31.js
@@ -0,0 +1,15 @@
+define(['./MAX_INT'], function(MAX_INT){
+
+    /**
+     * "Convert" value into an 31-bit unsigned integer (since 1 bit is used for sign).
+     * IMPORTANT: value wil wrap at 2^31, if negative will return 0.
+     */
+    function toUInt31(val){
+        // we do not use lang/toNumber because of perf and also because it
+        // doesn't break the functionality
+        return (val <= 0)? 0 : (val > MAX_INT? ~~(val % (MAX_INT + 1)) : ~~val);
+    }
+
+    return toUInt31;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object.js b/node_modules/nyks/node_modules/mout/src/object.js
new file mode 100644
index 0000000..93cb49e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object.js
@@ -0,0 +1,44 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'bindAll' : require('./object/bindAll'),
+    'contains' : require('./object/contains'),
+    'deepFillIn' : require('./object/deepFillIn'),
+    'deepMatches' : require('./object/deepMatches'),
+    'deepMixIn' : require('./object/deepMixIn'),
+    'equals' : require('./object/equals'),
+    'every' : require('./object/every'),
+    'fillIn' : require('./object/fillIn'),
+    'filter' : require('./object/filter'),
+    'find' : require('./object/find'),
+    'flatten' : require('./object/flatten'),
+    'forIn' : require('./object/forIn'),
+    'forOwn' : require('./object/forOwn'),
+    'functions' : require('./object/functions'),
+    'get' : require('./object/get'),
+    'has' : require('./object/has'),
+    'hasOwn' : require('./object/hasOwn'),
+    'keys' : require('./object/keys'),
+    'map' : require('./object/map'),
+    'matches' : require('./object/matches'),
+    'max' : require('./object/max'),
+    'merge' : require('./object/merge'),
+    'min' : require('./object/min'),
+    'mixIn' : require('./object/mixIn'),
+    'namespace' : require('./object/namespace'),
+    'omit' : require('./object/omit'),
+    'pick' : require('./object/pick'),
+    'pluck' : require('./object/pluck'),
+    'reduce' : require('./object/reduce'),
+    'reject' : require('./object/reject'),
+    'result' : require('./object/result'),
+    'set' : require('./object/set'),
+    'size' : require('./object/size'),
+    'some' : require('./object/some'),
+    'unset' : require('./object/unset'),
+    'values' : require('./object/values')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/bindAll.js b/node_modules/nyks/node_modules/mout/src/object/bindAll.js
new file mode 100644
index 0000000..76576d6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/bindAll.js
@@ -0,0 +1,16 @@
+define(['./functions', '../function/bind', '../array/forEach', '../array/slice'], function (functions, bind, forEach, slice) {
+
+    /**
+     * Binds methods of the object to be run in it's own context.
+     */
+    function bindAll(obj, rest_methodNames){
+        var keys = arguments.length > 1?
+                    slice(arguments, 1) : functions(obj);
+        forEach(keys, function(key){
+            obj[key] = bind(obj[key], obj);
+        });
+    }
+
+    return bindAll;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/contains.js b/node_modules/nyks/node_modules/mout/src/object/contains.js
new file mode 100644
index 0000000..297e898
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/contains.js
@@ -0,0 +1,13 @@
+define(['./some'], function (some) {
+
+    /**
+     * Check if object contains value
+     */
+    function contains(obj, needle) {
+        return some(obj, function(val) {
+            return (val === needle);
+        });
+    }
+    return contains;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/deepFillIn.js b/node_modules/nyks/node_modules/mout/src/object/deepFillIn.js
new file mode 100644
index 0000000..ee69c3d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/deepFillIn.js
@@ -0,0 +1,32 @@
+define(['./forOwn', '../lang/isPlainObject'], function (forOwn, isPlainObject) {
+
+    /**
+     * Deeply copy missing properties in the target from the defaults.
+     */
+    function deepFillIn(target, defaults){
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n) {
+            obj = arguments[i];
+            if (obj) {
+                // jshint loopfunc: true
+                forOwn(obj, function(newValue, key) {
+                    var curValue = target[key];
+                    if (curValue == null) {
+                        target[key] = newValue;
+                    } else if (isPlainObject(curValue) &&
+                               isPlainObject(newValue)) {
+                        deepFillIn(curValue, newValue);
+                    }
+                });
+            }
+        }
+
+        return target;
+    }
+
+    return deepFillIn;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/deepMatches.js b/node_modules/nyks/node_modules/mout/src/object/deepMatches.js
new file mode 100644
index 0000000..ffd43e3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/deepMatches.js
@@ -0,0 +1,55 @@
+define(['./forOwn', '../lang/isArray'], function(forOwn, isArray) {
+
+    function containsMatch(array, pattern) {
+        var i = -1, length = array.length;
+        while (++i < length) {
+            if (deepMatches(array[i], pattern)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    function matchArray(target, pattern) {
+        var i = -1, patternLength = pattern.length;
+        while (++i < patternLength) {
+            if (!containsMatch(target, pattern[i])) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    function matchObject(target, pattern) {
+        var result = true;
+        forOwn(pattern, function(val, key) {
+            if (!deepMatches(target[key], val)) {
+                // Return false to break out of forOwn early
+                return (result = false);
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively check if the objects match.
+     */
+    function deepMatches(target, pattern){
+        if (target && typeof target === 'object' &&
+            pattern && typeof pattern === 'object') {
+            if (isArray(target) && isArray(pattern)) {
+                return matchArray(target, pattern);
+            } else {
+                return matchObject(target, pattern);
+            }
+        } else {
+            return target === pattern;
+        }
+    }
+
+    return deepMatches;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/deepMixIn.js b/node_modules/nyks/node_modules/mout/src/object/deepMixIn.js
new file mode 100644
index 0000000..1b4178e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/deepMixIn.js
@@ -0,0 +1,33 @@
+define(['./forOwn', '../lang/isPlainObject'], function (forOwn, isPlainObject) {
+
+    /**
+     * Mixes objects into the target object, recursively mixing existing child
+     * objects.
+     */
+    function deepMixIn(target, objects) {
+        var i = 0,
+            n = arguments.length,
+            obj;
+
+        while(++i < n){
+            obj = arguments[i];
+            if (obj) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+
+        return target;
+    }
+
+    function copyProp(val, key) {
+        var existing = this[key];
+        if (isPlainObject(val) && isPlainObject(existing)) {
+            deepMixIn(existing, val);
+        } else {
+            this[key] = val;
+        }
+    }
+
+    return deepMixIn;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/equals.js b/node_modules/nyks/node_modules/mout/src/object/equals.js
new file mode 100644
index 0000000..aeb8740
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/equals.js
@@ -0,0 +1,30 @@
+define(['./hasOwn', './every', '../lang/isObject', '../lang/is'], function(hasOwn, every, isObject, is) {
+
+    // Makes a function to compare the object values from the specified compare
+    // operation callback.
+    function makeCompare(callback) {
+        return function(value, key) {
+            return hasOwn(this, key) && callback(value, this[key]);
+        };
+    }
+
+    function checkProperties(value, key) {
+        return hasOwn(this, key);
+    }
+
+    /**
+     * Checks if two objects have the same keys and values.
+     */
+    function equals(a, b, callback) {
+        callback = callback || is;
+
+        if (!isObject(a) || !isObject(b)) {
+            return callback(a, b);
+        }
+
+        return (every(a, makeCompare(callback), b) &&
+                every(b, checkProperties, a));
+    }
+
+    return equals;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/every.js b/node_modules/nyks/node_modules/mout/src/object/every.js
new file mode 100644
index 0000000..52983a5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/every.js
@@ -0,0 +1,22 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Object every
+     */
+    function every(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = true;
+        forOwn(obj, function(val, key) {
+            // we consider any falsy values as "false" on purpose so shorthand
+            // syntax can be used to check property existence
+            if (!callback(val, key, obj)) {
+                result = false;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    return every;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/fillIn.js b/node_modules/nyks/node_modules/mout/src/object/fillIn.js
new file mode 100644
index 0000000..363beab
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/fillIn.js
@@ -0,0 +1,19 @@
+define(['../array/forEach', '../array/slice', './forOwn'], function (forEach, slice, forOwn) {
+
+    /**
+     * Copy missing properties in the obj from the defaults.
+     */
+    function fillIn(obj, var_defaults){
+        forEach(slice(arguments, 1), function(base){
+            forOwn(base, function(val, key){
+                if (obj[key] == null) {
+                    obj[key] = val;
+                }
+            });
+        });
+        return obj;
+    }
+
+    return fillIn;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/filter.js b/node_modules/nyks/node_modules/mout/src/object/filter.js
new file mode 100644
index 0000000..f213b91
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/filter.js
@@ -0,0 +1,19 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Creates a new object with all the properties where the callback returns
+     * true.
+     */
+    function filterValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                output[key] = value;
+            }
+        });
+
+        return output;
+    }
+    return filterValues;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/find.js b/node_modules/nyks/node_modules/mout/src/object/find.js
new file mode 100644
index 0000000..47e6b09
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/find.js
@@ -0,0 +1,20 @@
+define(['./some', '../function/makeIterator_'], function(some, makeIterator) {
+
+    /**
+     * Returns first item that matches criteria
+     */
+    function find(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result;
+        some(obj, function(value, key, obj) {
+            if (callback(value, key, obj)) {
+                result = value;
+                return true; //break
+            }
+        });
+        return result;
+    }
+
+    return find;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/flatten.js b/node_modules/nyks/node_modules/mout/src/object/flatten.js
new file mode 100644
index 0000000..4fe07af
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/flatten.js
@@ -0,0 +1,37 @@
+define(['./forOwn', '../lang/isPlainObject'], function (forOwn, isPlainObject) {
+
+    /*
+     * Helper function to flatten to a destination object.
+     * Used to remove the need to create intermediate objects while flattening.
+     */
+    function flattenTo(obj, result, prefix, level) {
+        forOwn(obj, function (value, key) {
+            var nestedPrefix = prefix ? prefix + '.' + key : key;
+
+            if (level !== 0 && isPlainObject(value)) {
+                flattenTo(value, result, nestedPrefix, level - 1);
+            } else {
+                result[nestedPrefix] = value;
+            }
+        });
+
+        return result;
+    }
+
+    /**
+     * Recursively flattens an object.
+     * A new object containing all the elements is returned.
+     * If level is specified, it will only flatten up to that level.
+     */
+    function flatten(obj, level) {
+        if (obj == null) {
+            return {};
+        }
+
+        level = level == null ? -1 : level;
+        return flattenTo(obj, {}, '', level);
+    }
+
+    return flatten;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/forIn.js b/node_modules/nyks/node_modules/mout/src/object/forIn.js
new file mode 100644
index 0000000..90f2706
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/forIn.js
@@ -0,0 +1,76 @@
+define(['./hasOwn'], function (hasOwn) {
+
+    var _hasDontEnumBug,
+        _dontEnums;
+
+    function checkDontEnum(){
+        _dontEnums = [
+                'toString',
+                'toLocaleString',
+                'valueOf',
+                'hasOwnProperty',
+                'isPrototypeOf',
+                'propertyIsEnumerable',
+                'constructor'
+            ];
+
+        _hasDontEnumBug = true;
+
+        for (var key in {'toString': null}) {
+            _hasDontEnumBug = false;
+        }
+    }
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forIn(obj, fn, thisObj){
+        var key, i = 0;
+        // no need to check if argument is a real object that way we can use
+        // it for arrays, functions, date, etc.
+
+        //post-pone check till needed
+        if (_hasDontEnumBug == null) checkDontEnum();
+
+        for (key in obj) {
+            if (exec(fn, obj, key, thisObj) === false) {
+                break;
+            }
+        }
+
+
+        if (_hasDontEnumBug) {
+            var ctor = obj.constructor,
+                isProto = !!ctor && obj === ctor.prototype;
+
+            while (key = _dontEnums[i++]) {
+                // For constructor, if it is a prototype object the constructor
+                // is always non-enumerable unless defined otherwise (and
+                // enumerated above).  For non-prototype objects, it will have
+                // to be defined on this object, since it cannot be defined on
+                // any prototype objects.
+                //
+                // For other [[DontEnum]] properties, check if the value is
+                // different than Object prototype value.
+                if (
+                    (key !== 'constructor' ||
+                        (!isProto && hasOwn(obj, key))) &&
+                    obj[key] !== Object.prototype[key]
+                ) {
+                    if (exec(fn, obj, key, thisObj) === false) {
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+    function exec(fn, obj, key, thisObj){
+        return fn.call(thisObj, obj[key], key, obj);
+    }
+
+    return forIn;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/forOwn.js b/node_modules/nyks/node_modules/mout/src/object/forOwn.js
new file mode 100644
index 0000000..b40cbaf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/forOwn.js
@@ -0,0 +1,18 @@
+define(['./hasOwn', './forIn'], function (hasOwn, forIn) {
+
+    /**
+     * Similar to Array/forEach but works over object properties and fixes Don't
+     * Enum bug on IE.
+     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
+     */
+    function forOwn(obj, fn, thisObj){
+        forIn(obj, function(val, key){
+            if (hasOwn(obj, key)) {
+                return fn.call(thisObj, obj[key], key, obj);
+            }
+        });
+    }
+
+    return forOwn;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/functions.js b/node_modules/nyks/node_modules/mout/src/object/functions.js
new file mode 100644
index 0000000..60fee3d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/functions.js
@@ -0,0 +1,18 @@
+define(['./forIn'], function (forIn) {
+
+    /**
+     * return a list of all enumerable properties that have function values
+     */
+    function functions(obj){
+        var keys = [];
+        forIn(obj, function(val, key){
+            if (typeof val === 'function'){
+                keys.push(key);
+            }
+        });
+        return keys.sort();
+    }
+
+    return functions;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/get.js b/node_modules/nyks/node_modules/mout/src/object/get.js
new file mode 100644
index 0000000..464c7bc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/get.js
@@ -0,0 +1,20 @@
+define(['../lang/isPrimitive'], function (isPrimitive) {
+
+    /**
+     * get "nested" object property
+     */
+    function get(obj, prop){
+        var parts = prop.split('.'),
+            last = parts.pop();
+
+        while (prop = parts.shift()) {
+            obj = obj[prop];
+            if (obj == null) return;
+        }
+
+        return obj[last];
+    }
+
+    return get;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/has.js b/node_modules/nyks/node_modules/mout/src/object/has.js
new file mode 100644
index 0000000..cc29817
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/has.js
@@ -0,0 +1,15 @@
+define(['./get'], function (get) {
+
+    var UNDEF;
+
+    /**
+     * Check if object has nested property.
+     */
+    function has(obj, prop){
+        return get(obj, prop) !== UNDEF;
+    }
+
+    return has;
+
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/object/hasOwn.js b/node_modules/nyks/node_modules/mout/src/object/hasOwn.js
new file mode 100644
index 0000000..5c53bcf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/hasOwn.js
@@ -0,0 +1,12 @@
+define(function () {
+
+    /**
+     * Safer Object.hasOwnProperty
+     */
+     function hasOwn(obj, prop){
+         return Object.prototype.hasOwnProperty.call(obj, prop);
+     }
+
+     return hasOwn;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/keys.js b/node_modules/nyks/node_modules/mout/src/object/keys.js
new file mode 100644
index 0000000..ed7c4f9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/keys.js
@@ -0,0 +1,16 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * Get object keys
+     */
+     var keys = Object.keys || function (obj) {
+            var keys = [];
+            forOwn(obj, function(val, key){
+                keys.push(key);
+            });
+            return keys;
+        };
+
+    return keys;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/map.js b/node_modules/nyks/node_modules/mout/src/object/map.js
new file mode 100644
index 0000000..2958f6b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/map.js
@@ -0,0 +1,17 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Creates a new object where all the values are the result of calling
+     * `callback`.
+     */
+    function mapValues(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var output = {};
+        forOwn(obj, function(val, key, obj) {
+            output[key] = callback(val, key, obj);
+        });
+
+        return output;
+    }
+    return mapValues;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/matches.js b/node_modules/nyks/node_modules/mout/src/object/matches.js
new file mode 100644
index 0000000..73ff427
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/matches.js
@@ -0,0 +1,20 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * checks if a object contains all given properties/values
+     */
+    function matches(target, props){
+        // can't use "object/every" because of circular dependency
+        var result = true;
+        forOwn(props, function(val, key){
+            if (target[key] !== val) {
+                // break loop at first difference
+                return (result = false);
+            }
+        });
+        return result;
+    }
+
+    return matches;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/max.js b/node_modules/nyks/node_modules/mout/src/object/max.js
new file mode 100644
index 0000000..ef311dc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/max.js
@@ -0,0 +1,11 @@
+define(['../array/max', './values'], function(arrMax, values) {
+
+    /**
+     * Returns maximum value inside object.
+     */
+    function max(obj, compareFn) {
+        return arrMax(values(obj), compareFn);
+    }
+
+    return max;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/merge.js b/node_modules/nyks/node_modules/mout/src/object/merge.js
new file mode 100644
index 0000000..d7cfede
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/merge.js
@@ -0,0 +1,38 @@
+define(['./hasOwn', '../lang/deepClone', '../lang/isObject'], function (hasOwn, deepClone, isObject) {
+
+    /**
+     * Deep merge objects.
+     */
+    function merge() {
+        var i = 1,
+            key, val, obj, target;
+
+        // make sure we don't modify source element and it's properties
+        // objects are passed by reference
+        target = deepClone( arguments[0] );
+
+        while (obj = arguments[i++]) {
+            for (key in obj) {
+                if ( ! hasOwn(obj, key) ) {
+                    continue;
+                }
+
+                val = obj[key];
+
+                if ( isObject(val) && isObject(target[key]) ){
+                    // inception, deep merge objects
+                    target[key] = merge(target[key], val);
+                } else {
+                    // make sure arrays, regexp, date, objects are cloned
+                    target[key] = deepClone(val);
+                }
+
+            }
+        }
+
+        return target;
+    }
+
+    return merge;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/min.js b/node_modules/nyks/node_modules/mout/src/object/min.js
new file mode 100644
index 0000000..9fb4c1a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/min.js
@@ -0,0 +1,11 @@
+define(['../array/min', './values'], function(arrMin, values) {
+
+    /**
+     * Returns minimum value inside object.
+     */
+    function min(obj, iterator) {
+        return arrMin(values(obj), iterator);
+    }
+
+    return min;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/mixIn.js b/node_modules/nyks/node_modules/mout/src/object/mixIn.js
new file mode 100644
index 0000000..6210b7e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/mixIn.js
@@ -0,0 +1,28 @@
+define(['./forOwn'], function(forOwn){
+
+    /**
+    * Combine properties from all the objects into first one.
+    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
+    * @param {object} target    Target Object
+    * @param {...object} objects    Objects to be combined (0...n objects).
+    * @return {object} Target Object.
+    */
+    function mixIn(target, objects){
+        var i = 0,
+            n = arguments.length,
+            obj;
+        while(++i < n){
+            obj = arguments[i];
+            if (obj != null) {
+                forOwn(obj, copyProp, target);
+            }
+        }
+        return target;
+    }
+
+    function copyProp(val, key){
+        this[key] = val;
+    }
+
+    return mixIn;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/namespace.js b/node_modules/nyks/node_modules/mout/src/object/namespace.js
new file mode 100644
index 0000000..7ed65db
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/namespace.js
@@ -0,0 +1,19 @@
+define(['../array/forEach'], function (forEach) {
+
+    /**
+     * Create nested object if non-existent
+     */
+    function namespace(obj, path){
+        if (!path) return obj;
+        forEach(path.split('.'), function(key){
+            if (!obj[key]) {
+                obj[key] = {};
+            }
+            obj = obj[key];
+        });
+        return obj;
+    }
+
+    return namespace;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/omit.js b/node_modules/nyks/node_modules/mout/src/object/omit.js
new file mode 100644
index 0000000..829cc58
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/omit.js
@@ -0,0 +1,20 @@
+define(['../array/slice', '../array/contains'], function(slice, contains){
+
+    /**
+     * Return a copy of the object, filtered to only contain properties except the blacklisted keys.
+     */
+    function omit(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {};
+
+        for (var property in obj) {
+            if (obj.hasOwnProperty(property) && !contains(keys, property)) {
+                out[property] = obj[property];
+            }
+        }
+        return out;
+    }
+
+    return omit;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/pick.js b/node_modules/nyks/node_modules/mout/src/object/pick.js
new file mode 100644
index 0000000..9d5e351
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/pick.js
@@ -0,0 +1,18 @@
+define(['../array/slice'], function(slice){
+
+    /**
+     * Return a copy of the object, filtered to only have values for the whitelisted keys.
+     */
+    function pick(obj, var_keys){
+        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
+            out = {},
+            i = 0, key;
+        while (key = keys[i++]) {
+            out[key] = obj[key];
+        }
+        return out;
+    }
+
+    return pick;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/pluck.js b/node_modules/nyks/node_modules/mout/src/object/pluck.js
new file mode 100644
index 0000000..d47744b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/pluck.js
@@ -0,0 +1,12 @@
+define(['./map', '../function/prop'], function (map, prop) {
+
+    /**
+     * Extract a list of property values.
+     */
+    function pluck(obj, propName){
+        return map(obj, prop(propName));
+    }
+
+    return pluck;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/reduce.js b/node_modules/nyks/node_modules/mout/src/object/reduce.js
new file mode 100644
index 0000000..d3a5778
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/reduce.js
@@ -0,0 +1,28 @@
+define(['./forOwn', './size'], function(forOwn, size) {
+
+    /**
+     * Object reduce
+     */
+    function reduce(obj, callback, memo, thisObj) {
+        var initial = arguments.length > 2;
+
+        if (!size(obj) && !initial) {
+            throw new Error('reduce of empty object with no initial value');
+        }
+
+        forOwn(obj, function(value, key, list) {
+            if (!initial) {
+                memo = value;
+                initial = true;
+            }
+            else {
+                memo = callback.call(thisObj, memo, value, key, list);
+            }
+        });
+
+        return memo;
+    }
+
+    return reduce;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/reject.js b/node_modules/nyks/node_modules/mout/src/object/reject.js
new file mode 100644
index 0000000..8429642
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/reject.js
@@ -0,0 +1,15 @@
+define(['./filter', '../function/makeIterator_'], function (filter, makeIterator) {
+
+    /**
+     * Object reject
+     */
+    function reject(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        return filter(obj, function(value, index, obj) {
+            return !callback(value, index, obj);
+        }, thisObj);
+    }
+
+    return reject;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/result.js b/node_modules/nyks/node_modules/mout/src/object/result.js
new file mode 100644
index 0000000..133572d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/result.js
@@ -0,0 +1,14 @@
+define(['../lang/isFunction'], function (isFunction) {
+
+    function result(obj, prop) {
+        var property = obj[prop];
+
+        if(property === undefined) {
+            return;
+        }
+
+        return isFunction(property) ? property.call(obj) : property;
+    }
+
+    return result;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/set.js b/node_modules/nyks/node_modules/mout/src/object/set.js
new file mode 100644
index 0000000..b8fa25a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/set.js
@@ -0,0 +1,17 @@
+define(['./namespace'], function (namespace) {
+
+    /**
+     * set "nested" object property
+     */
+    function set(obj, prop, val){
+        var parts = (/^(.+)\.(.+)$/).exec(prop);
+        if (parts){
+            namespace(obj, parts[1])[parts[2]] = val;
+        } else {
+            obj[prop] = val;
+        }
+    }
+
+    return set;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/size.js b/node_modules/nyks/node_modules/mout/src/object/size.js
new file mode 100644
index 0000000..c6e377c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/size.js
@@ -0,0 +1,16 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * Get object size
+     */
+    function size(obj) {
+        var count = 0;
+        forOwn(obj, function(){
+            count++;
+        });
+        return count;
+    }
+
+    return size;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/some.js b/node_modules/nyks/node_modules/mout/src/object/some.js
new file mode 100644
index 0000000..1bd6fda
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/some.js
@@ -0,0 +1,20 @@
+define(['./forOwn', '../function/makeIterator_'], function(forOwn, makeIterator) {
+
+    /**
+     * Object some
+     */
+    function some(obj, callback, thisObj) {
+        callback = makeIterator(callback, thisObj);
+        var result = false;
+        forOwn(obj, function(val, key) {
+            if (callback(val, key, obj)) {
+                result = true;
+                return false; // break
+            }
+        });
+        return result;
+    }
+
+    return some;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/unset.js b/node_modules/nyks/node_modules/mout/src/object/unset.js
new file mode 100644
index 0000000..787fc19
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/unset.js
@@ -0,0 +1,23 @@
+define(['./has'], function (has) {
+
+    /**
+     * Unset object property.
+     */
+    function unset(obj, prop){
+        if (has(obj, prop)) {
+            var parts = prop.split('.'),
+                last = parts.pop();
+            while (prop = parts.shift()) {
+                obj = obj[prop];
+            }
+            return (delete obj[last]);
+
+        } else {
+            // if property doesn't exist treat as deleted
+            return true;
+        }
+    }
+
+    return unset;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/object/values.js b/node_modules/nyks/node_modules/mout/src/object/values.js
new file mode 100644
index 0000000..b311fd0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/object/values.js
@@ -0,0 +1,16 @@
+define(['./forOwn'], function (forOwn) {
+
+    /**
+     * Get object values
+     */
+    function values(obj) {
+        var vals = [];
+        forOwn(obj, function(val, key){
+            vals.push(val);
+        });
+        return vals;
+    }
+
+    return values;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/queryString.js b/node_modules/nyks/node_modules/mout/src/queryString.js
new file mode 100644
index 0000000..4434612
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString.js
@@ -0,0 +1,15 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'contains' : require('./queryString/contains'),
+    'decode' : require('./queryString/decode'),
+    'encode' : require('./queryString/encode'),
+    'getParam' : require('./queryString/getParam'),
+    'getQuery' : require('./queryString/getQuery'),
+    'parse' : require('./queryString/parse'),
+    'setParam' : require('./queryString/setParam')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/queryString/contains.js b/node_modules/nyks/node_modules/mout/src/queryString/contains.js
new file mode 100644
index 0000000..a6d11cc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString/contains.js
@@ -0,0 +1,12 @@
+define(['./getQuery'], function (getQuery) {
+
+    /**
+     * Checks if query string contains parameter.
+     */
+    function contains(url, paramName) {
+        var regex = new RegExp('(\\?|&)'+ paramName +'=', 'g'); //matches `?param=` or `&param=`
+        return regex.test(getQuery(url));
+    }
+
+    return contains;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/queryString/decode.js b/node_modules/nyks/node_modules/mout/src/queryString/decode.js
new file mode 100644
index 0000000..a37c123
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString/decode.js
@@ -0,0 +1,34 @@
+define(['../string/typecast', '../lang/isArray', '../object/hasOwn'], function (typecast, isArray, hasOwn) {
+
+    /**
+     * Decode query string into an object of keys => vals.
+     */
+    function decode(queryStr, shouldTypecast) {
+        var queryArr = (queryStr || '').replace('?', '').split('&'),
+            reg = /([^=]+)=(.+)/,
+            i = -1,
+            obj = {},
+            equalIndex, cur, pValue, pName;
+
+        while ((cur = queryArr[++i])) {
+            equalIndex = cur.indexOf('=');
+            pName = cur.substring(0, equalIndex);
+            pValue = decodeURIComponent(cur.substring(equalIndex + 1));
+            if (shouldTypecast !== false) {
+                pValue = typecast(pValue);
+            }
+            if (hasOwn(obj, pName)){
+                if(isArray(obj[pName])){
+                    obj[pName].push(pValue);
+                } else {
+                    obj[pName] = [obj[pName], pValue];
+                }
+            } else {
+                obj[pName] = pValue;
+           }
+        }
+        return obj;
+    }
+
+    return decode;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/queryString/encode.js b/node_modules/nyks/node_modules/mout/src/queryString/encode.js
new file mode 100644
index 0000000..c249287
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString/encode.js
@@ -0,0 +1,25 @@
+define(['../object/forOwn','../lang/isArray','../array/forEach'], function (forOwn,isArray,forEach) {
+
+    /**
+     * Encode object into a query string.
+     */
+    function encode(obj){
+        var query = [],
+            arrValues, reg;
+        forOwn(obj, function (val, key) {
+            if (isArray(val)) {
+                arrValues = key + '=';
+                reg = new RegExp('&'+key+'+=$');
+                forEach(val, function (aValue) {
+                    arrValues += encodeURIComponent(aValue) + '&' + key + '=';
+                });
+                query.push(arrValues.replace(reg, ''));
+            } else {
+               query.push(key + '=' + encodeURIComponent(val));
+            }
+        });
+        return (query.length) ? '?' + query.join('&') : '';
+    }
+
+    return encode;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/queryString/getParam.js b/node_modules/nyks/node_modules/mout/src/queryString/getParam.js
new file mode 100644
index 0000000..d981372
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString/getParam.js
@@ -0,0 +1,14 @@
+define(['../string/typecast', './getQuery'], function (typecast, getQuery) {
+
+    /**
+     * Get query parameter value.
+     */
+    function getParam(url, param, shouldTypecast){
+        var regexp = new RegExp('(\\?|&)'+ param + '=([^&]*)'), //matches `?param=value` or `&param=value`, value = $2
+            result = regexp.exec( getQuery(url) ),
+            val = (result && result[2])? result[2] : null;
+        return shouldTypecast === false? val : typecast(val);
+    }
+
+    return getParam;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/queryString/getQuery.js b/node_modules/nyks/node_modules/mout/src/queryString/getQuery.js
new file mode 100644
index 0000000..995e00d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString/getQuery.js
@@ -0,0 +1,13 @@
+define(function () {
+
+    /**
+     * Gets full query as string with all special chars decoded.
+     */
+    function getQuery(url) {
+        // url = url.replace(/#.*\?/, '?'); //removes hash (to avoid getting hash query)
+        var queryString = /\?[a-zA-Z0-9\=\&\%\$\-\_\.\+\!\*\'\(\)\,]+/.exec(url); //valid chars according to: http://www.ietf.org/rfc/rfc1738.txt
+        return (queryString)? decodeURIComponent(queryString[0].replace(/\+/g,' ')) : '';
+    }
+
+    return getQuery;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/queryString/parse.js b/node_modules/nyks/node_modules/mout/src/queryString/parse.js
new file mode 100644
index 0000000..ac153e3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString/parse.js
@@ -0,0 +1,12 @@
+define(['./decode', './getQuery'], function (decode, getQuery) {
+
+    /**
+     * Get query string, parses and decodes it.
+     */
+    function parse(url, shouldTypecast) {
+        return decode(getQuery(url), shouldTypecast);
+    }
+
+    return parse;
+});
+
diff --git a/node_modules/nyks/node_modules/mout/src/queryString/setParam.js b/node_modules/nyks/node_modules/mout/src/queryString/setParam.js
new file mode 100644
index 0000000..97081aa
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/queryString/setParam.js
@@ -0,0 +1,28 @@
+define(function () {
+
+    /**
+     * Set query string parameter value
+     */
+    function setParam(url, paramName, value){
+        url = url || '';
+
+        var re = new RegExp('(\\?|&)'+ paramName +'=[^&]*' );
+        var param = paramName +'='+ encodeURIComponent( value );
+
+        if ( re.test(url) ) {
+            return url.replace(re, '$1'+ param);
+        } else {
+            if (url.indexOf('?') === -1) {
+                url += '?';
+            }
+            if (url.indexOf('=') !== -1) {
+                url += '&';
+            }
+            return url + param;
+        }
+
+    }
+
+    return setParam;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random.js b/node_modules/nyks/node_modules/mout/src/random.js
new file mode 100644
index 0000000..b47f203
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random.js
@@ -0,0 +1,18 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'choice' : require('./random/choice'),
+    'guid' : require('./random/guid'),
+    'rand' : require('./random/rand'),
+    'randBit' : require('./random/randBit'),
+    'randBool' : require('./random/randBool'),
+    'randHex' : require('./random/randHex'),
+    'randInt' : require('./random/randInt'),
+    'randSign' : require('./random/randSign'),
+    'randString' : require('./random/randString'),
+    'random' : require('./random/random')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/choice.js b/node_modules/nyks/node_modules/mout/src/random/choice.js
new file mode 100644
index 0000000..0d0c38d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/choice.js
@@ -0,0 +1,14 @@
+define(['./randInt', '../lang/isArray'], function (randInt, isArray) {
+
+    /**
+     * Returns a random element from the supplied arguments
+     * or from the array (if single argument is an array).
+     */
+    function choice(items) {
+        var target = (arguments.length === 1 && isArray(items))? items : arguments;
+        return target[ randInt(0, target.length - 1) ];
+    }
+
+    return choice;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/guid.js b/node_modules/nyks/node_modules/mout/src/random/guid.js
new file mode 100644
index 0000000..82f3a2d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/guid.js
@@ -0,0 +1,23 @@
+define(['./randHex', './choice'], function (randHex, choice) {
+
+  /**
+   * Returns pseudo-random guid (UUID v4)
+   * IMPORTANT: it's not totally "safe" since randHex/choice uses Math.random
+   * by default and sequences can be predicted in some cases. See the
+   * "random/random" documentation for more info about it and how to replace
+   * the default PRNG.
+   */
+  function guid() {
+    return (
+        randHex(8)+'-'+
+        randHex(4)+'-'+
+        // v4 UUID always contain "4" at this position to specify it was
+        // randomly generated
+        '4' + randHex(3) +'-'+
+        // v4 UUID always contain chars [a,b,8,9] at this position
+        choice(8, 9, 'a', 'b') + randHex(3)+'-'+
+        randHex(12)
+    );
+  }
+  return guid;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/rand.js b/node_modules/nyks/node_modules/mout/src/random/rand.js
new file mode 100644
index 0000000..b8c231d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/rand.js
@@ -0,0 +1,13 @@
+define(['./random', '../number/MIN_INT', '../number/MAX_INT'], function(random, MIN_INT, MAX_INT){
+
+    /**
+     * Returns random number inside range
+     */
+    function rand(min, max){
+        min = min == null? MIN_INT : min;
+        max = max == null? MAX_INT : max;
+        return min + (max - min) * random();
+    }
+
+    return rand;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/randBit.js b/node_modules/nyks/node_modules/mout/src/random/randBit.js
new file mode 100644
index 0000000..398fa2c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/randBit.js
@@ -0,0 +1,11 @@
+define(['./randBool'], function (randBool) {
+
+    /**
+     * Returns random bit (0 or 1)
+     */
+    function randomBit() {
+        return randBool()? 1 : 0;
+    }
+
+    return randomBit;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/randBool.js b/node_modules/nyks/node_modules/mout/src/random/randBool.js
new file mode 100644
index 0000000..8d9be0b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/randBool.js
@@ -0,0 +1,12 @@
+define(['./random'], function (random) {
+
+    /**
+     * returns a random boolean value (true or false)
+     */
+    function randBool(){
+        return random() >= 0.5;
+    }
+
+    return randBool;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/randHex.js b/node_modules/nyks/node_modules/mout/src/random/randHex.js
new file mode 100644
index 0000000..6e9bf1c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/randHex.js
@@ -0,0 +1,19 @@
+define(['./choice'], function (choice) {
+
+    var _chars = '0123456789abcdef'.split('');
+
+    /**
+     * Returns a random hexadecimal string
+     */
+    function randHex(size){
+        size = size && size > 0? size : 6;
+        var str = '';
+        while (size--) {
+            str += choice(_chars);
+        }
+        return str;
+    }
+
+    return randHex;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/randInt.js b/node_modules/nyks/node_modules/mout/src/random/randInt.js
new file mode 100644
index 0000000..1750e9d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/randInt.js
@@ -0,0 +1,16 @@
+define(['../number/MIN_INT', '../number/MAX_INT', './rand'], function(MIN_INT, MAX_INT, rand){
+
+    /**
+     * Gets random integer inside range or snap to min/max values.
+     */
+    function randInt(min, max){
+        min = min == null? MIN_INT : ~~min;
+        max = max == null? MAX_INT : ~~max;
+        // can't be max + 0.5 otherwise it will round up if `rand`
+        // returns `max` causing it to overflow range.
+        // -0.5 and + 0.49 are required to avoid bias caused by rounding
+        return Math.round( rand(min - 0.5, max + 0.499999999999) );
+    }
+
+    return randInt;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/randSign.js b/node_modules/nyks/node_modules/mout/src/random/randSign.js
new file mode 100644
index 0000000..1171b40
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/randSign.js
@@ -0,0 +1,11 @@
+define(['./randBool'], function (randBool) {
+
+    /**
+     * Returns random sign (-1 or 1)
+     */
+    function randomSign() {
+        return randBool()? 1 : -1;
+    }
+
+    return randomSign;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/randString.js b/node_modules/nyks/node_modules/mout/src/random/randString.js
new file mode 100644
index 0000000..d309d08
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/randString.js
@@ -0,0 +1,29 @@
+define([
+  '../lang/isNumber',
+  '../lang/isString',
+  './randInt'
+], function (isNumber, isString, randInt) {
+
+    var defaultDictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
+
+    function randomString(length, dictionary) {
+        if(!isNumber(length) || length <= 0) {
+          length = 8;
+        }
+
+        if(!isString(dictionary) || dictionary.length < 1) {
+          dictionary = defaultDictionary;
+        }
+
+        var result = '',
+            domain = dictionary.length - 1;
+
+        while(length--) {
+          result += dictionary[randInt(0, domain)];
+        }
+        
+        return result;
+    }
+
+    return randomString;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/random/random.js b/node_modules/nyks/node_modules/mout/src/random/random.js
new file mode 100644
index 0000000..4270822
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/random/random.js
@@ -0,0 +1,18 @@
+define(function () {
+
+    /**
+     * Just a wrapper to Math.random. No methods inside mout/random should call
+     * Math.random() directly so we can inject the pseudo-random number
+     * generator if needed (ie. in case we need a seeded random or a better
+     * algorithm than the native one)
+     */
+    function random(){
+        return random.get();
+    }
+
+    // we expose the method so it can be swapped if needed
+    random.get = Math.random;
+
+    return random;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string.js b/node_modules/nyks/node_modules/mout/src/string.js
new file mode 100644
index 0000000..a157e4c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string.js
@@ -0,0 +1,46 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'WHITE_SPACES' : require('./string/WHITE_SPACES'),
+    'camelCase' : require('./string/camelCase'),
+    'contains' : require('./string/contains'),
+    'crop' : require('./string/crop'),
+    'endsWith' : require('./string/endsWith'),
+    'escapeHtml' : require('./string/escapeHtml'),
+    'escapeRegExp' : require('./string/escapeRegExp'),
+    'escapeUnicode' : require('./string/escapeUnicode'),
+    'hyphenate' : require('./string/hyphenate'),
+    'insert' : require('./string/insert'),
+    'interpolate' : require('./string/interpolate'),
+    'lowerCase' : require('./string/lowerCase'),
+    'lpad' : require('./string/lpad'),
+    'ltrim' : require('./string/ltrim'),
+    'makePath' : require('./string/makePath'),
+    'normalizeLineBreaks' : require('./string/normalizeLineBreaks'),
+    'pascalCase' : require('./string/pascalCase'),
+    'properCase' : require('./string/properCase'),
+    'removeNonASCII' : require('./string/removeNonASCII'),
+    'removeNonWord' : require('./string/removeNonWord'),
+    'repeat' : require('./string/repeat'),
+    'replace' : require('./string/replace'),
+    'replaceAccents' : require('./string/replaceAccents'),
+    'rpad' : require('./string/rpad'),
+    'rtrim' : require('./string/rtrim'),
+    'sentenceCase' : require('./string/sentenceCase'),
+    'slugify' : require('./string/slugify'),
+    'startsWith' : require('./string/startsWith'),
+    'stripHtmlTags' : require('./string/stripHtmlTags'),
+    'trim' : require('./string/trim'),
+    'truncate' : require('./string/truncate'),
+    'typecast' : require('./string/typecast'),
+    'unCamelCase' : require('./string/unCamelCase'),
+    'underscore' : require('./string/underscore'),
+    'unescapeHtml' : require('./string/unescapeHtml'),
+    'unescapeUnicode' : require('./string/unescapeUnicode'),
+    'unhyphenate' : require('./string/unhyphenate'),
+    'upperCase' : require('./string/upperCase')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/WHITE_SPACES.js b/node_modules/nyks/node_modules/mout/src/string/WHITE_SPACES.js
new file mode 100644
index 0000000..e830d86
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/WHITE_SPACES.js
@@ -0,0 +1,12 @@
+define(function() {
+    /**
+     * Contains all Unicode white-spaces. Taken from
+     * http://en.wikipedia.org/wiki/Whitespace_character.
+     */
+    return [
+        ' ', '\n', '\r', '\t', '\f', '\v', '\u00A0', '\u1680', '\u180E',
+        '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006',
+        '\u2007', '\u2008', '\u2009', '\u200A', '\u2028', '\u2029', '\u202F',
+        '\u205F', '\u3000'
+    ];
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/camelCase.js b/node_modules/nyks/node_modules/mout/src/string/camelCase.js
new file mode 100644
index 0000000..68cf274
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/camelCase.js
@@ -0,0 +1,30 @@
+define(['../lang/toString', './replaceAccents', './removeNonWord', './upperCase', './lowerCase'], function(toString, replaceAccents, removeNonWord, upperCase, lowerCase){
+    /**
+    * Convert string to camelCase text.
+    */
+    function camelCase(str){
+        str = toString(str);
+        str = replaceAccents(str);
+        str = removeNonWord(str)
+            .replace(/[\-_]/g, ' '); // convert all hyphens and underscores to spaces
+
+        // handle acronyms
+        // matches lowercase chars && uppercase words
+        if (/[a-z]/.test(str) && /^|\s[A-Z]+\s|$/.test(str)) {
+            // we convert any word that isn't all caps into lowercase
+            str = str.replace(/\s(\w+)/g, function(word, m) {
+                return /^[A-Z]+$/.test(m) ? word : lowerCase(word);
+            });
+        } else if (/\s/.test(str)) {
+            // if it doesn't contain an acronym and it has spaces we should
+            // convert every word to lowercase
+            str = lowerCase(str);
+        }
+
+        return str
+            .replace(/\s[a-z]/g, upperCase) // convert first char of each word to UPPERCASE
+            .replace(/^\s*[A-Z]+/g, lowerCase) // convert first word to lowercase
+            .replace(/\s+/g, ''); // remove spaces
+    }
+    return camelCase;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/contains.js b/node_modules/nyks/node_modules/mout/src/string/contains.js
new file mode 100644
index 0000000..825b5a5
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/contains.js
@@ -0,0 +1,14 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Searches for a given substring
+     */
+    function contains(str, substring, fromIndex){
+        str = toString(str);
+        substring = toString(substring);
+        return str.indexOf(substring, fromIndex) !== -1;
+    }
+
+    return contains;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/crop.js b/node_modules/nyks/node_modules/mout/src/string/crop.js
new file mode 100644
index 0000000..3c073f0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/crop.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './truncate'], function (toString, truncate) {
+    /**
+     * Truncate string at full words.
+     */
+     function crop(str, maxChars, append) {
+         str = toString(str);
+         return truncate(str, maxChars, append, true);
+     }
+
+     return crop;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/endsWith.js b/node_modules/nyks/node_modules/mout/src/string/endsWith.js
new file mode 100644
index 0000000..31a73f2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/endsWith.js
@@ -0,0 +1,13 @@
+define(['../lang/toString'], function(toString) {
+    /**
+     * Checks if string ends with specified suffix.
+     */
+    function endsWith(str, suffix) {
+        str = toString(str);
+        suffix = toString(suffix);
+
+        return str.indexOf(suffix, str.length - suffix.length) !== -1;
+    }
+
+    return endsWith;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/escapeHtml.js b/node_modules/nyks/node_modules/mout/src/string/escapeHtml.js
new file mode 100644
index 0000000..de34b61
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/escapeHtml.js
@@ -0,0 +1,18 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Escapes a string for insertion into HTML.
+     */
+    function escapeHtml(str){
+        str = toString(str)
+            .replace(/&/g, '&amp;')
+            .replace(/</g, '&lt;')
+            .replace(/>/g, '&gt;')
+            .replace(/'/g, '&#39;')
+            .replace(/"/g, '&quot;');
+        return str;
+    }
+
+    return escapeHtml;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/escapeRegExp.js b/node_modules/nyks/node_modules/mout/src/string/escapeRegExp.js
new file mode 100644
index 0000000..862655b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/escapeRegExp.js
@@ -0,0 +1,12 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Escape RegExp string chars.
+     */
+    function escapeRegExp(str) {
+        return toString(str).replace(/\W/g,'\\$&');
+    }
+
+    return escapeRegExp;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/escapeUnicode.js b/node_modules/nyks/node_modules/mout/src/string/escapeUnicode.js
new file mode 100644
index 0000000..bd5e8c4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/escapeUnicode.js
@@ -0,0 +1,21 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Escape string into unicode sequences
+     */
+    function escapeUnicode(str, shouldEscapePrintable){
+        str = toString(str);
+        return str.replace(/[\s\S]/g, function(ch){
+            // skip printable ASCII chars if we should not escape them
+            if (!shouldEscapePrintable && (/[\x20-\x7E]/).test(ch)) {
+                return ch;
+            }
+            // we use "000" and slice(-4) for brevity, need to pad zeros,
+            // unicode escape always have 4 chars after "\u"
+            return '\\u'+ ('000'+ ch.charCodeAt(0).toString(16)).slice(-4);
+        });
+    }
+
+    return escapeUnicode;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/hyphenate.js b/node_modules/nyks/node_modules/mout/src/string/hyphenate.js
new file mode 100644
index 0000000..679c405
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/hyphenate.js
@@ -0,0 +1,12 @@
+define(['../lang/toString', './slugify', './unCamelCase'], function(toString, slugify, unCamelCase){
+    /**
+     * Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function hyphenate(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "-");
+    }
+
+    return hyphenate;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/insert.js b/node_modules/nyks/node_modules/mout/src/string/insert.js
new file mode 100644
index 0000000..79c45be
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/insert.js
@@ -0,0 +1,20 @@
+define(['../math/clamp', '../lang/toString'], function (clamp, toString) {
+
+    /**
+     * Inserts a string at a given index.
+     */
+    function insert(string, index, partial){
+        string = toString(string);
+
+        if (index < 0) {
+            index = string.length + index;
+        }
+
+        index = clamp(index, 0, string.length);
+
+        return string.substr(0, index) + partial + string.substr(index);
+    }
+
+    return insert;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/interpolate.js b/node_modules/nyks/node_modules/mout/src/string/interpolate.js
new file mode 100644
index 0000000..b5e7f4b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/interpolate.js
@@ -0,0 +1,21 @@
+define([
+    '../lang/toString',
+    '../object/get'
+], function(toString, get) {
+
+    var stache = /\{\{([^\}]+)\}\}/g; //mustache-like
+
+    /**
+     * String interpolation
+     */
+    function interpolate(template, replacements, syntax){
+        template = toString(template);
+        var replaceFn = function(match, prop){
+            return toString( get(replacements, prop) );
+        };
+        return template.replace(syntax || stache, replaceFn);
+    }
+
+    return interpolate;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/lowerCase.js b/node_modules/nyks/node_modules/mout/src/string/lowerCase.js
new file mode 100644
index 0000000..b045d69
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/lowerCase.js
@@ -0,0 +1,11 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * "Safer" String.toLowerCase()
+     */
+    function lowerCase(str){
+        str = toString(str);
+        return str.toLowerCase();
+    }
+
+    return lowerCase;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/lpad.js b/node_modules/nyks/node_modules/mout/src/string/lpad.js
new file mode 100644
index 0000000..134b415
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/lpad.js
@@ -0,0 +1,16 @@
+define(['../lang/toString', './repeat'], function(toString, repeat) {
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function lpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+
+        return (str.length < minLen) ?
+            repeat(ch, minLen - str.length) + str : str;
+    }
+
+    return lpad;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/ltrim.js b/node_modules/nyks/node_modules/mout/src/string/ltrim.js
new file mode 100644
index 0000000..477df95
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/ltrim.js
@@ -0,0 +1,33 @@
+define(['../lang/toString', './WHITE_SPACES'], function(toString, WHITE_SPACES){
+    /**
+     * Remove chars from beginning of string.
+     */
+    function ltrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var start = 0,
+            len = str.length,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && start < len) {
+            found = false;
+            i = -1;
+            c = str.charAt(start);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    start++;
+                    break;
+                }
+            }
+        }
+
+        return (start >= len) ? '' : str.substr(start, len);
+    }
+
+    return ltrim;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/makePath.js b/node_modules/nyks/node_modules/mout/src/string/makePath.js
new file mode 100644
index 0000000..3a6869e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/makePath.js
@@ -0,0 +1,14 @@
+define(['../array/join', '../array/slice'], function(join, slice){
+
+    /**
+     * Group arguments as path segments, if any of the args is `null` or an
+     * empty string it will be ignored from resulting path.
+     */
+    function makePath(var_args){
+        var result = join(slice(arguments), '/');
+        // need to disconsider duplicate '/' after protocol (eg: 'http://')
+        return result.replace(/([^:\/]|^)\/{2,}/g, '$1/');
+    }
+
+    return makePath;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/normalizeLineBreaks.js b/node_modules/nyks/node_modules/mout/src/string/normalizeLineBreaks.js
new file mode 100644
index 0000000..44e4194
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/normalizeLineBreaks.js
@@ -0,0 +1,18 @@
+define(['../lang/toString'], function (toString) {
+
+    /**
+     * Convert line-breaks from DOS/MAC to a single standard (UNIX by default)
+     */
+    function normalizeLineBreaks(str, lineEnd) {
+        str = toString(str);
+        lineEnd = lineEnd || '\n';
+
+        return str
+            .replace(/\r\n/g, lineEnd) // DOS
+            .replace(/\r/g, lineEnd)   // Mac
+            .replace(/\n/g, lineEnd);  // Unix
+    }
+
+    return normalizeLineBreaks;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/pascalCase.js b/node_modules/nyks/node_modules/mout/src/string/pascalCase.js
new file mode 100644
index 0000000..ead9ead
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/pascalCase.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './camelCase', './upperCase'], function(toString, camelCase, upperCase){
+    /**
+     * camelCase + UPPERCASE first char
+     */
+    function pascalCase(str){
+        str = toString(str);
+        return camelCase(str).replace(/^[a-z]/, upperCase);
+    }
+
+    return pascalCase;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/properCase.js b/node_modules/nyks/node_modules/mout/src/string/properCase.js
new file mode 100644
index 0000000..2987b50
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/properCase.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './lowerCase', './upperCase'], function(toString, lowerCase, upperCase){
+    /**
+     * UPPERCASE first char of each word.
+     */
+    function properCase(str){
+        str = toString(str);
+        return lowerCase(str).replace(/^\w|\s\w/g, upperCase);
+    }
+
+    return properCase;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/removeNonASCII.js b/node_modules/nyks/node_modules/mout/src/string/removeNonASCII.js
new file mode 100644
index 0000000..4905869
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/removeNonASCII.js
@@ -0,0 +1,14 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * Remove non-printable ASCII chars
+     */
+    function removeNonASCII(str){
+        str = toString(str);
+
+        // Matches non-printable ASCII chars -
+        // http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
+        return str.replace(/[^\x20-\x7E]/g, '');
+    }
+
+    return removeNonASCII;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/removeNonWord.js b/node_modules/nyks/node_modules/mout/src/string/removeNonWord.js
new file mode 100644
index 0000000..fb737d7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/removeNonWord.js
@@ -0,0 +1,14 @@
+define(['../lang/toString'], function(toString){
+    // This pattern is generated by the _build/pattern-removeNonWord.js script
+    var PATTERN = /[^\x20\x2D0-9A-Z\x5Fa-z\xC0-\xD6\xD8-\xF6\xF8-\xFF]/g;
+
+    /**
+     * Remove non-word chars.
+     */
+    function removeNonWord(str){
+        str = toString(str);
+        return str.replace(PATTERN, '');
+    }
+
+    return removeNonWord;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/repeat.js b/node_modules/nyks/node_modules/mout/src/string/repeat.js
new file mode 100644
index 0000000..0a25d83
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/repeat.js
@@ -0,0 +1,25 @@
+define(['../lang/toString', '../number/toInt'], function(toString, toInt){
+
+    /**
+     * Repeat string n times
+     */
+     function repeat(str, n){
+         var result = '';
+         str = toString(str);
+         n = toInt(n);
+        if (n < 1) {
+            return '';
+        }
+        while (n > 0) {
+            if (n % 2) {
+                result += str;
+            }
+            n = Math.floor(n / 2);
+            str += str;
+        }
+        return result;
+     }
+
+     return repeat;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/replace.js b/node_modules/nyks/node_modules/mout/src/string/replace.js
new file mode 100644
index 0000000..8b762fd
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/replace.js
@@ -0,0 +1,32 @@
+define(['../lang/toString', '../lang/toArray'], function (toString, toArray) {
+
+    /**
+     * Replace string(s) with the replacement(s) in the source.
+     */
+    function replace(str, search, replacements) {
+        str = toString(str);
+        search = toArray(search);
+        replacements = toArray(replacements);
+
+        var searchLength = search.length,
+            replacementsLength = replacements.length;
+
+        if (replacementsLength !== 1 && searchLength !== replacementsLength) {
+            throw new Error('Unequal number of searches and replacements');
+        }
+
+        var i = -1;
+        while (++i < searchLength) {
+            // Use the first replacement for all searches if only one
+            // replacement is provided
+            str = str.replace(
+                search[i],
+                replacements[(replacementsLength === 1) ? 0 : i]);
+        }
+
+        return str;
+    }
+
+    return replace;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/replaceAccents.js b/node_modules/nyks/node_modules/mout/src/string/replaceAccents.js
new file mode 100644
index 0000000..3a63f55
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/replaceAccents.js
@@ -0,0 +1,36 @@
+define(['../lang/toString'], function(toString){
+    /**
+    * Replaces all accented chars with regular ones
+    */
+    function replaceAccents(str){
+        str = toString(str);
+
+        // verifies if the String has accents and replace them
+        if (str.search(/[\xC0-\xFF]/g) > -1) {
+            str = str
+                    .replace(/[\xC0-\xC5]/g, "A")
+                    .replace(/[\xC6]/g, "AE")
+                    .replace(/[\xC7]/g, "C")
+                    .replace(/[\xC8-\xCB]/g, "E")
+                    .replace(/[\xCC-\xCF]/g, "I")
+                    .replace(/[\xD0]/g, "D")
+                    .replace(/[\xD1]/g, "N")
+                    .replace(/[\xD2-\xD6\xD8]/g, "O")
+                    .replace(/[\xD9-\xDC]/g, "U")
+                    .replace(/[\xDD]/g, "Y")
+                    .replace(/[\xDE]/g, "P")
+                    .replace(/[\xE0-\xE5]/g, "a")
+                    .replace(/[\xE6]/g, "ae")
+                    .replace(/[\xE7]/g, "c")
+                    .replace(/[\xE8-\xEB]/g, "e")
+                    .replace(/[\xEC-\xEF]/g, "i")
+                    .replace(/[\xF1]/g, "n")
+                    .replace(/[\xF2-\xF6\xF8]/g, "o")
+                    .replace(/[\xF9-\xFC]/g, "u")
+                    .replace(/[\xFE]/g, "p")
+                    .replace(/[\xFD\xFF]/g, "y");
+        }
+        return str;
+    }
+    return replaceAccents;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/rpad.js b/node_modules/nyks/node_modules/mout/src/string/rpad.js
new file mode 100644
index 0000000..2efd9c8
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/rpad.js
@@ -0,0 +1,14 @@
+define(['../lang/toString', './repeat'], function (toString, repeat) {
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function rpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+        return (str.length < minLen)? str + repeat(ch, minLen - str.length) : str;
+    }
+
+    return rpad;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/rtrim.js b/node_modules/nyks/node_modules/mout/src/string/rtrim.js
new file mode 100644
index 0000000..a4cc282
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/rtrim.js
@@ -0,0 +1,32 @@
+define(['../lang/toString', './WHITE_SPACES'], function(toString, WHITE_SPACES){
+    /**
+     * Remove chars from end of string.
+     */
+    function rtrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var end = str.length - 1,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && end >= 0) {
+            found = false;
+            i = -1;
+            c = str.charAt(end);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    end--;
+                    break;
+                }
+            }
+        }
+
+        return (end >= 0) ? str.substring(0, end + 1) : '';
+    }
+
+    return rtrim;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/sentenceCase.js b/node_modules/nyks/node_modules/mout/src/string/sentenceCase.js
new file mode 100644
index 0000000..cfe45af
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/sentenceCase.js
@@ -0,0 +1,13 @@
+define(['../lang/toString', './lowerCase', './upperCase'], function(toString, lowerCase, upperCase){
+    /**
+     * UPPERCASE first char of each sentence and lowercase other chars.
+     */
+    function sentenceCase(str){
+        str = toString(str);
+
+        // Replace first char of each sentence (new line or after '.\s+') to
+        // UPPERCASE
+        return lowerCase(str).replace(/(^\w)|\.\s+(\w)/gm, upperCase);
+    }
+    return sentenceCase;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/slugify.js b/node_modules/nyks/node_modules/mout/src/string/slugify.js
new file mode 100644
index 0000000..c6d68c7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/slugify.js
@@ -0,0 +1,21 @@
+define(['../lang/toString', './replaceAccents', './removeNonWord', './trim'], function(toString, replaceAccents, removeNonWord, trim){
+    /**
+     * Convert to lower case, remove accents, remove non-word chars and
+     * replace spaces with the specified delimeter.
+     * Does not split camelCase text.
+     */
+    function slugify(str, delimeter){
+        str = toString(str);
+
+        if (delimeter == null) {
+            delimeter = "-";
+        }
+        str = replaceAccents(str);
+        str = removeNonWord(str);
+        str = trim(str) //should come after removeNonWord
+                .replace(/ +/g, delimeter) //replace spaces with delimeter
+                .toLowerCase();
+        return str;
+    }
+    return slugify;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/startsWith.js b/node_modules/nyks/node_modules/mout/src/string/startsWith.js
new file mode 100644
index 0000000..88ae545
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/startsWith.js
@@ -0,0 +1,13 @@
+define(['../lang/toString'], function (toString) {
+    /**
+     * Checks if string starts with specified prefix.
+     */
+    function startsWith(str, prefix) {
+        str = toString(str);
+        prefix = toString(prefix);
+
+        return str.indexOf(prefix) === 0;
+    }
+
+    return startsWith;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/stripHtmlTags.js b/node_modules/nyks/node_modules/mout/src/string/stripHtmlTags.js
new file mode 100644
index 0000000..e8da956
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/stripHtmlTags.js
@@ -0,0 +1,11 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * Remove HTML tags from string.
+     */
+    function stripHtmlTags(str){
+        str = toString(str);
+
+        return str.replace(/<[^>]*>/g, '');
+    }
+    return stripHtmlTags;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/trim.js b/node_modules/nyks/node_modules/mout/src/string/trim.js
new file mode 100644
index 0000000..5552604
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/trim.js
@@ -0,0 +1,12 @@
+define(['../lang/toString', './WHITE_SPACES', './ltrim', './rtrim'], function(toString, WHITE_SPACES, ltrim, rtrim){
+    /**
+     * Remove white-spaces from beginning and end of string.
+     */
+    function trim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+        return ltrim(rtrim(str, chars), chars);
+    }
+
+    return trim;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/truncate.js b/node_modules/nyks/node_modules/mout/src/string/truncate.js
new file mode 100644
index 0000000..34000d9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/truncate.js
@@ -0,0 +1,20 @@
+define(['../lang/toString', './trim'], function(toString, trim){
+    /**
+     * Limit number of chars.
+     */
+    function truncate(str, maxChars, append, onlyFullWords){
+        str = toString(str);
+        append = append || '...';
+        maxChars = onlyFullWords? maxChars + 1 : maxChars;
+
+        str = trim(str);
+        if(str.length <= maxChars){
+            return str;
+        }
+        str = str.substr(0, maxChars - append.length);
+        //crop at last space or remove trailing whitespace
+        str = onlyFullWords? str.substr(0, str.lastIndexOf(' ')) : trim(str);
+        return str + append;
+    }
+    return truncate;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/typecast.js b/node_modules/nyks/node_modules/mout/src/string/typecast.js
new file mode 100644
index 0000000..a7c8315
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/typecast.js
@@ -0,0 +1,29 @@
+define(function () {
+
+    var UNDEF;
+
+    /**
+     * Parses string and convert it into a native value.
+     */
+    function typecast(val) {
+        var r;
+        if ( val === null || val === 'null' ) {
+            r = null;
+        } else if ( val === 'true' ) {
+            r = true;
+        } else if ( val === 'false' ) {
+            r = false;
+        } else if ( val === UNDEF || val === 'undefined' ) {
+            r = UNDEF;
+        } else if ( val === '' || isNaN(val) ) {
+            //isNaN('') returns false
+            r = val;
+        } else {
+            //parseFloat(null || '') returns NaN
+            r = parseFloat(val);
+        }
+        return r;
+    }
+
+    return typecast;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/unCamelCase.js b/node_modules/nyks/node_modules/mout/src/string/unCamelCase.js
new file mode 100644
index 0000000..eeef39b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/unCamelCase.js
@@ -0,0 +1,23 @@
+define(['../lang/toString'], function(toString){
+
+    var CAMEL_CASE_BORDER = /([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g;
+
+    /**
+     * Add space between camelCase text.
+     */
+    function unCamelCase(str, delimiter){
+        if (delimiter == null) {
+            delimiter = ' ';
+        }
+
+        function join(str, c1, c2) {
+            return c1 + delimiter + c2;
+        }
+
+        str = toString(str);
+        str = str.replace(CAMEL_CASE_BORDER, join);
+        str = str.toLowerCase(); //add space between camelCase text
+        return str;
+    }
+    return unCamelCase;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/underscore.js b/node_modules/nyks/node_modules/mout/src/string/underscore.js
new file mode 100644
index 0000000..75dd464
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/underscore.js
@@ -0,0 +1,11 @@
+define(['../lang/toString', './slugify', './unCamelCase'], function(toString, slugify, unCamelCase){
+    /**
+     * Replaces spaces with underscores, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function underscore(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "_");
+    }
+    return underscore;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/unescapeHtml.js b/node_modules/nyks/node_modules/mout/src/string/unescapeHtml.js
new file mode 100644
index 0000000..ca89042
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/unescapeHtml.js
@@ -0,0 +1,18 @@
+define(['../lang/toString'], function (toString) {
+
+    /**
+     * Unescapes HTML special chars
+     */
+    function unescapeHtml(str){
+        str = toString(str)
+            .replace(/&amp;/g , '&')
+            .replace(/&lt;/g  , '<')
+            .replace(/&gt;/g  , '>')
+            .replace(/&#0*39;/g , "'")
+            .replace(/&quot;/g, '"');
+        return str;
+    }
+
+    return unescapeHtml;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/unescapeUnicode.js b/node_modules/nyks/node_modules/mout/src/string/unescapeUnicode.js
new file mode 100644
index 0000000..d4a7ba1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/unescapeUnicode.js
@@ -0,0 +1,16 @@
+define(['../lang/toString'], function(toString) {
+
+    /**
+     * Unescape unicode char sequences
+     */
+    function unescapeUnicode(str){
+        str = toString(str);
+        return str.replace(/\\u[0-9a-f]{4}/g, function(ch){
+            var code = parseInt(ch.slice(2), 16);
+            return String.fromCharCode(code);
+        });
+    }
+
+    return unescapeUnicode;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/unhyphenate.js b/node_modules/nyks/node_modules/mout/src/string/unhyphenate.js
new file mode 100644
index 0000000..6ac2fa4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/unhyphenate.js
@@ -0,0 +1,10 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * Replaces hyphens with spaces. (only hyphens between word chars)
+     */
+    function unhyphenate(str){
+        str = toString(str);
+        return str.replace(/(\w)(-)(\w)/g, '$1 $3');
+    }
+    return unhyphenate;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/string/upperCase.js b/node_modules/nyks/node_modules/mout/src/string/upperCase.js
new file mode 100644
index 0000000..8b2073e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/string/upperCase.js
@@ -0,0 +1,10 @@
+define(['../lang/toString'], function(toString){
+    /**
+     * "Safer" String.toUpperCase()
+     */
+    function upperCase(str){
+        str = toString(str);
+        return str.toUpperCase();
+    }
+    return upperCase;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/time.js b/node_modules/nyks/node_modules/mout/src/time.js
new file mode 100644
index 0000000..67c9068
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/time.js
@@ -0,0 +1,12 @@
+define(function(require){
+
+//automatically generated, do not edit!
+//run `node build` instead
+return {
+    'convert' : require('./time/convert'),
+    'now' : require('./time/now'),
+    'parseMs' : require('./time/parseMs'),
+    'toTimeString' : require('./time/toTimeString')
+};
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/time/convert.js b/node_modules/nyks/node_modules/mout/src/time/convert.js
new file mode 100644
index 0000000..2de0cf2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/time/convert.js
@@ -0,0 +1,41 @@
+define(function () {
+
+    /**
+     * convert time into another unit
+     */
+    function convert(val, sourceUnitName, destinationUnitName){
+        destinationUnitName = destinationUnitName || 'ms';
+        return (val * getUnit(sourceUnitName)) / getUnit(destinationUnitName);
+    }
+
+
+    //TODO: maybe extract to a separate module
+    function getUnit(unitName){
+        switch(unitName){
+            case 'ms':
+            case 'millisecond':
+                return 1;
+            case 's':
+            case 'second':
+                 return 1000;
+            case 'm':
+            case 'minute':
+                 return 60000;
+            case 'h':
+            case 'hour':
+                 return 3600000;
+            case 'd':
+            case 'day':
+                 return 86400000;
+            case 'w':
+            case 'week':
+                 return 604800000;
+            default:
+                throw new Error('"'+ unitName + '" is not a valid unit');
+        }
+    }
+
+
+    return convert;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/time/now.js b/node_modules/nyks/node_modules/mout/src/time/now.js
new file mode 100644
index 0000000..4b2d03c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/time/now.js
@@ -0,0 +1,18 @@
+define(function () {
+
+    /**
+     * Get current time in miliseconds
+     */
+    function now(){
+        // yes, we defer the work to another function to allow mocking it
+        // during the tests
+        return now.get();
+    }
+
+    now.get = (typeof Date.now === 'function')? Date.now : function(){
+        return +(new Date());
+    };
+
+    return now;
+
+});
diff --git a/node_modules/nyks/node_modules/mout/src/time/parseMs.js b/node_modules/nyks/node_modules/mout/src/time/parseMs.js
new file mode 100644
index 0000000..964929a
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/time/parseMs.js
@@ -0,0 +1,17 @@
+define(['../math/countSteps'], function(countSteps){
+
+    /**
+     * Parse timestamp into an object.
+     */
+    function parseMs(ms){
+        return {
+            milliseconds : countSteps(ms, 1, 1000),
+            seconds      : countSteps(ms, 1000, 60),
+            minutes      : countSteps(ms, 60000, 60),
+            hours        : countSteps(ms, 3600000, 24),
+            days         : countSteps(ms, 86400000)
+        };
+    }
+
+    return parseMs;
+});
diff --git a/node_modules/nyks/node_modules/mout/src/time/toTimeString.js b/node_modules/nyks/node_modules/mout/src/time/toTimeString.js
new file mode 100644
index 0000000..edf1821
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/src/time/toTimeString.js
@@ -0,0 +1,23 @@
+define(['../math/countSteps', '../number/pad'], function(countSteps, pad){
+
+    var HOUR = 3600000,
+        MINUTE = 60000,
+        SECOND = 1000;
+
+    /**
+     * Format timestamp into a time string.
+     */
+    function toTimeString(ms){
+        var h = ms < HOUR   ? 0 : countSteps(ms, HOUR),
+            m = ms < MINUTE ? 0 : countSteps(ms, MINUTE, 60),
+            s = ms < SECOND ? 0 : countSteps(ms, SECOND, 60),
+            str = '';
+
+        str += h? h + ':' : '';
+        str += pad(m, 2) + ':';
+        str += pad(s, 2);
+
+        return str;
+    }
+    return toTimeString;
+});
diff --git a/node_modules/nyks/node_modules/mout/string.js b/node_modules/nyks/node_modules/mout/string.js
new file mode 100644
index 0000000..6115811
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string.js
@@ -0,0 +1,46 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'WHITE_SPACES' : require('./string/WHITE_SPACES'),
+    'camelCase' : require('./string/camelCase'),
+    'contains' : require('./string/contains'),
+    'crop' : require('./string/crop'),
+    'endsWith' : require('./string/endsWith'),
+    'escapeHtml' : require('./string/escapeHtml'),
+    'escapeRegExp' : require('./string/escapeRegExp'),
+    'escapeUnicode' : require('./string/escapeUnicode'),
+    'hyphenate' : require('./string/hyphenate'),
+    'insert' : require('./string/insert'),
+    'interpolate' : require('./string/interpolate'),
+    'lowerCase' : require('./string/lowerCase'),
+    'lpad' : require('./string/lpad'),
+    'ltrim' : require('./string/ltrim'),
+    'makePath' : require('./string/makePath'),
+    'normalizeLineBreaks' : require('./string/normalizeLineBreaks'),
+    'pascalCase' : require('./string/pascalCase'),
+    'properCase' : require('./string/properCase'),
+    'removeNonASCII' : require('./string/removeNonASCII'),
+    'removeNonWord' : require('./string/removeNonWord'),
+    'repeat' : require('./string/repeat'),
+    'replace' : require('./string/replace'),
+    'replaceAccents' : require('./string/replaceAccents'),
+    'rpad' : require('./string/rpad'),
+    'rtrim' : require('./string/rtrim'),
+    'sentenceCase' : require('./string/sentenceCase'),
+    'slugify' : require('./string/slugify'),
+    'startsWith' : require('./string/startsWith'),
+    'stripHtmlTags' : require('./string/stripHtmlTags'),
+    'trim' : require('./string/trim'),
+    'truncate' : require('./string/truncate'),
+    'typecast' : require('./string/typecast'),
+    'unCamelCase' : require('./string/unCamelCase'),
+    'underscore' : require('./string/underscore'),
+    'unescapeHtml' : require('./string/unescapeHtml'),
+    'unescapeUnicode' : require('./string/unescapeUnicode'),
+    'unhyphenate' : require('./string/unhyphenate'),
+    'upperCase' : require('./string/upperCase')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/WHITE_SPACES.js b/node_modules/nyks/node_modules/mout/string/WHITE_SPACES.js
new file mode 100644
index 0000000..03e0125
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/WHITE_SPACES.js
@@ -0,0 +1,12 @@
+
+    /**
+     * Contains all Unicode white-spaces. Taken from
+     * http://en.wikipedia.org/wiki/Whitespace_character.
+     */
+    module.exports = [
+        ' ', '\n', '\r', '\t', '\f', '\v', '\u00A0', '\u1680', '\u180E',
+        '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006',
+        '\u2007', '\u2008', '\u2009', '\u200A', '\u2028', '\u2029', '\u202F',
+        '\u205F', '\u3000'
+    ];
+
diff --git a/node_modules/nyks/node_modules/mout/string/camelCase.js b/node_modules/nyks/node_modules/mout/string/camelCase.js
new file mode 100644
index 0000000..e73a960
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/camelCase.js
@@ -0,0 +1,34 @@
+var toString = require('../lang/toString');
+var replaceAccents = require('./replaceAccents');
+var removeNonWord = require('./removeNonWord');
+var upperCase = require('./upperCase');
+var lowerCase = require('./lowerCase');
+    /**
+    * Convert string to camelCase text.
+    */
+    function camelCase(str){
+        str = toString(str);
+        str = replaceAccents(str);
+        str = removeNonWord(str)
+            .replace(/[\-_]/g, ' '); // convert all hyphens and underscores to spaces
+
+        // handle acronyms
+        // matches lowercase chars && uppercase words
+        if (/[a-z]/.test(str) && /^|\s[A-Z]+\s|$/.test(str)) {
+            // we convert any word that isn't all caps into lowercase
+            str = str.replace(/\s(\w+)/g, function(word, m) {
+                return /^[A-Z]+$/.test(m) ? word : lowerCase(word);
+            });
+        } else if (/\s/.test(str)) {
+            // if it doesn't contain an acronym and it has spaces we should
+            // convert every word to lowercase
+            str = lowerCase(str);
+        }
+
+        return str
+            .replace(/\s[a-z]/g, upperCase) // convert first char of each word to UPPERCASE
+            .replace(/^\s*[A-Z]+/g, lowerCase) // convert first word to lowercase
+            .replace(/\s+/g, ''); // remove spaces
+    }
+    module.exports = camelCase;
+
diff --git a/node_modules/nyks/node_modules/mout/string/contains.js b/node_modules/nyks/node_modules/mout/string/contains.js
new file mode 100644
index 0000000..cb22cae
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/contains.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Searches for a given substring
+     */
+    function contains(str, substring, fromIndex){
+        str = toString(str);
+        substring = toString(substring);
+        return str.indexOf(substring, fromIndex) !== -1;
+    }
+
+    module.exports = contains;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/crop.js b/node_modules/nyks/node_modules/mout/string/crop.js
new file mode 100644
index 0000000..53b93b4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/crop.js
@@ -0,0 +1,12 @@
+var toString = require('../lang/toString');
+var truncate = require('./truncate');
+    /**
+     * Truncate string at full words.
+     */
+     function crop(str, maxChars, append) {
+         str = toString(str);
+         return truncate(str, maxChars, append, true);
+     }
+
+     module.exports = crop;
+
diff --git a/node_modules/nyks/node_modules/mout/string/endsWith.js b/node_modules/nyks/node_modules/mout/string/endsWith.js
new file mode 100644
index 0000000..d504e9d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/endsWith.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+    /**
+     * Checks if string ends with specified suffix.
+     */
+    function endsWith(str, suffix) {
+        str = toString(str);
+        suffix = toString(suffix);
+
+        return str.indexOf(suffix, str.length - suffix.length) !== -1;
+    }
+
+    module.exports = endsWith;
+
diff --git a/node_modules/nyks/node_modules/mout/string/escapeHtml.js b/node_modules/nyks/node_modules/mout/string/escapeHtml.js
new file mode 100644
index 0000000..e67c4b2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/escapeHtml.js
@@ -0,0 +1,18 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Escapes a string for insertion into HTML.
+     */
+    function escapeHtml(str){
+        str = toString(str)
+            .replace(/&/g, '&amp;')
+            .replace(/</g, '&lt;')
+            .replace(/>/g, '&gt;')
+            .replace(/'/g, '&#39;')
+            .replace(/"/g, '&quot;');
+        return str;
+    }
+
+    module.exports = escapeHtml;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/escapeRegExp.js b/node_modules/nyks/node_modules/mout/string/escapeRegExp.js
new file mode 100644
index 0000000..02d743c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/escapeRegExp.js
@@ -0,0 +1,12 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Escape RegExp string chars.
+     */
+    function escapeRegExp(str) {
+        return toString(str).replace(/\W/g,'\\$&');
+    }
+
+    module.exports = escapeRegExp;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/escapeUnicode.js b/node_modules/nyks/node_modules/mout/string/escapeUnicode.js
new file mode 100644
index 0000000..ec649ad
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/escapeUnicode.js
@@ -0,0 +1,21 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Escape string into unicode sequences
+     */
+    function escapeUnicode(str, shouldEscapePrintable){
+        str = toString(str);
+        return str.replace(/[\s\S]/g, function(ch){
+            // skip printable ASCII chars if we should not escape them
+            if (!shouldEscapePrintable && (/[\x20-\x7E]/).test(ch)) {
+                return ch;
+            }
+            // we use "000" and slice(-4) for brevity, need to pad zeros,
+            // unicode escape always have 4 chars after "\u"
+            return '\\u'+ ('000'+ ch.charCodeAt(0).toString(16)).slice(-4);
+        });
+    }
+
+    module.exports = escapeUnicode;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/hyphenate.js b/node_modules/nyks/node_modules/mout/string/hyphenate.js
new file mode 100644
index 0000000..95e3243
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/hyphenate.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+var slugify = require('./slugify');
+var unCamelCase = require('./unCamelCase');
+    /**
+     * Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function hyphenate(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "-");
+    }
+
+    module.exports = hyphenate;
+
diff --git a/node_modules/nyks/node_modules/mout/string/insert.js b/node_modules/nyks/node_modules/mout/string/insert.js
new file mode 100644
index 0000000..8f042c6
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/insert.js
@@ -0,0 +1,21 @@
+var clamp = require('../math/clamp');
+var toString = require('../lang/toString');
+
+    /**
+     * Inserts a string at a given index.
+     */
+    function insert(string, index, partial){
+        string = toString(string);
+
+        if (index < 0) {
+            index = string.length + index;
+        }
+
+        index = clamp(index, 0, string.length);
+
+        return string.substr(0, index) + partial + string.substr(index);
+    }
+
+    module.exports = insert;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/interpolate.js b/node_modules/nyks/node_modules/mout/string/interpolate.js
new file mode 100644
index 0000000..efbbf7d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/interpolate.js
@@ -0,0 +1,19 @@
+var toString = require('../lang/toString');
+var get = require('../object/get');
+
+    var stache = /\{\{([^\}]+)\}\}/g; //mustache-like
+
+    /**
+     * String interpolation
+     */
+    function interpolate(template, replacements, syntax){
+        template = toString(template);
+        var replaceFn = function(match, prop){
+            return toString( get(replacements, prop) );
+        };
+        return template.replace(syntax || stache, replaceFn);
+    }
+
+    module.exports = interpolate;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/lowerCase.js b/node_modules/nyks/node_modules/mout/string/lowerCase.js
new file mode 100644
index 0000000..30bb7ad
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/lowerCase.js
@@ -0,0 +1,11 @@
+var toString = require('../lang/toString');
+    /**
+     * "Safer" String.toLowerCase()
+     */
+    function lowerCase(str){
+        str = toString(str);
+        return str.toLowerCase();
+    }
+
+    module.exports = lowerCase;
+
diff --git a/node_modules/nyks/node_modules/mout/string/lpad.js b/node_modules/nyks/node_modules/mout/string/lpad.js
new file mode 100644
index 0000000..63641d3
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/lpad.js
@@ -0,0 +1,17 @@
+var toString = require('../lang/toString');
+var repeat = require('./repeat');
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function lpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+
+        return (str.length < minLen) ?
+            repeat(ch, minLen - str.length) + str : str;
+    }
+
+    module.exports = lpad;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/ltrim.js b/node_modules/nyks/node_modules/mout/string/ltrim.js
new file mode 100644
index 0000000..23d7b33
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/ltrim.js
@@ -0,0 +1,34 @@
+var toString = require('../lang/toString');
+var WHITE_SPACES = require('./WHITE_SPACES');
+    /**
+     * Remove chars from beginning of string.
+     */
+    function ltrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var start = 0,
+            len = str.length,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && start < len) {
+            found = false;
+            i = -1;
+            c = str.charAt(start);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    start++;
+                    break;
+                }
+            }
+        }
+
+        return (start >= len) ? '' : str.substr(start, len);
+    }
+
+    module.exports = ltrim;
+
diff --git a/node_modules/nyks/node_modules/mout/string/makePath.js b/node_modules/nyks/node_modules/mout/string/makePath.js
new file mode 100644
index 0000000..c337cec
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/makePath.js
@@ -0,0 +1,15 @@
+var join = require('../array/join');
+var slice = require('../array/slice');
+
+    /**
+     * Group arguments as path segments, if any of the args is `null` or an
+     * empty string it will be ignored from resulting path.
+     */
+    function makePath(var_args){
+        var result = join(slice(arguments), '/');
+        // need to disconsider duplicate '/' after protocol (eg: 'http://')
+        return result.replace(/([^:\/]|^)\/{2,}/g, '$1/');
+    }
+
+    module.exports = makePath;
+
diff --git a/node_modules/nyks/node_modules/mout/string/normalizeLineBreaks.js b/node_modules/nyks/node_modules/mout/string/normalizeLineBreaks.js
new file mode 100644
index 0000000..8a8dccf
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/normalizeLineBreaks.js
@@ -0,0 +1,18 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Convert line-breaks from DOS/MAC to a single standard (UNIX by default)
+     */
+    function normalizeLineBreaks(str, lineEnd) {
+        str = toString(str);
+        lineEnd = lineEnd || '\n';
+
+        return str
+            .replace(/\r\n/g, lineEnd) // DOS
+            .replace(/\r/g, lineEnd)   // Mac
+            .replace(/\n/g, lineEnd);  // Unix
+    }
+
+    module.exports = normalizeLineBreaks;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/pascalCase.js b/node_modules/nyks/node_modules/mout/string/pascalCase.js
new file mode 100644
index 0000000..fd19035
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/pascalCase.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+var camelCase = require('./camelCase');
+var upperCase = require('./upperCase');
+    /**
+     * camelCase + UPPERCASE first char
+     */
+    function pascalCase(str){
+        str = toString(str);
+        return camelCase(str).replace(/^[a-z]/, upperCase);
+    }
+
+    module.exports = pascalCase;
+
diff --git a/node_modules/nyks/node_modules/mout/string/properCase.js b/node_modules/nyks/node_modules/mout/string/properCase.js
new file mode 100644
index 0000000..61636be
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/properCase.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+var lowerCase = require('./lowerCase');
+var upperCase = require('./upperCase');
+    /**
+     * UPPERCASE first char of each word.
+     */
+    function properCase(str){
+        str = toString(str);
+        return lowerCase(str).replace(/^\w|\s\w/g, upperCase);
+    }
+
+    module.exports = properCase;
+
diff --git a/node_modules/nyks/node_modules/mout/string/removeNonASCII.js b/node_modules/nyks/node_modules/mout/string/removeNonASCII.js
new file mode 100644
index 0000000..fb46381
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/removeNonASCII.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+    /**
+     * Remove non-printable ASCII chars
+     */
+    function removeNonASCII(str){
+        str = toString(str);
+
+        // Matches non-printable ASCII chars -
+        // http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
+        return str.replace(/[^\x20-\x7E]/g, '');
+    }
+
+    module.exports = removeNonASCII;
+
diff --git a/node_modules/nyks/node_modules/mout/string/removeNonWord.js b/node_modules/nyks/node_modules/mout/string/removeNonWord.js
new file mode 100644
index 0000000..ffb05a9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/removeNonWord.js
@@ -0,0 +1,14 @@
+var toString = require('../lang/toString');
+    // This pattern is generated by the _build/pattern-removeNonWord.js script
+    var PATTERN = /[^\x20\x2D0-9A-Z\x5Fa-z\xC0-\xD6\xD8-\xF6\xF8-\xFF]/g;
+
+    /**
+     * Remove non-word chars.
+     */
+    function removeNonWord(str){
+        str = toString(str);
+        return str.replace(PATTERN, '');
+    }
+
+    module.exports = removeNonWord;
+
diff --git a/node_modules/nyks/node_modules/mout/string/repeat.js b/node_modules/nyks/node_modules/mout/string/repeat.js
new file mode 100644
index 0000000..df0dc1e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/repeat.js
@@ -0,0 +1,26 @@
+var toString = require('../lang/toString');
+var toInt = require('../number/toInt');
+
+    /**
+     * Repeat string n times
+     */
+     function repeat(str, n){
+         var result = '';
+         str = toString(str);
+         n = toInt(n);
+        if (n < 1) {
+            return '';
+        }
+        while (n > 0) {
+            if (n % 2) {
+                result += str;
+            }
+            n = Math.floor(n / 2);
+            str += str;
+        }
+        return result;
+     }
+
+     module.exports = repeat;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/replace.js b/node_modules/nyks/node_modules/mout/string/replace.js
new file mode 100644
index 0000000..14433fc
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/replace.js
@@ -0,0 +1,33 @@
+var toString = require('../lang/toString');
+var toArray = require('../lang/toArray');
+
+    /**
+     * Replace string(s) with the replacement(s) in the source.
+     */
+    function replace(str, search, replacements) {
+        str = toString(str);
+        search = toArray(search);
+        replacements = toArray(replacements);
+
+        var searchLength = search.length,
+            replacementsLength = replacements.length;
+
+        if (replacementsLength !== 1 && searchLength !== replacementsLength) {
+            throw new Error('Unequal number of searches and replacements');
+        }
+
+        var i = -1;
+        while (++i < searchLength) {
+            // Use the first replacement for all searches if only one
+            // replacement is provided
+            str = str.replace(
+                search[i],
+                replacements[(replacementsLength === 1) ? 0 : i]);
+        }
+
+        return str;
+    }
+
+    module.exports = replace;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/replaceAccents.js b/node_modules/nyks/node_modules/mout/string/replaceAccents.js
new file mode 100644
index 0000000..bb22126
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/replaceAccents.js
@@ -0,0 +1,36 @@
+var toString = require('../lang/toString');
+    /**
+    * Replaces all accented chars with regular ones
+    */
+    function replaceAccents(str){
+        str = toString(str);
+
+        // verifies if the String has accents and replace them
+        if (str.search(/[\xC0-\xFF]/g) > -1) {
+            str = str
+                    .replace(/[\xC0-\xC5]/g, "A")
+                    .replace(/[\xC6]/g, "AE")
+                    .replace(/[\xC7]/g, "C")
+                    .replace(/[\xC8-\xCB]/g, "E")
+                    .replace(/[\xCC-\xCF]/g, "I")
+                    .replace(/[\xD0]/g, "D")
+                    .replace(/[\xD1]/g, "N")
+                    .replace(/[\xD2-\xD6\xD8]/g, "O")
+                    .replace(/[\xD9-\xDC]/g, "U")
+                    .replace(/[\xDD]/g, "Y")
+                    .replace(/[\xDE]/g, "P")
+                    .replace(/[\xE0-\xE5]/g, "a")
+                    .replace(/[\xE6]/g, "ae")
+                    .replace(/[\xE7]/g, "c")
+                    .replace(/[\xE8-\xEB]/g, "e")
+                    .replace(/[\xEC-\xEF]/g, "i")
+                    .replace(/[\xF1]/g, "n")
+                    .replace(/[\xF2-\xF6\xF8]/g, "o")
+                    .replace(/[\xF9-\xFC]/g, "u")
+                    .replace(/[\xFE]/g, "p")
+                    .replace(/[\xFD\xFF]/g, "y");
+        }
+        return str;
+    }
+    module.exports = replaceAccents;
+
diff --git a/node_modules/nyks/node_modules/mout/string/rpad.js b/node_modules/nyks/node_modules/mout/string/rpad.js
new file mode 100644
index 0000000..99f6378
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/rpad.js
@@ -0,0 +1,15 @@
+var toString = require('../lang/toString');
+var repeat = require('./repeat');
+
+    /**
+     * Pad string with `char` if its' length is smaller than `minLen`
+     */
+    function rpad(str, minLen, ch) {
+        str = toString(str);
+        ch = ch || ' ';
+        return (str.length < minLen)? str + repeat(ch, minLen - str.length) : str;
+    }
+
+    module.exports = rpad;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/rtrim.js b/node_modules/nyks/node_modules/mout/string/rtrim.js
new file mode 100644
index 0000000..66ba80e
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/rtrim.js
@@ -0,0 +1,33 @@
+var toString = require('../lang/toString');
+var WHITE_SPACES = require('./WHITE_SPACES');
+    /**
+     * Remove chars from end of string.
+     */
+    function rtrim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+
+        var end = str.length - 1,
+            charLen = chars.length,
+            found = true,
+            i, c;
+
+        while (found && end >= 0) {
+            found = false;
+            i = -1;
+            c = str.charAt(end);
+
+            while (++i < charLen) {
+                if (c === chars[i]) {
+                    found = true;
+                    end--;
+                    break;
+                }
+            }
+        }
+
+        return (end >= 0) ? str.substring(0, end + 1) : '';
+    }
+
+    module.exports = rtrim;
+
diff --git a/node_modules/nyks/node_modules/mout/string/sentenceCase.js b/node_modules/nyks/node_modules/mout/string/sentenceCase.js
new file mode 100644
index 0000000..354104c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/sentenceCase.js
@@ -0,0 +1,15 @@
+var toString = require('../lang/toString');
+var lowerCase = require('./lowerCase');
+var upperCase = require('./upperCase');
+    /**
+     * UPPERCASE first char of each sentence and lowercase other chars.
+     */
+    function sentenceCase(str){
+        str = toString(str);
+
+        // Replace first char of each sentence (new line or after '.\s+') to
+        // UPPERCASE
+        return lowerCase(str).replace(/(^\w)|\.\s+(\w)/gm, upperCase);
+    }
+    module.exports = sentenceCase;
+
diff --git a/node_modules/nyks/node_modules/mout/string/slugify.js b/node_modules/nyks/node_modules/mout/string/slugify.js
new file mode 100644
index 0000000..142f0d9
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/slugify.js
@@ -0,0 +1,24 @@
+var toString = require('../lang/toString');
+var replaceAccents = require('./replaceAccents');
+var removeNonWord = require('./removeNonWord');
+var trim = require('./trim');
+    /**
+     * Convert to lower case, remove accents, remove non-word chars and
+     * replace spaces with the specified delimeter.
+     * Does not split camelCase text.
+     */
+    function slugify(str, delimeter){
+        str = toString(str);
+
+        if (delimeter == null) {
+            delimeter = "-";
+        }
+        str = replaceAccents(str);
+        str = removeNonWord(str);
+        str = trim(str) //should come after removeNonWord
+                .replace(/ +/g, delimeter) //replace spaces with delimeter
+                .toLowerCase();
+        return str;
+    }
+    module.exports = slugify;
+
diff --git a/node_modules/nyks/node_modules/mout/string/startsWith.js b/node_modules/nyks/node_modules/mout/string/startsWith.js
new file mode 100644
index 0000000..bce2bd2
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/startsWith.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+    /**
+     * Checks if string starts with specified prefix.
+     */
+    function startsWith(str, prefix) {
+        str = toString(str);
+        prefix = toString(prefix);
+
+        return str.indexOf(prefix) === 0;
+    }
+
+    module.exports = startsWith;
+
diff --git a/node_modules/nyks/node_modules/mout/string/stripHtmlTags.js b/node_modules/nyks/node_modules/mout/string/stripHtmlTags.js
new file mode 100644
index 0000000..01d17b0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/stripHtmlTags.js
@@ -0,0 +1,11 @@
+var toString = require('../lang/toString');
+    /**
+     * Remove HTML tags from string.
+     */
+    function stripHtmlTags(str){
+        str = toString(str);
+
+        return str.replace(/<[^>]*>/g, '');
+    }
+    module.exports = stripHtmlTags;
+
diff --git a/node_modules/nyks/node_modules/mout/string/trim.js b/node_modules/nyks/node_modules/mout/string/trim.js
new file mode 100644
index 0000000..9652b0c
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/trim.js
@@ -0,0 +1,15 @@
+var toString = require('../lang/toString');
+var WHITE_SPACES = require('./WHITE_SPACES');
+var ltrim = require('./ltrim');
+var rtrim = require('./rtrim');
+    /**
+     * Remove white-spaces from beginning and end of string.
+     */
+    function trim(str, chars) {
+        str = toString(str);
+        chars = chars || WHITE_SPACES;
+        return ltrim(rtrim(str, chars), chars);
+    }
+
+    module.exports = trim;
+
diff --git a/node_modules/nyks/node_modules/mout/string/truncate.js b/node_modules/nyks/node_modules/mout/string/truncate.js
new file mode 100644
index 0000000..a98d6c7
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/truncate.js
@@ -0,0 +1,21 @@
+var toString = require('../lang/toString');
+var trim = require('./trim');
+    /**
+     * Limit number of chars.
+     */
+    function truncate(str, maxChars, append, onlyFullWords){
+        str = toString(str);
+        append = append || '...';
+        maxChars = onlyFullWords? maxChars + 1 : maxChars;
+
+        str = trim(str);
+        if(str.length <= maxChars){
+            return str;
+        }
+        str = str.substr(0, maxChars - append.length);
+        //crop at last space or remove trailing whitespace
+        str = onlyFullWords? str.substr(0, str.lastIndexOf(' ')) : trim(str);
+        return str + append;
+    }
+    module.exports = truncate;
+
diff --git a/node_modules/nyks/node_modules/mout/string/typecast.js b/node_modules/nyks/node_modules/mout/string/typecast.js
new file mode 100644
index 0000000..c1386a4
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/typecast.js
@@ -0,0 +1,29 @@
+
+
+    var UNDEF;
+
+    /**
+     * Parses string and convert it into a native value.
+     */
+    function typecast(val) {
+        var r;
+        if ( val === null || val === 'null' ) {
+            r = null;
+        } else if ( val === 'true' ) {
+            r = true;
+        } else if ( val === 'false' ) {
+            r = false;
+        } else if ( val === UNDEF || val === 'undefined' ) {
+            r = UNDEF;
+        } else if ( val === '' || isNaN(val) ) {
+            //isNaN('') returns false
+            r = val;
+        } else {
+            //parseFloat(null || '') returns NaN
+            r = parseFloat(val);
+        }
+        return r;
+    }
+
+    module.exports = typecast;
+
diff --git a/node_modules/nyks/node_modules/mout/string/unCamelCase.js b/node_modules/nyks/node_modules/mout/string/unCamelCase.js
new file mode 100644
index 0000000..4968f37
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/unCamelCase.js
@@ -0,0 +1,23 @@
+var toString = require('../lang/toString');
+
+    var CAMEL_CASE_BORDER = /([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g;
+
+    /**
+     * Add space between camelCase text.
+     */
+    function unCamelCase(str, delimiter){
+        if (delimiter == null) {
+            delimiter = ' ';
+        }
+
+        function join(str, c1, c2) {
+            return c1 + delimiter + c2;
+        }
+
+        str = toString(str);
+        str = str.replace(CAMEL_CASE_BORDER, join);
+        str = str.toLowerCase(); //add space between camelCase text
+        return str;
+    }
+    module.exports = unCamelCase;
+
diff --git a/node_modules/nyks/node_modules/mout/string/underscore.js b/node_modules/nyks/node_modules/mout/string/underscore.js
new file mode 100644
index 0000000..ebd6e2b
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/underscore.js
@@ -0,0 +1,13 @@
+var toString = require('../lang/toString');
+var slugify = require('./slugify');
+var unCamelCase = require('./unCamelCase');
+    /**
+     * Replaces spaces with underscores, split camelCase text, remove non-word chars, remove accents and convert to lower case.
+     */
+    function underscore(str){
+        str = toString(str);
+        str = unCamelCase(str);
+        return slugify(str, "_");
+    }
+    module.exports = underscore;
+
diff --git a/node_modules/nyks/node_modules/mout/string/unescapeHtml.js b/node_modules/nyks/node_modules/mout/string/unescapeHtml.js
new file mode 100644
index 0000000..ad1987d
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/unescapeHtml.js
@@ -0,0 +1,18 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Unescapes HTML special chars
+     */
+    function unescapeHtml(str){
+        str = toString(str)
+            .replace(/&amp;/g , '&')
+            .replace(/&lt;/g  , '<')
+            .replace(/&gt;/g  , '>')
+            .replace(/&#0*39;/g , "'")
+            .replace(/&quot;/g, '"');
+        return str;
+    }
+
+    module.exports = unescapeHtml;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/unescapeUnicode.js b/node_modules/nyks/node_modules/mout/string/unescapeUnicode.js
new file mode 100644
index 0000000..0b7fb73
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/unescapeUnicode.js
@@ -0,0 +1,16 @@
+var toString = require('../lang/toString');
+
+    /**
+     * Unescape unicode char sequences
+     */
+    function unescapeUnicode(str){
+        str = toString(str);
+        return str.replace(/\\u[0-9a-f]{4}/g, function(ch){
+            var code = parseInt(ch.slice(2), 16);
+            return String.fromCharCode(code);
+        });
+    }
+
+    module.exports = unescapeUnicode;
+
+
diff --git a/node_modules/nyks/node_modules/mout/string/unhyphenate.js b/node_modules/nyks/node_modules/mout/string/unhyphenate.js
new file mode 100644
index 0000000..311dfa1
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/unhyphenate.js
@@ -0,0 +1,10 @@
+var toString = require('../lang/toString');
+    /**
+     * Replaces hyphens with spaces. (only hyphens between word chars)
+     */
+    function unhyphenate(str){
+        str = toString(str);
+        return str.replace(/(\w)(-)(\w)/g, '$1 $3');
+    }
+    module.exports = unhyphenate;
+
diff --git a/node_modules/nyks/node_modules/mout/string/upperCase.js b/node_modules/nyks/node_modules/mout/string/upperCase.js
new file mode 100644
index 0000000..6c92552
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/string/upperCase.js
@@ -0,0 +1,10 @@
+var toString = require('../lang/toString');
+    /**
+     * "Safer" String.toUpperCase()
+     */
+    function upperCase(str){
+        str = toString(str);
+        return str.toUpperCase();
+    }
+    module.exports = upperCase;
+
diff --git a/node_modules/nyks/node_modules/mout/time.js b/node_modules/nyks/node_modules/mout/time.js
new file mode 100644
index 0000000..9f53329
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/time.js
@@ -0,0 +1,12 @@
+
+
+//automatically generated, do not edit!
+//run `node build` instead
+module.exports = {
+    'convert' : require('./time/convert'),
+    'now' : require('./time/now'),
+    'parseMs' : require('./time/parseMs'),
+    'toTimeString' : require('./time/toTimeString')
+};
+
+
diff --git a/node_modules/nyks/node_modules/mout/time/convert.js b/node_modules/nyks/node_modules/mout/time/convert.js
new file mode 100644
index 0000000..852a0f0
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/time/convert.js
@@ -0,0 +1,41 @@
+
+
+    /**
+     * convert time into another unit
+     */
+    function convert(val, sourceUnitName, destinationUnitName){
+        destinationUnitName = destinationUnitName || 'ms';
+        return (val * getUnit(sourceUnitName)) / getUnit(destinationUnitName);
+    }
+
+
+    //TODO: maybe extract to a separate module
+    function getUnit(unitName){
+        switch(unitName){
+            case 'ms':
+            case 'millisecond':
+                return 1;
+            case 's':
+            case 'second':
+                 return 1000;
+            case 'm':
+            case 'minute':
+                 return 60000;
+            case 'h':
+            case 'hour':
+                 return 3600000;
+            case 'd':
+            case 'day':
+                 return 86400000;
+            case 'w':
+            case 'week':
+                 return 604800000;
+            default:
+                throw new Error('"'+ unitName + '" is not a valid unit');
+        }
+    }
+
+
+    module.exports = convert;
+
+
diff --git a/node_modules/nyks/node_modules/mout/time/now.js b/node_modules/nyks/node_modules/mout/time/now.js
new file mode 100644
index 0000000..0cedb18
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/time/now.js
@@ -0,0 +1,18 @@
+
+
+    /**
+     * Get current time in miliseconds
+     */
+    function now(){
+        // yes, we defer the work to another function to allow mocking it
+        // during the tests
+        return now.get();
+    }
+
+    now.get = (typeof Date.now === 'function')? Date.now : function(){
+        return +(new Date());
+    };
+
+    module.exports = now;
+
+
diff --git a/node_modules/nyks/node_modules/mout/time/parseMs.js b/node_modules/nyks/node_modules/mout/time/parseMs.js
new file mode 100644
index 0000000..6d99797
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/time/parseMs.js
@@ -0,0 +1,17 @@
+var countSteps = require('../math/countSteps');
+
+    /**
+     * Parse timestamp into an object.
+     */
+    function parseMs(ms){
+        return {
+            milliseconds : countSteps(ms, 1, 1000),
+            seconds      : countSteps(ms, 1000, 60),
+            minutes      : countSteps(ms, 60000, 60),
+            hours        : countSteps(ms, 3600000, 24),
+            days         : countSteps(ms, 86400000)
+        };
+    }
+
+    module.exports = parseMs;
+
diff --git a/node_modules/nyks/node_modules/mout/time/toTimeString.js b/node_modules/nyks/node_modules/mout/time/toTimeString.js
new file mode 100644
index 0000000..101d69f
--- /dev/null
+++ b/node_modules/nyks/node_modules/mout/time/toTimeString.js
@@ -0,0 +1,24 @@
+var countSteps = require('../math/countSteps');
+var pad = require('../number/pad');
+
+    var HOUR = 3600000,
+        MINUTE = 60000,
+        SECOND = 1000;
+
+    /**
+     * Format timestamp into a time string.
+     */
+    function toTimeString(ms){
+        var h = ms < HOUR   ? 0 : countSteps(ms, HOUR),
+            m = ms < MINUTE ? 0 : countSteps(ms, MINUTE, 60),
+            s = ms < SECOND ? 0 : countSteps(ms, SECOND, 60),
+            str = '';
+
+        str += h? h + ':' : '';
+        str += pad(m, 2) + ':';
+        str += pad(s, 2);
+
+        return str;
+    }
+    module.exports = toTimeString;
+
diff --git a/node_modules/nyks/object/combine.js b/node_modules/nyks/object/combine.js
new file mode 100644
index 0000000..7001d56
--- /dev/null
+++ b/node_modules/nyks/object/combine.js
@@ -0,0 +1,12 @@
+"use strict";
+
+
+module.exports =  function(list, values) {
+  var result = {};
+  if (list == null)
+      return result;
+  for (var i = 0, length = list.length; i < length; i++)
+    result[list[i]] = values[i];
+  return result;
+};
+
diff --git a/node_modules/nyks/object/indexOf.js b/node_modules/nyks/object/indexOf.js
new file mode 100644
index 0000000..17475a9
--- /dev/null
+++ b/node_modules/nyks/object/indexOf.js
@@ -0,0 +1,9 @@
+"use strict";
+
+module.exports = function(obj, value){
+  for(var k in obj)
+    if(obj[k] == value)
+      return k;
+
+  return null;
+}
\ No newline at end of file
diff --git a/node_modules/nyks/object/jsonpath.js b/node_modules/nyks/object/jsonpath.js
new file mode 100644
index 0000000..ebd0801
--- /dev/null
+++ b/node_modules/nyks/object/jsonpath.js
@@ -0,0 +1,19 @@
+"use strict";
+//TODO : use https://www.npmjs.com/package/json-path if needed
+
+var trim = require('mout/string/trim');
+
+module.exports = function(obj, fqnn_path) {
+  var path = trim(fqnn_path, ['/']).split('/'), step,
+      cursor = obj;
+
+  for (var i = 0; i < path.length; i++) {
+    step = path[i];
+    if(cursor && cursor[step]) {
+      cursor = cursor[step];
+    } else {
+      return null;
+    }
+  }
+  return cursor;
+};
diff --git a/node_modules/nyks/object/mask.js b/node_modules/nyks/object/mask.js
new file mode 100644
index 0000000..e904f61
--- /dev/null
+++ b/node_modules/nyks/object/mask.js
@@ -0,0 +1,13 @@
+"use strict";
+
+var format= require('../string/format');
+var forIn = require('mout/object/forIn');
+
+module.exports =  function(that, mask, glue) {
+  var out = [];
+  forIn(that, function(v, k) {
+    out.push( format(mask, k, v) );
+  });
+
+  return out.join(glue);
+};
\ No newline at end of file
diff --git a/node_modules/nyks/object/sort.js b/node_modules/nyks/object/sort.js
new file mode 100644
index 0000000..64dc84f
--- /dev/null
+++ b/node_modules/nyks/object/sort.js
@@ -0,0 +1,11 @@
+"use strict";
+
+
+module.exports =  function(that, keys) {
+  var out = {};
+  keys.forEach(function(k){
+    out[k] = that[k];
+  });
+
+  return out;
+};
\ No newline at end of file
diff --git a/node_modules/nyks/package.json b/node_modules/nyks/package.json
new file mode 100644
index 0000000..f568e4a
--- /dev/null
+++ b/node_modules/nyks/package.json
@@ -0,0 +1,63 @@
+{
+  "_from": "nyks@^2.9.0",
+  "_id": "nyks@2.31.3",
+  "_inBundle": false,
+  "_integrity": "sha1-Pa/bu+t2VRnECyN0fpGYw5oQNro=",
+  "_location": "/nyks",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "range",
+    "registry": true,
+    "raw": "nyks@^2.9.0",
+    "name": "nyks",
+    "escapedName": "nyks",
+    "rawSpec": "^2.9.0",
+    "saveSpec": null,
+    "fetchSpec": "^2.9.0"
+  },
+  "_requiredBy": [
+    "/openssl"
+  ],
+  "_resolved": "https://registry.npmjs.org/nyks/-/nyks-2.31.3.tgz",
+  "_shasum": "3dafdbbbeb765519c40b23747e9198c39a1036ba",
+  "_spec": "nyks@^2.9.0",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge\\node_modules\\openssl",
+  "author": {
+    "name": "François Leurent",
+    "email": "131.js@cloudyks.org",
+    "url": "http://github.com/131/"
+  },
+  "bugs": {
+    "url": "https://github.com/131/nyks/issues"
+  },
+  "bundleDependencies": false,
+  "dependencies": {
+    "async": "^2.0.0",
+    "mout": "^1.0.0"
+  },
+  "deprecated": false,
+  "description": "nodejs exupery style",
+  "devDependencies": {
+    "co": "^4.6.0",
+    "expect.js": "^0.3.1",
+    "istanbul": "~0.3.18",
+    "mocha": "^2.2.5"
+  },
+  "homepage": "http://github.com/131/nyks",
+  "keywords": [
+    "mootools",
+    "native",
+    "api"
+  ],
+  "main": "./index.js",
+  "name": "nyks",
+  "repository": {
+    "type": "git",
+    "url": "git+ssh://git@github.com/131/nyks.git"
+  },
+  "scripts": {
+    "coveralls": "npm install coveralls && istanbul cover cover -x \"string/crc32.js\"  -x \"child_process/*\" ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && node ./node_modules/coveralls/bin/coveralls.js < ./coverage/lcov.info && rm -rf ./coverage",
+    "test": "node node_modules/istanbul/lib/cli.js cover -x \"string/crc32.js\"  -x \"child_process/*\" node_modules/mocha/bin/_mocha"
+  },
+  "version": "2.31.3"
+}
diff --git a/node_modules/nyks/path/extend.js b/node_modules/nyks/path/extend.js
new file mode 100644
index 0000000..bc6b30b
--- /dev/null
+++ b/node_modules/nyks/path/extend.js
@@ -0,0 +1,9 @@
+"use strict";
+
+var path = require('path');
+
+module.exports = function(npath){
+
+  var paths = process.env.PATH.split(path.delimiter).concat([].slice.call(arguments));
+  return process.env.PATH = paths.join(path.delimiter);
+}
\ No newline at end of file
diff --git a/node_modules/nyks/path/which.js b/node_modules/nyks/path/which.js
new file mode 100644
index 0000000..921b44c
--- /dev/null
+++ b/node_modules/nyks/path/which.js
@@ -0,0 +1,26 @@
+"use strict";
+
+var fs   = require('fs');
+var path = require('path');
+
+module.exports = function(bin){
+  var binpath;
+  var paths = process.env.PATH.split(path.delimiter);
+  /*istanbul ignore next*/
+  var exts  = process.env.PATHEXT ? process.env.PATHEXT.split(path.delimiter) : [""];
+
+  exts = exts.filter(function(val){
+    return !!val;
+  });
+  exts.push(""); //handle direct bin calls
+
+  for(var i = 0; i <paths.length; i++) {
+    var ext, _full, full = path.join(paths[i], bin);
+    for(ext = 0; ext < exts.length; ext++) {
+      _full = full + exts[ext];
+      if(fs.existsSync(_full))
+        return _full;
+    }
+  };
+  return false;
+};
diff --git a/node_modules/nyks/process/parseArgs.js b/node_modules/nyks/process/parseArgs.js
new file mode 100644
index 0000000..b10b679
--- /dev/null
+++ b/node_modules/nyks/process/parseArgs.js
@@ -0,0 +1,38 @@
+"use strict";
+
+var util       = require('util');
+var startsWith = require('mout/string/startsWith');
+var isFinite   = require('mout/lang/isFinite');
+var isArray    = require('mout/lang/isArray');
+
+module.exports = function(argv){
+
+  /* istanbul ignore if  */
+  if(arguments.length == 0)
+     argv = process.argv.slice(2);
+
+  var args = [], dict = {},
+      r, e = new RegExp("^--?([a-z_0-9/:-]+)(?:=(.*))?", "i");
+
+  argv.forEach(function(arg){
+    var k, v;
+    if(!startsWith(arg, '-')) {
+      args.push(arg);
+    } else if(e.test(arg)) {
+      r = e.exec(arg);
+      k = r[1], v = r[2] === undefined ? true : r[2];
+
+      if(isFinite(v))
+        v = parseFloat(v);
+
+      if(dict[k] !== undefined) {
+        if(!isArray(dict[k]))
+          dict[k] = [dict[k]];
+
+        dict[k].push(v);
+      } else dict[k] = v;
+    }
+  });
+
+  return {args:args, dict:dict};
+}
diff --git a/node_modules/nyks/process/splitArgs.js b/node_modules/nyks/process/splitArgs.js
new file mode 100644
index 0000000..05ad11d
--- /dev/null
+++ b/node_modules/nyks/process/splitArgs.js
@@ -0,0 +1,36 @@
+"use strict";
+
+var isFinite = require('mout/lang/isFinite');
+
+module.exports = function(str) {
+  var mask      = "(\\s+)|([^\\s\\\"']+)|\\\"([^\\\"]*)\\\"|'([^']*)'";
+
+  var args = [], need_value = true, digest = "";
+  var r = new RegExp(mask, "g"), step, sep, value;
+
+  while(step = r.exec(str) ){
+    sep   = step[1] !== undefined;
+    value = step[2] || step[3] || step[4];
+
+          //check "value"/separator alternance
+    if(sep) { need_value = true; continue; }
+    if(!need_value) break; need_value = false;
+
+    if(isFinite(value))
+      value = parseFloat(value);
+
+
+    args.push(value);
+  }
+  return args;
+
+/*
+      $digest .= $step[0];
+
+      if($digest != substr($str,0, strlen($digest)) )
+          break;
+  }
+  $complete = ($digest == $str);
+*/
+
+}
diff --git a/node_modules/nyks/promise/defer.js b/node_modules/nyks/promise/defer.js
new file mode 100644
index 0000000..d4720c1
--- /dev/null
+++ b/node_modules/nyks/promise/defer.js
@@ -0,0 +1,22 @@
+"use strict";
+
+module.exports = function() {
+  var thisresolve, thisreject;
+
+  var defer = new Promise(function(resolve, reject) {
+    thisresolve = resolve;
+    thisreject  = reject;
+  });
+
+  defer.resolve = function(body){ thisresolve(body); };
+  defer.reject  = function(err){ thisreject(err); };
+
+  defer.chain   = function(err, body){
+    if(err)
+      return defer.reject(err);
+    return defer.resolve(body)
+  }
+
+  return defer;
+}
+
diff --git a/node_modules/nyks/promise/nodeify.js b/node_modules/nyks/promise/nodeify.js
new file mode 100644
index 0000000..dd5f2d7
--- /dev/null
+++ b/node_modules/nyks/promise/nodeify.js
@@ -0,0 +1,11 @@
+"use strict";
+
+module.exports = function(worker){
+
+  return function(payload, chain) {
+    worker(payload).then(function(body) {
+      chain(null, body)
+    }).catch(chain);
+  };
+
+}
\ No newline at end of file
diff --git a/node_modules/nyks/promise/throttle.js b/node_modules/nyks/promise/throttle.js
new file mode 100644
index 0000000..334bc13
--- /dev/null
+++ b/node_modules/nyks/promise/throttle.js
@@ -0,0 +1,19 @@
+"use strict";
+
+const throttle  = require('../async/throttle');
+const promisify = require('../function/promisify');
+const nodeify   = require('./nodeify');
+
+  //this is a shame
+module.exports = function(worker, limit) {
+
+  var fetch;
+
+  fetch = nodeify(worker);
+    fetch = throttle(fetch, limit);
+  fetch = promisify(fetch);
+
+  return fetch;
+
+}
+
diff --git a/node_modules/nyks/src/resolver.js b/node_modules/nyks/src/resolver.js
new file mode 100644
index 0000000..302ee22
--- /dev/null
+++ b/node_modules/nyks/src/resolver.js
@@ -0,0 +1,20 @@
+"use strict";
+
+var  url   = require('url'),
+     path   = require('path');
+
+var Resolver = module.exports = new Class({
+  stack : {},
+  register:function(prefix, dest){
+    this.stack[prefix] = { dest: dest };
+  },
+
+  resolve:function(raw){
+    if(!raw.startsWith("path://"))
+      return raw;
+    var parsed = url.parse(raw);
+    if(! (parsed.host in this.stack))
+      throw "Unregistered path : path://" + parsed.host;
+    return path.join(this.stack[parsed.host].dest, parsed.path);
+  }
+});
diff --git a/node_modules/nyks/stream/fromBuffer.js b/node_modules/nyks/stream/fromBuffer.js
new file mode 100644
index 0000000..6b0c431
--- /dev/null
+++ b/node_modules/nyks/stream/fromBuffer.js
@@ -0,0 +1,9 @@
+"use strict";
+
+var PassThrough = require('stream').PassThrough;
+
+module.exports = function(data){
+  var tmp = new PassThrough();
+  tmp.end(data);
+  return  tmp;
+}
\ No newline at end of file
diff --git a/node_modules/nyks/string/chunk.js b/node_modules/nyks/string/chunk.js
new file mode 100644
index 0000000..d61ea76
--- /dev/null
+++ b/node_modules/nyks/string/chunk.js
@@ -0,0 +1,21 @@
+"use strict";
+
+module.exports = function(str, chunkSize){
+  if(chunkSize <= 0)
+    return [str];
+
+  var chunks = []; chunkSize = chunkSize || 1;
+  while (str) {
+    if (str.length < chunkSize) {
+        chunks.push(str);
+        break;
+    }
+    else {
+        chunks.push(str.substr(0, chunkSize));
+        str = str.substr(chunkSize);
+    }
+  }
+  return chunks;
+
+}
+
diff --git a/node_modules/nyks/string/crc32.LICENSE b/node_modules/nyks/string/crc32.LICENSE
new file mode 100644
index 0000000..c004c7c
--- /dev/null
+++ b/node_modules/nyks/string/crc32.LICENSE
@@ -0,0 +1,14 @@
+Copyright (C) 2014  SheetJS
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/node_modules/nyks/string/crc32.js b/node_modules/nyks/string/crc32.js
new file mode 100644
index 0000000..774c103
--- /dev/null
+++ b/node_modules/nyks/string/crc32.js
@@ -0,0 +1,100 @@
+"use strict";
+
+/**
+* from  crc32.js (C) 2014-2015 SheetJS -- http://sheetjs.com
+*/
+
+var use_buffer = typeof Buffer !== 'undefined';
+var use_in32   = typeof Int32Array !== 'undefined';
+
+
+var table = (function() {
+  var c = 0, table = new Array(256);
+  for(var n =0; n != 256; ++n) {
+    c = n;
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
+    table[n] = c;
+  }
+  return use_in32 ? new Int32Array(table) : table;
+})();
+
+
+
+/* charCodeAt is the best approach for binary strings */
+
+function crc32_bstr(bstr) {
+  if(bstr.length > 32768) if(use_buffer) return crc32_buf_8(new Buffer(bstr));
+  var crc = -1, L = bstr.length - 1;
+  for(var i = 0; i < L;) {
+    crc =  table[(crc ^ bstr.charCodeAt(i++)) & 0xFF] ^ (crc >>> 8);
+    crc =  table[(crc ^ bstr.charCodeAt(i++)) & 0xFF] ^ (crc >>> 8);
+  }
+  if(i === L) crc = (crc >>> 8) ^ table[(crc ^ bstr.charCodeAt(i)) & 0xFF];
+  return crc ^ -1;
+}
+
+
+function crc32_buf(buf) {
+  if(buf.length > 10000) return crc32_buf_8(buf);
+  for(var crc = -1, i = 0, L=buf.length-3; i < L;) {
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+  }
+  while(i < L+3) crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+  return crc ^ -1;
+}
+
+
+function crc32_buf_8(buf) {
+  for(var crc = -1, i = 0, L=buf.length-7; i < L;) {
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+    crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+  }
+  while(i < L+7) crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];
+  return crc ^ -1;
+}
+
+/* much much faster to intertwine utf8 and crc */
+function crc32_str(str) {
+  for(var crc = -1, i = 0, L=str.length, c, d; i < L;) {
+    c = str.charCodeAt(i++);
+    if(c < 0x80) {
+      crc = (crc >>> 8) ^ table[(crc ^ c) & 0xFF];
+    } else if(c < 0x800) {
+      crc = (crc >>> 8) ^ table[(crc ^ (192|((c>>6)&31))) & 0xFF];
+      crc = (crc >>> 8) ^ table[(crc ^ (128|(c&63))) & 0xFF];
+    } else if(c >= 0xD800 && c < 0xE000) {
+      c = (c&1023)+64; d = str.charCodeAt(i++) & 1023;
+      crc = (crc >>> 8) ^ table[(crc ^ (240|((c>>8)&7))) & 0xFF];
+      crc = (crc >>> 8) ^ table[(crc ^ (128|((c>>2)&63))) & 0xFF];
+      crc = (crc >>> 8) ^ table[(crc ^ (128|((d>>6)&15)|(c&3))) & 0xFF];
+      crc = (crc >>> 8) ^ table[(crc ^ (128|(d&63))) & 0xFF];
+    } else {
+      crc = (crc >>> 8) ^ table[(crc ^ (224|((c>>12)&15))) & 0xFF];
+      crc = (crc >>> 8) ^ table[(crc ^ (128|((c>>6)&63))) & 0xFF];
+      crc = (crc >>> 8) ^ table[(crc ^ (128|(c&63))) & 0xFF];
+    }
+  }
+  return crc ^ -1;
+}
+
+
+
+module.exports      = crc32_str;
+module.exports.buf  = crc32_buf;
+module.exports.bstr = crc32_bstr;
\ No newline at end of file
diff --git a/node_modules/nyks/string/format.js b/node_modules/nyks/string/format.js
new file mode 100644
index 0000000..8832895
--- /dev/null
+++ b/node_modules/nyks/string/format.js
@@ -0,0 +1,27 @@
+"use strict";
+"use strict";
+
+var formatRegExp = /%[sdj%]/g;
+
+module.exports= function(f) {
+  var i = 1;
+  var args = arguments;
+  var len = args.length;
+
+  var str = String(f).replace(formatRegExp, function(x) {
+    if (x === '%%') return '%';
+    if (i >= len) return x;
+    switch (x) {
+      case '%s': return String(args[i++]);
+      case '%d': return Number(args[i++]);
+      case '%j':
+        try {
+          return JSON.stringify(args[i++]);
+        } catch (_) {
+          return '[Circular]';
+        }
+    }
+  });
+
+  return str;
+};
diff --git a/node_modules/nyks/string/hexToRgb.js b/node_modules/nyks/string/hexToRgb.js
new file mode 100644
index 0000000..db08461
--- /dev/null
+++ b/node_modules/nyks/string/hexToRgb.js
@@ -0,0 +1,8 @@
+"use strict";
+
+var hexToRgb = function(str){
+  var hex = String(str).match(/^#?(\w{1,2})(\w{1,2})(\w{1,2})$/);
+  return (hex) ? hex.slice(1) : null;
+};
+
+module.exports = hexToRgb;
\ No newline at end of file
diff --git a/node_modules/nyks/string/repeat.js b/node_modules/nyks/string/repeat.js
new file mode 100644
index 0000000..2d61ca9
--- /dev/null
+++ b/node_modules/nyks/string/repeat.js
@@ -0,0 +1,7 @@
+"use strict";
+
+// mout/string/repeat seems too complicated sometimes
+
+module.exports = function(str, times) { 
+  return Array.apply(null, {length:times + 1}).join(str)
+};
diff --git a/node_modules/nyks/string/replaces.js b/node_modules/nyks/string/replaces.js
new file mode 100644
index 0000000..d059ce0
--- /dev/null
+++ b/node_modules/nyks/string/replaces.js
@@ -0,0 +1,11 @@
+"use strict";
+
+var forIn = require('mout/object/forIn');
+
+    //note that items are only replaced one time, use rreplaces if needed
+module.exports = function(str, hash){
+  forIn(hash, function(v, k){
+    str = str.replace(k, v);
+  });
+  return str;
+}
diff --git a/node_modules/nyks/string/rot13.js b/node_modules/nyks/string/rot13.js
new file mode 100644
index 0000000..a6896c4
--- /dev/null
+++ b/node_modules/nyks/string/rot13.js
@@ -0,0 +1,8 @@
+"use strict";
+
+// http://stackoverflow.com/q/617647
+module.exports = function(str) {
+  return str.replace(/[a-zA-Z]/g, function(a){
+      return String.fromCharCode( ((a=a.charCodeAt())<91?78:110)>a ? a+13 : a-13 );
+  });
+}
diff --git a/node_modules/nyks/string/rreplaces.js b/node_modules/nyks/string/rreplaces.js
new file mode 100644
index 0000000..9be81d1
--- /dev/null
+++ b/node_modules/nyks/string/rreplaces.js
@@ -0,0 +1,13 @@
+"use strict";
+
+    //recursive version of replaces
+var replaces = require('./replaces');
+
+module.exports = function(str, hash) {
+    var tmp = "";
+    do {
+        tmp = str;
+        str = replaces(str, hash);
+    } while(tmp != str);
+    return tmp;
+}
diff --git a/node_modules/nyks/string/sprintf.LICENSE b/node_modules/nyks/string/sprintf.LICENSE
new file mode 100644
index 0000000..663ac52
--- /dev/null
+++ b/node_modules/nyks/string/sprintf.LICENSE
@@ -0,0 +1,24 @@
+Copyright (c) 2007-2014, Alexandru Marasteanu <hello [at) alexei (dot] ro>
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+* Redistributions of source code must retain the above copyright
+  notice, this list of conditions and the following disclaimer.
+* Redistributions in binary form must reproduce the above copyright
+  notice, this list of conditions and the following disclaimer in the
+  documentation and/or other materials provided with the distribution.
+* Neither the name of this software nor the names of its contributors may be
+  used to endorse or promote products derived from this software without
+  specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/node_modules/nyks/string/sprintf.js b/node_modules/nyks/string/sprintf.js
new file mode 100644
index 0000000..bf6d6d7
--- /dev/null
+++ b/node_modules/nyks/string/sprintf.js
@@ -0,0 +1,190 @@
+"use strict";
+
+/**
+* Note that this module is exclude from istanbul code coverage
+* TODO : complete tests (see tests/sprintf.js) for full coverage
+*/
+
+var kindOf = require('mout/lang/kindOf');
+var repeat = require('../string/repeat');
+
+var re = {
+  not_string: /[^s]/,
+  number: /[diefg]/,
+  json: /[j]/,
+  not_json: /[^j]/,
+  text: /^[^\x25]+/,
+  modulo: /^\x25{2}/,
+  placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,
+  key: /^([a-z_][a-z_\d]*)/i,
+  key_access: /^\.([a-z_][a-z_\d]*)/i,
+  index_access: /^\[(\d+)\]/,
+  sign: /^[\+\-]/
+};
+
+
+function sprintf() {
+    var key = arguments[0], cache = sprintf.cache
+    if (!(cache[key] && cache.hasOwnProperty(key))) {
+        cache[key] = sprintf.parse(key)
+    }
+    return sprintf.format.call(null, cache[key], arguments)
+}
+
+sprintf.format = function(parse_tree, argv) {
+    var cursor = 1, tree_length = parse_tree.length, node_type = "", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ""
+    for (i = 0; i < tree_length; i++) {
+        node_type = kindOf(parse_tree[i])
+        if (node_type === "String") {
+            output[output.length] = parse_tree[i]
+        }
+        else if (node_type === "Array") {
+            match = parse_tree[i] // convenience purposes only
+            if (match[2]) { // keyword argument
+                arg = argv[cursor]
+                for (k = 0; k < match[2].length; k++) {
+                    if (!arg.hasOwnProperty(match[2][k])) {
+                        throw new Error(sprintf("[sprintf] property '%s' does not exist", match[2][k]))
+                    }
+                    arg = arg[match[2][k]]
+                }
+            }
+            else if (match[1]) { // positional argument (explicit)
+                arg = argv[match[1]]
+            }
+            else { // positional argument (implicit)
+                arg = argv[cursor++]
+            }
+
+            if (kindOf(arg) == "Function") {
+                arg = arg()
+            }
+
+            if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (kindOf(arg) != "Number" && isNaN(arg))) {
+                throw new TypeError(sprintf("[sprintf] expecting number but found %s", kindOf(arg)))
+            }
+
+            if (re.number.test(match[8])) {
+                is_positive = arg >= 0
+            }
+
+            switch (match[8]) {
+                case "b":
+                    arg = arg.toString(2)
+                break
+                case "c":
+                    arg = String.fromCharCode(arg)
+                break
+                case "d":
+                case "i":
+                    arg = parseInt(arg, 10)
+                break
+                case "j":
+                    arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)
+                break
+                case "e":
+                    arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()
+                break
+                case "f":
+                    arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)
+                break
+                case "g":
+                    arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)
+                break
+                case "o":
+                    arg = arg.toString(8)
+                break
+                case "s":
+                    arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)
+                break
+                case "u":
+                    arg = arg >>> 0
+                break
+                case "x":
+                    arg = arg.toString(16)
+                break
+                case "X":
+                    arg = arg.toString(16).toUpperCase()
+                break
+            }
+            if (re.json.test(match[8])) {
+                output[output.length] = arg
+            }
+            else {
+                if (re.number.test(match[8]) && (!is_positive || match[3])) {
+                    sign = is_positive ? "+" : "-"
+                    arg = arg.toString().replace(re.sign, "")
+                }
+                else {
+                    sign = ""
+                }
+                pad_character = match[4] ? match[4] === "0" ? "0" : match[4].charAt(1) : " "
+                pad_length = match[6] - (sign + arg).length
+                pad = match[6] ? (pad_length > 0 ? repeat(pad_character, pad_length) : "") : ""
+                output[output.length] = match[5] ? sign + arg + pad : (pad_character === "0" ? sign + pad + arg : pad + sign + arg)
+            }
+        }
+    }
+    return output.join("")
+}
+
+sprintf.cache = {}
+
+sprintf.parse = function(fmt) {
+    var _fmt = fmt, match = [], parse_tree = [], arg_names = 0
+    while (_fmt) {
+        if ((match = re.text.exec(_fmt)) !== null) {
+            parse_tree[parse_tree.length] = match[0]
+        }
+        else if ((match = re.modulo.exec(_fmt)) !== null) {
+            parse_tree[parse_tree.length] = "%"
+        }
+        else if ((match = re.placeholder.exec(_fmt)) !== null) {
+            if (match[2]) {
+                arg_names |= 1
+                var field_list = [], replacement_field = match[2], field_match = []
+                if ((field_match = re.key.exec(replacement_field)) !== null) {
+                    field_list[field_list.length] = field_match[1]
+                    while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
+                        if ((field_match = re.key_access.exec(replacement_field)) !== null) {
+                            field_list[field_list.length] = field_match[1]
+                        }
+                        else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
+                            field_list[field_list.length] = field_match[1]
+                        }
+                        else {
+                            throw new SyntaxError("[sprintf] failed to parse named argument key")
+                        }
+                    }
+                }
+                else {
+                    throw new SyntaxError("[sprintf] failed to parse named argument key")
+                }
+                match[2] = field_list
+            }
+            else {
+                arg_names |= 2
+            }
+            if (arg_names === 3) {
+                throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported")
+            }
+            parse_tree[parse_tree.length] = match
+        }
+        else {
+            throw new SyntaxError("[sprintf] unexpected placeholder")
+        }
+        _fmt = _fmt.substring(match[0].length)
+    }
+    return parse_tree
+}
+
+var vsprintf = function(fmt, argv, _argv) {
+    _argv = (argv || []).slice(0)
+    _argv.splice(0, 0, fmt)
+    return sprintf.apply(null, _argv)
+}
+
+
+module.exports          = sprintf;
+module.exports.vsprintf = vsprintf;
+
diff --git a/node_modules/nyks/string/stripEnd.js b/node_modules/nyks/string/stripEnd.js
new file mode 100644
index 0000000..78aefb8
--- /dev/null
+++ b/node_modules/nyks/string/stripEnd.js
@@ -0,0 +1,7 @@
+"use strict";
+
+var endsWith = require('mout/string/endsWith');
+
+module.exports = function(str, end){
+  return endsWith(str, end) ? str.substr(0, str.length - end.length) : str.toString();
+}
diff --git a/node_modules/nyks/string/stripStart.js b/node_modules/nyks/string/stripStart.js
new file mode 100644
index 0000000..e569176
--- /dev/null
+++ b/node_modules/nyks/string/stripStart.js
@@ -0,0 +1,7 @@
+"use strict";
+
+var startsWith = require('mout/string/startsWith');
+
+module.exports = function(str, start){
+  return startsWith(str, start) ? str.substr(start.length) : str.toString();
+}
diff --git a/node_modules/nyks/string/truncate.js b/node_modules/nyks/string/truncate.js
new file mode 100644
index 0000000..9e8d6ec
--- /dev/null
+++ b/node_modules/nyks/string/truncate.js
@@ -0,0 +1,15 @@
+"use strict";
+
+module.exports = function(/* str, len[, pad = '…'] */){
+  var args = [].slice.apply(arguments),
+       str = args.shift(),
+       len = args.shift() || 10,
+       pad = args.shift() || '…';
+
+  if(str.length <= Math.abs(len))
+    return str;
+
+  if(len < 0)
+    return pad + str.substr(len + pad.length);
+  return str.substr(0, len - pad.length) + pad;
+}
diff --git a/node_modules/oauth/.npmignore b/node_modules/oauth/.npmignore
new file mode 100644
index 0000000..3c3629e
--- /dev/null
+++ b/node_modules/oauth/.npmignore
@@ -0,0 +1 @@
+node_modules
diff --git a/node_modules/oauth/LICENSE b/node_modules/oauth/LICENSE
new file mode 100644
index 0000000..f8049f8
--- /dev/null
+++ b/node_modules/oauth/LICENSE
@@ -0,0 +1,8 @@
+The MIT License (MIT)
+Copyright (c) <2010-2012> <Ciaran Jessup>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/node_modules/oauth/Makefile b/node_modules/oauth/Makefile
new file mode 100644
index 0000000..7723a39
--- /dev/null
+++ b/node_modules/oauth/Makefile
@@ -0,0 +1,7 @@
+#
+# Run all tests
+#
+test:
+	@@node_modules/.bin/vows tests/*tests.js --spec
+
+.PHONY: test install
diff --git a/node_modules/oauth/Readme.md b/node_modules/oauth/Readme.md
new file mode 100644
index 0000000..bfbb805
--- /dev/null
+++ b/node_modules/oauth/Readme.md
@@ -0,0 +1,190 @@
+node-oauth
+===========
+A simple oauth API for node.js .  This API allows users to authenticate against OAUTH providers, and thus act as OAuth consumers. It also has support for OAuth Echo, which is used for communicating with 3rd party media providers such as TwitPic and yFrog.
+
+Tested against Twitter (http://twitter.com), term.ie (http://term.ie/oauth/example/), TwitPic, and Yahoo!
+
+Also provides rudimentary OAuth2 support, tested against facebook, github, foursquare, google and Janrain.   For more complete usage examples please take a look at connect-auth (http://github.com/ciaranj/connect-auth)
+
+[![Clone in Koding](http://learn.koding.com/btn/clone_d.png)][koding]
+[koding]: https://koding.com/Teamwork?import=https://github.com/ciaranj/node-oauth/archive/master.zip&c=git1
+[![Pair on Thinkful](https://tf-assets-staging.s3.amazonaws.com/badges/thinkful_repo_badge.svg)][Thinkful]
+[Thinkful]: http://start.thinkful.com/node/?utm_source=github&utm_medium=badge&utm_campaign=node-oauth
+
+Installation
+============== 
+
+    $ npm install oauth
+
+
+Examples
+==========
+
+To run examples/tests install Mocha `$ npm install -g mocha` and run `$ mocha you-file-name.js`:
+
+## OAuth1.0
+
+```javascript
+describe('OAuth1.0',function(){
+  var OAuth = require('oauth');
+
+  it('tests trends Twitter API v1.1',function(done){
+    var oauth = new OAuth.OAuth(
+      'https://api.twitter.com/oauth/request_token',
+      'https://api.twitter.com/oauth/access_token',
+      'your application consumer key',
+      'your application secret',
+      '1.0A',
+      null,
+      'HMAC-SHA1'
+    );
+    oauth.get(
+      'https://api.twitter.com/1.1/trends/place.json?id=23424977',
+      'your user token for this app', //test user token
+      'your user secret for this app', //test user secret            
+      function (e, data, res){
+        if (e) console.error(e);        
+        console.log(require('util').inspect(data));
+        done();      
+      });    
+  });
+});
+```
+
+## OAuth2.0 
+```javascript
+describe('OAuth2',function(){
+  var OAuth = require('oauth');
+
+   it('gets bearer token', function(done){
+     var OAuth2 = OAuth.OAuth2;    
+     var twitterConsumerKey = 'your key';
+     var twitterConsumerSecret = 'your secret';
+     var oauth2 = new OAuth2(server.config.keys.twitter.consumerKey,
+       twitterConsumerSecret, 
+       'https://api.twitter.com/', 
+       null,
+       'oauth2/token', 
+       null);
+     oauth2.getOAuthAccessToken(
+       '',
+       {'grant_type':'client_credentials'},
+       function (e, access_token, refresh_token, results){
+       console.log('bearer: ',access_token);
+       done();
+     });
+   });
+```
+
+Change History
+============== 
+* 0.9.15
+    - OAuth2:   Allow specification of agent
+* 0.9.14
+    - OAuth2:   Extend 'successful' token responses to include anything in the 2xx range.
+* 0.9.13
+    - OAuth2:   Fixes the "createCredentials() is deprecated, use tls.createSecureContext instead" message. (thank you AJ ONeal)
+* 0.9.12
+    - OAuth1/2: Can now pass Buffer instance directly for PUTs+POSTs (thank you Evan Prodromou)
+    - OAuth1:   Improve interoperability with libraries that mess with the prototype. (thank you Jose Ignacio Andres)
+    - OAuth2:   Adds PUT support for OAuth2 (thank you Derek Brooks)
+    - OAuth1:   Improves use_strict compatibility (thank you Ted Goddard)
+* 0.9.11
+    - OAuth2:   No longer sends the type=webserver argument with the OAuth2 requests (thank you bendiy)
+    - OAuth2:   Provides a default (and overrideable) User-Agent header (thanks to Andrew Martens & Daniel Mahlow)
+    - OAuth1:   New followRedirects client option (true by default) (thanks to Pieter Joost van de Sande)
+    - OAuth1:   Adds RSA-SHA1 support (thanks to Jeffrey D. Van Alstine  & Michael Garvin &  Andreas Knecht)
+* 0.9.10
+    - OAuth2:   Addresses 2 issues that came in with 0.9.9, #129 & #125 (thank you José F. Romaniello)
+* 0.9.9
+    - OAuth1:   Fix the mismatch between the output of querystring.stringify() and this._encodeData(). (thank you rolandboon)
+    - OAuth2:   Adds Authorization Header and supports extra headers by default ( thanks to Brian Park)
+* 0.9.8
+    - OAuth1:   Support overly-strict OAuth server's that require whitespace separating the Authorization Header parameters  (e.g. 500px.com) (Thanks to Christian Schwarz)
+    - OAuth1:   Fix incorrect double-encoding of PLAINTEXT OAuth connections (Thanks to Joe Rozner)
+    - OAuth1:   Minor safety check added when checking hostnames. (Thanks to Garrick Cheung)
+* 0.9.7
+    - OAuth2:   Pass back any extra response data for calls to getOAuthAccessToken (Thanks to Tang Bo Hao)
+    - OAuth2:   Don't force a https request if given a http url (Thanks to Damien Mathieu)
+    - OAuth2:   Supports specifying a grant-type of 'refresh-token' (Thanks to Luke Baker)
+* 0.9.6
+    - OAuth2:   Support for 302 redirects (Thanks Patrick Negri). 
+    - OAuth1/2: Some code tidying. ( Thanks to Raoul Millais )  
+* 0.9.5
+    - OAuth1:   Allow usage of HTTP verbs other than GET for retrieving the access and request tokens (Thanks to Raoul Millais)  
+* 0.9.4
+    - OAuth1/2: Support for OAuth providers that drop connections (don't send response lengths? [Google]) 
+    - OAuth2:   Change getOAuthAccessToken to POST rather than GET ( Possible Breaking change!!! ... re-tested against Google, Github, Facebook, FourSquare and Janrain and seems ok .. is closer to the spec (v20) )  
+* 0.9.3
+    - OAuth1:   Adds support for following 301 redirects (Thanks bdickason) 
+* 0.9.2 
+    - OAuth1:   Correct content length calculated for non-ascii post bodies (Thanks selead)  
+    - OAuth1:   Allowed for configuration of the 'access token' name used when requesting protected resources (OAuth2)  
+* 0.9.1
+    - OAuth1:   Added support for automatically following 302 redirects (Thanks neyric) 
+    - OAuth1:   Added support for OAuth Echo (Thanks Ryan LeFevre). 
+    - OAuth1:   Improved handling of 2xx responses (Thanks Neil Mansilla).  
+* 0.9.0
+    - OAuth1/2: Compatibility fixes to bring node-oauth up to speed with node.js 0.4x [thanks to Rasmus Andersson for starting the work ]  
+* 0.8.4
+    - OAuth1:   Fixed issue #14 (Parameter ordering ignored encodings).
+    - OAuth1:   Added support for repeated parameter names.
+    - OAuth1/2: Implements issue #15 (Use native SHA1 if available, 10x speed improvement!).
+    - OAuth2:   Fixed issue #16 (Should use POST when requesting access tokens.).
+    - OAuth2:   Fixed Issue #17 (OAuth2 spec compliance).  
+    - OAuth1:   Implemented enhancement #13 (Adds support for PUT & DELETE http verbs). 
+    - OAuth1:   Fixes issue #18 (Complex/Composite url arguments [thanks novemberborn])  
+* 0.8.3
+    - OAuth1:   Fixed an issue where the auth header code depended on the Array's toString method (Yohei Sasaki) Updated the getOAuthRequestToken method so we can access google's OAuth secured methods. Also re-implemented and fleshed out the test suite.  
+* 0.8.2
+    - OAuth1:   The request returning methods will now write the POST body if provided (Chris Anderson), the code responsible for manipulating the headers is a bit safe now when working with other code (Paul McKellar)
+    - Package:  Tweaked the package.json to use index.js instead of main.js  
+* 0.8.1
+    - OAuth1:   Added mechanism to get hold of a signed Node Request object, ready for attaching response listeners etc. (Perfect for streaming APIs)  
+* 0.8.0
+    - OAuth1:   Standardised method capitalisation, the old getOauthAccessToken is now getOAuthAccessToken (Breaking change to existing code)  
+* 0.7.7
+    - OAuth1:   Looks like non oauth_ parameters where appearing within the Authorization headers, which I believe to be incorrect.  
+* 0.7.6
+    - OAuth1:   Added in oauth_verifier property to getAccessToken required for 1.0A  
+* 0.7.5
+    - Package:  Added in a main.js to simplify the require'ing of OAuth  
+* 0.7.4
+    - OAuth1:   Minor change to add an error listener to the OAuth client (thanks troyk)  
+* 0.7.3
+    - OAuth2:   Now sends a Content-Length Http header to keep nginx happy :)  
+* 0.7.2
+    - OAuth1:   Fixes some broken unit tests!  
+* 0.7.0
+    - OAuth1/2: Introduces support for HTTPS end points and callback URLS for OAuth 1.0A and Oauth 2 (Please be aware that this was a breaking change to the constructor arguments order)  
+
+Contributors (In no particular order)
+=====================================
+
+* Evan Prodromou
+* Jose Ignacio Andres
+* Ted Goddard
+* Derek Brooks
+* Ciaran Jessup - ciaranj@gmail.com
+* Mark Wubben - http://equalmedia.com/
+* Ryan LeFevre - http://meltingice.net
+* Raoul Millais
+* Patrick Negri - http://github.com/pnegri
+* Tang Bo Hao - http://github.com/btspoony
+* Damien Mathieu - http://42.dmathieu.com
+* Luke Baker - http://github.com/lukebaker
+* Christian Schwarz  - http://github.com/chrischw/
+* Joe Rozer - http://www.deadbytes.net
+* Garrick Cheung - http://www.garrickcheung.com/
+* rolandboon - http://rolandboon.com
+* Brian Park - http://github.com/yaru22
+* José F. Romaniello - http://github.com/jfromaniello
+* bendiy - https://github.com/bendiy
+* Andrew Martins - http://www.andrewmartens.com
+* Daniel Mahlow - https://github.com/dmahlow
+* Pieter Joost van de Sande - https://github.com/pjvds
+* Jeffrey D. Van Alstine
+* Michael Garvin
+* Andreas Knecht
+* AJ ONeal
+* Philip Skinner - https://github.com/PhilipSkinner
diff --git a/node_modules/oauth/examples/express-gdata/server.js b/node_modules/oauth/examples/express-gdata/server.js
new file mode 100644
index 0000000..3c7bf7f
--- /dev/null
+++ b/node_modules/oauth/examples/express-gdata/server.js
@@ -0,0 +1,168 @@
+var express = require('express'),
+	 OAuth = require('oauth').OAuth,
+	 querystring = require('querystring');
+
+// Setup the Express.js server
+var app = express.createServer();
+app.use(express.logger());
+app.use(express.bodyParser());
+app.use(express.cookieParser());
+app.use(express.session({
+	secret: "skjghskdjfhbqigohqdiouk"
+}));
+
+// Home Page
+app.get('/', function(req, res){
+	if(!req.session.oauth_access_token) {
+		res.redirect("/google_login");
+	}
+	else {
+		res.redirect("/google_contacts");
+	}
+});
+
+// Request an OAuth Request Token, and redirects the user to authorize it
+app.get('/google_login', function(req, res) {
+	
+	var getRequestTokenUrl = "https://www.google.com/accounts/OAuthGetRequestToken";
+	
+	// GData specifid: scopes that wa want access to
+	var gdataScopes = [
+		querystring.escape("https://www.google.com/m8/feeds/"),
+		querystring.escape("https://www.google.com/calendar/feeds/")
+	];
+	
+	var oa = new OAuth(getRequestTokenUrl+"?scope="+gdataScopes.join('+'),
+	                  "https://www.google.com/accounts/OAuthGetAccessToken",
+	                  "anonymous",
+	                  "anonymous",
+	                  "1.0",
+	                  "http://localhost:3000/google_cb"+( req.param('action') && req.param('action') != "" ? "?action="+querystring.escape(req.param('action')) : "" ),
+	                  "HMAC-SHA1");
+
+	oa.getOAuthRequestToken(function(error, oauth_token, oauth_token_secret, results){
+	  if(error) {
+			console.log('error');
+	 		console.log(error);
+		}
+	  else { 
+			// store the tokens in the session
+			req.session.oa = oa;
+			req.session.oauth_token = oauth_token;
+			req.session.oauth_token_secret = oauth_token_secret;
+		
+			// redirect the user to authorize the token
+	   	res.redirect("https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token="+oauth_token);
+	  }
+	})
+
+});
+
+// Callback for the authorization page
+app.get('/google_cb', function(req, res) {
+		
+	// get the OAuth access token with the 'oauth_verifier' that we received
+	
+	var oa = new OAuth(req.session.oa._requestUrl,
+	                  req.session.oa._accessUrl,
+	                  req.session.oa._consumerKey,
+	                  req.session.oa._consumerSecret,
+	                  req.session.oa._version,
+	                  req.session.oa._authorize_callback,
+	                  req.session.oa._signatureMethod);
+	
+    console.log(oa);
+	
+	oa.getOAuthAccessToken(
+		req.session.oauth_token, 
+		req.session.oauth_token_secret, 
+		req.param('oauth_verifier'), 
+		function(error, oauth_access_token, oauth_access_token_secret, results2) {
+			
+			if(error) {
+				console.log('error');
+				console.log(error);
+	 		}
+	 		else {
+		
+				// store the access token in the session
+				req.session.oauth_access_token = oauth_access_token;
+				req.session.oauth_access_token_secret = oauth_access_token_secret;
+
+	    		res.redirect((req.param('action') && req.param('action') != "") ? req.param('action') : "/google_contacts");
+	 		}
+
+	});
+	
+});
+
+
+function require_google_login(req, res, next) {
+	if(!req.session.oauth_access_token) {
+		res.redirect("/google_login?action="+querystring.escape(req.originalUrl));
+		return;
+	}
+	next();
+};
+
+app.get('/google_contacts', require_google_login, function(req, res) {
+	var oa = new OAuth(req.session.oa._requestUrl,
+	                  req.session.oa._accessUrl,
+	                  req.session.oa._consumerKey,
+	                  req.session.oa._consumerSecret,
+	                  req.session.oa._version,
+	                  req.session.oa._authorize_callback,
+	                  req.session.oa._signatureMethod);
+	
+    console.log(oa);
+
+	// Example using GData API v3
+	// GData Specific Header
+	oa._headers['GData-Version'] = '3.0'; 
+	
+	oa.getProtectedResource(
+		"https://www.google.com/m8/feeds/contacts/default/full?alt=json", 
+		"GET", 
+		req.session.oauth_access_token, 
+		req.session.oauth_access_token_secret,
+		function (error, data, response) {
+			
+			var feed = JSON.parse(data);
+			
+			res.render('google_contacts.ejs', {
+				locals: { feed: feed }
+			});
+	});
+	
+});
+
+app.get('/google_calendars', require_google_login, function(req, res) {
+		var oa = new OAuth(req.session.oa._requestUrl,
+	                  req.session.oa._accessUrl,
+	                  req.session.oa._consumerKey,
+	                  req.session.oa._consumerSecret,
+	                  req.session.oa._version,
+	                  req.session.oa._authorize_callback,
+	                  req.session.oa._signatureMethod);
+	// Example using GData API v2
+	// GData Specific Header
+	oa._headers['GData-Version'] = '2'; 
+	
+	oa.getProtectedResource(
+		"https://www.google.com/calendar/feeds/default/allcalendars/full?alt=jsonc", 
+		"GET", 
+		req.session.oauth_access_token, 
+		req.session.oauth_access_token_secret,
+		function (error, data, response) {
+			
+			var feed = JSON.parse(data);
+			
+			res.render('google_calendars.ejs', {
+				locals: { feed: feed }
+			});
+	});
+	
+});
+
+app.listen(3000);
+console.log("listening on http://localhost:3000");
diff --git a/node_modules/oauth/examples/express-gdata/views/google_calendars.ejs b/node_modules/oauth/examples/express-gdata/views/google_calendars.ejs
new file mode 100644
index 0000000..15b826f
--- /dev/null
+++ b/node_modules/oauth/examples/express-gdata/views/google_calendars.ejs
@@ -0,0 +1,21 @@
+
+<p><a href="/google_contacts">Check google_contacts</a></p>
+
+<h1>Google Calendars</h1>
+
+<% for(var i = 0 ; i < feed.data.items.length ; i++ ) { 
+  
+  var calendar = feed.data.items[i]; %>
+<div>
+  
+  <h2 style="color:white;background-color:<%= calendar["color"] %>"><%= calendar["title"] %></h2>
+  
+  <p>canEdit: <%= calendar["canEdit"] %></p>
+  <p>accessLevel: <%= calendar["accessLevel"] %></p>
+  <p>timeZone: <%= calendar["timeZone"] %></p>
+  <p>kind: <%= calendar["kind"] %></p>
+  <p>updated: <%= calendar["updated"] %></p>
+  <p>created: <%= calendar["created"] %></p>
+  
+</div>
+<% } %>
\ No newline at end of file
diff --git a/node_modules/oauth/examples/express-gdata/views/google_contacts.ejs b/node_modules/oauth/examples/express-gdata/views/google_contacts.ejs
new file mode 100644
index 0000000..a2050b2
--- /dev/null
+++ b/node_modules/oauth/examples/express-gdata/views/google_contacts.ejs
@@ -0,0 +1,24 @@
+
+<p><a href="/google_calendars">Check google_calendars</a></p>
+
+<h1>Google Contacts</h1>
+
+<% for(var i = 0 ; i < feed.feed.entry.length ; i++ ) { 
+  
+  var contact = feed.feed.entry[i]; %>
+
+<div>
+  <!-- you can access much more ! Just a sample: -->
+  <%= contact["title"]["$t"] %>
+  <% emails = contact["gd$email"] %>
+  
+  <ul>
+    <% for(var j = 0 ; j < emails.length ; j++) { %>
+      <li><%= emails[j]["address" ]%></li>
+    <% } %>
+  </ul>
+  
+</div>
+
+
+<% } %>
diff --git a/node_modules/oauth/examples/express-gdata/views/layout.ejs b/node_modules/oauth/examples/express-gdata/views/layout.ejs
new file mode 100644
index 0000000..8d1ac6d
--- /dev/null
+++ b/node_modules/oauth/examples/express-gdata/views/layout.ejs
@@ -0,0 +1,9 @@
+<html>
+<head>
+</head>
+<body>
+  
+<%- body %>  
+  
+</body>
+</html>
\ No newline at end of file
diff --git a/node_modules/oauth/examples/github-example.js b/node_modules/oauth/examples/github-example.js
new file mode 100644
index 0000000..1a388bd
--- /dev/null
+++ b/node_modules/oauth/examples/github-example.js
@@ -0,0 +1,73 @@
+var http = require('http');
+var qs = require('querystring');
+// var OAuth = require('oauth'), OAuth2 = OAuth.OAuth2;
+var OAuth2 = require('../lib/oauth2.js').OAuth2;
+
+var clientID = '';
+var clientSecret = '';
+var oauth2 = new OAuth2(clientID,
+                        clientSecret,
+                        'https://github.com/', 
+                        'login/oauth/authorize',
+                        'login/oauth/access_token',
+                        null); /** Custom headers */
+
+http.createServer(function (req, res) {
+    var p = req.url.split('/');
+    pLen = p.length;
+    
+    /**
+     * Authorised url as per github docs:
+     * https://developer.github.com/v3/oauth/#redirect-users-to-request-github-access
+     * 
+     * getAuthorizedUrl: https://github.com/ciaranj/node-oauth/blob/master/lib/oauth2.js#L148
+     * Adding params to authorize url with fields as mentioned in github docs
+     *
+     */
+    var authURL = oauth2.getAuthorizeUrl({
+        redirect_uri: 'http://localhost:8080/code',
+        scope: ['repo', 'user'],
+        state: 'some random string to protect against cross-site request forgery attacks'
+    });
+
+
+    /**
+     * Creating an anchor with authURL as href and sending as response
+     */
+    var body = '<a href="' + authURL + '"> Get Code </a>';
+    if (pLen === 2 && p[1] === '') {
+        res.writeHead(200, {
+            'Content-Length': body.length,
+            'Content-Type': 'text/html' });
+        res.end(body);
+    } else if (pLen === 2 && p[1].indexOf('code') === 0) {
+
+        /** Github sends auth code so that access_token can be obtained */
+        var qsObj = {};
+        
+        /** To obtain and parse code='...' from code?code='...' */
+        qsObj = qs.parse(p[1].split('?')[1]); 
+
+        /** Obtaining access_token */
+        oauth2.getOAuthAccessToken(
+            qsObj.code,
+            {'redirect_uri': 'http://localhost:8080/code/'},
+            function (e, access_token, refresh_token, results){
+                if (e) {
+                    console.log(e);
+                    res.end(e);
+                } else if (results.error) {
+                    console.log(results);
+                    res.end(JSON.stringify(results));
+                }
+                else {
+                    console.log('Obtained access_token: ', access_token);
+                    res.end( access_token);
+                }
+        });
+
+    } else {
+        // Unhandled url
+    }
+
+}).listen(8080);
diff --git a/node_modules/oauth/examples/term.ie.oauth-HMAC-SHA1.js b/node_modules/oauth/examples/term.ie.oauth-HMAC-SHA1.js
new file mode 100644
index 0000000..91af05d
--- /dev/null
+++ b/node_modules/oauth/examples/term.ie.oauth-HMAC-SHA1.js
@@ -0,0 +1,31 @@
+var util= require('util')
+
+var OAuth= require('../lib/oauth').OAuth;
+
+var oa= new OAuth("http://term.ie/oauth/example/request_token.php",
+                  "http://term.ie/oauth/example/access_token.php",
+                  "key",
+                  "secret",
+                  "1.0",
+                  null,
+                  "HMAC-SHA1")
+
+oa.getOAuthRequestToken(function(error, oauth_token, oauth_token_secret, results){
+  if(error) util.puts('error :' + error)
+  else { 
+    util.puts('oauth_token :' + oauth_token)
+    util.puts('oauth_token_secret :' + oauth_token_secret)
+    util.puts('requestoken results :' + util.inspect(results))
+    util.puts("Requesting access token")
+    oa.getOAuthAccessToken(oauth_token, oauth_token_secret, function(error, oauth_access_token, oauth_access_token_secret, results2) {
+      util.puts('oauth_access_token :' + oauth_access_token)
+      util.puts('oauth_token_secret :' + oauth_access_token_secret)
+      util.puts('accesstoken results :' + util.inspect(results2))
+      util.puts("Requesting access token")
+      var data= "";
+      oa.getProtectedResource("http://term.ie/oauth/example/echo_api.php?foo=bar&too=roo", "GET", oauth_access_token, oauth_access_token_secret,  function (error, data, response) {
+          util.puts(data);
+      });
+    });
+  }
+})
diff --git a/node_modules/oauth/examples/twitter-example.js b/node_modules/oauth/examples/twitter-example.js
new file mode 100644
index 0000000..90b6adc
--- /dev/null
+++ b/node_modules/oauth/examples/twitter-example.js
@@ -0,0 +1,75 @@
+var http = require('http');
+var OAuth = require('../lib/oauth.js').OAuth;
+var nodeUrl = require('url');
+var clientID = '';
+var clientSecret = '';
+var callbackURL = '';
+
+oa = new OAuth(
+    'https://api.twitter.com/oauth/request_token',
+    'https://api.twitter.com/oauth/access_token',
+    clientID,
+    clientSecret,
+    '1.0',
+    callbackURL,
+    'HMAC-SHA1'
+);
+
+http.createServer(function (request, response) {
+    oa.getOAuthRequestToken(function (error, oAuthToken, oAuthTokenSecret, results) {
+        var urlObj = nodeUrl.parse(request.url, true);
+        var authURL = 'https://twitter.com/' +
+                'oauth/authenticate?oauth_token=' + oAuthToken;
+        var handlers = {
+            '/': function (request, response) {
+                /**
+                 * Creating an anchor with authURL as href and sending as response
+                 */
+                var body = '<a href="' + authURL + '"> Get Code </a>';
+                response.writeHead(200, {
+                    'Content-Length': body.length,
+                    'Content-Type': 'text/html' });
+                response.end(body);
+            },
+            '/callback': function (request, response) {
+                /** Obtaining access_token */
+                var getOAuthRequestTokenCallback = function (error, oAuthAccessToken,
+                                                             oAuthAccessTokenSecret, results) {
+                    if (error) {
+                        console.log(error);
+                        response.end(JSON.stringify({
+                            message: 'Error occured while getting access token',
+                            error: error
+                        }));
+                        return;
+                    }
+
+                    oa.get('https://api.twitter.com/1.1/account/verify_credentials.json',
+                           oAuthAccessToken,
+                           oAuthAccessTokenSecret,
+                           function (error, twitterResponseData, result) {
+                               if (error) {
+                                   console.log(error)
+                                   res.end(JSON.stringify(error));
+                                   return;
+                               }
+                               try {
+                                   console.log(JSON.parse(twitterResponseData));
+                               } catch (parseError) {
+                                   console.log(parseError);
+                               }
+                               console.log(twitterResponseData);
+                               response.end(twitterResponseData);
+                           });
+                };
+
+                oa.getOAuthAccessToken(urlObj.query.oauth_token, oAuthTokenSecret,
+                                       urlObj.query.oauth_verifier,
+                                       getOAuthRequestTokenCallback);
+
+            }
+        };
+        handlers[urlObj.pathname](request, response);
+    })
+
+}).listen(3000);
diff --git a/node_modules/oauth/index.js b/node_modules/oauth/index.js
new file mode 100644
index 0000000..e20716d
--- /dev/null
+++ b/node_modules/oauth/index.js
@@ -0,0 +1,3 @@
+exports.OAuth = require("./lib/oauth").OAuth;
+exports.OAuthEcho = require("./lib/oauth").OAuthEcho;
+exports.OAuth2 = require("./lib/oauth2").OAuth2;
\ No newline at end of file
diff --git a/node_modules/oauth/lib/_utils.js b/node_modules/oauth/lib/_utils.js
new file mode 100644
index 0000000..69fc300
--- /dev/null
+++ b/node_modules/oauth/lib/_utils.js
@@ -0,0 +1,4 @@
+// Returns true if this is a host that closes *before* it ends?!?!
+module.exports.isAnEarlyCloseHost= function( hostName ) {
+  return hostName && hostName.match(".*google(apis)?.com$")
+}
\ No newline at end of file
diff --git a/node_modules/oauth/lib/oauth.js b/node_modules/oauth/lib/oauth.js
new file mode 100644
index 0000000..50dccf9
--- /dev/null
+++ b/node_modules/oauth/lib/oauth.js
@@ -0,0 +1,581 @@
+var crypto= require('crypto'),
+    sha1= require('./sha1'),
+    http= require('http'),
+    https= require('https'),
+    URL= require('url'),
+    querystring= require('querystring'),
+    OAuthUtils= require('./_utils');
+
+exports.OAuth= function(requestUrl, accessUrl, consumerKey, consumerSecret, version, authorize_callback, signatureMethod, nonceSize, customHeaders) {
+  this._isEcho = false;
+
+  this._requestUrl= requestUrl;
+  this._accessUrl= accessUrl;
+  this._consumerKey= consumerKey;
+  this._consumerSecret= this._encodeData( consumerSecret );
+  if (signatureMethod == "RSA-SHA1") {
+    this._privateKey = consumerSecret;
+  }
+  this._version= version;
+  if( authorize_callback === undefined ) {
+    this._authorize_callback= "oob";
+  }
+  else {
+    this._authorize_callback= authorize_callback;
+  }
+
+  if( signatureMethod != "PLAINTEXT" && signatureMethod != "HMAC-SHA1" && signatureMethod != "RSA-SHA1")
+    throw new Error("Un-supported signature method: " + signatureMethod )
+  this._signatureMethod= signatureMethod;
+  this._nonceSize= nonceSize || 32;
+  this._headers= customHeaders || {"Accept" : "*/*",
+                                   "Connection" : "close",
+                                   "User-Agent" : "Node authentication"}
+  this._clientOptions= this._defaultClientOptions= {"requestTokenHttpMethod": "POST",
+                                                    "accessTokenHttpMethod": "POST",
+                                                    "followRedirects": true};
+  this._oauthParameterSeperator = ",";
+};
+
+exports.OAuthEcho= function(realm, verify_credentials, consumerKey, consumerSecret, version, signatureMethod, nonceSize, customHeaders) {
+  this._isEcho = true;
+
+  this._realm= realm;
+  this._verifyCredentials = verify_credentials;
+  this._consumerKey= consumerKey;
+  this._consumerSecret= this._encodeData( consumerSecret );
+  if (signatureMethod == "RSA-SHA1") {
+    this._privateKey = consumerSecret;
+  }
+  this._version= version;
+
+  if( signatureMethod != "PLAINTEXT" && signatureMethod != "HMAC-SHA1" && signatureMethod != "RSA-SHA1")
+    throw new Error("Un-supported signature method: " + signatureMethod );
+  this._signatureMethod= signatureMethod;
+  this._nonceSize= nonceSize || 32;
+  this._headers= customHeaders || {"Accept" : "*/*",
+                                   "Connection" : "close",
+                                   "User-Agent" : "Node authentication"};
+  this._oauthParameterSeperator = ",";
+}
+
+exports.OAuthEcho.prototype = exports.OAuth.prototype;
+
+exports.OAuth.prototype._getTimestamp= function() {
+  return Math.floor( (new Date()).getTime() / 1000 );
+}
+
+exports.OAuth.prototype._encodeData= function(toEncode){
+ if( toEncode == null || toEncode == "" ) return ""
+ else {
+    var result= encodeURIComponent(toEncode);
+    // Fix the mismatch between OAuth's  RFC3986's and Javascript's beliefs in what is right and wrong ;)
+    return result.replace(/\!/g, "%21")
+                 .replace(/\'/g, "%27")
+                 .replace(/\(/g, "%28")
+                 .replace(/\)/g, "%29")
+                 .replace(/\*/g, "%2A");
+ }
+}
+
+exports.OAuth.prototype._decodeData= function(toDecode) {
+  if( toDecode != null ) {
+    toDecode = toDecode.replace(/\+/g, " ");
+  }
+  return decodeURIComponent( toDecode);
+}
+
+exports.OAuth.prototype._getSignature= function(method, url, parameters, tokenSecret) {
+  var signatureBase= this._createSignatureBase(method, url, parameters);
+  return this._createSignature( signatureBase, tokenSecret );
+}
+
+exports.OAuth.prototype._normalizeUrl= function(url) {
+  var parsedUrl= URL.parse(url, true)
+   var port ="";
+   if( parsedUrl.port ) {
+     if( (parsedUrl.protocol == "http:" && parsedUrl.port != "80" ) ||
+         (parsedUrl.protocol == "https:" && parsedUrl.port != "443") ) {
+           port= ":" + parsedUrl.port;
+         }
+   }
+
+  if( !parsedUrl.pathname  || parsedUrl.pathname == "" ) parsedUrl.pathname ="/";
+
+  return parsedUrl.protocol + "//" + parsedUrl.hostname + port + parsedUrl.pathname;
+}
+
+// Is the parameter considered an OAuth parameter
+exports.OAuth.prototype._isParameterNameAnOAuthParameter= function(parameter) {
+  var m = parameter.match('^oauth_');
+  if( m && ( m[0] === "oauth_" ) ) {
+    return true;
+  }
+  else {
+    return false;
+  }
+};
+
+// build the OAuth request authorization header
+exports.OAuth.prototype._buildAuthorizationHeaders= function(orderedParameters) {
+  var authHeader="OAuth ";
+  if( this._isEcho ) {
+    authHeader += 'realm="' + this._realm + '",';
+  }
+
+  for( var i= 0 ; i < orderedParameters.length; i++) {
+     // Whilst the all the parameters should be included within the signature, only the oauth_ arguments
+     // should appear within the authorization header.
+     if( this._isParameterNameAnOAuthParameter(orderedParameters[i][0]) ) {
+      authHeader+= "" + this._encodeData(orderedParameters[i][0])+"=\""+ this._encodeData(orderedParameters[i][1])+"\""+ this._oauthParameterSeperator;
+     }
+  }
+
+  authHeader= authHeader.substring(0, authHeader.length-this._oauthParameterSeperator.length);
+  return authHeader;
+}
+
+// Takes an object literal that represents the arguments, and returns an array
+// of argument/value pairs.
+exports.OAuth.prototype._makeArrayOfArgumentsHash= function(argumentsHash) {
+  var argument_pairs= [];
+  for(var key in argumentsHash ) {
+    if (argumentsHash.hasOwnProperty(key)) {
+       var value= argumentsHash[key];
+       if( Array.isArray(value) ) {
+         for(var i=0;i<value.length;i++) {
+           argument_pairs[argument_pairs.length]= [key, value[i]];
+         }
+       }
+       else {
+         argument_pairs[argument_pairs.length]= [key, value];
+       }
+    }
+  }
+  return argument_pairs;
+}
+
+// Sorts the encoded key value pairs by encoded name, then encoded value
+exports.OAuth.prototype._sortRequestParams= function(argument_pairs) {
+  // Sort by name, then value.
+  argument_pairs.sort(function(a,b) {
+      if ( a[0]== b[0] )  {
+        return a[1] < b[1] ? -1 : 1;
+      }
+      else return a[0] < b[0] ? -1 : 1;
+  });
+
+  return argument_pairs;
+}
+
+exports.OAuth.prototype._normaliseRequestParams= function(args) {
+  var argument_pairs= this._makeArrayOfArgumentsHash(args);
+  // First encode them #3.4.1.3.2 .1
+  for(var i=0;i<argument_pairs.length;i++) {
+    argument_pairs[i][0]= this._encodeData( argument_pairs[i][0] );
+    argument_pairs[i][1]= this._encodeData( argument_pairs[i][1] );
+  }
+
+  // Then sort them #3.4.1.3.2 .2
+  argument_pairs= this._sortRequestParams( argument_pairs );
+
+  // Then concatenate together #3.4.1.3.2 .3 & .4
+  var args= "";
+  for(var i=0;i<argument_pairs.length;i++) {
+      args+= argument_pairs[i][0];
+      args+= "="
+      args+= argument_pairs[i][1];
+      if( i < argument_pairs.length-1 ) args+= "&";
+  }
+  return args;
+}
+
+exports.OAuth.prototype._createSignatureBase= function(method, url, parameters) {
+  url= this._encodeData( this._normalizeUrl(url) );
+  parameters= this._encodeData( parameters );
+  return method.toUpperCase() + "&" + url + "&" + parameters;
+}
+
+exports.OAuth.prototype._createSignature= function(signatureBase, tokenSecret) {
+   if( tokenSecret === undefined ) var tokenSecret= "";
+   else tokenSecret= this._encodeData( tokenSecret );
+   // consumerSecret is already encoded
+   var key= this._consumerSecret + "&" + tokenSecret;
+
+   var hash= ""
+   if( this._signatureMethod == "PLAINTEXT" ) {
+     hash= key;
+   }
+   else if (this._signatureMethod == "RSA-SHA1") {
+     key = this._privateKey || "";
+     hash= crypto.createSign("RSA-SHA1").update(signatureBase).sign(key, 'base64');
+   }
+   else {
+       if( crypto.Hmac ) {
+         hash = crypto.createHmac("sha1", key).update(signatureBase).digest("base64");
+       }
+       else {
+         hash= sha1.HMACSHA1(key, signatureBase);
+       }
+   }
+   return hash;
+}
+exports.OAuth.prototype.NONCE_CHARS= ['a','b','c','d','e','f','g','h','i','j','k','l','m','n',
+              'o','p','q','r','s','t','u','v','w','x','y','z','A','B',
+              'C','D','E','F','G','H','I','J','K','L','M','N','O','P',
+              'Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3',
+              '4','5','6','7','8','9'];
+
+exports.OAuth.prototype._getNonce= function(nonceSize) {
+   var result = [];
+   var chars= this.NONCE_CHARS;
+   var char_pos;
+   var nonce_chars_length= chars.length;
+
+   for (var i = 0; i < nonceSize; i++) {
+       char_pos= Math.floor(Math.random() * nonce_chars_length);
+       result[i]=  chars[char_pos];
+   }
+   return result.join('');
+}
+
+exports.OAuth.prototype._createClient= function( port, hostname, method, path, headers, sslEnabled ) {
+  var options = {
+    host: hostname,
+    port: port,
+    path: path,
+    method: method,
+    headers: headers
+  };
+  var httpModel;
+  if( sslEnabled ) {
+    httpModel= https;
+  } else {
+    httpModel= http;
+  }
+  return httpModel.request(options);
+}
+
+exports.OAuth.prototype._prepareParameters= function( oauth_token, oauth_token_secret, method, url, extra_params ) {
+  var oauthParameters= {
+      "oauth_timestamp":        this._getTimestamp(),
+      "oauth_nonce":            this._getNonce(this._nonceSize),
+      "oauth_version":          this._version,
+      "oauth_signature_method": this._signatureMethod,
+      "oauth_consumer_key":     this._consumerKey
+  };
+
+  if( oauth_token ) {
+    oauthParameters["oauth_token"]= oauth_token;
+  }
+
+  var sig;
+  if( this._isEcho ) {
+    sig = this._getSignature( "GET",  this._verifyCredentials,  this._normaliseRequestParams(oauthParameters), oauth_token_secret);
+  }
+  else {
+    if( extra_params ) {
+      for( var key in extra_params ) {
+        if (extra_params.hasOwnProperty(key)) oauthParameters[key]= extra_params[key];
+      }
+    }
+    var parsedUrl= URL.parse( url, false );
+
+    if( parsedUrl.query ) {
+      var key2;
+      var extraParameters= querystring.parse(parsedUrl.query);
+      for(var key in extraParameters ) {
+        var value= extraParameters[key];
+          if( typeof value == "object" ){
+            // TODO: This probably should be recursive
+            for(key2 in value){
+              oauthParameters[key + "[" + key2 + "]"] = value[key2];
+            }
+          } else {
+            oauthParameters[key]= value;
+          }
+        }
+    }
+
+    sig = this._getSignature( method,  url,  this._normaliseRequestParams(oauthParameters), oauth_token_secret);
+  }
+
+  var orderedParameters= this._sortRequestParams( this._makeArrayOfArgumentsHash(oauthParameters) );
+  orderedParameters[orderedParameters.length]= ["oauth_signature", sig];
+  return orderedParameters;
+}
+
+exports.OAuth.prototype._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {
+  var orderedParameters= this._prepareParameters(oauth_token, oauth_token_secret, method, url, extra_params);
+
+  if( !post_content_type ) {
+    post_content_type= "application/x-www-form-urlencoded";
+  }
+  var parsedUrl= URL.parse( url, false );
+  if( parsedUrl.protocol == "http:" && !parsedUrl.port ) parsedUrl.port= 80;
+  if( parsedUrl.protocol == "https:" && !parsedUrl.port ) parsedUrl.port= 443;
+
+  var headers= {};
+  var authorization = this._buildAuthorizationHeaders(orderedParameters);
+  if ( this._isEcho ) {
+    headers["X-Verify-Credentials-Authorization"]= authorization;
+  }
+  else {
+    headers["Authorization"]= authorization;
+  }
+
+  headers["Host"] = parsedUrl.host
+
+  for( var key in this._headers ) {
+    if (this._headers.hasOwnProperty(key)) {
+      headers[key]= this._headers[key];
+    }
+  }
+
+  // Filter out any passed extra_params that are really to do with OAuth
+  for(var key in extra_params) {
+    if( this._isParameterNameAnOAuthParameter( key ) ) {
+      delete extra_params[key];
+    }
+  }
+
+  if( (method == "POST" || method == "PUT")  && ( post_body == null && extra_params != null) ) {
+    // Fix the mismatch between the output of querystring.stringify() and this._encodeData()
+    post_body= querystring.stringify(extra_params)
+                       .replace(/\!/g, "%21")
+                       .replace(/\'/g, "%27")
+                       .replace(/\(/g, "%28")
+                       .replace(/\)/g, "%29")
+                       .replace(/\*/g, "%2A");
+  }
+
+  if( post_body ) {
+      if ( Buffer.isBuffer(post_body) ) {
+          headers["Content-length"]= post_body.length;
+      } else {
+          headers["Content-length"]= Buffer.byteLength(post_body);
+      }
+  } else {
+      headers["Content-length"]= 0;
+  }
+
+  headers["Content-Type"]= post_content_type;
+
+  var path;
+  if( !parsedUrl.pathname  || parsedUrl.pathname == "" ) parsedUrl.pathname ="/";
+  if( parsedUrl.query ) path= parsedUrl.pathname + "?"+ parsedUrl.query ;
+  else path= parsedUrl.pathname;
+
+  var request;
+  if( parsedUrl.protocol == "https:" ) {
+    request= this._createClient(parsedUrl.port, parsedUrl.hostname, method, path, headers, true);
+  }
+  else {
+    request= this._createClient(parsedUrl.port, parsedUrl.hostname, method, path, headers);
+  }
+
+  var clientOptions = this._clientOptions;
+  if( callback ) {
+    var data="";
+    var self= this;
+
+    // Some hosts *cough* google appear to close the connection early / send no content-length header
+    // allow this behaviour.
+    var allowEarlyClose= OAuthUtils.isAnEarlyCloseHost( parsedUrl.hostname );
+    var callbackCalled= false;
+    var passBackControl = function( response ) {
+      if(!callbackCalled) {
+        callbackCalled= true;
+        if ( response.statusCode >= 200 && response.statusCode <= 299 ) {
+          callback(null, data, response);
+        } else {
+          // Follow 301 or 302 redirects with Location HTTP header
+          if((response.statusCode == 301 || response.statusCode == 302) && clientOptions.followRedirects && response.headers && response.headers.location) {
+            self._performSecureRequest( oauth_token, oauth_token_secret, method, response.headers.location, extra_params, post_body, post_content_type,  callback);
+          }
+          else {
+            callback({ statusCode: response.statusCode, data: data }, data, response);
+          }
+        }
+      }
+    }
+
+    request.on('response', function (response) {
+      response.setEncoding('utf8');
+      response.on('data', function (chunk) {
+        data+=chunk;
+      });
+      response.on('end', function () {
+        passBackControl( response );
+      });
+      response.on('close', function () {
+        if( allowEarlyClose ) {
+          passBackControl( response );
+        }
+      });
+    });
+
+    request.on("error", function(err) {
+      if(!callbackCalled) {
+        callbackCalled= true;
+        callback( err )
+      }
+    });
+
+    if( (method == "POST" || method =="PUT") && post_body != null && post_body != "" ) {
+      request.write(post_body);
+    }
+    request.end();
+  }
+  else {
+    if( (method == "POST" || method =="PUT") && post_body != null && post_body != "" ) {
+      request.write(post_body);
+    }
+    return request;
+  }
+
+  return;
+}
+
+exports.OAuth.prototype.setClientOptions= function(options) {
+  var key,
+      mergedOptions= {},
+      hasOwnProperty= Object.prototype.hasOwnProperty;
+
+  for( key in this._defaultClientOptions ) {
+    if( !hasOwnProperty.call(options, key) ) {
+      mergedOptions[key]= this._defaultClientOptions[key];
+    } else {
+      mergedOptions[key]= options[key];
+    }
+  }
+
+  this._clientOptions= mergedOptions;
+};
+
+exports.OAuth.prototype.getOAuthAccessToken= function(oauth_token, oauth_token_secret, oauth_verifier,  callback) {
+  var extraParams= {};
+  if( typeof oauth_verifier == "function" ) {
+    callback= oauth_verifier;
+  } else {
+    extraParams.oauth_verifier= oauth_verifier;
+  }
+
+   this._performSecureRequest( oauth_token, oauth_token_secret, this._clientOptions.accessTokenHttpMethod, this._accessUrl, extraParams, null, null, function(error, data, response) {
+         if( error ) callback(error);
+         else {
+           var results= querystring.parse( data );
+           var oauth_access_token= results["oauth_token"];
+           delete results["oauth_token"];
+           var oauth_access_token_secret= results["oauth_token_secret"];
+           delete results["oauth_token_secret"];
+           callback(null, oauth_access_token, oauth_access_token_secret, results );
+         }
+   })
+}
+
+// Deprecated
+exports.OAuth.prototype.getProtectedResource= function(url, method, oauth_token, oauth_token_secret, callback) {
+  this._performSecureRequest( oauth_token, oauth_token_secret, method, url, null, "", null, callback );
+}
+
+exports.OAuth.prototype.delete= function(url, oauth_token, oauth_token_secret, callback) {
+  return this._performSecureRequest( oauth_token, oauth_token_secret, "DELETE", url, null, "", null, callback );
+}
+
+exports.OAuth.prototype.get= function(url, oauth_token, oauth_token_secret, callback) {
+  return this._performSecureRequest( oauth_token, oauth_token_secret, "GET", url, null, "", null, callback );
+}
+
+exports.OAuth.prototype._putOrPost= function(method, url, oauth_token, oauth_token_secret, post_body, post_content_type, callback) {
+  var extra_params= null;
+  if( typeof post_content_type == "function" ) {
+    callback= post_content_type;
+    post_content_type= null;
+  }
+  if ( typeof post_body != "string" && !Buffer.isBuffer(post_body) ) {
+    post_content_type= "application/x-www-form-urlencoded"
+    extra_params= post_body;
+    post_body= null;
+  }
+  return this._performSecureRequest( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type, callback );
+}
+
+
+exports.OAuth.prototype.put= function(url, oauth_token, oauth_token_secret, post_body, post_content_type, callback) {
+  return this._putOrPost("PUT", url, oauth_token, oauth_token_secret, post_body, post_content_type, callback);
+}
+
+exports.OAuth.prototype.post= function(url, oauth_token, oauth_token_secret, post_body, post_content_type, callback) {
+  return this._putOrPost("POST", url, oauth_token, oauth_token_secret, post_body, post_content_type, callback);
+}
+
+/**
+ * Gets a request token from the OAuth provider and passes that information back
+ * to the calling code.
+ *
+ * The callback should expect a function of the following form:
+ *
+ * function(err, token, token_secret, parsedQueryString) {}
+ *
+ * This method has optional parameters so can be called in the following 2 ways:
+ *
+ * 1) Primary use case: Does a basic request with no extra parameters
+ *  getOAuthRequestToken( callbackFunction )
+ *
+ * 2) As above but allows for provision of extra parameters to be sent as part of the query to the server.
+ *  getOAuthRequestToken( extraParams, callbackFunction )
+ *
+ * N.B. This method will HTTP POST verbs by default, if you wish to override this behaviour you will
+ * need to provide a requestTokenHttpMethod option when creating the client.
+ *
+ **/
+exports.OAuth.prototype.getOAuthRequestToken= function( extraParams, callback ) {
+   if( typeof extraParams == "function" ){
+     callback = extraParams;
+     extraParams = {};
+   }
+  // Callbacks are 1.0A related
+  if( this._authorize_callback ) {
+    extraParams["oauth_callback"]= this._authorize_callback;
+  }
+  this._performSecureRequest( null, null, this._clientOptions.requestTokenHttpMethod, this._requestUrl, extraParams, null, null, function(error, data, response) {
+    if( error ) callback(error);
+    else {
+      var results= querystring.parse(data);
+
+      var oauth_token= results["oauth_token"];
+      var oauth_token_secret= results["oauth_token_secret"];
+      delete results["oauth_token"];
+      delete results["oauth_token_secret"];
+      callback(null, oauth_token, oauth_token_secret,  results );
+    }
+  });
+}
+
+exports.OAuth.prototype.signUrl= function(url, oauth_token, oauth_token_secret, method) {
+
+  if( method === undefined ) {
+    var method= "GET";
+  }
+
+  var orderedParameters= this._prepareParameters(oauth_token, oauth_token_secret, method, url, {});
+  var parsedUrl= URL.parse( url, false );
+
+  var query="";
+  for( var i= 0 ; i < orderedParameters.length; i++) {
+    query+= orderedParameters[i][0]+"="+ this._encodeData(orderedParameters[i][1]) + "&";
+  }
+  query= query.substring(0, query.length-1);
+
+  return parsedUrl.protocol + "//"+ parsedUrl.host + parsedUrl.pathname + "?" + query;
+};
+
+exports.OAuth.prototype.authHeader= function(url, oauth_token, oauth_token_secret, method) {
+  if( method === undefined ) {
+    var method= "GET";
+  }
+
+  var orderedParameters= this._prepareParameters(oauth_token, oauth_token_secret, method, url, {});
+  return this._buildAuthorizationHeaders(orderedParameters);
+};
diff --git a/node_modules/oauth/lib/oauth2.js b/node_modules/oauth/lib/oauth2.js
new file mode 100644
index 0000000..77241c4
--- /dev/null
+++ b/node_modules/oauth/lib/oauth2.js
@@ -0,0 +1,228 @@
+var querystring= require('querystring'),
+    crypto= require('crypto'),
+    https= require('https'),
+    http= require('http'),
+    URL= require('url'),
+    OAuthUtils= require('./_utils');
+
+exports.OAuth2= function(clientId, clientSecret, baseSite, authorizePath, accessTokenPath, customHeaders) {
+  this._clientId= clientId;
+  this._clientSecret= clientSecret;
+  this._baseSite= baseSite;
+  this._authorizeUrl= authorizePath || "/oauth/authorize";
+  this._accessTokenUrl= accessTokenPath || "/oauth/access_token";
+  this._accessTokenName= "access_token";
+  this._authMethod= "Bearer";
+  this._customHeaders = customHeaders || {};
+  this._useAuthorizationHeaderForGET= false;
+
+  //our agent
+  this._agent = undefined;
+};
+
+// Allows you to set an agent to use instead of the default HTTP or
+// HTTPS agents. Useful when dealing with your own certificates.
+exports.OAuth2.prototype.setAgent = function(agent) {
+  this._agent = agent;
+};
+
+// This 'hack' method is required for sites that don't use
+// 'access_token' as the name of the access token (for requests).
+// ( http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-7 )
+// it isn't clear what the correct value should be atm, so allowing
+// for specific (temporary?) override for now.
+exports.OAuth2.prototype.setAccessTokenName= function ( name ) {
+  this._accessTokenName= name;
+}
+
+// Sets the authorization method for Authorization header.
+// e.g. Authorization: Bearer <token>  # "Bearer" is the authorization method.
+exports.OAuth2.prototype.setAuthMethod = function ( authMethod ) {
+  this._authMethod = authMethod;
+};
+
+
+// If you use the OAuth2 exposed 'get' method (and don't construct your own _request call )
+// this will specify whether to use an 'Authorize' header instead of passing the access_token as a query parameter
+exports.OAuth2.prototype.useAuthorizationHeaderforGET = function(useIt) {
+  this._useAuthorizationHeaderForGET= useIt;
+}
+
+exports.OAuth2.prototype._getAccessTokenUrl= function() {
+  return this._baseSite + this._accessTokenUrl; /* + "?" + querystring.stringify(params); */
+}
+
+// Build the authorization header. In particular, build the part after the colon.
+// e.g. Authorization: Bearer <token>  # Build "Bearer <token>"
+exports.OAuth2.prototype.buildAuthHeader= function(token) {
+  return this._authMethod + ' ' + token;
+};
+
+exports.OAuth2.prototype._chooseHttpLibrary= function( parsedUrl ) {
+  var http_library= https;
+  // As this is OAUth2, we *assume* https unless told explicitly otherwise.
+  if( parsedUrl.protocol != "https:" ) {
+    http_library= http;
+  }
+  return http_library;
+};
+
+exports.OAuth2.prototype._request= function(method, url, headers, post_body, access_token, callback) {
+
+  var parsedUrl= URL.parse( url, true );
+  if( parsedUrl.protocol == "https:" && !parsedUrl.port ) {
+    parsedUrl.port= 443;
+  }
+
+  var http_library= this._chooseHttpLibrary( parsedUrl );
+
+
+  var realHeaders= {};
+  for( var key in this._customHeaders ) {
+    realHeaders[key]= this._customHeaders[key];
+  }
+  if( headers ) {
+    for(var key in headers) {
+      realHeaders[key] = headers[key];
+    }
+  }
+  realHeaders['Host']= parsedUrl.host;
+
+  if (!realHeaders['User-Agent']) {
+    realHeaders['User-Agent'] = 'Node-oauth';
+  }
+
+  if( post_body ) {
+      if ( Buffer.isBuffer(post_body) ) {
+          realHeaders["Content-Length"]= post_body.length;
+      } else {
+          realHeaders["Content-Length"]= Buffer.byteLength(post_body);
+      }
+  } else {
+      realHeaders["Content-length"]= 0;
+  }
+
+  if( access_token && !('Authorization' in realHeaders)) {
+    if( ! parsedUrl.query ) parsedUrl.query= {};
+    parsedUrl.query[this._accessTokenName]= access_token;
+  }
+
+  var queryStr= querystring.stringify(parsedUrl.query);
+  if( queryStr ) queryStr=  "?" + queryStr;
+  var options = {
+    host:parsedUrl.hostname,
+    port: parsedUrl.port,
+    path: parsedUrl.pathname + queryStr,
+    method: method,
+    headers: realHeaders
+  };
+
+  this._executeRequest( http_library, options, post_body, callback );
+}
+
+exports.OAuth2.prototype._executeRequest= function( http_library, options, post_body, callback ) {
+  // Some hosts *cough* google appear to close the connection early / send no content-length header
+  // allow this behaviour.
+  var allowEarlyClose= OAuthUtils.isAnEarlyCloseHost(options.host);
+  var callbackCalled= false;
+  function passBackControl( response, result ) {
+    if(!callbackCalled) {
+      callbackCalled=true;
+      if( !(response.statusCode >= 200 && response.statusCode <= 299) && (response.statusCode != 301) && (response.statusCode != 302) ) {
+        callback({ statusCode: response.statusCode, data: result });
+      } else {
+        callback(null, result, response);
+      }
+    }
+  }
+
+  var result= "";
+
+  //set the agent on the request options
+  if (this._agent) {
+    options.agent = this._agent;
+  }
+
+  var request = http_library.request(options);
+  request.on('response', function (response) {
+    response.on("data", function (chunk) {
+      result+= chunk
+    });
+    response.on("close", function (err) {
+      if( allowEarlyClose ) {
+        passBackControl( response, result );
+      }
+    });
+    response.addListener("end", function () {
+      passBackControl( response, result );
+    });
+  });
+  request.on('error', function(e) {
+    callbackCalled= true;
+    callback(e);
+  });
+
+  if( (options.method == 'POST' || options.method == 'PUT') && post_body ) {
+     request.write(post_body);
+  }
+  request.end();
+}
+
+exports.OAuth2.prototype.getAuthorizeUrl= function( params ) {
+  var params= params || {};
+  params['client_id'] = this._clientId;
+  return this._baseSite + this._authorizeUrl + "?" + querystring.stringify(params);
+}
+
+exports.OAuth2.prototype.getOAuthAccessToken= function(code, params, callback) {
+  var params= params || {};
+  params['client_id'] = this._clientId;
+  params['client_secret'] = this._clientSecret;
+  var codeParam = (params.grant_type === 'refresh_token') ? 'refresh_token' : 'code';
+  params[codeParam]= code;
+
+  var post_data= querystring.stringify( params );
+  var post_headers= {
+       'Content-Type': 'application/x-www-form-urlencoded'
+   };
+
+
+  this._request("POST", this._getAccessTokenUrl(), post_headers, post_data, null, function(error, data, response) {
+    if( error )  callback(error);
+    else {
+      var results;
+      try {
+        // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07
+        // responses should be in JSON
+        results= JSON.parse( data );
+      }
+      catch(e) {
+        // .... However both Facebook + Github currently use rev05 of the spec
+        // and neither seem to specify a content-type correctly in their response headers :(
+        // clients of these services will suffer a *minor* performance cost of the exception
+        // being thrown
+        results= querystring.parse( data );
+      }
+      var access_token= results["access_token"];
+      var refresh_token= results["refresh_token"];
+      delete results["refresh_token"];
+      callback(null, access_token, refresh_token, results); // callback results =-=
+    }
+  });
+}
+
+// Deprecated
+exports.OAuth2.prototype.getProtectedResource= function(url, access_token, callback) {
+  this._request("GET", url, {}, "", access_token, callback );
+}
+
+exports.OAuth2.prototype.get= function(url, access_token, callback) {
+  if( this._useAuthorizationHeaderForGET ) {
+    var headers= {'Authorization': this.buildAuthHeader(access_token) }
+    access_token= null;
+  }
+  else {
+    headers= {};
+  }
+  this._request("GET", url, headers, "", access_token, callback );
+}
diff --git a/node_modules/oauth/lib/sha1.js b/node_modules/oauth/lib/sha1.js
new file mode 100644
index 0000000..d73277a
--- /dev/null
+++ b/node_modules/oauth/lib/sha1.js
@@ -0,0 +1,334 @@
+/*
+ * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
+ * in FIPS 180-1
+ * Version 2.2 Copyright Paul Johnston 2000 - 2009.
+ * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
+ * Distributed under the BSD License
+ * See http://pajhome.org.uk/crypt/md5 for details.
+ */
+
+/*
+ * Configurable variables. You may need to tweak these to be compatible with
+ * the server-side, but the defaults work in most cases.
+ */
+var hexcase = 1;  /* hex output format. 0 - lowercase; 1 - uppercase        */
+var b64pad  = "="; /* base-64 pad character. "=" for strict RFC compliance   */
+
+/*
+ * These are the functions you'll usually want to call
+ * They take string arguments and return either hex or base-64 encoded strings
+ */
+function hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }
+function b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }
+function any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }
+function hex_hmac_sha1(k, d)
+  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }
+function b64_hmac_sha1(k, d)
+  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }
+function any_hmac_sha1(k, d, e)
+  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }
+
+/*
+ * Perform a simple self-test to see if the VM is working
+ */
+function sha1_vm_test()
+{
+  return hex_sha1("abc").toLowerCase() == "a9993e364706816aba3e25717850c26c9cd0d89d";
+}
+
+/*
+ * Calculate the SHA1 of a raw string
+ */
+function rstr_sha1(s)
+{
+  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));
+}
+
+/*
+ * Calculate the HMAC-SHA1 of a key and some data (raw strings)
+ */
+function rstr_hmac_sha1(key, data)
+{
+  var bkey = rstr2binb(key);
+  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);
+
+  var ipad = Array(16), opad = Array(16);
+  for(var i = 0; i < 16; i++)
+  {
+    ipad[i] = bkey[i] ^ 0x36363636;
+    opad[i] = bkey[i] ^ 0x5C5C5C5C;
+  }
+
+  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
+  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));
+}
+
+/*
+ * Convert a raw string to a hex string
+ */
+function rstr2hex(input)
+{
+  try { hexcase } catch(e) { hexcase=0; }
+  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
+  var output = "";
+  var x;
+  for(var i = 0; i < input.length; i++)
+  {
+    x = input.charCodeAt(i);
+    output += hex_tab.charAt((x >>> 4) & 0x0F)
+           +  hex_tab.charAt( x        & 0x0F);
+  }
+  return output;
+}
+
+/*
+ * Convert a raw string to a base-64 string
+ */
+function rstr2b64(input)
+{
+  try { b64pad } catch(e) { b64pad=''; }
+  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+  var output = "";
+  var len = input.length;
+  for(var i = 0; i < len; i += 3)
+  {
+    var triplet = (input.charCodeAt(i) << 16)
+                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)
+                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);
+    for(var j = 0; j < 4; j++)
+    {
+      if(i * 8 + j * 6 > input.length * 8) output += b64pad;
+      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);
+    }
+  }
+  return output;
+}
+
+/*
+ * Convert a raw string to an arbitrary string encoding
+ */
+function rstr2any(input, encoding)
+{
+  var divisor = encoding.length;
+  var remainders = Array();
+  var i, q, x, quotient;
+
+  /* Convert to an array of 16-bit big-endian values, forming the dividend */
+  var dividend = Array(Math.ceil(input.length / 2));
+  for(i = 0; i < dividend.length; i++)
+  {
+    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
+  }
+
+  /*
+   * Repeatedly perform a long division. The binary array forms the dividend,
+   * the length of the encoding is the divisor. Once computed, the quotient
+   * forms the dividend for the next step. We stop when the dividend is zero.
+   * All remainders are stored for later use.
+   */
+  while(dividend.length > 0)
+  {
+    quotient = Array();
+    x = 0;
+    for(i = 0; i < dividend.length; i++)
+    {
+      x = (x << 16) + dividend[i];
+      q = Math.floor(x / divisor);
+      x -= q * divisor;
+      if(quotient.length > 0 || q > 0)
+        quotient[quotient.length] = q;
+    }
+    remainders[remainders.length] = x;
+    dividend = quotient;
+  }
+
+  /* Convert the remainders to the output string */
+  var output = "";
+  for(i = remainders.length - 1; i >= 0; i--)
+    output += encoding.charAt(remainders[i]);
+
+  /* Append leading zero equivalents */
+  var full_length = Math.ceil(input.length * 8 /
+                                    (Math.log(encoding.length) / Math.log(2)))
+  for(i = output.length; i < full_length; i++)
+    output = encoding[0] + output;
+
+  return output;
+}
+
+/*
+ * Encode a string as utf-8.
+ * For efficiency, this assumes the input is valid utf-16.
+ */
+function str2rstr_utf8(input)
+{
+  var output = "";
+  var i = -1;
+  var x, y;
+
+  while(++i < input.length)
+  {
+    /* Decode utf-16 surrogate pairs */
+    x = input.charCodeAt(i);
+    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
+    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
+    {
+      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
+      i++;
+    }
+
+    /* Encode output as utf-8 */
+    if(x <= 0x7F)
+      output += String.fromCharCode(x);
+    else if(x <= 0x7FF)
+      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
+                                    0x80 | ( x         & 0x3F));
+    else if(x <= 0xFFFF)
+      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
+                                    0x80 | ((x >>> 6 ) & 0x3F),
+                                    0x80 | ( x         & 0x3F));
+    else if(x <= 0x1FFFFF)
+      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
+                                    0x80 | ((x >>> 12) & 0x3F),
+                                    0x80 | ((x >>> 6 ) & 0x3F),
+                                    0x80 | ( x         & 0x3F));
+  }
+  return output;
+}
+
+/*
+ * Encode a string as utf-16
+ */
+function str2rstr_utf16le(input)
+{
+  var output = "";
+  for(var i = 0; i < input.length; i++)
+    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,
+                                  (input.charCodeAt(i) >>> 8) & 0xFF);
+  return output;
+}
+
+function str2rstr_utf16be(input)
+{
+  var output = "";
+  for(var i = 0; i < input.length; i++)
+    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
+                                   input.charCodeAt(i)        & 0xFF);
+  return output;
+}
+
+/*
+ * Convert a raw string to an array of big-endian words
+ * Characters >255 have their high-byte silently ignored.
+ */
+function rstr2binb(input)
+{
+  var output = Array(input.length >> 2);
+  for(var i = 0; i < output.length; i++)
+    output[i] = 0;
+  for(var i = 0; i < input.length * 8; i += 8)
+    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
+  return output;
+}
+
+/*
+ * Convert an array of big-endian words to a string
+ */
+function binb2rstr(input)
+{
+  var output = "";
+  for(var i = 0; i < input.length * 32; i += 8)
+    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);
+  return output;
+}
+
+/*
+ * Calculate the SHA-1 of an array of big-endian words, and a bit length
+ */
+function binb_sha1(x, len)
+{
+  /* append padding */
+  x[len >> 5] |= 0x80 << (24 - len % 32);
+  x[((len + 64 >> 9) << 4) + 15] = len;
+
+  var w = Array(80);
+  var a =  1732584193;
+  var b = -271733879;
+  var c = -1732584194;
+  var d =  271733878;
+  var e = -1009589776;
+
+  for(var i = 0; i < x.length; i += 16)
+  {
+    var olda = a;
+    var oldb = b;
+    var oldc = c;
+    var oldd = d;
+    var olde = e;
+
+    for(var j = 0; j < 80; j++)
+    {
+      if(j < 16) w[j] = x[i + j];
+      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
+      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
+                       safe_add(safe_add(e, w[j]), sha1_kt(j)));
+      e = d;
+      d = c;
+      c = bit_rol(b, 30);
+      b = a;
+      a = t;
+    }
+
+    a = safe_add(a, olda);
+    b = safe_add(b, oldb);
+    c = safe_add(c, oldc);
+    d = safe_add(d, oldd);
+    e = safe_add(e, olde);
+  }
+  return Array(a, b, c, d, e);
+
+}
+
+/*
+ * Perform the appropriate triplet combination function for the current
+ * iteration
+ */
+function sha1_ft(t, b, c, d)
+{
+  if(t < 20) return (b & c) | ((~b) & d);
+  if(t < 40) return b ^ c ^ d;
+  if(t < 60) return (b & c) | (b & d) | (c & d);
+  return b ^ c ^ d;
+}
+
+/*
+ * Determine the appropriate additive constant for the current iteration
+ */
+function sha1_kt(t)
+{
+  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
+         (t < 60) ? -1894007588 : -899497514;
+}
+
+/*
+ * Add integers, wrapping at 2^32. This uses 16-bit operations internally
+ * to work around bugs in some JS interpreters.
+ */
+function safe_add(x, y)
+{
+  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
+  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
+  return (msw << 16) | (lsw & 0xFFFF);
+}
+
+/*
+ * Bitwise rotate a 32-bit number to the left.
+ */
+function bit_rol(num, cnt)
+{
+  return (num << cnt) | (num >>> (32 - cnt));
+}
+
+exports.HMACSHA1= function(key, data) {
+  return b64_hmac_sha1(key, data);
+}
\ No newline at end of file
diff --git a/node_modules/oauth/package.json b/node_modules/oauth/package.json
new file mode 100644
index 0000000..a5202fe
--- /dev/null
+++ b/node_modules/oauth/package.json
@@ -0,0 +1,53 @@
+{
+  "_from": "oauth@0.9.x",
+  "_id": "oauth@0.9.15",
+  "_inBundle": false,
+  "_integrity": "sha1-vR/vr2hslrdUda7VGWQS/2DPucE=",
+  "_location": "/oauth",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "range",
+    "registry": true,
+    "raw": "oauth@0.9.x",
+    "name": "oauth",
+    "escapedName": "oauth",
+    "rawSpec": "0.9.x",
+    "saveSpec": null,
+    "fetchSpec": "0.9.x"
+  },
+  "_requiredBy": [
+    "/passport-oauth2"
+  ],
+  "_resolved": "https://registry.npmjs.org/oauth/-/oauth-0.9.15.tgz",
+  "_shasum": "bd1fefaf686c96b75475aed5196412ff60cfb9c1",
+  "_spec": "oauth@0.9.x",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge\\node_modules\\passport-oauth2",
+  "author": {
+    "name": "Ciaran Jessup",
+    "email": "ciaranj@gmail.com"
+  },
+  "bugs": {
+    "url": "https://github.com/ciaranj/node-oauth/issues"
+  },
+  "bundleDependencies": false,
+  "deprecated": false,
+  "description": "Library for interacting with OAuth 1.0, 1.0A, 2 and Echo.  Provides simplified client access and allows for construction of more complex apis and OAuth providers.",
+  "devDependencies": {
+    "vows": "0.5.x"
+  },
+  "directories": {
+    "lib": "./lib"
+  },
+  "homepage": "https://github.com/ciaranj/node-oauth#readme",
+  "license": "MIT",
+  "main": "index.js",
+  "name": "oauth",
+  "repository": {
+    "type": "git",
+    "url": "git+ssh://git@github.com/ciaranj/node-oauth.git"
+  },
+  "scripts": {
+    "test": "make test"
+  },
+  "version": "0.9.15"
+}
diff --git a/node_modules/oauth/tests/oauth2tests.js b/node_modules/oauth/tests/oauth2tests.js
new file mode 100644
index 0000000..8be23e3
--- /dev/null
+++ b/node_modules/oauth/tests/oauth2tests.js
@@ -0,0 +1,304 @@
+var vows = require('vows'),
+    assert = require('assert'),
+    DummyResponse= require('./shared').DummyResponse,
+    DummyRequest= require('./shared').DummyRequest,
+    https = require('https'),
+    OAuth2= require('../lib/oauth2').OAuth2,
+    url = require('url');
+
+vows.describe('OAuth2').addBatch({
+    'Given an OAuth2 instance with clientId and clientSecret, ': {
+      topic: new OAuth2("clientId", "clientSecret"),
+      'When dealing with the response from the OP': {
+        'we should treat a 201 response as a success': function(oa) {
+          var callbackCalled= false;
+          var http_library= {
+            request: function() {
+              return new DummyRequest(new DummyResponse(201));
+            }
+          };
+          oa._executeRequest( http_library, {}, null, function(err, result, response) {
+            callbackCalled= true;
+            assert.equal(err, null);
+          });
+          assert.ok(callbackCalled);
+        },
+        'we should treat a 200 response as a success': function(oa) {
+          var callbackCalled= false;
+          var http_library= {
+            request: function() {
+              return new DummyRequest(new DummyResponse(200));
+            }
+          };
+          oa._executeRequest( http_library, {}, null, function(err, result, response) {
+            callbackCalled= true;
+            assert.equal(err, null);
+          });
+          assert.ok(callbackCalled);
+        }
+      },
+      'When handling the access token response': {
+        'we should correctly extract the token if received as form-data': function (oa) {
+            oa._request= function( method, url, fo, bar, bleh, callback) {
+              callback(null, "access_token=access&refresh_token=refresh");
+            };
+            oa.getOAuthAccessToken("", {}, function(error, access_token, refresh_token) {
+              assert.equal( access_token, "access");
+              assert.equal( refresh_token, "refresh");
+            });
+        },
+        'we should not include access token in both querystring and headers (favours headers if specified)': function (oa) {
+            oa._request = new OAuth2("clientId", "clientSecret")._request.bind(oa);
+            oa._executeRequest= function( http_library, options, post_body, callback) {
+              callback(null, url.parse(options.path, true).query, options.headers);
+            };
+
+            oa._request("GET", "http://foo/", {"Authorization":"Bearer BadNews"}, null, "accessx",  function(error, query, headers) {
+              assert.ok( !('access_token' in query), "access_token also in query");
+              assert.ok( 'Authorization' in headers, "Authorization not in headers");
+            });
+        },
+        'we should include access token in the querystring if no Authorization header present to override it': function (oa) {
+           oa._request = new OAuth2("clientId", "clientSecret")._request.bind(oa);
+           oa._executeRequest= function( http_library, options, post_body, callback) {
+             callback(null, url.parse(options.path, true).query, options.headers);
+           };
+           oa._request("GET", "http://foo/", {}, null, "access",  function(error, query, headers) {
+             assert.ok( 'access_token' in query, "access_token not present in query");
+              assert.ok( !('Authorization' in headers), "Authorization in headers");
+            });
+        },
+        'we should correctly extract the token if received as a JSON literal': function (oa) {
+          oa._request= function(method, url, headers, post_body, access_token, callback) {
+            callback(null, '{"access_token":"access","refresh_token":"refresh"}');
+          };
+          oa.getOAuthAccessToken("", {}, function(error, access_token, refresh_token) {
+            assert.equal( access_token, "access");
+            assert.equal( refresh_token, "refresh");
+          });
+        },
+        'we should return the received data to the calling method': function (oa) {
+          oa._request= function(method, url, headers, post_body, access_token, callback) {
+            callback(null, '{"access_token":"access","refresh_token":"refresh","extra_1":1, "extra_2":"foo"}');
+          };
+          oa.getOAuthAccessToken("", {}, function(error, access_token, refresh_token, results) {
+            assert.equal( access_token, "access");
+            assert.equal( refresh_token, "refresh");
+            assert.isNotNull( results );
+            assert.equal( results.extra_1, 1);
+            assert.equal( results.extra_2, "foo");
+          });
+        }
+      },
+      'When no grant_type parameter is specified': {
+        'we should pass the value of the code argument as the code parameter': function(oa) {
+          oa._request= function(method, url, headers, post_body, access_token, callback) {
+            assert.isTrue( post_body.indexOf("code=xsds23") != -1 );
+          };
+          oa.getOAuthAccessToken("xsds23", {} );
+        }
+      },
+      'When an invalid grant_type parameter is specified': {
+        'we should pass the value of the code argument as the code parameter': function(oa) {
+          oa._request= function(method, url, headers, post_body, access_token, callback) {
+            assert.isTrue( post_body.indexOf("code=xsds23") != -1 );
+          };
+          oa.getOAuthAccessToken("xsds23", {grant_type:"refresh_toucan"} );
+        }
+      },
+      'When a grant_type parameter of value "refresh_token" is specified': {
+        'we should pass the value of the code argument as the refresh_token parameter, should pass a grant_type parameter, but shouldn\'t pass a code parameter' : function(oa) {
+          oa._request= function(method, url, headers, post_body, access_token, callback) {
+            assert.isTrue( post_body.indexOf("refresh_token=sdsds2") != -1 );
+            assert.isTrue( post_body.indexOf("grant_type=refresh_token") != -1 );
+            assert.isTrue( post_body.indexOf("code=") == -1 );
+          };
+          oa.getOAuthAccessToken("sdsds2", {grant_type:"refresh_token"} );
+        }
+      },
+      'When we use the authorization header': {
+        'and call get with the default authorization method': {
+          'we should pass the authorization header with Bearer method and value of the access_token, _request should be passed a null access_token' : function(oa) {
+            oa._request= function(method, url, headers, post_body, access_token, callback) {
+              assert.equal(headers["Authorization"], "Bearer abcd5");
+              assert.isNull( access_token );
+            };
+            oa.useAuthorizationHeaderforGET(true);
+            oa.get("", "abcd5");
+          }
+        },
+        'and call get with the authorization method set to Basic': {
+          'we should pass the authorization header with Basic method and value of the access_token, _request should be passed a null access_token' : function(oa) {
+            oa._request= function(method, url, headers, post_body, access_token, callback) {
+              assert.equal(headers["Authorization"], "Basic cdg2");
+              assert.isNull( access_token );
+            };
+            oa.useAuthorizationHeaderforGET(true);
+            oa.setAuthMethod("Basic");
+            oa.get("", "cdg2");
+          }
+        }
+      },
+      'When we do not use the authorization header': {
+        'and call get': {
+          'we should pass NOT provide an authorization header and the access_token should be being passed to _request' : function(oa) {
+            oa._request= function(method, url, headers, post_body, access_token, callback) {
+              assert.isUndefined(headers["Authorization"]);
+              assert.equal( access_token, "abcd5" );
+            };
+            oa.useAuthorizationHeaderforGET(false);
+            oa.get("", "abcd5");
+          }
+        }
+      }
+    },
+    'Given an OAuth2 instance with clientId, clientSecret and customHeaders': {
+      topic: new OAuth2("clientId", "clientSecret", undefined, undefined, undefined,
+          { 'SomeHeader': '123' }),
+      'When GETing': {
+        'we should see the custom headers mixed into headers property in options passed to http-library' : function(oa) {
+          oa._executeRequest= function( http_library, options, callback ) {
+            assert.equal(options.headers["SomeHeader"], "123");
+          };
+          oa.get("", {});
+        },
+      }
+    },
+    'Given an OAuth2 instance with a clientId and clientSecret': {
+      topic: new OAuth2("clientId", "clientSecret"),
+        'When POSTing': {
+          'we should see a given string being sent to the request' : function(oa) {
+            var bodyWritten= false;
+            oa._chooseHttpLibrary= function() {
+              return {
+                request: function(options) {
+                  assert.equal(options.headers["Content-Type"], "text/plain");
+                  assert.equal(options.headers["Content-Length"], 26);
+                  assert.equal(options.method, "POST");
+                  return  {
+                    end: function() {},
+                    on: function() {},
+                    write: function(body) {
+                      bodyWritten= true;
+                      assert.isNotNull(body);
+                      assert.equal(body, "THIS_IS_A_POST_BODY_STRING")
+                    }
+                  }
+                }
+              };
+            }
+            oa._request("POST", "", {"Content-Type":"text/plain"}, "THIS_IS_A_POST_BODY_STRING");
+            assert.ok( bodyWritten );
+          },
+          'we should see a given buffer being sent to the request' : function(oa) {
+            var bodyWritten= false;
+            oa._chooseHttpLibrary= function() {
+              return {
+                request: function(options) {
+                  assert.equal(options.headers["Content-Type"], "application/octet-stream");
+                  assert.equal(options.headers["Content-Length"], 4);
+                  assert.equal(options.method, "POST");
+                  return  {
+                    end: function() {},
+                    on: function() {},
+                    write: function(body) {
+                      bodyWritten= true;
+                      assert.isNotNull(body);
+                      assert.equal(4, body.length)
+                    }
+                  }
+                }
+              };
+            }
+            oa._request("POST", "", {"Content-Type":"application/octet-stream"}, new Buffer([1,2,3,4]));
+            assert.ok( bodyWritten );
+          }
+        },
+        'When PUTing': {
+          'we should see a given string being sent to the request' : function(oa) {
+            var bodyWritten= false;
+            oa._chooseHttpLibrary= function() {
+              return {
+                request: function(options) {
+                  assert.equal(options.headers["Content-Type"], "text/plain");
+                  assert.equal(options.headers["Content-Length"], 25);
+                  assert.equal(options.method, "PUT");
+                  return  {
+                    end: function() {},
+                    on: function() {},
+                    write: function(body) {
+                      bodyWritten= true;
+                      assert.isNotNull(body);
+                      assert.equal(body, "THIS_IS_A_PUT_BODY_STRING")
+                    }
+                  }
+                }
+              };
+            }
+            oa._request("PUT", "", {"Content-Type":"text/plain"}, "THIS_IS_A_PUT_BODY_STRING");
+            assert.ok( bodyWritten );
+          },
+          'we should see a given buffer being sent to the request' : function(oa) {
+            var bodyWritten= false;
+            oa._chooseHttpLibrary= function() {
+              return {
+                request: function(options) {
+                  assert.equal(options.headers["Content-Type"], "application/octet-stream");
+                  assert.equal(options.headers["Content-Length"], 4);
+                  assert.equal(options.method, "PUT");
+                  return  {
+                    end: function() {},
+                    on: function() {},
+                    write: function(body) {
+                      bodyWritten= true;
+                      assert.isNotNull(body);
+                      assert.equal(4, body.length)
+                    }
+                  }
+                }
+              };
+            }
+            oa._request("PUT", "", {"Content-Type":"application/octet-stream"}, new Buffer([1,2,3,4]));
+            assert.ok( bodyWritten );
+          }
+        }
+    },
+    'When the user passes in the User-Agent in customHeaders': {
+      topic: new OAuth2("clientId", "clientSecret", undefined, undefined, undefined,
+          { 'User-Agent': '123Agent' }),
+      'When calling get': {
+        'we should see the User-Agent mixed into headers property in options passed to http-library' : function(oa) {
+          oa._executeRequest= function( http_library, options, callback ) {
+            assert.equal(options.headers["User-Agent"], "123Agent");
+          };
+          oa.get("", {});
+        }
+      }
+    },
+    'When the user does not pass in a User-Agent in customHeaders': {
+      topic: new OAuth2("clientId", "clientSecret", undefined, undefined, undefined,
+        undefined),
+      'When calling get': {
+        'we should see the default User-Agent mixed into headers property in options passed to http-library' : function(oa) {
+          oa._executeRequest= function( http_library, options, callback ) {
+            assert.equal(options.headers["User-Agent"], "Node-oauth");
+            };
+          oa.get("", {});
+        }
+      }
+    },
+    'When specifying an agent, that agent is passed to the HTTP request method' : {
+      topic : new OAuth2('clientId', 'clientSecret', undefined, undefined, undefined, undefined),
+      'When calling _executeRequest': {
+        'we whould see the agent being put into the options' : function(oa) {
+          oa.setAgent('awesome agent');
+          oa._executeRequest({
+            request : function(options, cb) {
+              assert.equal(options.agent, 'awesome agent');
+              return new DummyRequest(new DummyResponse(200));
+            }
+          }, {}, null, function() {});
+        }
+      }
+    }
+}).export(module);
diff --git a/node_modules/oauth/tests/oauthtests.js b/node_modules/oauth/tests/oauthtests.js
new file mode 100644
index 0000000..d36bfed
--- /dev/null
+++ b/node_modules/oauth/tests/oauthtests.js
@@ -0,0 +1,1064 @@
+var vows = require('vows'),
+    assert = require('assert'),
+    DummyResponse= require('./shared').DummyResponse,
+    DummyRequest= require('./shared').DummyRequest,
+    events = require('events'),
+    OAuth= require('../lib/oauth').OAuth,
+    OAuthEcho= require('../lib/oauth').OAuthEcho,
+    crypto = require('crypto');
+
+//Valid RSA keypair used to test RSA-SHA1 signature method
+var RsaPrivateKey = "-----BEGIN RSA PRIVATE KEY-----\n" +
+"MIICXQIBAAKBgQDizE4gQP5nPQhzof/Vp2U2DDY3UY/Gxha2CwKW0URe7McxtnmE\n" +
+"CrZnT1n/YtfrrCNxY5KMP4o8hMrxsYEe05+1ZGFT68ztms3puUxilU5E3BQMhz1t\n" +
+"JMJEGcTt8nZUlM4utli7fHgDtWbhvqvYjRMGn3AjyLOfY8XZvnFkGjipvQIDAQAB\n" +
+"AoGAKgk6FcpWHOZ4EY6eL4iGPt1Gkzw/zNTcUsN5qGCDLqDuTq2Gmk2t/zn68VXt\n" +
+"tVXDf/m3qN0CDzOBtghzaTZKLGhnSewQ98obMWgPcvAsb4adEEeW1/xigbMiaW2X\n" +
+"cu6GhZxY16edbuQ40LRrPoVK94nXQpj8p7w4IQ301Sm8PSECQQD1ZlOj4ugvfhEt\n" +
+"exi4WyAaM45fylmN290UXYqZ8SYPI/VliDytIlMfyq5Rv+l+dud1XDPrWOQ0ImgV\n" +
+"HJn7uvoZAkEA7JhHNmHF9dbdF9Koj86K2Cl6c8KUu7U7d2BAuB6pPkt8+D8+y4St\n" +
+"PaCmN4oP4X+sf5rqBYoXywHlqEei2BdpRQJBAMYgR4cZu7wcXGIL8HlnmROObHSK\n" +
+"OqN9z5CRtUV0nPW8YnQG+nYOMG6KhRMbjri750OpnYF100kEPmRNI0VKQIECQE8R\n" +
+"fQsRleTYz768ahTVQ9WF1ySErMwmfx8gDcD6jjkBZVxZVpURXAwyehopi7Eix/VF\n" +
+"QlxjkBwKIEQi3Ks297kCQQCL9by1bueKDMJO2YX1Brm767pkDKkWtGfPS+d3xMtC\n" +
+"KJHHCqrS1V+D5Q89x5wIRHKxE5UMTc0JNa554OxwFORX\n" +
+"-----END RSA PRIVATE KEY-----";
+
+var RsaPublicKey = "-----BEGIN PUBLIC KEY-----\n" +
+"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDizE4gQP5nPQhzof/Vp2U2DDY3\n" +
+"UY/Gxha2CwKW0URe7McxtnmECrZnT1n/YtfrrCNxY5KMP4o8hMrxsYEe05+1ZGFT\n" +
+"68ztms3puUxilU5E3BQMhz1tJMJEGcTt8nZUlM4utli7fHgDtWbhvqvYjRMGn3Aj\n" +
+"yLOfY8XZvnFkGjipvQIDAQAB\n" +
+"-----END PUBLIC KEY-----";
+
+vows.describe('OAuth').addBatch({
+    'When newing OAuth': {
+      topic: new OAuth(null, null, null, null, null, null, "PLAINTEXT"),
+      'followRedirects is enabled by default': function (oa) {
+        assert.equal(oa._clientOptions.followRedirects, true)
+      }
+    },
+    'When generating the signature base string described in http://oauth.net/core/1.0/#sig_base_example': {
+        topic: new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+        'we get the expected result string': function (oa) {
+          var result= oa._createSignatureBase("GET", "http://photos.example.net/photos",
+                                              "file=vacation.jpg&oauth_consumer_key=dpf43f3p2l4k3l03&oauth_nonce=kllo9940pd9333jh&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1191242096&oauth_token=nnch734d00sl2jdk&oauth_version=1.0&size=original")
+          assert.equal( result, "GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal");
+        }
+    },
+    'When generating the signature with RSA-SHA1': {
+        topic: new OAuth(null, null, null, RsaPrivateKey, null, null, "RSA-SHA1"),
+        'we get a valid oauth signature': function (oa) {
+            var signatureBase = "GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DRSA-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal";
+            var oauthSignature = oa._createSignature(signatureBase, "xyz4992k83j47x0b");
+            
+            assert.equal( oauthSignature, "qS4rhWog7GPgo4ZCJvUdC/1ZAax/Q4Ab9yOBvgxSopvmKUKp5rso+Zda46GbyN2hnYDTiA/g3P/d/YiPWa454BEBb/KWFV83HpLDIoqUUhJnlXX9MqRQQac0oeope4fWbGlfTdL2PXjSFJmvfrzybERD/ZufsFtVrQKS3QBpYiw=");
+            
+            //now check that given the public key we can verify this signature
+            var verifier = crypto.createVerify("RSA-SHA1").update(signatureBase);
+            var valid = verifier.verify(RsaPublicKey, oauthSignature, 'base64');
+            assert.ok( valid, "Signature could not be verified with RSA public key");
+        }
+    },
+    'When generating the signature base string with PLAINTEXT': {
+        topic: new OAuth(null, null, null, null, null, null, "PLAINTEXT"),
+        'we get the expected result string': function (oa) {
+          var result= oa._getSignature("GET", "http://photos.example.net/photos",
+                                              "file=vacation.jpg&oauth_consumer_key=dpf43f3p2l4k3l03&oauth_nonce=kllo9940pd9333jh&oauth_signature_method=PLAINTEXT&oauth_timestamp=1191242096&oauth_token=nnch734d00sl2jdk&oauth_version=1.0&size=original",
+                                              "test");
+          assert.equal( result, "&test");
+        }
+    },
+    'When normalising a url': {
+      topic: new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+      'default ports should be stripped': function(oa) {
+        assert.equal( oa._normalizeUrl("https://somehost.com:443/foo/bar"), "https://somehost.com/foo/bar" );
+      },
+      'should leave in non-default ports from urls for use in signature generation': function(oa) {
+        assert.equal( oa._normalizeUrl("https://somehost.com:446/foo/bar"), "https://somehost.com:446/foo/bar" );
+        assert.equal( oa._normalizeUrl("http://somehost.com:81/foo/bar"), "http://somehost.com:81/foo/bar" );
+      },
+      'should add a trailing slash when no path at all is present': function(oa) {
+        assert.equal( oa._normalizeUrl("http://somehost.com"),  "http://somehost.com/")
+      }
+    },
+    'When making an array out of the arguments hash' : {
+      topic: new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+      'flatten out arguments that are arrays' : function(oa) {
+        var parameters= {"z": "a",
+                      "a": ["1", "2"],
+                      "1": "c" };
+        var parameterResults= oa._makeArrayOfArgumentsHash(parameters);
+        assert.equal(parameterResults.length, 4);
+        assert.equal(parameterResults[0][0], "1");
+        assert.equal(parameterResults[1][0], "z");
+        assert.equal(parameterResults[2][0], "a");
+        assert.equal(parameterResults[3][0], "a");
+      }
+    },
+    'When ordering the request parameters'  : {
+      topic: new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+      'Order them by name' : function(oa) {
+        var parameters= {"z": "a",
+                      "a": "b",
+                      "1": "c" };
+        var parameterResults= oa._sortRequestParams(oa._makeArrayOfArgumentsHash(parameters))
+        assert.equal(parameterResults[0][0], "1");
+        assert.equal(parameterResults[1][0], "a");
+        assert.equal(parameterResults[2][0], "z");
+      },
+      'If two parameter names are the same then order by the value': function(oa) {
+        var parameters= {"z": "a",
+                      "a": ["z", "b", "b", "a", "y"],
+                      "1": "c" };
+        var parameterResults= oa._sortRequestParams(oa._makeArrayOfArgumentsHash(parameters))
+        assert.equal(parameterResults[0][0], "1");
+        assert.equal(parameterResults[1][0], "a");
+        assert.equal(parameterResults[1][1], "a");
+        assert.equal(parameterResults[2][0], "a");
+        assert.equal(parameterResults[2][1], "b");
+        assert.equal(parameterResults[3][0], "a");
+        assert.equal(parameterResults[3][1], "b");
+        assert.equal(parameterResults[4][0], "a");
+        assert.equal(parameterResults[4][1], "y");
+        assert.equal(parameterResults[5][0], "a");
+        assert.equal(parameterResults[5][1], "z");
+        assert.equal(parameterResults[6][0], "z");
+      }
+    },
+    'When normalising the request parameters': {
+      topic: new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+      'the resulting parameters should be encoded and ordered as per http://tools.ietf.org/html/rfc5849#section-3.1 (3.4.1.3.2)' : function(oa) {
+        var parameters= {"b5" : "=%3D",
+          "a3": ["a", "2 q"],
+          "c@": "",
+          "a2": "r b",
+          "oauth_consumer_key": "9djdj82h48djs9d2",
+          "oauth_token":"kkk9d7dh3k39sjv7",
+          "oauth_signature_method": "HMAC-SHA1",
+          "oauth_timestamp": "137131201",
+          "oauth_nonce": "7d8f3e4a",
+          "c2" :  ""};
+        var normalisedParameterString= oa._normaliseRequestParams(parameters);
+        assert.equal(normalisedParameterString, "a2=r%20b&a3=2%20q&a3=a&b5=%3D%253D&c%40=&c2=&oauth_consumer_key=9djdj82h48djs9d2&oauth_nonce=7d8f3e4a&oauth_signature_method=HMAC-SHA1&oauth_timestamp=137131201&oauth_token=kkk9d7dh3k39sjv7");
+      }
+    },
+    'When preparing the parameters for use in signing': {
+      topic: new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+      'We need to be wary of node\'s auto object creation from foo[bar] style url parameters' : function(oa) {
+        var result= oa._prepareParameters( "", "", "", "http://foo.com?foo[bar]=xxx&bar[foo]=yyy", {} );
+        assert.equal( result[0][0], "bar[foo]")
+        assert.equal( result[0][1], "yyy")
+        assert.equal( result[1][0], "foo[bar]")
+        assert.equal( result[1][1], "xxx")
+      }
+    },
+    'When signing a url': {
+      topic: function() {
+        var oa= new OAuth(null, null, "consumerkey", "consumersecret", "1.0", null, "HMAC-SHA1");
+        oa._getTimestamp= function(){ return "1272399856"; }
+        oa._getNonce= function(){ return "ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp"; }
+        return oa;
+      },
+      'Provide a valid signature when no token present': function(oa) {
+        assert.equal( oa.signUrl("http://somehost.com:3323/foo/poop?bar=foo"), "http://somehost.com:3323/foo/poop?bar=foo&oauth_consumer_key=consumerkey&oauth_nonce=ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1272399856&oauth_version=1.0&oauth_signature=7ytO8vPSLut2GzHjU9pn1SV9xjc%3D");
+      },
+      'Provide a valid signature when a token is present': function(oa) {
+        assert.equal( oa.signUrl("http://somehost.com:3323/foo/poop?bar=foo", "token"), "http://somehost.com:3323/foo/poop?bar=foo&oauth_consumer_key=consumerkey&oauth_nonce=ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1272399856&oauth_token=token&oauth_version=1.0&oauth_signature=9LwCuCWw5sURtpMroIolU3YwsdI%3D");
+      },
+      'Provide a valid signature when a token and a token secret is present': function(oa) {
+        assert.equal( oa.signUrl("http://somehost.com:3323/foo/poop?bar=foo", "token", "tokensecret"), "http://somehost.com:3323/foo/poop?bar=foo&oauth_consumer_key=consumerkey&oauth_nonce=ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1272399856&oauth_token=token&oauth_version=1.0&oauth_signature=zeOR0Wsm6EG6XSg0Vw%2FsbpoSib8%3D");
+      }
+    },
+    'When getting a request token': {
+        topic: function() {
+          var oa= new OAuth(null, null, "consumerkey", "consumersecret", "1.0", null, "HMAC-SHA1");
+          oa._getTimestamp= function(){ return "1272399856"; }
+          oa._getNonce= function(){ return "ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp"; }
+          oa._performSecureRequest= function(){ return this.requestArguments = arguments; }
+          return oa;
+        },
+        'Use the HTTP method in the client options': function(oa) {
+          oa.setClientOptions({ requestTokenHttpMethod: "GET" });
+          oa.getOAuthRequestToken(function() {});
+          assert.equal(oa.requestArguments[2], "GET");
+        },
+        'Use a POST by default': function(oa) {
+          oa.setClientOptions({});
+          oa.getOAuthRequestToken(function() {});
+          assert.equal(oa.requestArguments[2], "POST");
+        }
+    },
+    'When getting an access token': {
+        topic: function() {
+          var oa= new OAuth(null, null, "consumerkey", "consumersecret", "1.0", null, "HMAC-SHA1");
+          oa._getTimestamp= function(){ return "1272399856"; }
+          oa._getNonce= function(){ return "ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp"; }
+          oa._performSecureRequest= function(){ return this.requestArguments = arguments; }
+          return oa;
+        },
+        'Use the HTTP method in the client options': function(oa) {
+          oa.setClientOptions({ accessTokenHttpMethod: "GET" });
+          oa.getOAuthAccessToken(function() {});
+          assert.equal(oa.requestArguments[2], "GET");
+        },
+        'Use a POST by default': function(oa) {
+          oa.setClientOptions({});
+          oa.getOAuthAccessToken(function() {});
+          assert.equal(oa.requestArguments[2], "POST");
+        }
+    },
+    'When get authorization header' : {
+        topic: function() {
+          var oa= new OAuth(null, null, "consumerkey", "consumersecret", "1.0", null, "HMAC-SHA1");
+          oa._getTimestamp= function(){ return "1272399856"; }
+          oa._getNonce= function(){ return "ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp"; }
+          return oa;
+        },
+        'Provide a valid signature when a token and a token secret is present': function(oa) {
+          assert.equal( oa.authHeader("http://somehost.com:3323/foo/poop?bar=foo", "token", "tokensecret"), 'OAuth oauth_consumer_key="consumerkey",oauth_nonce="ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1272399856",oauth_token="token",oauth_version="1.0",oauth_signature="zeOR0Wsm6EG6XSg0Vw%2FsbpoSib8%3D"');
+        },
+        'Support variable whitespace separating the arguments': function(oa) {
+            oa._oauthParameterSeperator= ", ";
+            assert.equal( oa.authHeader("http://somehost.com:3323/foo/poop?bar=foo", "token", "tokensecret"), 'OAuth oauth_consumer_key="consumerkey", oauth_nonce="ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp", oauth_signature_method="HMAC-SHA1", oauth_timestamp="1272399856", oauth_token="token", oauth_version="1.0", oauth_signature="zeOR0Wsm6EG6XSg0Vw%2FsbpoSib8%3D"');
+        }
+    },
+    'When get the OAuth Echo authorization header': {
+      topic: function () {
+        var realm = "http://foobar.com/";
+        var verifyCredentials = "http://api.foobar.com/verify.json";
+        var oa = new OAuthEcho(realm, verifyCredentials, "consumerkey", "consumersecret", "1.0A", "HMAC-SHA1");
+        oa._getTimestamp= function(){ return "1272399856"; }
+        oa._getNonce= function(){ return "ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp"; }
+        return oa;
+      },
+      'Provide a valid signature when a token and token secret is present': function (oa) {
+        assert.equal( oa.authHeader("http://somehost.com:3323/foo/poop?bar=foo", "token", "tokensecret"), 'OAuth realm="http://foobar.com/",oauth_consumer_key="consumerkey",oauth_nonce="ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1272399856",oauth_token="token",oauth_version="1.0A",oauth_signature="0rr1LhSxACX2IEWRq3uCb4IwtOs%3D"');
+      }
+    },
+    'When non standard ports are used': {
+        topic: function() {
+          var oa= new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+          mockProvider= {};
+
+          oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+            assert.equal(headers.Host, "somehost.com:8080");
+            assert.equal(hostname, "somehost.com");
+            assert.equal(port, "8080");
+            return {
+              on: function() {},
+              end: function() {}
+            };
+          }
+          return oa;
+        },
+        'getProtectedResource should correctly define the host headers': function(oa) {
+          oa.getProtectedResource("http://somehost.com:8080", "GET", "oauth_token", null, function(){})
+        }
+    },
+    'When building the OAuth Authorization header': {
+      topic: new OAuth(null, null, null, null, null, null, "HMAC-SHA1"),
+      'All provided oauth arguments should be concatentated correctly' : function(oa) {
+       var parameters= [
+          ["oauth_timestamp",         "1234567"],
+          ["oauth_nonce",             "ABCDEF"],
+          ["oauth_version",           "1.0"],
+          ["oauth_signature_method",  "HMAC-SHA1"],
+          ["oauth_consumer_key",      "asdasdnm2321b3"]];
+        assert.equal(oa._buildAuthorizationHeaders(parameters), 'OAuth oauth_timestamp="1234567",oauth_nonce="ABCDEF",oauth_version="1.0",oauth_signature_method="HMAC-SHA1",oauth_consumer_key="asdasdnm2321b3"');
+      },
+      '*Only* Oauth arguments should be concatentated, others should be disregarded' : function(oa) {
+       var parameters= [
+          ["foo",         "2343"],
+          ["oauth_timestamp",         "1234567"],
+          ["oauth_nonce",             "ABCDEF"],
+          ["bar",             "dfsdfd"],
+          ["oauth_version",           "1.0"],
+          ["oauth_signature_method",  "HMAC-SHA1"],
+          ["oauth_consumer_key",      "asdasdnm2321b3"],
+          ["foobar",      "asdasdnm2321b3"]];
+        assert.equal(oa._buildAuthorizationHeaders(parameters), 'OAuth oauth_timestamp="1234567",oauth_nonce="ABCDEF",oauth_version="1.0",oauth_signature_method="HMAC-SHA1",oauth_consumer_key="asdasdnm2321b3"');
+      },
+      '_buildAuthorizationHeaders should not depends on Array.prototype.toString' : function(oa) {
+       var _toString = Array.prototype.toString;
+       Array.prototype.toString = function(){ return '[Array] ' + this.length; }; // toString overwrite example used in jsdom.
+       var parameters= [
+          ["foo",         "2343"],
+          ["oauth_timestamp",         "1234567"],
+          ["oauth_nonce",             "ABCDEF"],
+          ["bar",             "dfsdfd"],
+          ["oauth_version",           "1.0"],
+          ["oauth_signature_method",  "HMAC-SHA1"],
+          ["oauth_consumer_key",      "asdasdnm2321b3"],
+          ["foobar",      "asdasdnm2321b3"]];
+        assert.equal(oa._buildAuthorizationHeaders(parameters), 'OAuth oauth_timestamp="1234567",oauth_nonce="ABCDEF",oauth_version="1.0",oauth_signature_method="HMAC-SHA1",oauth_consumer_key="asdasdnm2321b3"');
+       Array.prototype.toString = _toString;
+      }
+    },
+    'When performing the Secure Request' : {
+      topic: new OAuth("http://foo.com/RequestToken",
+                       "http://foo.com/AccessToken",
+                       "anonymous",  "anonymous",
+                       "1.0A", "http://foo.com/callback", "HMAC-SHA1"),
+      'using the POST method' : {
+        'Any passed extra_params should form part of the POST body': function(oa) {
+          var post_body_written= false;
+          var op= oa._createClient;
+          try {
+            oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+              return {
+                write: function(post_body){
+                  post_body_written= true;
+                  assert.equal(post_body,"scope=foobar%2C1%2C2");
+                }
+              };
+            }
+            oa._performSecureRequest("token", "token_secret", 'POST', 'http://foo.com/protected_resource', {"scope": "foobar,1,2"});
+            assert.equal(post_body_written, true);
+          }
+          finally {
+            oa._createClient= op;
+          }
+        }
+      }
+    },
+    'When performing a secure' : {
+      topic: new OAuth("http://foo.com/RequestToken",
+                       "http://foo.com/AccessToken",
+                       "anonymous",  "anonymous",
+                       "1.0A", "http://foo.com/callback", "HMAC-SHA1"),
+      'POST' : {
+        'if no callback is passed' : {
+          'it should return a request object': function(oa) {
+            var request= oa.post("http://foo.com/blah", "token", "token_secret", "BLAH", "text/plain")
+            assert.isObject(request);
+            assert.equal(request.method, "POST");
+            request.end();
+          }
+        },
+        'if a callback is passed' : {
+          "it should call the internal request's end method and return nothing": function(oa) {
+            var callbackCalled= false;
+            var op= oa._createClient;
+            try {
+              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                return {
+                  write: function(){},
+                  on: function() {},
+                  end: function() {
+                    callbackCalled= true;
+                  }
+                };
+              }
+              var request= oa.post("http://foo.com/blah", "token", "token_secret", "BLAH", "text/plain", function(e,d){})
+              assert.equal(callbackCalled, true);
+              assert.isUndefined(request);
+            }
+            finally {
+              oa._createClient= op;
+            }
+          }
+        },
+        'if the post_body is a buffer' : {
+          "It should be passed through as is, and the original content-type (if specified) should be passed through": function(oa) {
+            var op= oa._createClient;
+            try {
+              var callbackCalled= false;
+              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                assert.equal(headers["Content-Type"], "image/jpeg")
+                return {
+                  write: function(data){
+                    callbackCalled= true;
+                    assert.equal(data.length, 4);
+                  },
+                  on: function() {},
+                  end: function() {
+                  }
+                };
+              }
+              var request= oa.post("http://foo.com/blah", "token", "token_secret", new Buffer([10,20,30,40]), "image/jpeg")
+              assert.equal(callbackCalled, true);
+            }
+            finally {
+              oa._createClient= op;
+            }
+          },
+          "It should be passed through as is, and no content-type is specified.": function(oa) {
+            //Should probably actually set application/octet-stream, but to avoid a change in behaviour
+            // will just document (here) that the library will set it to application/x-www-form-urlencoded
+            var op= oa._createClient;
+            try {
+              var callbackCalled= false;
+              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                assert.equal(headers["Content-Type"], "application/x-www-form-urlencoded")
+                return {
+                  write: function(data){
+                    callbackCalled= true;
+                    assert.equal(data.length, 4);
+                  },
+                  on: function() {},
+                  end: function() {
+                  }
+                };
+              }
+              var request= oa.post("http://foo.com/blah", "token", "token_secret", new Buffer([10,20,30,40]))
+              assert.equal(callbackCalled, true);
+            }
+            finally {
+              oa._createClient= op;
+            }
+          }
+        },
+        'if the post_body is not a string or a buffer' : {
+          "It should be url encoded and the content type set to be x-www-form-urlencoded" : function(oa) {
+            var op= oa._createClient;
+            try {
+              var callbackCalled= false;
+              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                assert.equal(headers["Content-Type"], "application/x-www-form-urlencoded")
+                return {
+                  write: function(data){
+                    callbackCalled= true;
+                    assert.equal(data, "foo=1%2C2%2C3&bar=1%2B2");
+                  },
+                  on: function() {},
+                  end: function() {
+                  }
+                };
+              }
+              var request= oa.post("http://foo.com/blah", "token", "token_secret", {"foo":"1,2,3", "bar":"1+2"})
+              assert.equal(callbackCalled, true);
+            }
+            finally {
+              oa._createClient= op;
+            }
+          }
+        },
+        'if the post_body is a string' : {
+          "and it contains non ascii (7/8bit) characters" : {
+           "the content length should be the byte count, and not the string length"  : function(oa) {
+             var testString= "Tôi yêu node";
+             var testStringLength= testString.length;
+             var testStringBytesLength= Buffer.byteLength(testString);
+             assert.notEqual(testStringLength, testStringBytesLength); // Make sure we're testing a string that differs between byte-length and char-length!
+
+             var op= oa._createClient;
+             try {
+               var callbackCalled= false;
+               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                 assert.equal(headers["Content-length"], testStringBytesLength);
+                 return {
+                   write: function(data){
+                     callbackCalled= true;
+                     assert.equal(data, testString);
+                   },
+                   on: function() {},
+                   end: function() {
+                   }
+                 };
+                }
+                var request= oa.post("http://foo.com/blah", "token", "token_secret", "Tôi yêu node")
+                assert.equal(callbackCalled, true);
+              }
+              finally {
+                oa._createClient= op;
+              }
+           }
+          },
+          "and no post_content_type is specified" : {
+            "It should be written as is, with a content length specified, and the encoding should be set to be x-www-form-urlencoded" : function(oa) {
+              var op= oa._createClient;
+              try {
+                var callbackCalled= false;
+                oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                  assert.equal(headers["Content-Type"], "application/x-www-form-urlencoded");
+                  assert.equal(headers["Content-length"], 23);
+                  return {
+                    write: function(data){
+                      callbackCalled= true;
+                      assert.equal(data, "foo=1%2C2%2C3&bar=1%2B2");
+                    },
+                    on: function() {},
+                    end: function() {
+                    }
+                  };
+                 }
+                 var request= oa.post("http://foo.com/blah", "token", "token_secret", "foo=1%2C2%2C3&bar=1%2B2")
+                 assert.equal(callbackCalled, true);
+               }
+               finally {
+                 oa._createClient= op;
+               }
+             }
+           },
+           "and a post_content_type is specified" : {
+             "It should be written as is, with a content length specified, and the encoding should be set to be as specified" : function(oa) {
+               var op= oa._createClient;
+               try {
+                 var callbackCalled= false;
+                 oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                   assert.equal(headers["Content-Type"], "unicorn/encoded");
+                   assert.equal(headers["Content-length"], 23);
+                   return {
+                     write: function(data){
+                       callbackCalled= true;
+                       assert.equal(data, "foo=1%2C2%2C3&bar=1%2B2");
+                     },
+                     on: function() {},
+                     end: function() {
+                     }
+                   };
+                  }
+                 var request= oa.post("http://foo.com/blah", "token", "token_secret", "foo=1%2C2%2C3&bar=1%2B2", "unicorn/encoded")
+                 assert.equal(callbackCalled, true);
+               }
+               finally {
+                 oa._createClient= op;
+               }
+             }
+           }
+         }
+       },
+       'GET' : {
+         'if no callback is passed' : {
+           'it should return a request object': function(oa) {
+             var request= oa.get("http://foo.com/blah", "token", "token_secret")
+             assert.isObject(request);
+             assert.equal(request.method, "GET");
+             request.end();
+           }
+         },
+         'if a callback is passed' : {
+           "it should call the internal request's end method and return nothing": function(oa) {
+             var callbackCalled= false;
+             var op= oa._createClient;
+             try {
+               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                 return {
+                   on: function() {},
+                   end: function() {
+                     callbackCalled= true;
+                   }
+                 };
+               }
+               var request= oa.get("http://foo.com/blah", "token", "token_secret", function(e,d) {})
+               assert.equal(callbackCalled, true);
+               assert.isUndefined(request);
+             }
+             finally {
+               oa._createClient= op;
+             }
+           }
+         },
+       },
+       'PUT' : {
+         'if no callback is passed' : {
+           'it should return a request object': function(oa) {
+             var request= oa.put("http://foo.com/blah", "token", "token_secret", "BLAH", "text/plain")
+             assert.isObject(request);
+             assert.equal(request.method, "PUT");
+             request.end();
+           }
+         },
+         'if a callback is passed' : {
+           "it should call the internal request's end method and return nothing": function(oa) {
+             var callbackCalled= 0;
+             var op= oa._createClient;
+             try {
+               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                 return {
+                   on: function() {},
+                   write: function(data) {
+                     callbackCalled++;
+                   },
+                   end: function() {
+                     callbackCalled++;
+                   }
+                 };
+               }
+               var request= oa.put("http://foo.com/blah", "token", "token_secret", "BLAH", "text/plain", function(e,d){})
+               assert.equal(callbackCalled, 2);
+               assert.isUndefined(request);
+             }
+             finally {
+               oa._createClient= op;
+             }
+           }
+         },
+         'if the post_body is a buffer' : {
+           "It should be passed through as is, and the original content-type (if specified) should be passed through": function(oa) {
+             var op= oa._createClient;
+             try {
+               var callbackCalled= false;
+               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                 assert.equal(headers["Content-Type"], "image/jpeg")
+                 return {
+                   write: function(data){
+                     callbackCalled= true;
+                     assert.equal(data.length, 4);
+                   },
+                   on: function() {},
+                   end: function() {
+                   }
+                 };
+               }
+               var request= oa.put("http://foo.com/blah", "token", "token_secret", new Buffer([10,20,30,40]), "image/jpeg")
+               assert.equal(callbackCalled, true);
+             }
+             finally {
+               oa._createClient= op;
+             }
+           },
+           "It should be passed through as is, and no content-type is specified.": function(oa) {
+             //Should probably actually set application/octet-stream, but to avoid a change in behaviour
+             // will just document (here) that the library will set it to application/x-www-form-urlencoded
+             var op= oa._createClient;
+             try {
+               var callbackCalled= false;
+               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                 assert.equal(headers["Content-Type"], "application/x-www-form-urlencoded")
+                 return {
+                   write: function(data){
+                     callbackCalled= true;
+                     assert.equal(data.length, 4);
+                   },
+                   on: function() {},
+                   end: function() {
+                   }
+                 };
+               }
+               var request= oa.put("http://foo.com/blah", "token", "token_secret", new Buffer([10,20,30,40]))
+               assert.equal(callbackCalled, true);
+             }
+             finally {
+               oa._createClient= op;
+             }
+           }
+         },
+         'if the post_body is not a string' : {
+           "It should be url encoded and the content type set to be x-www-form-urlencoded" : function(oa) {
+             var op= oa._createClient;
+             try {
+               var callbackCalled= false;
+               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                 assert.equal(headers["Content-Type"], "application/x-www-form-urlencoded")
+                 return {
+                   write: function(data) {
+                     callbackCalled= true;
+                     assert.equal(data, "foo=1%2C2%2C3&bar=1%2B2");
+                   }
+                 };
+               }
+               var request= oa.put("http://foo.com/blah", "token", "token_secret", {"foo":"1,2,3", "bar":"1+2"})
+               assert.equal(callbackCalled, true);
+             }
+             finally {
+               oa._createClient= op;
+             }
+           }
+         },
+         'if the post_body is a string' : {
+           "and no post_content_type is specified" : {
+             "It should be written as is, with a content length specified, and the encoding should be set to be x-www-form-urlencoded" : function(oa) {
+                var op= oa._createClient;
+                try {
+                  var callbackCalled= false;
+                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                    assert.equal(headers["Content-Type"], "application/x-www-form-urlencoded");
+                    assert.equal(headers["Content-length"], 23);
+                    return {
+                      write: function(data) {
+                        callbackCalled= true;
+                        assert.equal(data, "foo=1%2C2%2C3&bar=1%2B2");
+                      }
+                    };
+                  }
+                  var request= oa.put("http://foo.com/blah", "token", "token_secret", "foo=1%2C2%2C3&bar=1%2B2")
+                  assert.equal(callbackCalled, true);
+                }
+                finally {
+                  oa._createClient= op;
+                }
+              }
+            },
+            "and a post_content_type is specified" : {
+              "It should be written as is, with a content length specified, and the encoding should be set to be as specified" : function(oa) {
+                var op= oa._createClient;
+                try {
+                  var callbackCalled= false;
+                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                    assert.equal(headers["Content-Type"], "unicorn/encoded");
+                    assert.equal(headers["Content-length"], 23);
+                    return {
+                      write: function(data) {
+                         callbackCalled= true;
+                         assert.equal(data, "foo=1%2C2%2C3&bar=1%2B2");
+                       }
+                    };
+                  }
+                  var request= oa.put("http://foo.com/blah", "token", "token_secret", "foo=1%2C2%2C3&bar=1%2B2", "unicorn/encoded")
+                  assert.equal(callbackCalled, true);
+                }
+                finally {
+                  oa._createClient= op;
+                }
+              }
+            }
+          }
+        },
+       'DELETE' : {
+         'if no callback is passed' : {
+           'it should return a request object': function(oa) {
+             var request= oa.delete("http://foo.com/blah", "token", "token_secret")
+             assert.isObject(request);
+             assert.equal(request.method, "DELETE");
+             request.end();
+           }
+         },
+         'if a callback is passed' : {
+           "it should call the internal request's end method and return nothing": function(oa) {
+             var callbackCalled= false;
+             var op= oa._createClient;
+             try {
+               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                 return {
+                   on: function() {},
+                   end: function() {
+                     callbackCalled= true;
+                   }
+                 };
+               }
+               var request= oa.delete("http://foo.com/blah", "token", "token_secret", function(e,d) {})
+               assert.equal(callbackCalled, true);
+               assert.isUndefined(request);
+             }
+             finally {
+               oa._createClient= op;
+             }
+           }
+         }
+       },
+       'Request With a Callback' : {
+          'and a 200 response code is received' : {
+            'it should callback successfully' : function(oa) {
+              var op= oa._createClient;
+              var callbackCalled = false;
+              try {
+                oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                  return new DummyRequest( new DummyResponse(200) );
+                }
+                oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function(error) {
+                  // callback
+                  callbackCalled= true;
+                  assert.equal(error, undefined);
+                });
+                assert.equal(callbackCalled, true)
+              }
+              finally {
+                oa._createClient= op;
+              }
+            }
+          },
+          'and a 210 response code is received' : {
+            'it should callback successfully' : function(oa) {
+              var op= oa._createClient;
+              var callbackCalled = false;
+              try {
+                oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                  return new DummyRequest( new DummyResponse(210) );
+                }
+                oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function(error) {
+                  // callback
+                  callbackCalled= true;
+                  assert.equal(error, undefined);
+                });
+                assert.equal(callbackCalled, true)
+              }
+              finally {
+                oa._createClient= op;
+              }
+            }
+          },
+          'And A 301 redirect is received' : {
+              'and there is a location header' : {
+                'it should (re)perform the secure request but with the new location' : function(oa) {
+                  var op= oa._createClient;
+                  var psr= oa._performSecureRequest;
+                  var responseCounter = 1;
+                  var callbackCalled = false;
+                  var DummyResponse =function() {
+                    if( responseCounter == 1 ){
+                      this.statusCode= 301;
+                      this.headers= {location:"http://redirectto.com"};
+                      responseCounter++;
+                    }
+                    else {
+                      this.statusCode= 200;
+                    }
+                  }
+                  DummyResponse.prototype= events.EventEmitter.prototype;
+                  DummyResponse.prototype.setEncoding= function() {}
+
+                  try {
+                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                      return new DummyRequest( new DummyResponse() );
+                    }
+                    oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {
+                      if( responseCounter == 1 ) {
+                        assert.equal(url, "http://originalurl.com");
+                      }
+                      else {
+                        assert.equal(url, "http://redirectto.com");
+                      }
+                      return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )
+                    }
+
+                    oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function() {
+                      // callback
+                      assert.equal(responseCounter, 2);
+                      callbackCalled= true;
+                    });
+                    assert.equal(callbackCalled, true)
+                  }
+                  finally {
+                    oa._createClient= op;
+                    oa._performSecureRequest= psr;
+                  }
+                }
+              },
+              'but there is no location header' : {
+                'it should execute the callback, passing the HTTP Response code' : function(oa) {
+                  var op= oa._createClient;
+                  var callbackCalled = false;
+                  try {
+                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                      return new DummyRequest( new DummyResponse(301) );
+                    }
+                    oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function(error) {
+                      // callback
+                      assert.equal(error.statusCode, 301);
+                      callbackCalled= true;
+                    });
+                    assert.equal(callbackCalled, true)
+                  }
+                  finally {
+                    oa._createClient= op;
+                  }
+                }
+              },
+              'and followRedirect is true' : {
+                'it should (re)perform the secure request but with the new location' : function(oa) {
+                  var op= oa._createClient;
+                  var psr= oa._performSecureRequest;
+                  var responseCounter = 1;
+                  var callbackCalled = false;
+                  var DummyResponse =function() {
+                    if( responseCounter == 1 ){
+                      this.statusCode= 301;
+                      this.headers= {location:"http://redirectto.com"};
+                      responseCounter++;
+                    }
+                    else {
+                      this.statusCode= 200;
+                    }
+                  }
+                  DummyResponse.prototype= events.EventEmitter.prototype;
+                  DummyResponse.prototype.setEncoding= function() {}
+
+                  try {
+                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                      return new DummyRequest( new DummyResponse() );
+                    }
+                    oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {
+                      if( responseCounter == 1 ) {
+                        assert.equal(url, "http://originalurl.com");
+                      }
+                      else {
+                        assert.equal(url, "http://redirectto.com");
+                      }
+                      return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )
+                    }
+
+                    oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function() {
+                      // callback
+                      assert.equal(responseCounter, 2);
+                      callbackCalled= true;
+                    });
+                    assert.equal(callbackCalled, true)
+                  }
+                  finally {
+                    oa._createClient= op;
+                    oa._performSecureRequest= psr;
+                  }
+                }
+              },
+              'and followRedirect is false' : {
+                'it should not perform the secure request with the new location' : function(oa) {
+                  var op= oa._createClient;
+                  oa.setClientOptions({ followRedirects: false });
+                  var DummyResponse =function() {
+                      this.statusCode= 301;
+                      this.headers= {location:"http://redirectto.com"};
+                  }
+                  DummyResponse.prototype= events.EventEmitter.prototype;
+                  DummyResponse.prototype.setEncoding= function() {}
+
+                  try {
+                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                      return new DummyRequest( new DummyResponse() );
+                    }
+                    oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function(res, data, response) {
+                      // callback
+                      assert.equal(res.statusCode, 301);
+                    });
+                  }
+                  finally {
+                    oa._createClient= op;
+                    oa.setClientOptions({followRedirects:true});
+                  }
+                }
+              }
+            },
+          'And A 302 redirect is received' : {
+            'and there is a location header' : {
+              'it should (re)perform the secure request but with the new location' : function(oa) {
+                var op= oa._createClient;
+                var psr= oa._performSecureRequest;
+                var responseCounter = 1;
+                var callbackCalled = false;
+                var DummyResponse =function() {
+                  if( responseCounter == 1 ){
+                    this.statusCode= 302;
+                    this.headers= {location:"http://redirectto.com"};
+                    responseCounter++;
+                  }
+                  else {
+                    this.statusCode= 200;
+                  }
+                }
+                DummyResponse.prototype= events.EventEmitter.prototype;
+                DummyResponse.prototype.setEncoding= function() {}
+
+                try {
+                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                    return new DummyRequest( new DummyResponse() );
+                  }
+                  oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {
+                    if( responseCounter == 1 ) {
+                      assert.equal(url, "http://originalurl.com");
+                    }
+                    else {
+                      assert.equal(url, "http://redirectto.com");
+                    }
+                    return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )
+                  }
+
+                  oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function() {
+                    // callback
+                    assert.equal(responseCounter, 2);
+                    callbackCalled= true;
+                  });
+                  assert.equal(callbackCalled, true)
+                }
+                finally {
+                  oa._createClient= op;
+                  oa._performSecureRequest= psr;
+                }
+              }
+            },
+            'but there is no location header' : {
+              'it should execute the callback, passing the HTTP Response code' : function(oa) {
+                var op= oa._createClient;
+                var callbackCalled = false;
+                try {
+                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                    return new DummyRequest( new DummyResponse(302) );
+                  }
+                  oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function(error) {
+                    // callback
+                    assert.equal(error.statusCode, 302);
+                    callbackCalled= true;
+                  });
+                  assert.equal(callbackCalled, true)
+                }
+                finally {
+                  oa._createClient= op;
+                }
+              }
+            },
+            'and followRedirect is true' : {
+                'it should (re)perform the secure request but with the new location' : function(oa) {
+                  var op= oa._createClient;
+                  var psr= oa._performSecureRequest;
+                  var responseCounter = 1;
+                  var callbackCalled = false;
+                  var DummyResponse =function() {
+                    if( responseCounter == 1 ){
+                      this.statusCode= 302;
+                      this.headers= {location:"http://redirectto.com"};
+                      responseCounter++;
+                    }
+                    else {
+                      this.statusCode= 200;
+                    }
+                  }
+                  DummyResponse.prototype= events.EventEmitter.prototype;
+                  DummyResponse.prototype.setEncoding= function() {}
+
+                  try {
+                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                      return new DummyRequest( new DummyResponse() );
+                    }
+                    oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {
+                      if( responseCounter == 1 ) {
+                        assert.equal(url, "http://originalurl.com");
+                      }
+                      else {
+                        assert.equal(url, "http://redirectto.com");
+                      }
+                      return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )
+                    }
+
+                    oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function() {
+                      // callback
+                      assert.equal(responseCounter, 2);
+                      callbackCalled= true;
+                    });
+                    assert.equal(callbackCalled, true)
+                  }
+                  finally {
+                    oa._createClient= op;
+                    oa._performSecureRequest= psr;
+                  }
+                }
+              },
+              'and followRedirect is false' : {
+                'it should not perform the secure request with the new location' : function(oa) {
+                  var op= oa._createClient;
+                  oa.setClientOptions({ followRedirects: false });
+                  var DummyResponse =function() {
+                      this.statusCode= 302;
+                      this.headers= {location:"http://redirectto.com"};
+                  }
+                  DummyResponse.prototype= events.EventEmitter.prototype;
+                  DummyResponse.prototype.setEncoding= function() {}
+
+                  try {
+                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {
+                      return new DummyRequest( new DummyResponse() );
+                    }
+                    oa._performSecureRequest("token", "token_secret", 'POST', 'http://originalurl.com', {"scope": "foobar,1,2"}, null, null, function(res, data, response) {
+                      // callback
+                      assert.equal(res.statusCode, 302);
+                    });
+                  }
+                  finally {
+                    oa._createClient= op;
+                    oa.setClientOptions({followRedirects:true});
+                  }
+                }
+              }
+          }
+       }
+     }
+}).export(module);
diff --git a/node_modules/oauth/tests/sha1tests.js b/node_modules/oauth/tests/sha1tests.js
new file mode 100644
index 0000000..18ba0ae
--- /dev/null
+++ b/node_modules/oauth/tests/sha1tests.js
@@ -0,0 +1,13 @@
+var vows = require('vows'),
+    assert = require('assert');
+
+vows.describe('SHA1 Hashing').addBatch({
+    'When using the SHA1 Hashing function': {
+        topic: require('../lib/sha1'),
+        'we get the specified digest as described in http://oauth.net/core/1.0/#sig_base_example (A.5.2)': function (sha1) {
+            assert.equal (sha1.HMACSHA1( "kd94hf93k423kf44&pfkkdhi9sl3r4s00",
+                           "GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal"), 
+                           "tR3+Ty81lMeYAr/Fid0kMTYa/WM=");
+        }
+    }
+}).export(module);
\ No newline at end of file
diff --git a/node_modules/oauth/tests/shared.js b/node_modules/oauth/tests/shared.js
new file mode 100644
index 0000000..f4c8094
--- /dev/null
+++ b/node_modules/oauth/tests/shared.js
@@ -0,0 +1,26 @@
+var events = require('events');
+
+exports.DummyResponse = function( statusCode ) {
+    this.statusCode= statusCode;
+    this.headers= {};
+}
+exports.DummyResponse.prototype= events.EventEmitter.prototype;
+exports.DummyResponse.prototype.setEncoding= function() {}
+
+exports.DummyRequest =function( response ) {
+  this.response=  response;
+  this.responseSent= false;
+}
+exports.DummyRequest.prototype= events.EventEmitter.prototype;
+exports.DummyRequest.prototype.write= function(post_body){}
+exports.DummyRequest.prototype.write= function(post_body){
+  this.responseSent= true;
+  this.emit('response',this.response);
+}
+exports.DummyRequest.prototype.end= function(){
+  if(!this.responseSent) {
+    this.responseSent= true;
+    this.emit('response',this.response);
+  }
+  this.response.emit('end');
+}
\ No newline at end of file
diff --git a/node_modules/openssl/.npmignore b/node_modules/openssl/.npmignore
new file mode 100644
index 0000000..b512c09
--- /dev/null
+++ b/node_modules/openssl/.npmignore
@@ -0,0 +1 @@
+node_modules
\ No newline at end of file
diff --git a/node_modules/openssl/index.js b/node_modules/openssl/index.js
new file mode 100644
index 0000000..4bee2bf
--- /dev/null
+++ b/node_modules/openssl/index.js
@@ -0,0 +1,45 @@
+"use strict";
+
+var fs   = require('fs');
+var util = require('util');
+var map  = require('mout/object/map');
+
+var exec     = require('nyks/child_process/exec');
+var sprintf  = require('nyks/string/sprintf');
+var mask     = require('nyks/object/mask');
+
+
+function openssl(/*verb, [ flags, [tail, ]] chain*/) {
+
+    var args   = [].slice.call(arguments),
+        verb   = args.shift(),
+        chain  = args.pop(),
+        flags  = args.shift() || {},
+        tail   = args.shift() || [];
+
+    args = [verb];
+    map(flags, function(v, k){
+      args.push(util.format("-%s", k));
+      if(v !== null)
+        args.push(v);
+    });
+    if(tail.length)
+      tail.push.apply(args, tail); //lol
+
+    exec("openssl", args, chain);
+};
+
+
+
+function config(config, config_path){
+  var config_str  =  mask(map(config, function(v, s){
+    return mask(v, "%s=%s", "\r\n");
+  }), "[ %s ]\r\n%s", "\r\n");
+
+
+  fs.writeFileSync(config_path, config_str);
+}
+
+
+module.exports = openssl;
+module.exports.config = config;
diff --git a/node_modules/openssl/package.json b/node_modules/openssl/package.json
new file mode 100644
index 0000000..6b617b1
--- /dev/null
+++ b/node_modules/openssl/package.json
@@ -0,0 +1,55 @@
+{
+  "_from": "openssl",
+  "_id": "openssl@1.1.0",
+  "_inBundle": false,
+  "_integrity": "sha1-cvklV37QyZUxMG+E0RU8oQvTrv0=",
+  "_location": "/openssl",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "tag",
+    "registry": true,
+    "raw": "openssl",
+    "name": "openssl",
+    "escapedName": "openssl",
+    "rawSpec": "",
+    "saveSpec": null,
+    "fetchSpec": "latest"
+  },
+  "_requiredBy": [
+    "#USER",
+    "/"
+  ],
+  "_resolved": "https://registry.npmjs.org/openssl/-/openssl-1.1.0.tgz",
+  "_shasum": "72f925577ed0c99531306f84d1153ca10bd3aefd",
+  "_spec": "openssl",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge",
+  "author": {
+    "name": "Francois Leurent",
+    "email": "131.js@cloudyks.org"
+  },
+  "bugs": {
+    "url": "https://github.com/131/node-openssl/issues"
+  },
+  "bundleDependencies": false,
+  "dependencies": {
+    "mout": "^0.11.1",
+    "nyks": "^2.9.0"
+  },
+  "deprecated": false,
+  "description": "Nodejs openssl wrapper",
+  "homepage": "https://github.com/131/node-openssl",
+  "keywords": [
+    "openssl"
+  ],
+  "license": "ISC",
+  "main": "index.js",
+  "name": "openssl",
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/131/node-openssl.git"
+  },
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "version": "1.1.0"
+}
diff --git a/node_modules/passport-facebook/.github/ISSUE_TEMPLATE.md b/node_modules/passport-facebook/.github/ISSUE_TEMPLATE.md
new file mode 100644
index 0000000..2094e0a
--- /dev/null
+++ b/node_modules/passport-facebook/.github/ISSUE_TEMPLATE.md
@@ -0,0 +1,54 @@
+** READ THIS FIRST! **
+
+#### Are you looking for help?
+
+Reminder: The issue tracker is not a support forum.
+
+Issues should only be filed in this project once they are able to be reproduced
+and confirmed as a flaw in the software or incorrect information in associated
+documention.
+
+If you are encountering problems integrating this module into your application,
+please post a question on the [discussion forum](https://github.com/passport/discuss)
+rather than filing an issue.
+
+#### Is this a security issue?
+
+Do not open issues that might have security implications.  Potential security
+vulnerabilities should be reported privately to jaredhanson@gmail.com.  Once any
+vulerabilities have been repaired, the details will be disclosed publicly in a
+responsible manner.  This also allows time for coordinating with affected parties
+in order to mitigate negative consequences.
+
+
+If neither of the above two scenarios apply to your situation, you should open
+an issue.  Delete this paragraph and the text above, and fill in the information
+requested below.
+
+<!-- Provide a brief summary of the issue in the title field above. -->
+
+<!-- Provide a detailed description of your use case, including as much -->
+<!-- detail as possible about what you are trying to accomplish and why. -->
+
+### Expected behavior
+<!-- Provide a detailed description of how you expected the software to -->
+<!-- behave. -->
+
+### Actual behavior
+<!-- Provide a detailed description of how the software actually behaved, -->
+<!-- including any rationale for why that behavior is incorrect. -->
+
+### Steps to reproduce
+<!-- Provide an unambiguous series of steps that can be used to reproduce -->
+<!-- this issue, including any code if applicable. -->
+
+```js
+// Format code using Markdown code blocks
+```
+
+### Environment
+
+* Operating System: 
+* Node version: <!-- $ node -v -->
+* passport version: <!-- $ npm list passport -->
+* passport-facebook version: <!-- $ npm list passport-facebook -->
diff --git a/node_modules/passport-facebook/.github/PULL_REQUEST_TEMPLATE.md b/node_modules/passport-facebook/.github/PULL_REQUEST_TEMPLATE.md
new file mode 100644
index 0000000..99307df
--- /dev/null
+++ b/node_modules/passport-facebook/.github/PULL_REQUEST_TEMPLATE.md
@@ -0,0 +1,41 @@
+** READ THIS FIRST! **
+
+#### Are you implementing a new feature?
+
+Requests for new features should first be discussed on the [developer forum](https://github.com/passport/develop).
+This allows the community to gather feedback and assess whether or not there is
+an existing way to achieve the desired functionality.
+
+If it is determined that a new feature needs to be implemented, include a link
+to the relevant discussion along with the pull request.
+
+#### Is this a security patch?
+
+Do not open pull requests that might have security implications.  Potential
+security vulnerabilities should be reported privately to jaredhanson@gmail.com.
+Once any vulerabilities have been repaired, the details will be disclosed
+publicly in a responsible manner.  This also allows time for coordinating with
+affected parties in order to mitigate negative consequences.
+
+
+If neither of the above two scenarios apply to your situation, you should open
+a pull request.  Delete this paragraph and the text above, and fill in the
+information requested below.
+
+<!-- Provide a brief summary of the request in the title field above. -->
+
+<!-- Provide a detailed description of your use case, including as much -->
+<!-- detail as possible about what you are trying to accomplish and why. -->
+<!-- If this patch closes an open issue, include a reference to the issue -->
+<!-- number. -->
+
+### Checklist
+
+<!-- Place an `x` in the boxes that apply.  If you are unsure, please ask and -->
+<!-- we will help. -->
+
+- [ ] I have read the [CONTRIBUTING](https://github.com/jaredhanson/passport-facebook/blob/master/CONTRIBUTING.md) guidelines.
+- [ ] I have added test cases which verify the correct operation of this feature or patch.
+- [ ] I have added documentation pertaining to this feature or patch.
+- [ ] The automated test suite (`$ make test`) executes successfully.
+- [ ] The automated code linting (`$ make lint`) executes successfully.
diff --git a/node_modules/passport-facebook/.npmignore b/node_modules/passport-facebook/.npmignore
new file mode 100644
index 0000000..a50451d
--- /dev/null
+++ b/node_modules/passport-facebook/.npmignore
@@ -0,0 +1,8 @@
+Makefile
+docs/
+examples/
+reports/
+test/
+
+.jshintrc
+.travis.yml
diff --git a/node_modules/passport-facebook/CONTRIBUTING.md b/node_modules/passport-facebook/CONTRIBUTING.md
new file mode 100644
index 0000000..f563968
--- /dev/null
+++ b/node_modules/passport-facebook/CONTRIBUTING.md
@@ -0,0 +1,20 @@
+## Contributing
+
+### Tests
+
+The test suite is located in the `test/` directory.  All new features are
+expected to have corresponding test cases with complete code coverage.  Patches
+that increase test coverage are happily accepted.
+
+Ensure that the test suite passes by executing:
+
+```bash
+$ make test
+```
+
+Coverage reports can be generated and viewed by executing:
+
+```bash
+$ make test-cov
+$ make view-cov
+```
diff --git a/node_modules/passport-facebook/LICENSE b/node_modules/passport-facebook/LICENSE
new file mode 100644
index 0000000..0554e9e
--- /dev/null
+++ b/node_modules/passport-facebook/LICENSE
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2011-2016 Jared Hanson
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/node_modules/passport-facebook/README.md b/node_modules/passport-facebook/README.md
new file mode 100644
index 0000000..ecf38ca
--- /dev/null
+++ b/node_modules/passport-facebook/README.md
@@ -0,0 +1,174 @@
+# passport-facebook
+
+[Passport](http://passportjs.org/) strategy for authenticating with [Facebook](http://www.facebook.com/)
+using the OAuth 2.0 API.
+
+This module lets you authenticate using Facebook in your Node.js applications.
+By plugging into Passport, Facebook authentication can be easily and
+unobtrusively integrated into any application or framework that supports
+[Connect](http://www.senchalabs.org/connect/)-style middleware, including
+[Express](http://expressjs.com/).
+
+---
+
+<p align="center"><a href="http://www.tkqlhce.com/click-8907558-13433666" target="_top">1Password, the only password manager you should trust.</a> Industry-leading security and award winning design.</p>
+
+---
+
+Status:
+[![Build](https://img.shields.io/travis/jaredhanson/passport-facebook.svg)](https://travis-ci.org/jaredhanson/passport-facebook)
+[![Coverage](https://img.shields.io/coveralls/jaredhanson/passport-facebook.svg)](https://coveralls.io/r/jaredhanson/passport-facebook)
+[![Quality](https://img.shields.io/codeclimate/github/jaredhanson/passport-facebook.svg?label=quality)](https://codeclimate.com/github/jaredhanson/passport-facebook)
+[![Dependencies](https://img.shields.io/david/jaredhanson/passport-facebook.svg)](https://david-dm.org/jaredhanson/passport-facebook)
+
+
+## Install
+
+    $ npm install passport-facebook
+
+## Usage
+
+#### Create an Application
+
+Before using `passport-facebook`, you must register an application with
+Facebook.  If you have not already done so, a new application can be created at
+[Facebook Developers](https://developers.facebook.com/).  Your application will
+be issued an app ID and app secret, which need to be provided to the strategy.
+You will also need to configure a redirect URI which matches the route in your
+application.
+
+#### Configure Strategy
+
+The Facebook authentication strategy authenticates users using a Facebook
+account and OAuth 2.0 tokens.  The app ID and secret obtained when creating an
+application are supplied as options when creating the strategy.  The strategy
+also requires a `verify` callback, which receives the access token and optional
+refresh token, as well as `profile` which contains the authenticated user's
+Facebook profile.  The `verify` callback must call `cb` providing a user to
+complete authentication.
+
+```js
+passport.use(new FacebookStrategy({
+    clientID: FACEBOOK_APP_ID,
+    clientSecret: FACEBOOK_APP_SECRET,
+    callbackURL: "http://localhost:3000/auth/facebook/callback"
+  },
+  function(accessToken, refreshToken, profile, cb) {
+    User.findOrCreate({ facebookId: profile.id }, function (err, user) {
+      return cb(err, user);
+    });
+  }
+));
+```
+
+#### Authenticate Requests
+
+Use `passport.authenticate()`, specifying the `'facebook'` strategy, to
+authenticate requests.
+
+For example, as route middleware in an [Express](http://expressjs.com/)
+application:
+
+```js
+app.get('/auth/facebook',
+  passport.authenticate('facebook'));
+
+app.get('/auth/facebook/callback',
+  passport.authenticate('facebook', { failureRedirect: '/login' }),
+  function(req, res) {
+    // Successful authentication, redirect home.
+    res.redirect('/');
+  });
+```
+
+## Examples
+
+Developers using the popular [Express](http://expressjs.com/) web framework can
+refer to an [example](https://github.com/passport/express-4.x-facebook-example)
+as a starting point for their own web applications.
+
+## FAQ
+
+##### How do I ask a user for additional permissions?
+
+If you need additional permissions from the user, the permissions can be
+requested via the `scope` option to `passport.authenticate()`.
+
+```js
+app.get('/auth/facebook',
+  passport.authenticate('facebook', { scope: ['user_friends', 'manage_pages'] }));
+```
+
+Refer to [permissions with Facebook Login](https://developers.facebook.com/docs/facebook-login/permissions/overview)
+for further details.
+
+##### How do I re-ask for for declined permissions?
+
+Set the `authType` option to `reauthenticate` when authenticating.
+
+```js
+app.get('/auth/facebook',
+  passport.authenticate('facebook', { authType: 'reauthenticate', scope: ['user_friends', 'manage_pages'] }));
+```
+
+Refer to [re-asking for declined permissions](https://developers.facebook.com/docs/facebook-login/web#re-asking-declined-permissions)
+for further details.
+
+##### How do I obtain a user profile with specific fields?
+
+The Facebook profile contains a lot of information about a user.  By default,
+not all the fields in a profile are returned.  The fields needed by an application
+can be indicated by setting the `profileFields` option.
+
+```js
+new FacebookStrategy({
+  clientID: FACEBOOK_APP_ID,
+  clientSecret: FACEBOOK_APP_SECRET,
+  callbackURL: "http://localhost:3000/auth/facebook/callback",
+  profileFields: ['id', 'displayName', 'photos', 'email']
+}), ...)
+```
+
+Refer to the [User](https://developers.facebook.com/docs/graph-api/reference/v2.5/user)
+section of the Graph API Reference for the complete set of available fields.
+
+##### How do I include app secret proof in API requests?
+
+Set the `enableProof` option when creating the strategy.
+
+```js
+new FacebookStrategy({
+  clientID: FACEBOOK_APP_ID,
+  clientSecret: FACEBOOK_APP_SECRET,
+  callbackURL: "http://localhost:3000/auth/facebook/callback",
+  enableProof: true
+}, ...)
+```
+
+As detailed in [securing graph API requests](https://developers.facebook.com/docs/graph-api/securing-requests#appsecret_proof),
+requiring the app secret for server API requests helps prevent use of tokens
+stolen by malicous software or man in the middle attacks.
+
+##### Why is #\_=\_ appended to the redirect URI?
+
+This behavior is "by design" according to Facebook's response to a [bug](https://developers.facebook.com/bugs/318390728250352)
+filed regarding this issue.
+
+Fragment identifiers are not supplied in requests made to a server, and as such
+this strategy is not aware that this behavior is exhibited and is not affected
+by it.  If desired, this fragment can be removed on the client side.  Refer to
+this [discussion](http://stackoverflow.com/questions/7131909/facebook-callback-appends-to-return-url) on
+Stack Overflow for recommendations on how to accomplish such removal.
+
+## Sponsorship
+
+Passport is open source software.  Ongoing development is made possible by
+generous contributions from [individuals and corporations](https://github.com/jaredhanson/passport/blob/master/SPONSORS.md).
+To learn more about how you can help keep this project financially sustainable,
+please visit Jared Hanson's page on [Patreon](https://www.patreon.com/jaredhanson).
+
+## License
+
+[The MIT License](http://opensource.org/licenses/MIT)
+
+Copyright (c) 2011-2016 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>
diff --git a/node_modules/passport-facebook/lib/errors/facebookauthorizationerror.js b/node_modules/passport-facebook/lib/errors/facebookauthorizationerror.js
new file mode 100644
index 0000000..3c14c96
--- /dev/null
+++ b/node_modules/passport-facebook/lib/errors/facebookauthorizationerror.js
@@ -0,0 +1,30 @@
+/**
+ * `FacebookAuthorizationError` error.
+ *
+ * FacebookAuthorizationError represents an error in response to an
+ * authorization request on Facebook.  Note that these responses don't conform
+ * to the OAuth 2.0 specification.
+ *
+ * References:
+ *   - https://developers.facebook.com/docs/reference/api/errors/
+ *
+ * @constructor
+ * @param {string} [message]
+ * @param {number} [code]
+ * @access public
+ */
+function FacebookAuthorizationError(message, code) {
+  Error.call(this);
+  Error.captureStackTrace(this, arguments.callee);
+  this.name = 'FacebookAuthorizationError';
+  this.message = message;
+  this.code = code;
+  this.status = 500;
+}
+
+// Inherit from `Error`.
+FacebookAuthorizationError.prototype.__proto__ = Error.prototype;
+
+
+// Expose constructor.
+module.exports = FacebookAuthorizationError;
diff --git a/node_modules/passport-facebook/lib/errors/facebookgraphapierror.js b/node_modules/passport-facebook/lib/errors/facebookgraphapierror.js
new file mode 100644
index 0000000..a95f6ab
--- /dev/null
+++ b/node_modules/passport-facebook/lib/errors/facebookgraphapierror.js
@@ -0,0 +1,32 @@
+/**
+ * `FacebookGraphAPIError` error.
+ *
+ * References:
+ *   - https://developers.facebook.com/docs/reference/api/errors/
+ *
+ * @constructor
+ * @param {string} [message]
+ * @param {string} [type]
+ * @param {number} [code]
+ * @param {number} [subcode]
+ * @param {string} [traceID]
+ * @access public
+ */
+function FacebookGraphAPIError(message, type, code, subcode, traceID) {
+  Error.call(this);
+  Error.captureStackTrace(this, arguments.callee);
+  this.name = 'FacebookGraphAPIError';
+  this.message = message;
+  this.type = type;
+  this.code = code;
+  this.subcode = subcode;
+  this.traceID = traceID;
+  this.status = 500;
+}
+
+// Inherit from `Error`.
+FacebookGraphAPIError.prototype.__proto__ = Error.prototype;
+
+
+// Expose constructor.
+module.exports = FacebookGraphAPIError;
diff --git a/node_modules/passport-facebook/lib/errors/facebooktokenerror.js b/node_modules/passport-facebook/lib/errors/facebooktokenerror.js
new file mode 100644
index 0000000..ff4e9dc
--- /dev/null
+++ b/node_modules/passport-facebook/lib/errors/facebooktokenerror.js
@@ -0,0 +1,36 @@
+/**
+ * `FacebookTokenError` error.
+ *
+ * FacebookTokenError represents an error received from a Facebook's token
+ * endpoint.  Note that these responses don't conform to the OAuth 2.0
+ * specification.
+ *
+ * References:
+ *   - https://developers.facebook.com/docs/reference/api/errors/
+ *
+ * @constructor
+ * @param {string} [message]
+ * @param {string} [type]
+ * @param {number} [code]
+ * @param {number} [subcode]
+ * @param {string} [traceID]
+ * @access public
+ */
+function FacebookTokenError(message, type, code, subcode, traceID) {
+  Error.call(this);
+  Error.captureStackTrace(this, arguments.callee);
+  this.name = 'FacebookTokenError';
+  this.message = message;
+  this.type = type;
+  this.code = code;
+  this.subcode = subcode;
+  this.traceID = traceID;
+  this.status = 500;
+}
+
+// Inherit from `Error`.
+FacebookTokenError.prototype.__proto__ = Error.prototype;
+
+
+// Expose constructor.
+module.exports = FacebookTokenError;
diff --git a/node_modules/passport-facebook/lib/index.js b/node_modules/passport-facebook/lib/index.js
new file mode 100644
index 0000000..af2282d
--- /dev/null
+++ b/node_modules/passport-facebook/lib/index.js
@@ -0,0 +1,9 @@
+// Load modules.
+var Strategy = require('./strategy');
+
+
+// Expose Strategy.
+exports = module.exports = Strategy;
+
+// Exports.
+exports.Strategy = Strategy;
diff --git a/node_modules/passport-facebook/lib/profile.js b/node_modules/passport-facebook/lib/profile.js
new file mode 100644
index 0000000..ef00860
--- /dev/null
+++ b/node_modules/passport-facebook/lib/profile.js
@@ -0,0 +1,38 @@
+/**
+ * Parse profile.
+ *
+ * @param {object|string} json
+ * @return {object}
+ * @access public
+ */
+exports.parse = function(json) {
+  if ('string' == typeof json) {
+    json = JSON.parse(json);
+  }
+  
+  var profile = {};
+  profile.id = json.id;
+  profile.username = json.username;
+  profile.displayName = json.name;
+  profile.name = { familyName: json.last_name,
+                   givenName: json.first_name,
+                   middleName: json.middle_name };
+
+  profile.gender = json.gender;
+  profile.profileUrl = json.link;
+  
+  if (json.email) {
+    profile.emails = [{ value: json.email }];
+  }
+  
+  if (json.picture) {
+    if (typeof json.picture == 'object' && json.picture.data) {
+      // October 2012 Breaking Changes
+      profile.photos = [{ value: json.picture.data.url }];
+    } else {
+      profile.photos = [{ value: json.picture }];
+    }
+  }
+  
+  return profile;
+};
diff --git a/node_modules/passport-facebook/lib/strategy.js b/node_modules/passport-facebook/lib/strategy.js
new file mode 100644
index 0000000..c123e32
--- /dev/null
+++ b/node_modules/passport-facebook/lib/strategy.js
@@ -0,0 +1,242 @@
+// Load modules.
+var OAuth2Strategy = require('passport-oauth2')
+  , util = require('util')
+  , uri = require('url')
+  , crypto = require('crypto')
+  , Profile = require('./profile')
+  , InternalOAuthError = require('passport-oauth2').InternalOAuthError
+  , FacebookAuthorizationError = require('./errors/facebookauthorizationerror')
+  , FacebookTokenError = require('./errors/facebooktokenerror')
+  , FacebookGraphAPIError = require('./errors/facebookgraphapierror');
+
+
+/**
+ * `Strategy` constructor.
+ *
+ * The Facebook authentication strategy authenticates requests by delegating to
+ * Facebook using the OAuth 2.0 protocol.
+ *
+ * Applications must supply a `verify` callback which accepts an `accessToken`,
+ * `refreshToken` and service-specific `profile`, and then calls the `cb`
+ * callback supplying a `user`, which should be set to `false` if the
+ * credentials are not valid.  If an exception occured, `err` should be set.
+ *
+ * Options:
+ *   - `clientID`      your Facebook application's App ID
+ *   - `clientSecret`  your Facebook application's App Secret
+ *   - `callbackURL`   URL to which Facebook will redirect the user after granting authorization
+ *
+ * Examples:
+ *
+ *     passport.use(new FacebookStrategy({
+ *         clientID: '123-456-789',
+ *         clientSecret: 'shhh-its-a-secret'
+ *         callbackURL: 'https://www.example.net/auth/facebook/callback'
+ *       },
+ *       function(accessToken, refreshToken, profile, cb) {
+ *         User.findOrCreate(..., function (err, user) {
+ *           cb(err, user);
+ *         });
+ *       }
+ *     ));
+ *
+ * @constructor
+ * @param {object} options
+ * @param {function} verify
+ * @access public
+ */
+function Strategy(options, verify) {
+  options = options || {};
+  var version = options.graphAPIVersion || 'v3.2';
+  
+  options.authorizationURL = options.authorizationURL || 'https://www.facebook.com/' + version + '/dialog/oauth';
+  options.tokenURL = options.tokenURL || 'https://graph.facebook.com/' + version + '/oauth/access_token';
+  options.scopeSeparator = options.scopeSeparator || ',';
+
+  OAuth2Strategy.call(this, options, verify);
+  this.name = 'facebook';
+  this._profileURL = options.profileURL || 'https://graph.facebook.com/' + version + '/me';
+  this._profileFields = options.profileFields || null;
+  this._enableProof = options.enableProof;
+  this._clientSecret = options.clientSecret;
+}
+
+// Inherit from `OAuth2Strategy`.
+util.inherits(Strategy, OAuth2Strategy);
+
+
+/**
+ * Authenticate request by delegating to Facebook using OAuth 2.0.
+ *
+ * @param {http.IncomingMessage} req
+ * @param {object} options
+ * @access protected
+ */
+Strategy.prototype.authenticate = function(req, options) {
+  // Facebook doesn't conform to the OAuth 2.0 specification, with respect to
+  // redirecting with error codes.
+  //
+  //   FIX: https://github.com/jaredhanson/passport-oauth/issues/16
+  if (req.query && req.query.error_code && !req.query.error) {
+    return this.error(new FacebookAuthorizationError(req.query.error_message, parseInt(req.query.error_code, 10)));
+  }
+
+  OAuth2Strategy.prototype.authenticate.call(this, req, options);
+};
+
+/**
+ * Return extra Facebook-specific parameters to be included in the authorization
+ * request.
+ *
+ * Options:
+ *  - `display`  Display mode to render dialog, { `page`, `popup`, `touch` }.
+ *
+ * @param {object} options
+ * @return {object}
+ * @access protected
+ */
+Strategy.prototype.authorizationParams = function (options) {
+  var params = {};
+
+  // https://developers.facebook.com/docs/reference/dialogs/oauth/
+  if (options.display) {
+    params.display = options.display;
+  }
+  
+  // https://developers.facebook.com/docs/facebook-login/reauthentication/
+  if (options.authType) {
+    params.auth_type = options.authType;
+  }
+  if (options.authNonce) {
+    params.auth_nonce = options.authNonce;
+  }
+
+  return params;
+};
+
+/**
+ * Retrieve user profile from Facebook.
+ *
+ * This function constructs a normalized profile, with the following properties:
+ *
+ *   - `provider`         always set to `facebook`
+ *   - `id`               the user's Facebook ID
+ *   - `username`         the user's Facebook username
+ *   - `displayName`      the user's full name
+ *   - `name.familyName`  the user's last name
+ *   - `name.givenName`   the user's first name
+ *   - `name.middleName`  the user's middle name
+ *   - `gender`           the user's gender: `male` or `female`
+ *   - `profileUrl`       the URL of the profile for the user on Facebook
+ *   - `emails`           the proxied or contact email address granted by the user
+ *
+ * @param {string} accessToken
+ * @param {function} done
+ * @access protected
+ */
+Strategy.prototype.userProfile = function(accessToken, done) {
+  var url = uri.parse(this._profileURL);
+  if (this._enableProof) {
+    // Secure API call by adding proof of the app secret.  This is required when
+    // the "Require AppSecret Proof for Server API calls" setting has been
+    // enabled.  The proof is a SHA256 hash of the access token, using the app
+    // secret as the key.
+    //
+    // For further details, refer to:
+    // https://developers.facebook.com/docs/reference/api/securing-graph-api/    
+    var proof = crypto.createHmac('sha256', this._clientSecret).update(accessToken).digest('hex');
+    url.search = (url.search ? url.search + '&' : '') + 'appsecret_proof=' + proof;
+  }
+  if (this._profileFields) {
+    var fields = this._convertProfileFields(this._profileFields);
+    if (fields !== '') { url.search = (url.search ? url.search + '&' : '') + 'fields=' + fields; }
+  }
+  url = uri.format(url);
+
+  this._oauth2.get(url, accessToken, function (err, body, res) {
+    var json;
+    
+    if (err) {
+      if (err.data) {
+        try {
+          json = JSON.parse(err.data);
+        } catch (_) {}
+      }
+      
+      if (json && json.error && typeof json.error == 'object') {
+        return done(new FacebookGraphAPIError(json.error.message, json.error.type, json.error.code, json.error.error_subcode, json.error.fbtrace_id));
+      }
+      return done(new InternalOAuthError('Failed to fetch user profile', err));
+    }
+    
+    try {
+      json = JSON.parse(body);
+    } catch (ex) {
+      return done(new Error('Failed to parse user profile'));
+    }
+
+    var profile = Profile.parse(json);
+    profile.provider = 'facebook';
+    profile._raw = body;
+    profile._json = json;
+
+    done(null, profile);
+  });
+};
+
+/**
+ * Parse error response from Facebook OAuth 2.0 token endpoint.
+ *
+ * @param {string} body
+ * @param {number} status
+ * @return {Error}
+ * @access protected
+ */
+Strategy.prototype.parseErrorResponse = function(body, status) {
+  var json = JSON.parse(body);
+  if (json.error && typeof json.error == 'object') {
+    return new FacebookTokenError(json.error.message, json.error.type, json.error.code, json.error.error_subcode, json.error.fbtrace_id);
+  }
+  return OAuth2Strategy.prototype.parseErrorResponse.call(this, body, status);
+};
+
+/**
+ * Convert Facebook profile to a normalized profile.
+ *
+ * @param {object} profileFields
+ * @return {string}
+ * @access protected
+ */
+Strategy.prototype._convertProfileFields = function(profileFields) {
+  var map = {
+    'id':          'id',
+    'username':    'username',
+    'displayName': 'name',
+    'name':       ['last_name', 'first_name', 'middle_name'],
+    'gender':      'gender',
+    'birthday':    'birthday',
+    'profileUrl':  'link',
+    'emails':      'email',
+    'photos':      'picture'
+  };
+  
+  var fields = [];
+  
+  profileFields.forEach(function(f) {
+    // return raw Facebook profile field to support the many fields that don't
+    // map cleanly to Portable Contacts
+    if (typeof map[f] === 'undefined') { return fields.push(f); };
+
+    if (Array.isArray(map[f])) {
+      Array.prototype.push.apply(fields, map[f]);
+    } else {
+      fields.push(map[f]);
+    }
+  });
+
+  return fields.join(',');
+};
+
+
+// Expose constructor.
+module.exports = Strategy;
diff --git a/node_modules/passport-facebook/package.json b/node_modules/passport-facebook/package.json
new file mode 100644
index 0000000..333cbf7
--- /dev/null
+++ b/node_modules/passport-facebook/package.json
@@ -0,0 +1,75 @@
+{
+  "_from": "passport-facebook",
+  "_id": "passport-facebook@3.0.0",
+  "_inBundle": false,
+  "_integrity": "sha512-K/qNzuFsFISYAyC1Nma4qgY/12V3RSLFdFVsPKXiKZt434wOvthFW1p7zKa1iQihQMRhaWorVE1o3Vi1o+ZgeQ==",
+  "_location": "/passport-facebook",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "tag",
+    "registry": true,
+    "raw": "passport-facebook",
+    "name": "passport-facebook",
+    "escapedName": "passport-facebook",
+    "rawSpec": "",
+    "saveSpec": null,
+    "fetchSpec": "latest"
+  },
+  "_requiredBy": [
+    "#USER",
+    "/"
+  ],
+  "_resolved": "https://registry.npmjs.org/passport-facebook/-/passport-facebook-3.0.0.tgz",
+  "_shasum": "b16f7314128be55d020a2b75f574c194bd6d9805",
+  "_spec": "passport-facebook",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge",
+  "author": {
+    "name": "Jared Hanson",
+    "email": "jaredhanson@gmail.com",
+    "url": "http://www.jaredhanson.net/"
+  },
+  "bugs": {
+    "url": "http://github.com/jaredhanson/passport-facebook/issues"
+  },
+  "bundleDependencies": false,
+  "dependencies": {
+    "passport-oauth2": "1.x.x"
+  },
+  "deprecated": false,
+  "description": "Facebook authentication strategy for Passport.",
+  "devDependencies": {
+    "chai": "2.x.x",
+    "chai-passport-strategy": "1.x.x",
+    "make-node": "0.3.x",
+    "mocha": "1.x.x"
+  },
+  "engines": {
+    "node": ">= 0.4.0"
+  },
+  "homepage": "https://github.com/jaredhanson/passport-facebook#readme",
+  "keywords": [
+    "passport",
+    "facebook",
+    "auth",
+    "authn",
+    "authentication",
+    "identity"
+  ],
+  "license": "MIT",
+  "licenses": [
+    {
+      "type": "MIT",
+      "url": "http://opensource.org/licenses/MIT"
+    }
+  ],
+  "main": "./lib",
+  "name": "passport-facebook",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/jaredhanson/passport-facebook.git"
+  },
+  "scripts": {
+    "test": "mocha --require test/bootstrap/node test/*.test.js"
+  },
+  "version": "3.0.0"
+}
diff --git a/node_modules/passport-oauth2/.npmignore b/node_modules/passport-oauth2/.npmignore
new file mode 100644
index 0000000..a50451d
--- /dev/null
+++ b/node_modules/passport-oauth2/.npmignore
@@ -0,0 +1,8 @@
+Makefile
+docs/
+examples/
+reports/
+test/
+
+.jshintrc
+.travis.yml
diff --git a/node_modules/passport-oauth2/LICENSE b/node_modules/passport-oauth2/LICENSE
new file mode 100644
index 0000000..0554e9e
--- /dev/null
+++ b/node_modules/passport-oauth2/LICENSE
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2011-2016 Jared Hanson
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/node_modules/passport-oauth2/README.md b/node_modules/passport-oauth2/README.md
new file mode 100644
index 0000000..b996c3b
--- /dev/null
+++ b/node_modules/passport-oauth2/README.md
@@ -0,0 +1,124 @@
+# passport-oauth2
+
+[![Build](https://img.shields.io/travis/jaredhanson/passport-oauth2.svg)](https://travis-ci.org/jaredhanson/passport-oauth2)
+[![Coverage](https://img.shields.io/coveralls/jaredhanson/passport-oauth2.svg)](https://coveralls.io/r/jaredhanson/passport-oauth2)
+[![Quality](https://img.shields.io/codeclimate/github/jaredhanson/passport-oauth2.svg?label=quality)](https://codeclimate.com/github/jaredhanson/passport-oauth2)
+[![Dependencies](https://img.shields.io/david/jaredhanson/passport-oauth2.svg)](https://david-dm.org/jaredhanson/passport-oauth2)
+
+
+General-purpose OAuth 2.0 authentication strategy for [Passport](http://passportjs.org/).
+
+This module lets you authenticate using OAuth 2.0 in your Node.js applications.
+By plugging into Passport, OAuth 2.0 authentication can be easily and
+unobtrusively integrated into any application or framework that supports
+[Connect](http://www.senchalabs.org/connect/)-style middleware, including
+[Express](http://expressjs.com/).
+
+Note that this strategy provides generic OAuth 2.0 support.  In many cases, a
+provider-specific strategy can be used instead, which cuts down on unnecessary
+configuration, and accommodates any provider-specific quirks.  See the
+[list](https://github.com/jaredhanson/passport/wiki/Strategies) for supported
+providers.
+
+Developers who need to implement authentication against an OAuth 2.0 provider
+that is not already supported are encouraged to sub-class this strategy.  If you
+choose to open source the new provider-specific strategy, please add it to the
+list so other people can find it.
+
+## Install
+
+    $ npm install passport-oauth2
+
+## Usage
+
+#### Configure Strategy
+
+The OAuth 2.0 authentication strategy authenticates users using a third-party
+account and OAuth 2.0 tokens.  The provider's OAuth 2.0 endpoints, as well as
+the client identifer and secret, are specified as options.  The strategy
+requires a `verify` callback, which receives an access token and profile,
+and calls `cb` providing a user.
+
+```js
+passport.use(new OAuth2Strategy({
+    authorizationURL: 'https://www.example.com/oauth2/authorize',
+    tokenURL: 'https://www.example.com/oauth2/token',
+    clientID: EXAMPLE_CLIENT_ID,
+    clientSecret: EXAMPLE_CLIENT_SECRET,
+    callbackURL: "http://localhost:3000/auth/example/callback"
+  },
+  function(accessToken, refreshToken, profile, cb) {
+    User.findOrCreate({ exampleId: profile.id }, function (err, user) {
+      return cb(err, user);
+    });
+  }
+));
+```
+
+#### Authenticate Requests
+
+Use `passport.authenticate()`, specifying the `'oauth2'` strategy, to
+authenticate requests.
+
+For example, as route middleware in an [Express](http://expressjs.com/)
+application:
+
+```js
+app.get('/auth/example',
+  passport.authenticate('oauth2'));
+
+app.get('/auth/example/callback',
+  passport.authenticate('oauth2', { failureRedirect: '/login' }),
+  function(req, res) {
+    // Successful authentication, redirect home.
+    res.redirect('/');
+  });
+```
+
+## Related Modules
+
+- [passport-oauth1](https://github.com/jaredhanson/passport-oauth1) — OAuth 1.0 authentication strategy
+- [passport-http-bearer](https://github.com/jaredhanson/passport-http-bearer) — Bearer token authentication strategy for APIs
+- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) — OAuth 2.0 authorization server toolkit
+
+## Contributing
+
+#### Tests
+
+The test suite is located in the `test/` directory.  All new features are
+expected to have corresponding test cases.  Ensure that the complete test suite
+passes by executing:
+
+```bash
+$ make test
+```
+
+#### Coverage
+
+All new feature development is expected to have test coverage.  Patches that
+increse test coverage are happily accepted.  Coverage reports can be viewed by
+executing:
+
+```bash
+$ make test-cov
+$ make view-cov
+```
+
+## Support
+
+#### Funding
+
+This software is provided to you as open source, free of charge.  The time and
+effort to develop and maintain this project is dedicated by [@jaredhanson](https://github.com/jaredhanson).
+If you (or your employer) benefit from this project, please consider a financial
+contribution.  Your contribution helps continue the efforts that produce this
+and other open source software.
+
+Funds are accepted via [PayPal](https://paypal.me/jaredhanson), [Venmo](https://venmo.com/jaredhanson),
+and [other](http://jaredhanson.net/pay) methods.  Any amount is appreciated.
+
+## License
+
+[The MIT License](http://opensource.org/licenses/MIT)
+
+Copyright (c) 2011-2016 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>
diff --git a/node_modules/passport-oauth2/lib/errors/authorizationerror.js b/node_modules/passport-oauth2/lib/errors/authorizationerror.js
new file mode 100644
index 0000000..041961d
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/errors/authorizationerror.js
@@ -0,0 +1,44 @@
+/**
+ * `AuthorizationError` error.
+ *
+ * AuthorizationError represents an error in response to an authorization
+ * request.  For details, refer to RFC 6749, section 4.1.2.1.
+ *
+ * References:
+ *   - [The OAuth 2.0 Authorization Framework](http://tools.ietf.org/html/rfc6749)
+ *
+ * @constructor
+ * @param {String} [message]
+ * @param {String} [code]
+ * @param {String} [uri]
+ * @param {Number} [status]
+ * @api public
+ */
+function AuthorizationError(message, code, uri, status) {
+  if (!status) {
+    switch (code) {
+      case 'access_denied': status = 403; break;
+      case 'server_error': status = 502; break;
+      case 'temporarily_unavailable': status = 503; break;
+    }
+  }
+
+  Error.call(this);
+  Error.captureStackTrace(this, this.constructor);
+  this.name = this.constructor.name;
+  this.message = message;
+  this.code = code || 'server_error';
+  this.uri = uri;
+  this.status = status || 500;
+}
+
+/**
+ * Inherit from `Error`.
+ */
+AuthorizationError.prototype.__proto__ = Error.prototype;
+
+
+/**
+ * Expose `AuthorizationError`.
+ */
+module.exports = AuthorizationError;
diff --git a/node_modules/passport-oauth2/lib/errors/internaloautherror.js b/node_modules/passport-oauth2/lib/errors/internaloautherror.js
new file mode 100644
index 0000000..5dd6828
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/errors/internaloautherror.js
@@ -0,0 +1,49 @@
+/**
+ * `InternalOAuthError` error.
+ *
+ * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these
+ * objects, error messages can be formatted in a manner that aids in debugging
+ * OAuth issues.
+ *
+ * @constructor
+ * @param {String} [message]
+ * @param {Object|Error} [err]
+ * @api public
+ */
+function InternalOAuthError(message, err) {
+  Error.call(this);
+  Error.captureStackTrace(this, this.constructor);
+  this.name = this.constructor.name;
+  this.message = message;
+  this.oauthError = err;
+}
+
+/**
+ * Inherit from `Error`.
+ */
+InternalOAuthError.prototype.__proto__ = Error.prototype;
+
+/**
+ * Returns a string representing the error.
+ *
+ * @return {String}
+ * @api public
+ */
+InternalOAuthError.prototype.toString = function() {
+  var m = this.name;
+  if (this.message) { m += ': ' + this.message; }
+  if (this.oauthError) {
+    if (this.oauthError instanceof Error) {
+      m = this.oauthError.toString();
+    } else if (this.oauthError.statusCode && this.oauthError.data) {
+      m += ' (status: ' + this.oauthError.statusCode + ' data: ' + this.oauthError.data + ')';
+    }
+  }
+  return m;
+};
+
+
+/**
+ * Expose `InternalOAuthError`.
+ */
+module.exports = InternalOAuthError;
diff --git a/node_modules/passport-oauth2/lib/errors/tokenerror.js b/node_modules/passport-oauth2/lib/errors/tokenerror.js
new file mode 100644
index 0000000..924ea3b
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/errors/tokenerror.js
@@ -0,0 +1,36 @@
+/**
+ * `TokenError` error.
+ *
+ * TokenError represents an error received from a token endpoint.  For details,
+ * refer to RFC 6749, section 5.2.
+ *
+ * References:
+ *   - [The OAuth 2.0 Authorization Framework](http://tools.ietf.org/html/rfc6749)
+ *
+ * @constructor
+ * @param {String} [message]
+ * @param {String} [code]
+ * @param {String} [uri]
+ * @param {Number} [status]
+ * @api public
+ */
+function TokenError(message, code, uri, status) {
+  Error.call(this);
+  Error.captureStackTrace(this, this.constructor);
+  this.name = this.constructor.name;
+  this.message = message;
+  this.code = code || 'invalid_request';
+  this.uri = uri;
+  this.status = status || 500;
+}
+
+/**
+ * Inherit from `Error`.
+ */
+TokenError.prototype.__proto__ = Error.prototype;
+
+
+/**
+ * Expose `TokenError`.
+ */
+module.exports = TokenError;
diff --git a/node_modules/passport-oauth2/lib/index.js b/node_modules/passport-oauth2/lib/index.js
new file mode 100644
index 0000000..b025669
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/index.js
@@ -0,0 +1,16 @@
+// Load modules.
+var Strategy = require('./strategy')
+  , AuthorizationError = require('./errors/authorizationerror')
+  , TokenError = require('./errors/tokenerror')
+  , InternalOAuthError = require('./errors/internaloautherror');
+
+
+// Expose Strategy.
+exports = module.exports = Strategy;
+
+// Exports.
+exports.Strategy = Strategy;
+
+exports.AuthorizationError = AuthorizationError;
+exports.TokenError = TokenError;
+exports.InternalOAuthError = InternalOAuthError;
diff --git a/node_modules/passport-oauth2/lib/state/null.js b/node_modules/passport-oauth2/lib/state/null.js
new file mode 100644
index 0000000..80ad17e
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/state/null.js
@@ -0,0 +1,13 @@
+function NullStore(options) {
+}
+
+NullStore.prototype.store = function(req, cb) {
+  cb();
+}
+
+NullStore.prototype.verify = function(req, providedState, cb) {
+  cb(null, true);
+}
+
+
+module.exports = NullStore;
diff --git a/node_modules/passport-oauth2/lib/state/session.js b/node_modules/passport-oauth2/lib/state/session.js
new file mode 100644
index 0000000..1d08789
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/state/session.js
@@ -0,0 +1,85 @@
+var uid = require('uid2');
+
+/**
+ * Creates an instance of `SessionStore`.
+ *
+ * This is the state store implementation for the OAuth2Strategy used when
+ * the `state` option is enabled.  It generates a random state and stores it in
+ * `req.session` and verifies it when the service provider redirects the user
+ * back to the application.
+ *
+ * This state store requires session support.  If no session exists, an error
+ * will be thrown.
+ *
+ * Options:
+ *
+ *   - `key`  The key in the session under which to store the state
+ *
+ * @constructor
+ * @param {Object} options
+ * @api public
+ */
+function SessionStore(options) {
+  if (!options.key) { throw new TypeError('Session-based state store requires a session key'); }
+  this._key = options.key;
+}
+
+/**
+ * Store request state.
+ *
+ * This implementation simply generates a random string and stores the value in
+ * the session, where it will be used for verification when the user is
+ * redirected back to the application.
+ *
+ * @param {Object} req
+ * @param {Function} callback
+ * @api protected
+ */
+SessionStore.prototype.store = function(req, callback) {
+  if (!req.session) { return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?')); }
+
+  var key = this._key;
+  var state = uid(24);
+  if (!req.session[key]) { req.session[key] = {}; }
+  req.session[key].state = state;
+  callback(null, state);
+};
+
+/**
+ * Verify request state.
+ *
+ * This implementation simply compares the state parameter in the request to the
+ * value generated earlier and stored in the session.
+ *
+ * @param {Object} req
+ * @param {String} providedState
+ * @param {Function} callback
+ * @api protected
+ */
+SessionStore.prototype.verify = function(req, providedState, callback) {
+  if (!req.session) { return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?')); }
+
+  var key = this._key;
+  if (!req.session[key]) {
+   return callback(null, false, { message: 'Unable to verify authorization request state.' });
+  }
+
+  var state = req.session[key].state;
+  if (!state) {
+   return callback(null, false, { message: 'Unable to verify authorization request state.' });
+  }
+
+  delete req.session[key].state;
+  if (Object.keys(req.session[key]).length === 0) {
+   delete req.session[key];
+  }
+
+  if (state !== providedState) {
+   return callback(null, false, { message: 'Invalid authorization request state.' });
+  }
+
+  return callback(null, true);
+};
+
+// Expose constructor.
+module.exports = SessionStore;
diff --git a/node_modules/passport-oauth2/lib/strategy.js b/node_modules/passport-oauth2/lib/strategy.js
new file mode 100644
index 0000000..a0d50bd
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/strategy.js
@@ -0,0 +1,385 @@
+// Load modules.
+var passport = require('passport-strategy')
+  , url = require('url')
+  , util = require('util')
+  , utils = require('./utils')
+  , OAuth2 = require('oauth').OAuth2
+  , NullStateStore = require('./state/null')
+  , SessionStateStore = require('./state/session')
+  , AuthorizationError = require('./errors/authorizationerror')
+  , TokenError = require('./errors/tokenerror')
+  , InternalOAuthError = require('./errors/internaloautherror');
+
+
+/**
+ * Creates an instance of `OAuth2Strategy`.
+ *
+ * The OAuth 2.0 authentication strategy authenticates requests using the OAuth
+ * 2.0 framework.
+ *
+ * OAuth 2.0 provides a facility for delegated authentication, whereby users can
+ * authenticate using a third-party service such as Facebook.  Delegating in
+ * this manner involves a sequence of events, including redirecting the user to
+ * the third-party service for authorization.  Once authorization has been
+ * granted, the user is redirected back to the application and an authorization
+ * code can be used to obtain credentials.
+ *
+ * Applications must supply a `verify` callback, for which the function
+ * signature is:
+ *
+ *     function(accessToken, refreshToken, profile, done) { ... }
+ *
+ * The verify callback is responsible for finding or creating the user, and
+ * invoking `done` with the following arguments:
+ *
+ *     done(err, user, info);
+ *
+ * `user` should be set to `false` to indicate an authentication failure.
+ * Additional `info` can optionally be passed as a third argument, typically
+ * used to display informational messages.  If an exception occured, `err`
+ * should be set.
+ *
+ * Options:
+ *
+ *   - `authorizationURL`  URL used to obtain an authorization grant
+ *   - `tokenURL`          URL used to obtain an access token
+ *   - `clientID`          identifies client to service provider
+ *   - `clientSecret`      secret used to establish ownership of the client identifer
+ *   - `callbackURL`       URL to which the service provider will redirect the user after obtaining authorization
+ *   - `passReqToCallback` when `true`, `req` is the first argument to the verify callback (default: `false`)
+ *
+ * Examples:
+ *
+ *     passport.use(new OAuth2Strategy({
+ *         authorizationURL: 'https://www.example.com/oauth2/authorize',
+ *         tokenURL: 'https://www.example.com/oauth2/token',
+ *         clientID: '123-456-789',
+ *         clientSecret: 'shhh-its-a-secret'
+ *         callbackURL: 'https://www.example.net/auth/example/callback'
+ *       },
+ *       function(accessToken, refreshToken, profile, done) {
+ *         User.findOrCreate(..., function (err, user) {
+ *           done(err, user);
+ *         });
+ *       }
+ *     ));
+ *
+ * @constructor
+ * @param {Object} options
+ * @param {Function} verify
+ * @api public
+ */
+function OAuth2Strategy(options, verify) {
+  if (typeof options == 'function') {
+    verify = options;
+    options = undefined;
+  }
+  options = options || {};
+
+  if (!verify) { throw new TypeError('OAuth2Strategy requires a verify callback'); }
+  if (!options.authorizationURL) { throw new TypeError('OAuth2Strategy requires a authorizationURL option'); }
+  if (!options.tokenURL) { throw new TypeError('OAuth2Strategy requires a tokenURL option'); }
+  if (!options.clientID) { throw new TypeError('OAuth2Strategy requires a clientID option'); }
+
+  passport.Strategy.call(this);
+  this.name = 'oauth2';
+  this._verify = verify;
+
+  // NOTE: The _oauth2 property is considered "protected".  Subclasses are
+  //       allowed to use it when making protected resource requests to retrieve
+  //       the user profile.
+  this._oauth2 = new OAuth2(options.clientID,  options.clientSecret,
+      '', options.authorizationURL, options.tokenURL, options.customHeaders);
+
+  this._callbackURL = options.callbackURL;
+  this._scope = options.scope;
+  this._scopeSeparator = options.scopeSeparator || ' ';
+  this._key = options.sessionKey || ('oauth2:' + url.parse(options.authorizationURL).hostname);
+
+  if (options.store) {
+    this._stateStore = options.store;
+  } else {
+    if (options.state) {
+      this._stateStore = new SessionStateStore({ key: this._key });
+    } else {
+      this._stateStore = new NullStateStore();
+    }
+  }
+  this._trustProxy = options.proxy;
+  this._passReqToCallback = options.passReqToCallback;
+  this._skipUserProfile = (options.skipUserProfile === undefined) ? false : options.skipUserProfile;
+}
+
+// Inherit from `passport.Strategy`.
+util.inherits(OAuth2Strategy, passport.Strategy);
+
+
+/**
+ * Authenticate request by delegating to a service provider using OAuth 2.0.
+ *
+ * @param {Object} req
+ * @api protected
+ */
+OAuth2Strategy.prototype.authenticate = function(req, options) {
+  options = options || {};
+  var self = this;
+
+  if (req.query && req.query.error) {
+    if (req.query.error == 'access_denied') {
+      return this.fail({ message: req.query.error_description });
+    } else {
+      return this.error(new AuthorizationError(req.query.error_description, req.query.error, req.query.error_uri));
+    }
+  }
+
+  var callbackURL = options.callbackURL || this._callbackURL;
+  if (callbackURL) {
+    var parsed = url.parse(callbackURL);
+    if (!parsed.protocol) {
+      // The callback URL is relative, resolve a fully qualified URL from the
+      // URL of the originating request.
+      callbackURL = url.resolve(utils.originalURL(req, { proxy: this._trustProxy }), callbackURL);
+    }
+  }
+  
+  var meta = {
+    authorizationURL: this._oauth2._authorizeUrl,
+    tokenURL: this._oauth2._accessTokenUrl,
+    clientID: this._oauth2._clientId
+  }
+
+  if (req.query && req.query.code) {
+    function loaded(err, ok, state) {
+      if (err) { return self.error(err); }
+      if (!ok) {
+        return self.fail(state, 403);
+      }
+  
+      var code = req.query.code;
+
+      var params = self.tokenParams(options);
+      params.grant_type = 'authorization_code';
+      if (callbackURL) { params.redirect_uri = callbackURL; }
+
+      self._oauth2.getOAuthAccessToken(code, params,
+        function(err, accessToken, refreshToken, params) {
+          if (err) { return self.error(self._createOAuthError('Failed to obtain access token', err)); }
+
+          self._loadUserProfile(accessToken, function(err, profile) {
+            if (err) { return self.error(err); }
+
+            function verified(err, user, info) {
+              if (err) { return self.error(err); }
+              if (!user) { return self.fail(info); }
+              
+              info = info || {};
+              if (state) { info.state = state; }
+              self.success(user, info);
+            }
+
+            try {
+              if (self._passReqToCallback) {
+                var arity = self._verify.length;
+                if (arity == 6) {
+                  self._verify(req, accessToken, refreshToken, params, profile, verified);
+                } else { // arity == 5
+                  self._verify(req, accessToken, refreshToken, profile, verified);
+                }
+              } else {
+                var arity = self._verify.length;
+                if (arity == 5) {
+                  self._verify(accessToken, refreshToken, params, profile, verified);
+                } else { // arity == 4
+                  self._verify(accessToken, refreshToken, profile, verified);
+                }
+              }
+            } catch (ex) {
+              return self.error(ex);
+            }
+          });
+        }
+      );
+    }
+    
+    var state = req.query.state;
+    try {
+      var arity = this._stateStore.verify.length;
+      if (arity == 4) {
+        this._stateStore.verify(req, state, meta, loaded);
+      } else { // arity == 3
+        this._stateStore.verify(req, state, loaded);
+      }
+    } catch (ex) {
+      return this.error(ex);
+    }
+  } else {
+    var params = this.authorizationParams(options);
+    params.response_type = 'code';
+    if (callbackURL) { params.redirect_uri = callbackURL; }
+    var scope = options.scope || this._scope;
+    if (scope) {
+      if (Array.isArray(scope)) { scope = scope.join(this._scopeSeparator); }
+      params.scope = scope;
+    }
+
+    var state = options.state;
+    if (state) {
+      params.state = state;
+      
+      var parsed = url.parse(this._oauth2._authorizeUrl, true);
+      utils.merge(parsed.query, params);
+      parsed.query['client_id'] = this._oauth2._clientId;
+      delete parsed.search;
+      var location = url.format(parsed);
+      this.redirect(location);
+    } else {
+      function stored(err, state) {
+        if (err) { return self.error(err); }
+
+        if (state) { params.state = state; }
+        var parsed = url.parse(self._oauth2._authorizeUrl, true);
+        utils.merge(parsed.query, params);
+        parsed.query['client_id'] = self._oauth2._clientId;
+        delete parsed.search;
+        var location = url.format(parsed);
+        self.redirect(location);
+      }
+      
+      try {
+        var arity = this._stateStore.store.length;
+        if (arity == 3) {
+          this._stateStore.store(req, meta, stored);
+        } else { // arity == 2
+          this._stateStore.store(req, stored);
+        }
+      } catch (ex) {
+        return this.error(ex);
+      }
+    }
+  }
+};
+
+/**
+ * Retrieve user profile from service provider.
+ *
+ * OAuth 2.0-based authentication strategies can overrride this function in
+ * order to load the user's profile from the service provider.  This assists
+ * applications (and users of those applications) in the initial registration
+ * process by automatically submitting required information.
+ *
+ * @param {String} accessToken
+ * @param {Function} done
+ * @api protected
+ */
+OAuth2Strategy.prototype.userProfile = function(accessToken, done) {
+  return done(null, {});
+};
+
+/**
+ * Return extra parameters to be included in the authorization request.
+ *
+ * Some OAuth 2.0 providers allow additional, non-standard parameters to be
+ * included when requesting authorization.  Since these parameters are not
+ * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication
+ * strategies can overrride this function in order to populate these parameters
+ * as required by the provider.
+ *
+ * @param {Object} options
+ * @return {Object}
+ * @api protected
+ */
+OAuth2Strategy.prototype.authorizationParams = function(options) {
+  return {};
+};
+
+/**
+ * Return extra parameters to be included in the token request.
+ *
+ * Some OAuth 2.0 providers allow additional, non-standard parameters to be
+ * included when requesting an access token.  Since these parameters are not
+ * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication
+ * strategies can overrride this function in order to populate these parameters
+ * as required by the provider.
+ *
+ * @return {Object}
+ * @api protected
+ */
+OAuth2Strategy.prototype.tokenParams = function(options) {
+  return {};
+};
+
+/**
+ * Parse error response from OAuth 2.0 endpoint.
+ *
+ * OAuth 2.0-based authentication strategies can overrride this function in
+ * order to parse error responses received from the token endpoint, allowing the
+ * most informative message to be displayed.
+ *
+ * If this function is not overridden, the body will be parsed in accordance
+ * with RFC 6749, section 5.2.
+ *
+ * @param {String} body
+ * @param {Number} status
+ * @return {Error}
+ * @api protected
+ */
+OAuth2Strategy.prototype.parseErrorResponse = function(body, status) {
+  var json = JSON.parse(body);
+  if (json.error) {
+    return new TokenError(json.error_description, json.error, json.error_uri);
+  }
+  return null;
+};
+
+/**
+ * Load user profile, contingent upon options.
+ *
+ * @param {String} accessToken
+ * @param {Function} done
+ * @api private
+ */
+OAuth2Strategy.prototype._loadUserProfile = function(accessToken, done) {
+  var self = this;
+
+  function loadIt() {
+    return self.userProfile(accessToken, done);
+  }
+  function skipIt() {
+    return done(null);
+  }
+
+  if (typeof this._skipUserProfile == 'function' && this._skipUserProfile.length > 1) {
+    // async
+    this._skipUserProfile(accessToken, function(err, skip) {
+      if (err) { return done(err); }
+      if (!skip) { return loadIt(); }
+      return skipIt();
+    });
+  } else {
+    var skip = (typeof this._skipUserProfile == 'function') ? this._skipUserProfile() : this._skipUserProfile;
+    if (!skip) { return loadIt(); }
+    return skipIt();
+  }
+};
+
+/**
+ * Create an OAuth error.
+ *
+ * @param {String} message
+ * @param {Object|Error} err
+ * @api private
+ */
+OAuth2Strategy.prototype._createOAuthError = function(message, err) {
+  var e;
+  if (err.statusCode && err.data) {
+    try {
+      e = this.parseErrorResponse(err.data, err.statusCode);
+    } catch (_) {}
+  }
+  if (!e) { e = new InternalOAuthError(message, err); }
+  return e;
+};
+
+
+// Expose constructor.
+module.exports = OAuth2Strategy;
diff --git a/node_modules/passport-oauth2/lib/utils.js b/node_modules/passport-oauth2/lib/utils.js
new file mode 100644
index 0000000..486f9e1
--- /dev/null
+++ b/node_modules/passport-oauth2/lib/utils.js
@@ -0,0 +1,32 @@
+exports.merge = require('utils-merge');
+
+/**
+ * Reconstructs the original URL of the request.
+ *
+ * This function builds a URL that corresponds the original URL requested by the
+ * client, including the protocol (http or https) and host.
+ *
+ * If the request passed through any proxies that terminate SSL, the
+ * `X-Forwarded-Proto` header is used to detect if the request was encrypted to
+ * the proxy, assuming that the proxy has been flagged as trusted.
+ *
+ * @param {http.IncomingMessage} req
+ * @param {Object} [options]
+ * @return {String}
+ * @api private
+ */
+exports.originalURL = function(req, options) {
+  options = options || {};
+  var app = req.app;
+  if (app && app.get && app.get('trust proxy')) {
+    options.proxy = true;
+  }
+  var trustProxy = options.proxy;
+  
+  var proto = (req.headers['x-forwarded-proto'] || '').toLowerCase()
+    , tls = req.connection.encrypted || (trustProxy && 'https' == proto.split(/\s*,\s*/)[0])
+    , host = (trustProxy && req.headers['x-forwarded-host']) || req.headers.host
+    , protocol = tls ? 'https' : 'http'
+    , path = req.url || '';
+  return protocol + '://' + host + path;
+};
diff --git a/node_modules/passport-oauth2/package.json b/node_modules/passport-oauth2/package.json
new file mode 100644
index 0000000..1ab9f8e
--- /dev/null
+++ b/node_modules/passport-oauth2/package.json
@@ -0,0 +1,79 @@
+{
+  "_from": "passport-oauth2@1.x.x",
+  "_id": "passport-oauth2@1.4.0",
+  "_inBundle": false,
+  "_integrity": "sha1-9i+BWDy+EmCb585vFguTlaJ7hq0=",
+  "_location": "/passport-oauth2",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "range",
+    "registry": true,
+    "raw": "passport-oauth2@1.x.x",
+    "name": "passport-oauth2",
+    "escapedName": "passport-oauth2",
+    "rawSpec": "1.x.x",
+    "saveSpec": null,
+    "fetchSpec": "1.x.x"
+  },
+  "_requiredBy": [
+    "/passport-facebook"
+  ],
+  "_resolved": "https://registry.npmjs.org/passport-oauth2/-/passport-oauth2-1.4.0.tgz",
+  "_shasum": "f62f81583cbe12609be7ce6f160b9395a27b86ad",
+  "_spec": "passport-oauth2@1.x.x",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge\\node_modules\\passport-facebook",
+  "author": {
+    "name": "Jared Hanson",
+    "email": "jaredhanson@gmail.com",
+    "url": "http://www.jaredhanson.net/"
+  },
+  "bugs": {
+    "url": "http://github.com/jaredhanson/passport-oauth2/issues"
+  },
+  "bundleDependencies": false,
+  "dependencies": {
+    "oauth": "0.9.x",
+    "passport-strategy": "1.x.x",
+    "uid2": "0.0.x",
+    "utils-merge": "1.x.x"
+  },
+  "deprecated": false,
+  "description": "OAuth 2.0 authentication strategy for Passport.",
+  "devDependencies": {
+    "chai": "2.x.x",
+    "chai-passport-strategy": "1.x.x",
+    "make-node": "0.3.x",
+    "mocha": "2.x.x"
+  },
+  "engines": {
+    "node": ">= 0.4.0"
+  },
+  "homepage": "https://github.com/jaredhanson/passport-oauth2#readme",
+  "keywords": [
+    "passport",
+    "auth",
+    "authn",
+    "authentication",
+    "authz",
+    "authorization",
+    "oauth",
+    "oauth2"
+  ],
+  "license": "MIT",
+  "licenses": [
+    {
+      "type": "MIT",
+      "url": "http://opensource.org/licenses/MIT"
+    }
+  ],
+  "main": "./lib",
+  "name": "passport-oauth2",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/jaredhanson/passport-oauth2.git"
+  },
+  "scripts": {
+    "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js test/**/*.test.js"
+  },
+  "version": "1.4.0"
+}
diff --git a/node_modules/uid2/LICENSE b/node_modules/uid2/LICENSE
new file mode 100644
index 0000000..bdfab69
--- /dev/null
+++ b/node_modules/uid2/LICENSE
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) 2013 Marco Aurelio
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
\ No newline at end of file
diff --git a/node_modules/uid2/index.js b/node_modules/uid2/index.js
new file mode 100644
index 0000000..6240b30
--- /dev/null
+++ b/node_modules/uid2/index.js
@@ -0,0 +1,55 @@
+/**
+ * Module dependencies
+ */
+
+var crypto = require('crypto');
+
+/**
+ * 62 characters in the ascii range that can be used in URLs without special
+ * encoding.
+ */
+var UIDCHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+
+/**
+ * Make a Buffer into a string ready for use in URLs
+ *
+ * @param {String}
+ * @returns {String}
+ * @api private
+ */
+function tostr(bytes) {
+  var chars, r, i;
+
+  r = [];
+  for (i = 0; i < bytes.length; i++) {
+    r.push(UIDCHARS[bytes[i] % UIDCHARS.length]);
+  }
+
+  return r.join('');
+}
+
+/**
+ * Generate an Unique Id
+ *
+ * @param {Number} length  The number of chars of the uid
+ * @param {Number} cb (optional)  Callback for async uid generation
+ * @api public
+ */
+
+function uid(length, cb) {
+
+  if (typeof cb === 'undefined') {
+    return tostr(crypto.pseudoRandomBytes(length));
+  } else {
+    crypto.pseudoRandomBytes(length, function(err, bytes) {
+       if (err) return cb(err);
+       cb(null, tostr(bytes));
+    })
+  }
+}
+
+/**
+ * Exports
+ */
+
+module.exports = uid;
diff --git a/node_modules/uid2/package.json b/node_modules/uid2/package.json
new file mode 100644
index 0000000..5fb5507
--- /dev/null
+++ b/node_modules/uid2/package.json
@@ -0,0 +1,34 @@
+{
+  "_from": "uid2@0.0.x",
+  "_id": "uid2@0.0.3",
+  "_inBundle": false,
+  "_integrity": "sha1-SDEm4Rd03y9xuLY53NeZw3YWK4I=",
+  "_location": "/uid2",
+  "_phantomChildren": {},
+  "_requested": {
+    "type": "range",
+    "registry": true,
+    "raw": "uid2@0.0.x",
+    "name": "uid2",
+    "escapedName": "uid2",
+    "rawSpec": "0.0.x",
+    "saveSpec": null,
+    "fetchSpec": "0.0.x"
+  },
+  "_requiredBy": [
+    "/passport-oauth2"
+  ],
+  "_resolved": "https://registry.npmjs.org/uid2/-/uid2-0.0.3.tgz",
+  "_shasum": "483126e11774df2f71b8b639dcd799c376162b82",
+  "_spec": "uid2@0.0.x",
+  "_where": "C:\\Users\\Ivan\\Documents\\gbmChallenge\\node_modules\\passport-oauth2",
+  "bundleDependencies": false,
+  "dependencies": {},
+  "deprecated": false,
+  "description": "strong uid",
+  "name": "uid2",
+  "tags": [
+    "uid"
+  ],
+  "version": "0.0.3"
+}
diff --git a/package-lock.json b/package-lock.json
index 7c832d6..31402af 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -3590,6 +3590,11 @@
         "on-headers": "~1.0.1"
       }
     },
+    "mout": {
+      "version": "0.11.1",
+      "resolved": "https://registry.npmjs.org/mout/-/mout-0.11.1.tgz",
+      "integrity": "sha1-ujYR318OWx/7/QEWa48C0fX6K5k="
+    },
     "mpath": {
       "version": "0.5.1",
       "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.5.1.tgz",
@@ -3760,6 +3765,27 @@
       "resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.1.0.tgz",
       "integrity": "sha512-ZG3bLAvdHmhIjaQ/Db1qvBxsGvFMLIRpQszyqbg31VJ53UP++uZX1/gf3Ut96pdwN9AuDwlMqIYLm0UPCdUeHg=="
     },
+    "nyks": {
+      "version": "2.31.3",
+      "resolved": "https://registry.npmjs.org/nyks/-/nyks-2.31.3.tgz",
+      "integrity": "sha1-Pa/bu+t2VRnECyN0fpGYw5oQNro=",
+      "requires": {
+        "async": "^2.0.0",
+        "mout": "^1.0.0"
+      },
+      "dependencies": {
+        "mout": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/mout/-/mout-1.1.0.tgz",
+          "integrity": "sha512-XsP0vf4As6BfqglxZqbqQ8SR6KQot2AgxvR0gG+WtUkf90vUXchMOZQtPf/Hml1rEffJupqL/tIrU6EYhsUQjw=="
+        }
+      }
+    },
+    "oauth": {
+      "version": "0.9.15",
+      "resolved": "https://registry.npmjs.org/oauth/-/oauth-0.9.15.tgz",
+      "integrity": "sha1-vR/vr2hslrdUda7VGWQS/2DPucE="
+    },
     "oauth-sign": {
       "version": "0.9.0",
       "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
@@ -3844,6 +3870,15 @@
         "wrappy": "1"
       }
     },
+    "openssl": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/openssl/-/openssl-1.1.0.tgz",
+      "integrity": "sha1-cvklV37QyZUxMG+E0RU8oQvTrv0=",
+      "requires": {
+        "mout": "^0.11.1",
+        "nyks": "^2.9.0"
+      }
+    },
     "optimist": {
       "version": "0.6.1",
       "resolved": "https://registry.npmjs.org/optimist/-/optimist-0.6.1.tgz",
@@ -3976,6 +4011,14 @@
         "pause": "0.0.1"
       }
     },
+    "passport-facebook": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/passport-facebook/-/passport-facebook-3.0.0.tgz",
+      "integrity": "sha512-K/qNzuFsFISYAyC1Nma4qgY/12V3RSLFdFVsPKXiKZt434wOvthFW1p7zKa1iQihQMRhaWorVE1o3Vi1o+ZgeQ==",
+      "requires": {
+        "passport-oauth2": "1.x.x"
+      }
+    },
     "passport-jwt": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.0.tgz",
@@ -3993,6 +4036,17 @@
         "passport-strategy": "1.x.x"
       }
     },
+    "passport-oauth2": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/passport-oauth2/-/passport-oauth2-1.4.0.tgz",
+      "integrity": "sha1-9i+BWDy+EmCb585vFguTlaJ7hq0=",
+      "requires": {
+        "oauth": "0.9.x",
+        "passport-strategy": "1.x.x",
+        "uid2": "0.0.x",
+        "utils-merge": "1.x.x"
+      }
+    },
     "passport-strategy": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
@@ -5123,6 +5177,11 @@
         "random-bytes": "~1.0.0"
       }
     },
+    "uid2": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/uid2/-/uid2-0.0.3.tgz",
+      "integrity": "sha1-SDEm4Rd03y9xuLY53NeZw3YWK4I="
+    },
     "undefsafe": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.2.tgz",
diff --git a/package.json b/package.json
index 56befb9..aa47d64 100644
--- a/package.json
+++ b/package.json
@@ -34,7 +34,9 @@
     "mongoose": "^5.4.12",
     "morgan": "^1.9.1",
     "nodemon": "^1.18.10",
+    "openssl": "^1.1.0",
     "passport": "^0.4.0",
+    "passport-facebook": "^3.0.0",
     "passport-jwt": "^4.0.0",
     "passport-local": "^1.0.0"
   }
diff --git a/passport.js b/passport.js
index b76d821..76cd87c 100644
--- a/passport.js
+++ b/passport.js
@@ -1,7 +1,10 @@
-var localStrategy = require('passport-local').Strategy;
+const localStrategy = require('passport-local').Strategy;
+const FacebookStrategy = require('passport-facebook').Strategy;
+
 const User = require('./models/user');
 const Notification = require('./models/notification');
 
+
 module.exports = function (passport) {
     passport.serializeUser(function (user, done) {
         done(null, user)
@@ -23,7 +26,8 @@ module.exports = function (passport) {
                         // do not add password hash to session
                         done(null, {
                             username: doc.username,
-                            id: doc._id
+                            id: doc._id,
+                            isAdmin:doc.isAdmin
                         })
                     } else {
                         var failsAttempts = doc.failsAttempts + 1;
@@ -34,9 +38,9 @@ module.exports = function (passport) {
                         }
                         else{
                             doc.set({failsAttempts, 'isBlocked': true}).save();
-                            done(null, false, req.flash('message',  'El usuario ha sido bloquedo, maximo de intentos alcanzado'));
+                            done(null, false, req.flash('message',  'El usuario ' +username+ ' ha sido bloquedo, maximo de intentos alcanzado'));
                             var notification = new Notification();
-                            notification.message = 'El usuario ha sido bloquedo, maximo de intentos alcanzado';
+                            notification.message = 'El usuario ' +username+ ' ha sido bloquedo, maximo de intentos alcanzado';
                             notification.save(function (err, user) {
                                 if (err) {
                                     console.log('db error')
@@ -52,4 +56,20 @@ module.exports = function (passport) {
             }
         })
     }))
-}
\ No newline at end of file
+
+    passport.use(new FacebookStrategy({
+        clientID: "2332996226929990",
+        clientSecret: "4f23be50fb6b9f588e517021c386bde8",
+        callbackURL: "https://localhost:3000/auth/facebook/callback"
+      },
+      function(accessToken, refreshToken, profile, done) {
+        var user = User();
+        user.username = profile.displayName;
+        user.passport = "";
+          done(null, user);
+      }
+    ));
+}
+
+
+
diff --git a/public/admin.html b/public/admin.html
deleted file mode 100644
index 57819c9..0000000
--- a/public/admin.html
+++ /dev/null
@@ -1,126 +0,0 @@
-
-<!DOCTYPE html>
-<html lang="es">
-<head>
-	<meta charset="UTF-8">
-	<meta name="viewport" content="width=device-width, initial-scale=1.0">
-	<meta http-equiv="X-UA-Compatible" content="ie=edge">
-	<title>GBM Challenge</title>
-
-
-	<meta http-equiv="X-UA-Compatible" content="IE=edge">
-	
-	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
-	<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ" crossorigin="anonymous"></script>
-	<script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js" integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd" crossorigin="anonymous"></script>
-
-	<script>
-	
-
-
-	</script>
-	
-	
-</head>
-<body>
-<header>
-	<nav class="navbar navbar-default">
-		<div class="container-fluid">
-		<!-- Brand and toggle get grouped for better mobile display -->
-		<div class="navbar-header">
-			<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
-			<span class="sr-only">Toggle navigation</span>
-			<span class="icon-bar"></span>
-			<span class="icon-bar"></span>
-			<span class="icon-bar"></span>
-			</button>
-			<a class="navbar-brand" href="/">GBM Challenge</a>
-		</div>
-
-		<!-- Collect the nav links, forms, and other content for toggling -->
-		<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
-			<ul class="nav navbar-nav">
-			
-			<li class="dropdown">
-				<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Administración <span class="caret"></span></a>
-				<ul class="dropdown-menu">
-				<li><a href="#">Ver usuarios</a></li>
-				
-                <li role="separator" class="divider"></li>
-                
-				<li><a href="#">Agregar usuario</a></li>
-                <li><a href="#">Editar usuarios</a></li>
-                <li><a href="#">Eliminar usuarios</a></li>
-				</ul>
-			</li>
-			</ul>
-
-			<ul class="nav navbar-nav navbar-right">
-			<li><a href="#">Hola Iván</a></li>
-			
-			</ul>
-		</div><!-- /.navbar-collapse -->
-		</div><!-- /.container-fluid -->
-	</nav>
-</header>
-
-
-<section>
-        <div class="alert alert-success" role="alert">...</div> 
-		<div class="panel panel-default">
-                <div class="panel-heading">
-                  <h3 class="panel-title">Agregar usuario</h3>
-                </div>
-                <div class="panel-body">
-                        <div class="input-group">
-                                <span class="input-group-addon" id="basic-addon1">@</span>
-                                <input type="email" class="form-control" placeholder="Correo electónico" aria-describedby="basic-addon1">
-                              </div>
-                              
-                </div>
-                <div class="panel-body">
-                        <div class="input-group">
-                               
-                                <input type="password" class="form-control" placeholder="Password" aria-describedby="basic-addon1">
-                              </div>
-                              
-                </div>
-
-                <div class="panel-body">
-                        <div class="input-group">
-                                
-                                <input type="password" class="form-control" placeholder="Confirmar password" aria-describedby="basic-addon1">
-                              </div>
-                              
-                </div>
-
-                <div class="panel-body">
-                <div class="dropdown">
-                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
-                          Dropdown
-                          <span class="caret"></span>
-                        </button>
-                        <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
-                          <li><a href="#">Usuario normal</a></li>
-                          <li><a href="#">Administrador</a></li>
-
-                        </ul>
-                      </div>
-
-                      <button type="button" class="btn btn-default">Cancelar</button>
-
-                      <button type="button" class="btn btn-success">Agregar</button>
-
-</div>
-              </div>
-
-	
-</section>
-
-<footer>
-</footer>
-	
-	
-</body>
-
-</html>
\ No newline at end of file
diff --git a/public/css/styles.css b/public/css/styles.css
index afa46a5..bb88839 100644
--- a/public/css/styles.css
+++ b/public/css/styles.css
@@ -33,11 +33,12 @@
 
 .footer{
     background: #eee;
-    height: 110px;
+    height: 150px;
 }
 .redesSociales{
     margin: 0 auto;
     width: 232px;
+    margin-top: 50px;
 }
 
 .redesSociales img{
diff --git a/public/index2.html b/public/index2.html
deleted file mode 100644
index 09785dd..0000000
--- a/public/index2.html
+++ /dev/null
@@ -1,197 +0,0 @@
-
-<!DOCTYPE html>
-<html lang="es">
-<head>
-	<meta charset="UTF-8">
-	<meta name="viewport" content="width=device-width, initial-scale=1.0">
-	<title>GBM Challenge</title>
-	<meta http-equiv="X-UA-Compatible" content="IE=edge">
-	
-	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
-	<link rel="stylesheet" href="css/styles.css">
-	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">
-
-	<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ" crossorigin="anonymous"></script>
-	<script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js" integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd" crossorigin="anonymous"></script>
-	<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
-	<script src="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
-
-	<script>
-	
-	var json = null;
-
-	function getMaxOfArray(numArray) {
-  		return Math.max.apply(null, numArray);
-	}
-	function getMinOfArray(numArray) {
- 		return Math.min.apply(null, numArray);
-	}
-	
-	$(function(){
-	
-	fetch('/service.json')
-	.then(function(response) {
-		return response.json();
-	})
-	.then(function(myJson) {
-		json = myJson;
-		console.log( myJson);
-
-
-		var valuesArray = new Array();
-		for(val in json.resultObj ){
-		valuesArray.push( json.resultObj[val].Precio);
-
-		}
-
-		console.log(valuesArray);
-		
-
-var ymax = Math.round( getMaxOfArray(valuesArray)) + 50;
-var ymin = Math.round( getMinOfArray(valuesArray)) -50;
-
-	new Morris.Area({
-		element: 'myfirstchart',
-		data: json.resultObj ,
-		xkey: 'Fecha',
-		ykeys: ['Precio'],
-		labels: ['Precio'],
-		hideHover:"auto",
-		resize:true,
-		smooth :false,
-		pointSize:0,
-		ymax,
-		ymin
-	});
-	});
-	})
-
-	</script>
-	
-	
-</head>
-<body>
-		<% include partials/header.ejs %>
-<section class="container-fluid">
-	<div class="row">
-		<div class="col-md-3">
-		<div class="panel panel-default ">
-                <div class="panel-heading">
-                  <h3 class="panel-title">Indices</h3>
-                </div>
-                <div class="panel-body">
-						<table class="table">
-								<tbody>
-								  <tr>
-									<th scope="row">IPC</th>
-								  </tr>
-								  <tr>
-									<td >DOW</td>
-								  </tr>
-								  <tr>
-									<td >S&P</td>
-								  </tr>
-								  <tr>
-									<td scope="row">NASDAQ</td>
-								 </tr>
-								<tr>
-									<td scope="row">BOVESPA</td>
-								 </tr>
-								</tbody>
-							  </table>
-				</div>
-		</div>
-	</div>
-	<div class="col-md-9">
-		<div class="panel panel-default">
-                <div class="panel-heading">
-                  <h3 class="panel-title">Indice de precios y cotizaciones</h3>
-                </div>
-                <div class="panel-body">
-					<div id="myfirstchart" style="height: 250px;"></div>
-				</div>
-		</div>
-	</div>
-	</div>
-
-	<div class="row">
-			<div class="col-md-9 col-md-push-3">
-					<div class="panel panel-default">
-							<div class="panel-heading">
-							  <h3 class="panel-title">Resumen</h3>
-							</div>
-							<div class="panel-body">
-									<table class="table">
-											
-											<thead>
-											  <tr>
-												<td></td>
-												<th>IPC</th>
-												<th>DOW</th>
-												<th>S&P</th>
-												<th>NASDAQ</th>
-												<th>BOVESPA</th>
-											  </tr>
-											</thead>
-											<tbody>
-											  <tr>
-												<th scope="row">Anterior</th>
-												<td>42725.22</td> 
-												<td>0</td>
-												<td>2743.4</td>   
-												<td>7426.96</td>   
-												<td>98015.09</td>   
-											  </tr>
-											  <tr>
-												<th scope="row">Ultimo</th>
-												<td>42988.72</td>
-												<td>0</td>
-												<td>2777.2</td>
-												<td>7472.41</td>
-												<td>97525.94</td>
-											  </tr>
-											  <tr >
-												<th scope="row">Cambio</th>
-												<td class="up">263.5</td>
-												<td class="up">0</td>
-												<td class="up">33.8</td>
-												<td class="up">45.46</td>
-												<td class="down">-489.15</td>
-											  </tr>
-											  <tr class="r-pcambio">
-												<th scope="row">% Cambio</th>
-													<td class="up"><span class="glyphicon glyphicon glyphicon-triangle-top"></span>0.62%</td>
-													<td class="up"><span class="glyphicon glyphicon glyphicon-triangle-top"></span>0%</td>
-													<td class="up"><span class="glyphicon glyphicon glyphicon-triangle-top"></span>1.23%</td>
-													<td class="up"><span class="glyphicon glyphicon glyphicon-triangle-top"></span>0.61%</td>
-													<td class="down"><span class="glyphicon glyphicon glyphicon-triangle-bottom"></span>-0.5%</td>
-												  </tr>
-											</tbody>
-										  </table>
-							</div>
-					</div>
-				</div>
-	</div>
-</section>
-
-
-<ol class="breadcrumb">
-		<li><a href="#">Inicio</a></li>
-		<li><a href="#">IPC</a></li>
-	  </ol>
-<footer class="container-fluid">
-				<div class="row">
-					Siguenos en nuestras redes sociales
-				
-				<div class="redesSociales">
-					<img src="/img/facebook.png" alt="Facebook" class="img-rounded">
-					<img src="/img/twitter.png" alt="Twitter" class="img-rounded">
-					<img src="/img/linkedin.png" alt="Linkedin" class="img-rounded">
-			</div> 
-				</div>
-</footer>
-	
-	
-</body>
-
-</html>
\ No newline at end of file
diff --git a/public/login.html b/public/login.html
deleted file mode 100644
index 4fb18ed..0000000
--- a/public/login.html
+++ /dev/null
@@ -1,105 +0,0 @@
-
-<!DOCTYPE html>
-<html lang="es">
-<head>
-	<meta charset="UTF-8">
-	<meta name="viewport" content="width=device-width, initial-scale=1.0">
-	<title>GBM Challenge</title>
-	<meta http-equiv="X-UA-Compatible" content="IE=edge">
-	
-	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
-	<link rel="stylesheet" href="css/styles.css">
-	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">
-
-	<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ" crossorigin="anonymous"></script>
-	<script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js" integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd" crossorigin="anonymous"></script>
-
-
-	<script>
-	
-	
-
-	</script>
-	
-	
-</head>
-<body>
-<header>
-		<nav class="navbar navbar-default">
-				<div class="container-fluid">
-		
-				<div class="navbar-header">
-
-					<a class="navbar-brand" href="#">GBM Challenge</a>
-				</div>
-		
-				</div>
-			</nav>
-</header>
-
-
-<section class="container-fluid">
-	<div class="row">
-		<div class="col-sm-6 col-sm-push-3">
-		<div class="panel panel-default ">
-								<div class="panel-heading">
-									<h2 class="panel-title">Inicio de sesión</h2>
-								</div>
-								<div class="panel-body">
-												<form method="post" action="/signin">
-																<div class="form-group">
-																	<label for="exampleInputEmail1">Email</label>
-																	<input type="email" class="form-control" name="username" placeholder="Email">
-																</div>
-																<div class="form-group">
-																	<label for="exampleInputPassword1">Contraseña</label>
-																	<input type="password" class="form-control" name="password" placeholder="Password">
-																</div>
-																<div class="form-group">
-																<button type="submit" class="btn btn-primary ">Iniciar sessión</button>
-														</div>
-
-																
-															</form>
-															<div class="divider"></div>
-															<div class="form-group">
-
-																		<button class="btn btn-danger">Inicia sesión con Google +</button>
-														</div>
-				</div>
-		</div>
-	</div>
-	
-	</div>
-
-</section>
-
-
-<ol class="breadcrumb">
-		<li><a href="#">Login</a></li>
-		</ol>
-<footer class="container-fluid">
-				<div class="row footer">
-					
-				
-				<div class="redesSociales">
-					<a href="https://www.facebook.com" target="_blank" rel="noopener">
-							<img src="/img/facebook.png" alt="Facebook" class="img-rounded">
-					</a>
-					<a href="https://www.twitter.com" target="_blank" rel="noopener">
-						<img src="/img/twitter.png" alt="Twitter" class="img-rounded">
-				</a>
-				<a href="https://www.linkedin.com" target="_blank" rel="noopener">
-					<img src="/img/linkedin.png" alt="Linkedin" class="img-rounded">
-			</a>
-			Siguenos en nuestras redes sociales
-			</div> 
-
-		<label>	Ivan Flores 2019 </label>
-				</div>
-</footer>
-	
-	
-</body>
-
-</html>
\ No newline at end of file
diff --git a/routes/auth.js b/routes/auth.js
index ffc4841..75937ff 100644
--- a/routes/auth.js
+++ b/routes/auth.js
@@ -10,6 +10,7 @@ module.exports = function (passport) {
         var body = req.body,
             username = body.username,
             password = body.password;
+            rol = body.rol;
         User.findOne({
             username: username
         }, function (err, doc) {
@@ -21,7 +22,8 @@ module.exports = function (passport) {
                 } else {
                     var record = new User()
                     record.username = username;
-                    record.password = record.hashPassword(password)
+                    record.password = record.hashPassword(password);
+                    record.isAdmin = (rol == 'admin')? true:false;
                     record.save(function (err, user) {
                         if (err) {
                             res.status(500).send('db error')
@@ -42,5 +44,32 @@ module.exports = function (passport) {
     }), function (req, res) {
         res.send('hey')
     })
+
+    router.post('/userOperations', function (req, res) {
+        var body = req.body,
+            username = body.username,
+            isAdmin = body.isAdmin;
+            isBlocked = body.isBlocked;
+            operation = body.operation;
+
+        User.findOne({
+            username: username
+        }, function (err, doc) {
+            if (err) {
+                res.send('Ha ocurrido un error')
+            } else {
+                    doc.set( ).save(function (err, user) {
+                        if (err) {
+                            res.send('Error en la base de datos')
+                        } else {
+                            res.send('registro exitoso')
+                        }
+                    })
+                
+            }
+        })
+    });
+
+
     return router;
 };
\ No newline at end of file
diff --git a/routes/index.js b/routes/index.js
index c143d31..40372d0 100644
--- a/routes/index.js
+++ b/routes/index.js
@@ -1,61 +1,118 @@
 var express = require('express');
+var passport = require('passport');
 var router = express.Router();
 const User = require('../models/user');
 const Notification = require('../models/notification');
+const https = require('https');
+const request = require('request');
 
+var currentUser = null;
 var loggedin = function (req, res, next) {
+  
   if (req.isAuthenticated()) {
+    currentUser = req.user;
     next()
   } else {
     res.redirect('/login')
   }
 }
 
+var admin = function (req, res, next) {
+    console.log(req.user.isAdmin)
+    if (req.isAuthenticated()) {
+      next()
+    } else {
+      res.redirect('/login')
+    }
+  }
+
 /* GET home page. */
 router.get('/', loggedin, function (req, res, next) {
   res.render('index', {
-    title: 'Express'
+    user: currentUser
   });
 });
 
 
 router.get('/login', function (req, res, next) {
- 
-
     res.render('login',{ messages: req.flash('message') });
-  
 });
 
-
 router.get('/signup', function (req, res, next) {
   res.render('signup');
 });
 
 
-router.get('/profile', loggedin, function (req, res, next) {
-  res.render('profile', {
-    user: req.user
-  })
-});
-
-
 router.get('/logout', function (req, res) {
   req.logout()
   res.redirect('/login')
 })
 
-router.get('/blocked', function (req, res) {
-  res.render('blocked');
+router.get('/users',loggedin, function (req, res) {
+  User.find({},  function (err, doc) {
+    console.log(doc);
+    res.render('users', { users: doc, user:currentUser });
+  })
 })
 
-router.get('/users', function (req, res) {
-  User.find({},  function (err, doc) {
+router.get('/notifications',loggedin, function (req, res) {
+    Notification.find({ }).sort({date: -1}).exec(  function (err, doc) {
     console.log(doc);
-    res.render('users', { users: doc });
+    res.render('notifications', { messages: doc, user:currentUser });
   })
-  
+})
 
-  
+router.get('/getIPC', function (req, res) {
+
+        request('https://www.gbm.com.mx/Mercados/ObtenerDatosGrafico?empresa=IPC', (err, response, body) => {
+            if (err) { return console.log(err); }
+            res.send(body);
+        
+          });
 })
 
+    router.post('/userOperations', function (req, res) {
+        var body = req.body,
+            username = body.username,
+            isAdmin = body.isAdmin;
+            isBlocked = body.isBlocked;
+            operation = body.operation;
+
+        User.findOne({
+            username: username
+        }, function (err, doc) {
+            if (err) {
+                res.send('Ha ocurrido un error')
+            } else {
+
+              switch(operation){
+                case "save":
+                  doc.set({ isAdmin, isBlocked }).save(result)
+                break;
+
+                case "reset":
+                    doc.set({ isAdmin:false, isBlocked:false, failsAttempts:0}).save(result)
+                break;
+                case "delete":
+                    doc.remove(result);
+                break
+              }
+                    function result(err, user) {
+                      if (err) {
+                          res.send('Error en la base de datos')
+                      } else {
+                          res.send('Operación '+ operation+ ' exitosa')
+                      }
+                  }
+            }
+        })
+    });
+
+
+router.get('/auth/facebook', passport.authenticate('facebook'));
+
+router.get('/auth/facebook/callback',
+  passport.authenticate('facebook', { successRedirect: '/',
+                                      failureRedirect: '/login' }));
+
 module.exports = router;
\ No newline at end of file
diff --git a/routes/user.js b/routes/user.js
new file mode 100644
index 0000000..448bee2
--- /dev/null
+++ b/routes/user.js
@@ -0,0 +1,23 @@
+const express = require('express');
+const router = require('express-promise-router')();
+const passport = require('passport');
+const passportConf = require('../passport');
+
+const { validateBody, schemas } = require('../helpers/routeHelpers');
+const UsersController = require('../controllers/users');
+const passportSignIn = passport.authenticate('local', { session: true });
+
+router.route('/signup')
+  .post(validateBody(schemas.authSchema), UsersController.signUp);
+
+router.route('/signin')
+  .post(validateBody(schemas.authSchema), passportSignIn, UsersController.signIn);
+
+router.route('/secret')
+  .get(passportSignIn, UsersController.secret);
+
+
+  router.route('/secret')
+  .get(passportSignIn, UsersController.secret);
+
+module.exports = router;
diff --git a/server.cert b/server.cert
new file mode 100644
index 0000000..ec772e2
--- /dev/null
+++ b/server.cert
@@ -0,0 +1,23 @@
+-----BEGIN CERTIFICATE-----
+MIID1zCCAr+gAwIBAgIUASmRqpp0lOGmVZ4ZD+4LplKxy30wDQYJKoZIhvcNAQEL
+BQAwezELMAkGA1UEBhMCTVgxDTALBgNVBAgMBENETVgxDTALBgNVBAcMBENETVgx
+DDAKBgNVBAoMA1NTRTEMMAoGA1UECwwDdW5vMQwwCgYDVQQDDANTU0UxJDAiBgkq
+hkiG9w0BCQEWFWl2YW5fMTM0MUBob3RtYWlsLmNvbTAeFw0xOTAyMjAxNzA3NTZa
+Fw0xOTAzMjIxNzA3NTZaMHsxCzAJBgNVBAYTAk1YMQ0wCwYDVQQIDARDRE1YMQ0w
+CwYDVQQHDARDRE1YMQwwCgYDVQQKDANTU0UxDDAKBgNVBAsMA3VubzEMMAoGA1UE
+AwwDU1NFMSQwIgYJKoZIhvcNAQkBFhVpdmFuXzEzNDFAaG90bWFpbC5jb20wggEi
+MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDO+Wy8GfSPXODlzxJWhaKEwdiT
+eCMkjJ8U9pikW/C52h4QbnqfYYPrJprBKBZsbgxorwQzRm38i8YX504/PXcnJFpM
+IZ8aPUzodNaIokgeDkln/Ri8y1WiqoBEcgYMLq4kZCU21JQyfwn1/6vIuVda5EHe
+kdE2y0GgFiIEKcLQRCwLdVAhvWdQeZ8voD6Qh7PS8c2HQeS/29e/EzNI0ZFUs+ya
+pitcwA0GL/VysWWRd+kBLVwQssfMENGpZI0oWfPDU0nVqjDIavLTytf90xiej9Ua
+zThIb02kcJkjkIdy+yeQEuLWvbaABLxkA0RBZ0mmDnQiNEZ0pM/fZpnKicLDAgMB
+AAGjUzBRMB0GA1UdDgQWBBSkkfZLAXrCHktKB5b3HYBniP+egjAfBgNVHSMEGDAW
+gBSkkfZLAXrCHktKB5b3HYBniP+egjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3
+DQEBCwUAA4IBAQA+fW0Kw/SjfvG0A/bKGf6QYmGm6/JMjkXKZ5HPNP6fT4RVa/XK
+pX+ksUz2hL0visslBYtFWs4mvXVu5s4o7fI6f5LVblSacFm00iALzfBe9c/mnpk4
+YvY332CLz7X0ScWfjLgIldGFGOhtHI5tME5Ea+JS+0Ky4TrsysOCKVcrm7JvyAcx
+vQO4Q3aLvWTsQV/qOAfjotc7UKW3BIN8M6+qKjKiC8heGHvBg2qOjWMs6hMacz7C
+a6RTDgo2wlv5p6ovc378Yc5ofqdFMFb/0SIhvRyl4a4gY3znP0aMAmKiKgbchEkV
+ezWgaSTzmLhnejo5/30dXGmOZ05a0M6OqTBM
+-----END CERTIFICATE-----
diff --git a/server.key b/server.key
new file mode 100644
index 0000000..c8f43da
--- /dev/null
+++ b/server.key
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDO+Wy8GfSPXODl
+zxJWhaKEwdiTeCMkjJ8U9pikW/C52h4QbnqfYYPrJprBKBZsbgxorwQzRm38i8YX
+504/PXcnJFpMIZ8aPUzodNaIokgeDkln/Ri8y1WiqoBEcgYMLq4kZCU21JQyfwn1
+/6vIuVda5EHekdE2y0GgFiIEKcLQRCwLdVAhvWdQeZ8voD6Qh7PS8c2HQeS/29e/
+EzNI0ZFUs+yapitcwA0GL/VysWWRd+kBLVwQssfMENGpZI0oWfPDU0nVqjDIavLT
+ytf90xiej9UazThIb02kcJkjkIdy+yeQEuLWvbaABLxkA0RBZ0mmDnQiNEZ0pM/f
+ZpnKicLDAgMBAAECggEAEcYhrFWeRuF2/sU1kfCP8E6lRqS+f9kDoE089oBev9cX
+Vdnm9eDt7ze1enjy1ATvU94TwkN+Fn36WPsoIQ4qOVZJ2tfYTeyNujiuY7Vr9AjO
+DPwTL8NWa02xDi+sjUdE9SMUfwzqXRvDwzhdjDM+aTPI5FApY0c5L4I3EZx0emX4
+xeKOSI+ws69uxBBgSJPvcDEu1ecHt0UJQlfSbbGRYo9Ty+D7AJpB7t15dBKeWTo8
+UhZ0xhoYolmhKMbUynpSLEA7IaCU4M8rB1D0EKIa/Ijf//BcIEew0T3IP8TBn79n
+8dKy1GT3X9wjEjHSmM93m0gf+cb4zbW+ZQiIP3n8QQKBgQDsSdpIkqnzKd8+C1Ui
+/g/CbeK1S/CxBU7vnE9NsZeE7aZjITgDnz6B9gk232tkhMkG7m31UyqeDOadAjoY
+yQ1cAycxsdTnYpilxiXNxZv3U4Bks5zxe6BjYV5k9K/RbEen6/ml2RxgCTGAY9As
+VyMUzMrvChme8Ormp8sbCrB72QKBgQDgPYrUG6Gt20VMbDOe5RAM3O8du1LEFyCf
+v7yVdwWwg2d+aWIylcjAUpbPPnuRhdVisgHdKaj4mcM+6h93Z+QgGCAdJmS6sA3O
+H3nyT/OlFcGKkQUm7hzrrNikAp5rOQ3CLYfVI9k0xCzNFrhsw8gZbnkL1KZFxxzi
+uQVUiYbd+wKBgC0IHiu6l90Z28vtSPp0RPifDJfUszhpdJPBzHNYJzJUQGOgDxbR
+oI4QH81vYv4zOESz6AzbHsIkX0cJB511o7Anga6834CBj+n4C3hd8s1+Anguqvhy
+wSxvgBfpciCNbFKabGepKvk6h06aty/cI3lxVjOcTym1bG8tB05OCThxAoGAfqSj
+RHm6jSr6b1foq4Oo1ertLPh/nPmG1lH+WteWogMEr1MrP3ByqZO7Up5yQVS5l/z6
+qoJ9yLFmoKCvVsuY/jtB39SwLPODSHdkcuKOsxyfavfOVhdCxCOhUreb6uiVCaaX
+QVv2ryNgPg/n5p2H5D0NJg5aPaxfdviRtxXY0oMCgYAFrqWZ2KVc8keu6HIOWu1B
+R3MmUiwXkJM3rtOFbVPiuaKpIEnrsWAlgVGo6YIWIMCRsdeBvlatWoGCrAl/49xh
+E9RpMCCah7U5WJiS1vR0WavI1wdgHBlYrkWCzDGc0B3ICwH50NILqeezLOGapolV
+CceZU3bAZT3tllRJx+vBYQ==
+-----END PRIVATE KEY-----
diff --git a/views/index.ejs b/views/index.ejs
index 09785dd..8d6c96a 100644
--- a/views/index.ejs
+++ b/views/index.ejs
@@ -29,7 +29,7 @@
 	
 	$(function(){
 	
-	fetch('/service.json')
+	fetch('/getIPC')
 	.then(function(response) {
 		return response.json();
 	})
@@ -74,7 +74,7 @@ var ymin = Math.round( getMinOfArray(valuesArray)) -50;
 		<% include partials/header.ejs %>
 <section class="container-fluid">
 	<div class="row">
-		<div class="col-md-3">
+		<div class="col-md-3 hidden-xs">
 		<div class="panel panel-default ">
                 <div class="panel-heading">
                   <h3 class="panel-title">Indices</h3>
@@ -118,9 +118,9 @@ var ymin = Math.round( getMinOfArray(valuesArray)) -50;
 			<div class="col-md-9 col-md-push-3">
 					<div class="panel panel-default">
 							<div class="panel-heading">
-							  <h3 class="panel-title">Resumen</h3>
+							  <h3 class="panel-title">Resumen (datos simulados)</h3>
 							</div>
-							<div class="panel-body">
+							<div class="panel-body table-responsive">
 									<table class="table">
 											
 											<thead>
@@ -179,17 +179,7 @@ var ymin = Math.round( getMinOfArray(valuesArray)) -50;
 		<li><a href="#">Inicio</a></li>
 		<li><a href="#">IPC</a></li>
 	  </ol>
-<footer class="container-fluid">
-				<div class="row">
-					Siguenos en nuestras redes sociales
-				
-				<div class="redesSociales">
-					<img src="/img/facebook.png" alt="Facebook" class="img-rounded">
-					<img src="/img/twitter.png" alt="Twitter" class="img-rounded">
-					<img src="/img/linkedin.png" alt="Linkedin" class="img-rounded">
-			</div> 
-				</div>
-</footer>
+		<% include partials/footer.ejs %>
 	
 	
 </body>
diff --git a/views/login.ejs b/views/login.ejs
index 49e847d..1375431 100644
--- a/views/login.ejs
+++ b/views/login.ejs
@@ -79,12 +79,13 @@
 					Iniciar sessión
 				  </button>
 				</div>
+				¿No tienes cuenta?<a href="/signup"> registrate aquí</a>
 			  </form>
 			  <div class="divider"></div>
 			  <div class="form-group">
-				<button class="btn btn-danger">
-				  Inicia sesión con Google +
-				</button>
+				<a href="/auth/facebook" class="btn btn-danger">
+				  Inicia sesión con facebook
+				</a>
 			  </div>
 			</div>
 		  </div>
diff --git a/views/notifications.ejs b/views/notifications.ejs
index d91f089..6042855 100644
--- a/views/notifications.ejs
+++ b/views/notifications.ejs
@@ -16,37 +16,13 @@
 	<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
 	<script src="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
 
-	<script>
-	
-	var json = null;
-	
-	$(function(){
-	
-	fetch('/service.json')
-	.then(function(response) {
-		return response.json();
-	})
-	.then(function(myJson) {
-		json = myJson;
-		console.log( myJson);
-
-
-		var valuesArray = new Array();
-		for(val in json.resultObj ){
-		valuesArray.push( json.resultObj[val].Precio);
-
-		}
-
-		
-	</script>
-	
 	
 </head>
 <body>
 		<% include partials/header.ejs %>
 <section class="container-fluid">
 	<div class="row">
-		<div class="col-md-3">
+		<div class="col-md-3 hidden-xs">
 		<div class="panel panel-default ">
                 <div class="panel-heading">
                   <h3 class="panel-title">Indices</h3>
@@ -72,7 +48,7 @@
 	<div class="col-md-9">
 		<div class="panel panel-default">
                 <div class="panel-heading">
-                  <h3 class="panel-title">Usuarios</h3>
+                  <h3 class="panel-title">Notificaciones</h3>
                 </div>
                 <div class="panel-body">
 					<table class="table table-striped">
@@ -85,24 +61,13 @@
         </tr>
       </thead>
       <tbody>
-        <tr>
-          <th scope="row">1</th>
-          <td>Mark</td>
-          <td>Otto</td>
-         
-        </tr>
-        <tr>
-          <th scope="row">2</th>
-          <td>Jacob</td>
-          <td>Thornton</td>
-          
-        </tr>
-        <tr>
-          <th scope="row">3</th>
-          <td>Larry</td>
-          <td>the Bird</td>
-          
-        </tr>
+					<% messages.forEach(function(message,index){ %>
+						<tr>
+							<th scope="row"><%- index + 1  %></th>
+          		<td><%- message.date %></td>
+          		<td><%- message.message %></td>
+				</tr>
+				<% })%>
       </tbody>
     </table>
 				</div>
@@ -118,17 +83,7 @@
 		<li><a href="/">Inicio</a></li>
 		<li><a href="/users">Usuarios</a></li>
 	  </ol>
-<footer class="container-fluid">
-				<div class="row">
-					Siguenos en nuestras redes sociales
-				
-				<div class="redesSociales">
-					<img src="/img/facebook.png" alt="Facebook" class="img-rounded">
-					<img src="/img/twitter.png" alt="Twitter" class="img-rounded">
-					<img src="/img/linkedin.png" alt="Linkedin" class="img-rounded">
-			</div> 
-				</div>
-</footer>
+		<% include partials/footer.ejs %>
 	
 	
 </body>
diff --git a/views/partials/footer.ejs b/views/partials/footer.ejs
index 13cc3dc..332e558 100644
--- a/views/partials/footer.ejs
+++ b/views/partials/footer.ejs
@@ -13,8 +13,9 @@
         <img src="/img/linkedin.png" alt="Linkedin" class="img-rounded">
 </a>
 Siguenos en nuestras redes sociales
+<label>	Ivan Flores 2019 </label>
 </div> 
 
-<label>	Ivan Flores 2019 </label>
+
     </div>
 </footer>
\ No newline at end of file
diff --git a/views/partials/header.ejs b/views/partials/header.ejs
index ebc8a57..f5cbd8e 100644
--- a/views/partials/header.ejs
+++ b/views/partials/header.ejs
@@ -16,21 +16,19 @@
 					<ul class="nav navbar-nav">
 					</ul>
 					<ul class="nav navbar-nav navbar-right">
-							<button type="button" class="btn btn-default" aria-label="Left Align">
-									<span class="glyphicon glyphicon glyphicon-inbox" aria-hidden="true"></span>
-								  </button>
 							<li class="dropdown">
-									<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Hola Iván <div class="notify">1</div> <span class="caret"></span></a>
+									<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><%- user.username %> <span class="caret"></span></a>
 									<ul class="dropdown-menu">
 									
 									<li><a href="/logout">Cerrar sesión</a></li>
+
+									<% if(user.isAdmin){ %>
 									<li role="separator" class="divider"></li>
-									<li><a href="#notificaciones"><div class="notify">1</div>Notificaciones</a></li>
+									<li><a href="/notifications">Notificaciones</a></li>
 									<li role="separator" class="divider"></li>
-									<li><a href="#usuarios">Ver usuarios</a></li>
-									<li><a href="#agregar">Agregar usuario</a></li>
-									<li><a href="#editar">Editar usuarios</a></li>
-									<li><a href="#eliminar">Eliminar usuarios</a></li>
+									<li><a href="/users">Ver usuarios</a></li>
+									<li><a href="/signup">Agregar usuario</a></li>
+									<% }%>
 									</ul>
 								</li>
 					
diff --git a/views/signup.ejs b/views/signup.ejs
index 28f52a8..874091c 100644
--- a/views/signup.ejs
+++ b/views/signup.ejs
@@ -47,31 +47,37 @@
 
 	  <div class="row">
 		<div class="col-sm-6 col-sm-push-3">
+
 		  <div class="panel panel-default ">
 			<div class="panel-heading">
+
 			  <h2 class="panel-title">Registrar nuevo usuario</h2>
 			</div>
 			<div class="panel-body">
-			  <form method="post" action="/auth/signup">
+					<div id="alert" class="alert alert-danger alert-dismissible fade in hidden" role="alert">
+							<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
+							<strong>Error</strong> El password y la verificaci'on de password no coinciden.
+						</div>
+			  <form id="registrar" method="post" action="/auth/signup">
 				<div class="form-group">
 				  <label for="exampleInputEmail1">Email</label>
-				  <input type="email" class="form-control" name="username"	placeholder="Email" />
+				  <input type="email" class="form-control" name="username"	placeholder="Email" required />
 				</div>
 				<div class="form-group">
 				  <label for="exampleInputPassword1">Contraseña</label>
-				  <input type="password" class="form-control" name="password"	placeholder="Password" />
-                </div>
-                <div class="form-group">
-                    <label for="exampleInputPassword1">Confirmar contraseña</label>
-                    <input type="password" class="form-control"	placeholder="Confirmar Password" />
-                </div>
-                <div class="form-group">
-                    <label for="exampleInputPassword1">Tipo de usuario</label>
-                <select class="form-control">
-                    <option>Normal</option>
-                    <option>Administrador</option>
-                  </select>
-                </div>
+				  <input id="password" type="password" class="form-control" name="password"	required placeholder="Password" />
+				</div>
+				<div class="form-group">
+					<label for="exampleInputPassword1">Confirmar contraseña</label>
+					<input id="cPassword" type="password" class="form-control"	required placeholder="Confirmar Password" />
+				</div>
+				<div class="form-group">
+					<label for="exampleInputPassword1">Tipo de usuario</label>
+				<select class="form-control" name="rol">
+					<option value="normal">Normal</option>
+					<option value="admin">Administrador</option>
+				  </select>
+				</div>
 				<div class="form-group">
 				  <button type="submit" class="btn btn-primary ">
 					Registrar usuario
@@ -93,5 +99,41 @@
 	</ol>
 
 	<% include partials/footer.ejs %>
+		
+
+	<script>
+
+	$("#registrar").submit(function(event){
+			event.preventDefault(); 
+			var $pass = $("#password");
+			var $cPass = $("#cPassword");
+
+			if($pass.val() != $cPass.val()){
+				$("#alert").removeClass("hidden");
+				$pass.val("");
+				$cPass.val("");
+				return;
+			}
+
+
+			var post_url = $(this).attr("action"); 
+			var request_method = $(this).attr("method"); 
+			var form_data = $(this).serialize(); 
+	
+			$.ajax({
+				url : post_url,
+				type: request_method,
+				data : form_data
+			}).done(function(response){ //
+				alert("Se ha agragado el nuevo usuario");
+				window.location.href = '/';
+
+			}).onError(function(response){ //
+				alert("Error al crear el usuario");
+
+			});
+	});
+
+	</script>
   </body>
 </html>
diff --git a/views/users.ejs b/views/users.ejs
index fb639a9..dbd2387 100644
--- a/views/users.ejs
+++ b/views/users.ejs
@@ -16,37 +16,12 @@
 	<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
 	<script src="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
 
-	<script>
-	
-	var json = null;
-	
-	$(function(){
-	
-	fetch('/service.json')
-	.then(function(response) {
-		return response.json();
-	})
-	.then(function(myJson) {
-		json = myJson;
-		console.log( myJson);
-
-
-		var valuesArray = new Array();
-		for(val in json.resultObj ){
-		valuesArray.push( json.resultObj[val].Precio);
-
-		}
-
-		
-	</script>
-	
-	
 </head>
 <body>
 		<% include partials/header.ejs %>
 <section class="container-fluid">
 	<div class="row">
-		<div class="col-md-3">
+		<div class="col-md-3 hidden-xs">
 		<div class="panel panel-default ">
                 <div class="panel-heading">
                   <h3 class="panel-title">Indices</h3>
@@ -74,13 +49,13 @@
                 <div class="panel-heading">
                   <h3 class="panel-title">Usuarios</h3>
                 </div>
-                <div class="panel-body">
+                <div class="panel-body table-responsive">
 					<table class="table table-striped">
       <thead>
         <tr>
           <th>#</th>
           <th>Usuario</th>
-          <th>Es administrador</th>
+          <th>Rol de usuario</th>
           <th>Usuario bloqueado</th>
           <th>Intentos fallidos</th>
           <th>Acciones</th>
@@ -91,37 +66,37 @@
         <% users.forEach(function(user,index){ %>
         <tr>
           <th scope="row"><%- index + 1  %></th>
-          <td><%- user.username %></td>
-          <td>
-            <select class="form-control">
+          <td class="userName"><%- user.username %></td>
+          <td >
+            <select class="form-control rol">
                 <% if(!user.isAdmin){ %>
-                    <option selected>Usuario normal</option>
-                    <option>Administrador</option>
+                    <option value="false" selected>Normal</option>
+                    <option value="true" >Administrador</option>
                 <% }else{ %>
-                    <option >Usuario normal</option>
-                    <option selected>Administrador</option>
+                    <option value="false">Normal</option>
+                    <option value="true" selected>Administrador</option>
                     <%} %>
             </select>
         </td>
           <td>
-            <select class="form-control">
+            <select class="form-control isBlocked">
                 <% if(!user.isBlocked){ %>
-                    <option selected>Desbloqueado</option>
-                    <option>Bloqueado</option>
+                    <option selected value="false">Desbloqueado</option>
+                    <option value="true">Bloqueado</option>
                 <% }else{ %>
-                    <option >Desbloqueado</option>
-                    <option selected>Bloqueado</option>
+                    <option value="false" >Desbloqueado</option>
+                    <option value="true" selected>Bloqueado</option>
                     <%} %>
             </select>    
         </td>
           <td><%- user.failsAttempts %></td>
-          <td><button type="button" class="btn btn-default" aria-label="Left Align">
+          <td><button type="button" class="btn btn-default" aria-label="Left Align" title="Guardar cambios" data-action="save">
   <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
 </button>
-<button type="button" class="btn btn-default" aria-label="Left Align">
+<button type="button" class="btn btn-default" aria-label="Left Align" title="Restablecer usuario" data-action="reset">
   <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>
 </button>
-<button type="button" class="btn btn-default" aria-label="Left Align" label="Eliminar">
+<button type="button" class="btn btn-default" aria-label="Left Align" label="Eliminar" title="Eliminar usuario" data-action="delete">
   <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
 </button>
 </td>
@@ -142,18 +117,39 @@
 		<li><a href="/">Inicio</a></li>
 		<li><a href="/users">Usuarios</a></li>
 	  </ol>
-<footer class="container-fluid">
-				<div class="row">
-					Siguenos en nuestras redes sociales
-				
-				<div class="redesSociales">
-					<img src="/img/facebook.png" alt="Facebook" class="img-rounded">
-					<img src="/img/twitter.png" alt="Twitter" class="img-rounded">
-					<img src="/img/linkedin.png" alt="Linkedin" class="img-rounded">
-			</div> 
-				</div>
-</footer>
+		<% include partials/footer.ejs %>
+	
+<script>
+	$('button').on('click', function(){
+		var row = $(this).closest('tr');
+		var action = $(this).attr("data-action");
+		var username = $(row).find('.userName').html();
+		var rol = $(row).find('.rol').val();
+		var isBlocked = $(row).find('.isBlocked').val();
 	
+		console.log(username, rol, isBlocked)
+
+
+
+			var post_url = "/userOperations"; 
+			var request_method = "POST"; 
+
+			var data = {"operation": action, "username":username, "isAdmin":rol, "isBlocked":isBlocked}
+			var form_data = $.param(data); 
+	
+			$.ajax({
+				url : post_url,
+				type: request_method,
+				data : form_data
+			}).done(function(response){ //
+				alert(response);
+				window.location.href = '/users';
+
+			})
+
+
+	})
+</script>
 	
 </body>
 
-- 
2.15.0.windows.1

